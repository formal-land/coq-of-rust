(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module instructions.
  Module contract.
    (*
    pub fn eofcreate<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        require_eof!(interpreter);
        require_non_staticcall!(interpreter);
        gas!(interpreter, EOF_CREATE_GAS);
        let initcontainer_index = interpreter.bytecode.read_u8();
    
        popn!([value, salt, data_offset, data_size], interpreter);
    
        let container = interpreter
            .bytecode
            .eof_container(initcontainer_index as usize)
            .expect("valid container")
            .clone();
    
        // Resize memory and get return range.
        let Some(input_range) = resize_memory(interpreter, data_offset, data_size) else {
            return;
        };
    
        let input = if !input_range.is_empty() {
            interpreter.memory.slice(input_range).to_vec().into()
        } else {
            Bytes::new()
        };
    
        let eof = Eof::decode(container.clone()).expect("Subcontainer is verified");
    
        if !eof.body.is_data_filled {
            // Should be always false as it is verified by eof verification.
            panic!("Panic if data section is not full");
        }
    
        // Deduct gas for hash that is needed to calculate address.
        gas_or_fail!(interpreter, cost_per_word(container.len(), KECCAK256WORD));
    
        let created_address = interpreter
            .input
            .target_address()
            .create2(salt.to_be_bytes(), keccak256(container));
    
        let gas_limit = interpreter.control.gas().remaining_63_of_64_parts();
        gas!(interpreter, gas_limit);
        // Send container for execution container is preverified.
        interpreter.control.set_next_action(
            InterpreterAction::NewFrame(FrameInput::EOFCreate(Box::new(
                EOFCreateInputs::new_opcode(
                    interpreter.input.target_address(),
                    created_address,
                    value,
                    eof,
                    gas_limit,
                    input,
                ),
            ))),
            InstructionResult::CallOrCreate,
        );
    
        interpreter.bytecode.relative_jump(1);
    }
    *)
    Definition eofcreate (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::RuntimeFlag",
                                    Ty.associated_in_trait
                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                      []
                                      []
                                      WIRE
                                      "RuntimeFlag",
                                    [],
                                    [],
                                    "is_static",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| interpreter |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "runtime_flag"
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StateChangeDuringStaticCall"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::EOF_CREATE_GAS",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ initcontainer_index : Ty.path "u8" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "u8",
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::Immediates",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Bytecode",
                        [],
                        [],
                        "read_u8",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |)
                      ]
                    |)
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 4 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let γ1_2 := M.SubPointer.get_slice_index (| γ0_0, 2 |) in
                        let γ1_3 := M.SubPointer.get_slice_index (| γ0_0, 3 |) in
                        let value := M.copy (| γ1_0 |) in
                        let salt := M.copy (| γ1_1 |) in
                        let data_offset := M.copy (| γ1_2 |) in
                        let data_size := M.copy (| γ1_3 |) in
                        let~ container : Ty.path "alloy_primitives::bytes_::Bytes" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "alloy_primitives::bytes_::Bytes",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bytes_::Bytes",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "alloy_primitives::bytes_::Bytes" ]
                                          ],
                                        "expect",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "alloy_primitives::bytes_::Bytes" ]
                                            ],
                                          M.get_trait_method (|
                                            "revm_interpreter::interpreter_types::EofContainer",
                                            Ty.associated_in_trait
                                              "revm_interpreter::interpreter_types::InterpreterTypes"
                                              []
                                              []
                                              WIRE
                                              "Bytecode",
                                            [],
                                            [],
                                            "eof_container",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| interpreter |) |),
                                                "revm_interpreter::interpreter::Interpreter",
                                                "bytecode"
                                              |)
                                            |);
                                            M.cast
                                              (Ty.path "usize")
                                              (M.read (| initcontainer_index |))
                                          ]
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| mk_str (| "valid container" |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        M.match_operator (|
                          None,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                              M.get_function (|
                                "revm_interpreter::instructions::contract::call_helpers::resize_memory",
                                [],
                                [ WIRE ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| interpreter |) |)
                                |);
                                M.read (| data_offset |);
                                M.read (| data_size |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let input_range := M.copy (| γ0_0 |) in
                                let~ input : Ty.path "alloy_primitives::bytes_::Bytes" :=
                                  M.copy (|
                                    M.match_operator (|
                                      Some (Ty.path "alloy_primitives::bytes_::Bytes"),
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        "is_empty",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, input_range |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "alloy_primitives::bytes_::Bytes",
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                                  "into",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global"
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [ Ty.path "u8" ],
                                                      "to_vec",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [ Ty.path "u8" ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.associated_in_trait
                                                                "revm_interpreter::interpreter_types::MemoryTrait"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                  []
                                                                  []
                                                                  WIRE
                                                                  "Memory")
                                                                "{{synthetic}}",
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "revm_interpreter::interpreter_types::MemoryTrait"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                        []
                                                                        []
                                                                        WIRE
                                                                        "Memory")
                                                                      "{{synthetic}}",
                                                                    M.get_trait_method (|
                                                                      "revm_interpreter::interpreter_types::MemoryTrait",
                                                                      Ty.associated_in_trait
                                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                        []
                                                                        []
                                                                        WIRE
                                                                        "Memory",
                                                                      [],
                                                                      [],
                                                                      "slice",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| interpreter |)
                                                                          |),
                                                                          "revm_interpreter::interpreter::Interpreter",
                                                                          "memory"
                                                                        |)
                                                                      |);
                                                                      M.read (| input_range |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.path "alloy_primitives::bytes_::Bytes",
                                                M.get_associated_function (|
                                                  Ty.path "alloy_primitives::bytes_::Bytes",
                                                  "new",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)))
                                      ]
                                    |)
                                  |) in
                                let~ eof : Ty.path "revm_bytecode::eof::Eof" :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "revm_bytecode::eof::Eof",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "revm_bytecode::eof::Eof";
                                            Ty.path "revm_bytecode::eof::EofDecodeError"
                                          ],
                                        "expect",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "revm_bytecode::eof::Eof";
                                              Ty.path "revm_bytecode::eof::EofDecodeError"
                                            ],
                                          M.get_associated_function (|
                                            Ty.path "revm_bytecode::eof::Eof",
                                            "decode",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.path "alloy_primitives::bytes_::Bytes",
                                              M.get_trait_method (|
                                                "core::clone::Clone",
                                                Ty.path "alloy_primitives::bytes_::Bytes",
                                                [],
                                                [],
                                                "clone",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, container |) ]
                                            |)
                                          ]
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| mk_str (| "Subcontainer is verified" |) |)
                                        |)
                                      ]
                                    |)
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        eof,
                                                        "revm_bytecode::eof::Eof",
                                                        "body"
                                                      |),
                                                      "revm_bytecode::eof::body::EofBody",
                                                      "is_data_filled"
                                                    |)
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::panic_fmt",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.path "core::fmt::Arguments",
                                                    M.get_associated_function (|
                                                      Ty.path "core::fmt::Arguments",
                                                      "new_const",
                                                      [ Value.Integer IntegerKind.Usize 1 ],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.alloc (|
                                                              Value.Array
                                                                [
                                                                  mk_str (|
                                                                    "Panic if data section is not full"
                                                                  |)
                                                                ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "u64" ],
                                        M.get_function (|
                                          "revm_interpreter::gas::calc::cost_per_word",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.path "bytes::bytes::Bytes",
                                              "len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "bytes::bytes::Bytes" ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.path "alloy_primitives::bytes_::Bytes",
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, container |) ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |);
                                          M.read (|
                                            get_constant (|
                                              "revm_interpreter::gas::constants::KECCAK256WORD",
                                              Ty.path "u64"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let gas_used := M.copy (| γ0_0 |) in
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.path "revm_interpreter::gas::Gas",
                                                              "record_cost",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "revm_interpreter::gas::Gas"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "revm_interpreter::interpreter_types::LoopControl",
                                                                      Ty.associated_in_trait
                                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                        []
                                                                        []
                                                                        WIRE
                                                                        "Control",
                                                                      [],
                                                                      [],
                                                                      "gas",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| interpreter |)
                                                                          |),
                                                                          "revm_interpreter::interpreter::Interpreter",
                                                                          "control"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              M.read (| gas_used |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let~ _ : Ty.tuple [] :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_trait_method (|
                                                                "revm_interpreter::interpreter_types::LoopControl",
                                                                Ty.associated_in_trait
                                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                  []
                                                                  []
                                                                  WIRE
                                                                  "Control",
                                                                [],
                                                                [],
                                                                "set_instruction_result",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (|
                                                                      M.read (| interpreter |)
                                                                    |),
                                                                    "revm_interpreter::interpreter::Interpreter",
                                                                    "control"
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                  []
                                                              ]
                                                            |)
                                                          |) in
                                                        M.return_ (| Value.Tuple [] |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated_in_trait
                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                          []
                                                          []
                                                          WIRE
                                                          "Control",
                                                        [],
                                                        [],
                                                        "set_instruction_result",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| interpreter |) |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.return_ (| Value.Tuple [] |)
                                              |)
                                            |)
                                          |)))
                                    ]
                                  |) in
                                let~ created_address :
                                    Ty.path "alloy_primitives::bits::address::Address" :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "alloy_primitives::bits::address::Address",
                                      M.get_associated_function (|
                                        Ty.path "alloy_primitives::bits::address::Address",
                                        "create2",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 32 ]
                                            [ Ty.path "u8" ];
                                          Ty.apply
                                            (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                            [ Value.Integer IntegerKind.Usize 32 ]
                                            []
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "alloy_primitives::bits::address::Address",
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::InputsTrait",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Input",
                                                [],
                                                [],
                                                "target_address",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "input"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 32 ]
                                            [ Ty.path "u8" ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            "to_be_bytes",
                                            [ Value.Integer IntegerKind.Usize 32 ],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, salt |) ]
                                        |);
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                            [ Value.Integer IntegerKind.Usize 32 ]
                                            [],
                                          M.get_function (|
                                            "alloy_primitives::utils::keccak256",
                                            [],
                                            [ Ty.path "alloy_primitives::bytes_::Bytes" ]
                                          |),
                                          [ M.read (| container |) ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                let~ gas_limit : Ty.path "u64" :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "u64",
                                      M.get_associated_function (|
                                        Ty.path "revm_interpreter::gas::Gas",
                                        "remaining_63_of_64_parts",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.path "revm_interpreter::gas::Gas" ],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Control",
                                                [],
                                                [],
                                                "gas",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_associated_function (|
                                                      Ty.path "revm_interpreter::gas::Gas",
                                                      "record_cost",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [ Ty.path "revm_interpreter::gas::Gas"
                                                              ],
                                                            M.get_trait_method (|
                                                              "revm_interpreter::interpreter_types::LoopControl",
                                                              Ty.associated_in_trait
                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                []
                                                                []
                                                                WIRE
                                                                "Control",
                                                              [],
                                                              [],
                                                              "gas",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (|
                                                                    M.read (| interpreter |)
                                                                  |),
                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                  "control"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| gas_limit |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated_in_trait
                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                          []
                                                          []
                                                          WIRE
                                                          "Control",
                                                        [],
                                                        [],
                                                        "set_instruction_result",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| interpreter |) |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.return_ (| Value.Tuple [] |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_next_action",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::interpreter_action::InterpreterAction::NewFrame"
                                          [
                                            Value.StructTuple
                                              "revm_interpreter::interpreter_action::FrameInput::EOFCreate"
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    []
                                                    [
                                                      Ty.path
                                                        "revm_interpreter::interpreter_action::eof_create_inputs::EOFCreateInputs";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      []
                                                      [
                                                        Ty.path
                                                          "revm_interpreter::interpreter_action::eof_create_inputs::EOFCreateInputs";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path
                                                        "revm_interpreter::interpreter_action::eof_create_inputs::EOFCreateInputs",
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "revm_interpreter::interpreter_action::eof_create_inputs::EOFCreateInputs",
                                                        "new_opcode",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path
                                                            "alloy_primitives::bits::address::Address",
                                                          M.get_trait_method (|
                                                            "revm_interpreter::interpreter_types::InputsTrait",
                                                            Ty.associated_in_trait
                                                              "revm_interpreter::interpreter_types::InterpreterTypes"
                                                              []
                                                              []
                                                              WIRE
                                                              "Input",
                                                            [],
                                                            [],
                                                            "target_address",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (|
                                                                  M.read (| interpreter |)
                                                                |),
                                                                "revm_interpreter::interpreter::Interpreter",
                                                                "input"
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (| created_address |);
                                                        M.read (| value |);
                                                        M.read (| eof |);
                                                        M.read (| gas_limit |);
                                                        M.read (| input |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          ];
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::CallOrCreate"
                                          []
                                      ]
                                    |)
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::Jumps",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Bytecode",
                                        [],
                                        [],
                                        "relative_jump",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "bytecode"
                                          |)
                                        |);
                                        Value.Integer IntegerKind.Isize 1
                                      ]
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_eofcreate :
      M.IsFunction.C "revm_interpreter::instructions::contract::eofcreate" eofcreate.
    Admitted.
    Global Typeclasses Opaque eofcreate.
    
    (*
    pub fn return_contract<H: Host + ?Sized>(
        interpreter: &mut Interpreter<impl InterpreterTypes>,
        _host: &mut H,
    ) {
        if !interpreter.runtime_flag.is_eof_init() {
            interpreter
                .control
                .set_instruction_result(InstructionResult::ReturnContractInNotInitEOF);
            return;
        }
        let deploy_container_index = interpreter.bytecode.read_u8();
        popn!([aux_data_offset, aux_data_size], interpreter);
        let aux_data_size = as_usize_or_fail!(interpreter, aux_data_size);
        let container = interpreter
            .bytecode
            .eof_container(deploy_container_index as usize)
            .expect("valid container")
            .clone();
    
        // Convert to EOF so we can check data section size.
        let (eof_header, _) = EofHeader::decode(&container).expect("valid EOF header");
    
        let static_aux_size = eof_header.eof_size() - container.len();
    
        // Important: Offset must be ignored if len is zeros
        let mut output = if aux_data_size != 0 {
            let aux_data_offset = as_usize_or_fail!(interpreter, aux_data_offset);
            resize_memory!(interpreter, aux_data_offset, aux_data_size);
    
            let aux_slice = interpreter.memory.slice_len(aux_data_offset, aux_data_size);
    
            [&container, aux_slice.as_ref()].concat()
        } else {
            container.to_vec()
        };
    
        // `data_size - static_aux_size` give us current data `container` size.
        // And with `aux_slice` len we can calculate new data size.
        let new_data_size = eof_header.data_size as usize - static_aux_size + aux_data_size;
        if new_data_size > 0xFFFF {
            // Aux data is too big
            interpreter
                .control
                .set_instruction_result(InstructionResult::EofAuxDataOverflow);
            return;
        }
        if new_data_size < eof_header.data_size as usize {
            // Aux data is too small
            interpreter
                .control
                .set_instruction_result(InstructionResult::EofAuxDataTooSmall);
            return;
        }
        let new_data_size = (new_data_size as u16).to_be_bytes();
    
        // Set new data size in eof bytes as we know exact index.
        output[eof_header.data_size_raw_i()..][..2].clone_from_slice(&new_data_size);
        let output: Bytes = output.into();
    
        let result = InstructionResult::ReturnContract;
        let gas = *interpreter.control.gas();
        interpreter.control.set_next_action(
            crate::InterpreterAction::Return {
                result: InterpreterResult {
                    output,
                    gas,
                    result,
                },
            },
            result,
        );
    }
    *)
    Definition return_contract (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ H; impl_InterpreterTypes ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        impl_InterpreterTypes
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof_init",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          impl_InterpreterTypes
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::ReturnContractInNotInitEOF"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ deploy_container_index : Ty.path "u8" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "u8",
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::Immediates",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          impl_InterpreterTypes
                          "Bytecode",
                        [],
                        [],
                        "read_u8",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |)
                      ]
                    |)
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          impl_InterpreterTypes
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 2 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let aux_data_offset := M.copy (| γ1_0 |) in
                        let aux_data_size := M.copy (| γ1_1 |) in
                        let~ aux_data_size : Ty.path "usize" :=
                          M.copy (|
                            M.match_operator (|
                              Some (Ty.path "usize"),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [ Ty.path "u64" ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    "as_limbs",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, aux_data_size |) ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Some (Ty.tuple []),
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.Wrap.bit_or,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.Wrap.bit_or,
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.Wrap.bit_or,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.gt,
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| x |)
                                                                        |),
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          0
                                                                      |)
                                                                    |);
                                                                    M.cast
                                                                      (Ty.path "u64")
                                                                      (M.read (|
                                                                        get_associated_constant (|
                                                                          Ty.path "usize",
                                                                          "MAX",
                                                                          Ty.path "usize"
                                                                        |)
                                                                      |))
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.ne,
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| x |)
                                                                        |),
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      |)
                                                                    |);
                                                                    Value.Integer IntegerKind.U64 0
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.ne,
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.deref (| M.read (| x |) |),
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  |)
                                                                |);
                                                                Value.Integer IntegerKind.U64 0
                                                              ]
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.ne,
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (| M.read (| x |) |),
                                                                Value.Integer IntegerKind.Usize 3
                                                              |)
                                                            |);
                                                            Value.Integer IntegerKind.U64 0
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.tuple [],
                                                          M.get_trait_method (|
                                                            "revm_interpreter::interpreter_types::LoopControl",
                                                            Ty.associated_in_trait
                                                              "revm_interpreter::interpreter_types::InterpreterTypes"
                                                              []
                                                              []
                                                              impl_InterpreterTypes
                                                              "Control",
                                                            [],
                                                            [],
                                                            "set_instruction_result",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (|
                                                                  M.read (| interpreter |)
                                                                |),
                                                                "revm_interpreter::interpreter::Interpreter",
                                                                "control"
                                                              |)
                                                            |);
                                                            Value.StructTuple
                                                              "revm_interpreter::instruction_result::InstructionResult::InvalidOperandOOG"
                                                              []
                                                          ]
                                                        |)
                                                      |) in
                                                    M.return_ (| Value.Tuple [] |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (|
                                      M.cast
                                        (Ty.path "usize")
                                        (M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.deref (| M.read (| x |) |),
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |))
                                    |)))
                              ]
                            |)
                          |) in
                        let~ container : Ty.path "alloy_primitives::bytes_::Bytes" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "alloy_primitives::bytes_::Bytes",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bytes_::Bytes",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "alloy_primitives::bytes_::Bytes" ]
                                          ],
                                        "expect",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "alloy_primitives::bytes_::Bytes" ]
                                            ],
                                          M.get_trait_method (|
                                            "revm_interpreter::interpreter_types::EofContainer",
                                            Ty.associated_in_trait
                                              "revm_interpreter::interpreter_types::InterpreterTypes"
                                              []
                                              []
                                              impl_InterpreterTypes
                                              "Bytecode",
                                            [],
                                            [],
                                            "eof_container",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| interpreter |) |),
                                                "revm_interpreter::interpreter::Interpreter",
                                                "bytecode"
                                              |)
                                            |);
                                            M.cast
                                              (Ty.path "usize")
                                              (M.read (| deploy_container_index |))
                                          ]
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| mk_str (| "valid container" |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        M.match_operator (|
                          None,
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple
                                [
                                  Ty.path "revm_bytecode::eof::header::EofHeader";
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "revm_bytecode::eof::header::EofHeader";
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                      ];
                                    Ty.path "revm_bytecode::eof::EofDecodeError"
                                  ],
                                "expect",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "revm_bytecode::eof::header::EofHeader";
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]
                                        ];
                                      Ty.path "revm_bytecode::eof::EofDecodeError"
                                    ],
                                  M.get_associated_function (|
                                    Ty.path "revm_bytecode::eof::header::EofHeader",
                                    "decode",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.path "bytes::bytes::Bytes",
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "bytes::bytes::Bytes" ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.path "alloy_primitives::bytes_::Bytes",
                                                    [],
                                                    [],
                                                    "deref",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (| Pointer.Kind.Ref, container |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| mk_str (| "valid EOF header" |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let eof_header := M.copy (| γ0_0 |) in
                                let~ static_aux_size : Ty.path "usize" :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.sub,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.path "revm_bytecode::eof::header::EofHeader",
                                            "eof_size",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, eof_header |) ]
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.path "bytes::bytes::Bytes",
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "bytes::bytes::Bytes" ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.path "alloy_primitives::bytes_::Bytes",
                                                    [],
                                                    [],
                                                    "deref",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, container |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                let~ output :
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] :=
                                  M.copy (|
                                    M.match_operator (|
                                      Some
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ]),
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.ne,
                                                    [
                                                      M.read (| aux_data_size |);
                                                      Value.Integer IntegerKind.Usize 0
                                                    ]
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let~ aux_data_offset : Ty.path "usize" :=
                                              M.copy (|
                                                M.match_operator (|
                                                  Some (Ty.path "usize"),
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 4 ]
                                                            [ Ty.path "u64" ]
                                                        ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "ruint::Uint")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          [],
                                                        "as_limbs",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          aux_data_offset
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let x := M.copy (| γ |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Some (Ty.tuple []),
                                                            M.alloc (| Value.Tuple [] |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.Wrap.bit_or,
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.path "bool",
                                                                              BinOp.Wrap.bit_or,
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.path "bool",
                                                                                  BinOp.Wrap.bit_or,
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "bool",
                                                                                      BinOp.gt,
                                                                                      [
                                                                                        M.read (|
                                                                                          M.SubPointer.get_array_field (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                x
                                                                                              |)
                                                                                            |),
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              0
                                                                                          |)
                                                                                        |);
                                                                                        M.cast
                                                                                          (Ty.path
                                                                                            "u64")
                                                                                          (M.read (|
                                                                                            get_associated_constant (|
                                                                                              Ty.path
                                                                                                "usize",
                                                                                              "MAX",
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            |)
                                                                                          |))
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "bool",
                                                                                      BinOp.ne,
                                                                                      [
                                                                                        M.read (|
                                                                                          M.SubPointer.get_array_field (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                x
                                                                                              |)
                                                                                            |),
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              1
                                                                                          |)
                                                                                        |);
                                                                                        Value.Integer
                                                                                          IntegerKind.U64
                                                                                          0
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  Ty.path "bool",
                                                                                  BinOp.ne,
                                                                                  [
                                                                                    M.read (|
                                                                                      M.SubPointer.get_array_field (|
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            x
                                                                                          |)
                                                                                        |),
                                                                                        Value.Integer
                                                                                          IntegerKind.Usize
                                                                                          2
                                                                                      |)
                                                                                    |);
                                                                                    Value.Integer
                                                                                      IntegerKind.U64
                                                                                      0
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              Ty.path "bool",
                                                                              BinOp.ne,
                                                                              [
                                                                                M.read (|
                                                                                  M.SubPointer.get_array_field (|
                                                                                    M.deref (|
                                                                                      M.read (| x |)
                                                                                    |),
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      3
                                                                                  |)
                                                                                |);
                                                                                Value.Integer
                                                                                  IntegerKind.U64
                                                                                  0
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)) in
                                                                  let _ :=
                                                                    is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        let~ _ : Ty.tuple [] :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              Ty.tuple [],
                                                                              M.get_trait_method (|
                                                                                "revm_interpreter::interpreter_types::LoopControl",
                                                                                Ty.associated_in_trait
                                                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                  []
                                                                                  []
                                                                                  impl_InterpreterTypes
                                                                                  "Control",
                                                                                [],
                                                                                [],
                                                                                "set_instruction_result",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        interpreter
                                                                                      |)
                                                                                    |),
                                                                                    "revm_interpreter::interpreter::Interpreter",
                                                                                    "control"
                                                                                  |)
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "revm_interpreter::instruction_result::InstructionResult::InvalidOperandOOG"
                                                                                  []
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.return_ (|
                                                                          Value.Tuple []
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |) in
                                                        M.alloc (|
                                                          M.cast
                                                            (Ty.path "usize")
                                                            (M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (| M.read (| x |) |),
                                                                Value.Integer IntegerKind.Usize 0
                                                              |)
                                                            |))
                                                        |)))
                                                  ]
                                                |)
                                              |) in
                                            let~ words_num : Ty.path "usize" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_function (|
                                                    "revm_interpreter::interpreter::shared_memory::num_words",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.path "usize",
                                                        "saturating_add",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (| aux_data_offset |);
                                                        M.read (| aux_data_size |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Some (Ty.tuple []),
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path
                                                      "revm_interpreter::gas::MemoryExtensionResult",
                                                    M.get_associated_function (|
                                                      Ty.path "revm_interpreter::gas::Gas",
                                                      "record_memory_expansion",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [ Ty.path "revm_interpreter::gas::Gas"
                                                              ],
                                                            M.get_trait_method (|
                                                              "revm_interpreter::interpreter_types::LoopControl",
                                                              Ty.associated_in_trait
                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                []
                                                                []
                                                                impl_InterpreterTypes
                                                                "Control",
                                                              [],
                                                              [],
                                                              "gas",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (|
                                                                    M.read (| interpreter |)
                                                                  |),
                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                  "control"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| words_num |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.is_struct_tuple (|
                                                          γ,
                                                          "revm_interpreter::gas::MemoryExtensionResult::Extended"
                                                        |) in
                                                      let~ _ : Ty.path "bool" :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "revm_interpreter::interpreter_types::MemoryTrait",
                                                              Ty.associated_in_trait
                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                []
                                                                []
                                                                impl_InterpreterTypes
                                                                "Memory",
                                                              [],
                                                              [],
                                                              "resize",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (|
                                                                    M.read (| interpreter |)
                                                                  |),
                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                  "memory"
                                                                |)
                                                              |);
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.mul,
                                                                [
                                                                  M.read (| words_num |);
                                                                  Value.Integer IntegerKind.Usize 32
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.is_struct_tuple (|
                                                          γ,
                                                          "revm_interpreter::gas::MemoryExtensionResult::OutOfGas"
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ _ : Ty.tuple [] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                                    Ty.associated_in_trait
                                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                      []
                                                                      []
                                                                      impl_InterpreterTypes
                                                                      "Control",
                                                                    [],
                                                                    [],
                                                                    "set_instruction_result",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| interpreter |)
                                                                        |),
                                                                        "revm_interpreter::interpreter::Interpreter",
                                                                        "control"
                                                                      |)
                                                                    |);
                                                                    Value.StructTuple
                                                                      "revm_interpreter::instruction_result::InstructionResult::MemoryOOG"
                                                                      []
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.return_ (| Value.Tuple [] |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.is_struct_tuple (|
                                                          γ,
                                                          "revm_interpreter::gas::MemoryExtensionResult::Same"
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            let~ aux_slice :
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::MemoryTrait"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "revm_interpreter::interpreter_types::InterpreterTypes"
                                                    []
                                                    []
                                                    impl_InterpreterTypes
                                                    "Memory")
                                                  "{{synthetic}}'1" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.associated_in_trait
                                                    "revm_interpreter::interpreter_types::MemoryTrait"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                      []
                                                      []
                                                      impl_InterpreterTypes
                                                      "Memory")
                                                    "{{synthetic}}'1",
                                                  M.get_trait_method (|
                                                    "revm_interpreter::interpreter_types::MemoryTrait",
                                                    Ty.associated_in_trait
                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                      []
                                                      []
                                                      impl_InterpreterTypes
                                                      "Memory",
                                                    [],
                                                    [],
                                                    "slice_len",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| interpreter |) |),
                                                        "revm_interpreter::interpreter::Interpreter",
                                                        "memory"
                                                      |)
                                                    |);
                                                    M.read (| aux_data_offset |);
                                                    M.read (| aux_data_size |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ]
                                                    ],
                                                  "concat",
                                                  [],
                                                  [ Ty.path "u8" ]
                                                |),
                                                [
                                                  (* Unsize *)
                                                  M.pointer_coercion
                                                    (M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Value.Array
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ Ty.path "u8" ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.path "bytes::bytes::Bytes",
                                                                    [],
                                                                    [],
                                                                    "deref",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "bytes::bytes::Bytes"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::deref::Deref",
                                                                            Ty.path
                                                                              "alloy_primitives::bytes_::Bytes",
                                                                            [],
                                                                            [],
                                                                            "deref",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  container
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u8" ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::convert::AsRef",
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [ Ty.path "u8" ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u8" ]
                                                                ],
                                                                "as_ref",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ Ty.path "u8" ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.associated_in_trait
                                                                          "revm_interpreter::interpreter_types::MemoryTrait"
                                                                          []
                                                                          []
                                                                          (Ty.associated_in_trait
                                                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                            []
                                                                            []
                                                                            impl_InterpreterTypes
                                                                            "Memory")
                                                                          "{{synthetic}}'1",
                                                                        [],
                                                                        [],
                                                                        "deref",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          aux_slice
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                      |)
                                                    |))
                                                ]
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                                  "to_vec",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.path "u8" ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.path "bytes::bytes::Bytes",
                                                          [],
                                                          [],
                                                          "deref",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "bytes::bytes::Bytes" ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.path
                                                                    "alloy_primitives::bytes_::Bytes",
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    container
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)))
                                      ]
                                    |)
                                  |) in
                                let~ new_data_size : Ty.path "usize" :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.sub,
                                          [
                                            M.cast
                                              (Ty.path "usize")
                                              (M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  eof_header,
                                                  "revm_bytecode::eof::header::EofHeader",
                                                  "data_size"
                                                |)
                                              |));
                                            M.read (| static_aux_size |)
                                          ]
                                        |);
                                        M.read (| aux_data_size |)
                                      ]
                                    |)
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.gt,
                                                  [
                                                    M.read (| new_data_size |);
                                                    Value.Integer IntegerKind.Usize 65535
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated_in_trait
                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                          []
                                                          []
                                                          impl_InterpreterTypes
                                                          "Control",
                                                        [],
                                                        [],
                                                        "set_instruction_result",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| interpreter |) |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::EofAuxDataOverflow"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.return_ (| Value.Tuple [] |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.lt,
                                                  [
                                                    M.read (| new_data_size |);
                                                    M.cast
                                                      (Ty.path "usize")
                                                      (M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          eof_header,
                                                          "revm_bytecode::eof::header::EofHeader",
                                                          "data_size"
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated_in_trait
                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                          []
                                                          []
                                                          impl_InterpreterTypes
                                                          "Control",
                                                        [],
                                                        [],
                                                        "set_instruction_result",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| interpreter |) |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::EofAuxDataTooSmall"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.return_ (| Value.Tuple [] |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let~ new_data_size :
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "u8" ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ Ty.path "u8" ],
                                      M.get_associated_function (|
                                        Ty.path "u16",
                                        "to_be_bytes",
                                        [],
                                        []
                                      |),
                                      [ M.cast (Ty.path "u16") (M.read (| new_data_size |)) ]
                                    |)
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                        "clone_from_slice",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                              M.get_trait_method (|
                                                "core::ops::index::IndexMut",
                                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::RangeTo")
                                                    []
                                                    [ Ty.path "usize" ]
                                                ],
                                                "index_mut",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u8" ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::index::IndexMut",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path "u8";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::RangeFrom")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ],
                                                        "index_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, output |);
                                                        Value.StructRecord
                                                          "core::ops::range::RangeFrom"
                                                          [
                                                            ("start",
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "revm_bytecode::eof::header::EofHeader",
                                                                  "data_size_raw_i",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    eof_header
                                                                  |)
                                                                ]
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                Value.StructRecord
                                                  "core::ops::range::RangeTo"
                                                  [ ("end_", Value.Integer IntegerKind.Usize 2) ]
                                              ]
                                            |)
                                          |)
                                        |);
                                        (* Unsize *)
                                        M.pointer_coercion
                                          (M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (| Pointer.Kind.Ref, new_data_size |)
                                            |)
                                          |))
                                      ]
                                    |)
                                  |) in
                                let~ output : Ty.path "alloy_primitives::bytes_::Bytes" :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "alloy_primitives::bytes_::Bytes",
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                        "into",
                                        [],
                                        []
                                      |),
                                      [ M.read (| output |) ]
                                    |)
                                  |) in
                                let~ result :
                                    Ty.path
                                      "revm_interpreter::instruction_result::InstructionResult" :=
                                  M.alloc (|
                                    Value.StructTuple
                                      "revm_interpreter::instruction_result::InstructionResult::ReturnContract"
                                      []
                                  |) in
                                let~ gas : Ty.path "revm_interpreter::gas::Gas" :=
                                  M.copy (|
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.path "revm_interpreter::gas::Gas" ],
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated_in_trait
                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                            []
                                            []
                                            impl_InterpreterTypes
                                            "Control",
                                          [],
                                          [],
                                          "gas",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| interpreter |) |),
                                              "revm_interpreter::interpreter::Interpreter",
                                              "control"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          impl_InterpreterTypes
                                          "Control",
                                        [],
                                        [],
                                        "set_next_action",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructRecord
                                          "revm_interpreter::interpreter_action::InterpreterAction::Return"
                                          [
                                            ("result",
                                              Value.StructRecord
                                                "revm_interpreter::interpreter::InterpreterResult"
                                                [
                                                  ("output", M.read (| output |));
                                                  ("gas", M.read (| gas |));
                                                  ("result", M.read (| result |))
                                                ])
                                          ];
                                        M.read (| result |)
                                      ]
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_return_contract :
      M.IsFunction.C "revm_interpreter::instructions::contract::return_contract" return_contract.
    Admitted.
    Global Typeclasses Opaque return_contract.
    
    (*
    pub fn extcall_input(interpreter: &mut Interpreter<impl InterpreterTypes>) -> Option<Bytes> {
        popn!([input_offset, input_size], interpreter, None);
        let return_memory_offset = resize_memory(interpreter, input_offset, input_size)?;
    
        if return_memory_offset.is_empty() {
            return Some(Bytes::new());
        }
    
        Some(Bytes::copy_from_slice(
            interpreter
                .memory
                .slice(return_memory_offset.clone())
                .as_ref(),
        ))
    }
    *)
    Definition extcall_input (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ impl_InterpreterTypes ], [ interpreter ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          impl_InterpreterTypes
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 2 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let input_offset := M.copy (| γ1_0 |) in
                        let input_size := M.copy (| γ1_1 |) in
                        let~ return_memory_offset :
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] :=
                          M.copy (|
                            M.match_operator (|
                              Some
                                (Ty.apply
                                  (Ty.path "core::ops::range::Range")
                                  []
                                  [ Ty.path "usize" ]),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "core::convert::Infallible" ];
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                      M.get_function (|
                                        "revm_interpreter::instructions::contract::call_helpers::resize_memory",
                                        [],
                                        [ impl_InterpreterTypes ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| interpreter |) |)
                                        |);
                                        M.read (| input_offset |);
                                        M.read (| input_size |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Ty.path "core::convert::Infallible" ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            "is_empty",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, return_memory_offset |) ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [
                                              M.call_closure (|
                                                Ty.path "alloy_primitives::bytes_::Bytes",
                                                M.get_associated_function (|
                                                  Ty.path "alloy_primitives::bytes_::Bytes",
                                                  "new",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::option::Option::Some"
                            [
                              M.call_closure (|
                                Ty.path "alloy_primitives::bytes_::Bytes",
                                M.get_associated_function (|
                                  Ty.path "alloy_primitives::bytes_::Bytes",
                                  "copy_from_slice",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "core::convert::AsRef",
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          [],
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                          "as_ref",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.associated_in_trait
                                                    "revm_interpreter::interpreter_types::MemoryTrait"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                      []
                                                      []
                                                      impl_InterpreterTypes
                                                      "Memory")
                                                    "{{synthetic}}",
                                                  [],
                                                  [],
                                                  "deref",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "revm_interpreter::interpreter_types::MemoryTrait"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                                            []
                                                            []
                                                            impl_InterpreterTypes
                                                            "Memory")
                                                          "{{synthetic}}",
                                                        M.get_trait_method (|
                                                          "revm_interpreter::interpreter_types::MemoryTrait",
                                                          Ty.associated_in_trait
                                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                                            []
                                                            []
                                                            impl_InterpreterTypes
                                                            "Memory",
                                                          [],
                                                          [],
                                                          "slice",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (|
                                                                M.read (| interpreter |)
                                                              |),
                                                              "revm_interpreter::interpreter::Interpreter",
                                                              "memory"
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::ops::range::Range")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_trait_method (|
                                                              "core::clone::Clone",
                                                              Ty.apply
                                                                (Ty.path "core::ops::range::Range")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              [],
                                                              [],
                                                              "clone",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                return_memory_offset
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_extcall_input :
      M.IsFunction.C "revm_interpreter::instructions::contract::extcall_input" extcall_input.
    Admitted.
    Global Typeclasses Opaque extcall_input.
    
    (*
    pub fn extcall_gas_calc<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
        target: Address,
        transfers_value: bool,
    ) -> Option<u64> {
        let Some(account_load) = host.load_account_delegated(target) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return None;
        };
        // account_load.is_empty will be accounted if there is transfer value
        // Berlin can be hardcoded as extcall came after berlin.
        let call_cost = gas::call_cost(
            interpreter.runtime_flag.spec_id(),
            transfers_value,
            account_load,
        );
        gas!(interpreter, call_cost, None);
    
        // Calculate the gas available to callee as caller’s
        // remaining gas reduced by max(ceil(gas/64), MIN_RETAINED_GAS) (MIN_RETAINED_GAS is 5000).
        let gas_reduce = max(interpreter.control.gas().remaining() / 64, 5000);
        let gas_limit = interpreter
            .control
            .gas()
            .remaining()
            .saturating_sub(gas_reduce);
    
        // The MIN_CALLEE_GAS rule is a replacement for stipend:
        // it simplifies the reasoning about the gas costs and is
        // applied uniformly for all introduced EXT*CALL instructions.
        //
        // If Gas available to callee is less than MIN_CALLEE_GAS trigger light failure (Same as Revert).
        if gas_limit < MIN_CALLEE_GAS {
            // Push 1 to stack to indicate that call light failed.
            // It is safe to ignore stack overflow error as we already popped multiple values from stack.
            let _ = interpreter.stack.push(U256::from(1));
            interpreter.return_data.buffer_mut().clear();
            // Return none to continue execution.
            return None;
        }
    
        gas!(interpreter, gas_limit, None);
        Some(gas_limit)
    }
    *)
    Definition extcall_gas_calc (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host; target; transfers_value ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          let target := M.alloc (| target |) in
          let transfers_value := M.alloc (| transfers_value |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.path "revm_context_interface::journaled_state::AccountLoad" ],
                      M.get_trait_method (|
                        "revm_context_interface::host::Host",
                        H,
                        [],
                        [],
                        "load_account_delegated",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| host |) |) |);
                        M.read (| target |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let account_load := M.copy (| γ0_0 |) in
                        let~ call_cost : Ty.path "u64" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "u64",
                              M.get_function (| "revm_interpreter::gas::calc::call_cost", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "revm_specification::hardfork::SpecId",
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::RuntimeFlag",
                                    Ty.associated_in_trait
                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                      []
                                      []
                                      WIRE
                                      "RuntimeFlag",
                                    [],
                                    [],
                                    "spec_id",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| interpreter |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "runtime_flag"
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (| transfers_value |);
                                M.read (| account_load |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_associated_function (|
                                              Ty.path "revm_interpreter::gas::Gas",
                                              "record_cost",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.path "revm_interpreter::gas::Gas" ],
                                                    M.get_trait_method (|
                                                      "revm_interpreter::interpreter_types::LoopControl",
                                                      Ty.associated_in_trait
                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                        []
                                                        []
                                                        WIRE
                                                        "Control",
                                                      [],
                                                      [],
                                                      "gas",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| interpreter |) |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "control"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| call_cost |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Control",
                                                [],
                                                [],
                                                "set_instruction_result",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (|
                                          Value.StructTuple "core::option::Option::None" []
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ gas_reduce : Ty.path "u64" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "u64",
                              M.get_function (| "core::cmp::max", [], [ Ty.path "u64" ] |),
                              [
                                M.call_closure (|
                                  Ty.path "u64",
                                  BinOp.Wrap.div,
                                  [
                                    M.call_closure (|
                                      Ty.path "u64",
                                      M.get_associated_function (|
                                        Ty.path "revm_interpreter::gas::Gas",
                                        "remaining",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.path "revm_interpreter::gas::Gas" ],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Control",
                                                [],
                                                [],
                                                "gas",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |);
                                    Value.Integer IntegerKind.U64 64
                                  ]
                                |);
                                Value.Integer IntegerKind.U64 5000
                              ]
                            |)
                          |) in
                        let~ gas_limit : Ty.path "u64" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "u64",
                              M.get_associated_function (|
                                Ty.path "u64",
                                "saturating_sub",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.path "u64",
                                  M.get_associated_function (|
                                    Ty.path "revm_interpreter::gas::Gas",
                                    "remaining",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.path "revm_interpreter::gas::Gas" ],
                                          M.get_trait_method (|
                                            "revm_interpreter::interpreter_types::LoopControl",
                                            Ty.associated_in_trait
                                              "revm_interpreter::interpreter_types::InterpreterTypes"
                                              []
                                              []
                                              WIRE
                                              "Control",
                                            [],
                                            [],
                                            "gas",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| interpreter |) |),
                                                "revm_interpreter::interpreter::Interpreter",
                                                "control"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (| gas_reduce |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.lt,
                                          [
                                            M.read (| gas_limit |);
                                            M.read (|
                                              get_constant (|
                                                "revm_interpreter::gas::constants::MIN_CALLEE_GAS",
                                                Ty.path "u64"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.match_operator (|
                                          None,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::StackTrait",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Stack",
                                                [],
                                                [],
                                                "push",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "stack"
                                                  |)
                                                |);
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [
                                                        Value.Integer IntegerKind.Usize 256;
                                                        Value.Integer IntegerKind.Usize 4
                                                      ]
                                                      [],
                                                    "from",
                                                    [],
                                                    [ Ty.path "i32" ]
                                                  |),
                                                  [ Value.Integer IntegerKind.I32 1 ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_associated_function (|
                                                        Ty.path "bytes::bytes::Bytes",
                                                        "clear",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [ Ty.path "bytes::bytes::Bytes" ],
                                                              M.get_trait_method (|
                                                                "core::ops::deref::DerefMut",
                                                                Ty.path
                                                                  "alloy_primitives::bytes_::Bytes",
                                                                [],
                                                                [],
                                                                "deref_mut",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "alloy_primitives::bytes_::Bytes"
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "revm_interpreter::interpreter_types::ReturnData",
                                                                        Ty.associated_in_trait
                                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                          []
                                                                          []
                                                                          WIRE
                                                                          "ReturnData",
                                                                        [],
                                                                        [],
                                                                        "buffer_mut",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (|
                                                                                interpreter
                                                                              |)
                                                                            |),
                                                                            "revm_interpreter::interpreter::Interpreter",
                                                                            "return_data"
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.return_ (|
                                                  Value.StructTuple "core::option::Option::None" []
                                                |)))
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_associated_function (|
                                              Ty.path "revm_interpreter::gas::Gas",
                                              "record_cost",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.path "revm_interpreter::gas::Gas" ],
                                                    M.get_trait_method (|
                                                      "revm_interpreter::interpreter_types::LoopControl",
                                                      Ty.associated_in_trait
                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                        []
                                                        []
                                                        WIRE
                                                        "Control",
                                                      [],
                                                      [],
                                                      "gas",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| interpreter |) |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "control"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| gas_limit |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Control",
                                                [],
                                                [],
                                                "set_instruction_result",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (|
                                          Value.StructTuple "core::option::Option::None" []
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::option::Option::Some" [ M.read (| gas_limit |) ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_extcall_gas_calc :
      M.IsFunction.C "revm_interpreter::instructions::contract::extcall_gas_calc" extcall_gas_calc.
    Admitted.
    Global Typeclasses Opaque extcall_gas_calc.
    
    (*
    pub fn pop_extcall_target_address(
        interpreter: &mut Interpreter<impl InterpreterTypes>,
    ) -> Option<Address> {
        popn!([target_address], interpreter, None);
        let target_address = B256::from(target_address);
        // Check if target is left padded with zeroes.
        if target_address[..12].iter().any(|i| *i != 0) {
            interpreter
                .control
                .set_instruction_result(InstructionResult::InvalidEXTCALLTarget);
            return None;
        }
        // Discard first 12 bytes.
        Some(Address::from_word(target_address))
    }
    *)
    Definition pop_extcall_target_address
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [ impl_InterpreterTypes ], [ interpreter ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          impl_InterpreterTypes
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let target_address := M.copy (| γ1_0 |) in
                        let~ target_address :
                            Ty.apply
                              (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [],
                              M.get_trait_method (|
                                "core::convert::From",
                                Ty.apply
                                  (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ],
                                "from",
                                [],
                                []
                              |),
                              [ M.read (| target_address |) ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "u8" ],
                                            [],
                                            [],
                                            "any",
                                            [],
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
                                                ]
                                                (Ty.path "bool")
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Ty.path "u8" ],
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                                    "iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [ Ty.path "u8" ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloy_primitives::bits::fixed::FixedBytes")
                                                              [ Value.Integer IntegerKind.Usize 32 ]
                                                              [],
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::ops::range::RangeTo")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ],
                                                            "index",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              target_address
                                                            |);
                                                            Value.StructRecord
                                                              "core::ops::range::RangeTo"
                                                              [
                                                                ("end_",
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    12)
                                                              ]
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        Some
                                                          (Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "u8" ]
                                                                ]
                                                            ]
                                                            (Ty.path "bool")),
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let i := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.ne,
                                                                [
                                                                  M.read (|
                                                                    M.deref (| M.read (| i |) |)
                                                                  |);
                                                                  Value.Integer IntegerKind.U8 0
                                                                ]
                                                              |)))
                                                        ]
                                                      |)))
                                                  | _ => M.impossible "wrong number of arguments"
                                                  end))
                                          ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  impl_InterpreterTypes
                                                  "Control",
                                                [],
                                                [],
                                                "set_instruction_result",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::InvalidEXTCALLTarget"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (|
                                          Value.StructTuple "core::option::Option::None" []
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::option::Option::Some"
                            [
                              M.call_closure (|
                                Ty.path "alloy_primitives::bits::address::Address",
                                M.get_associated_function (|
                                  Ty.path "alloy_primitives::bits::address::Address",
                                  "from_word",
                                  [],
                                  []
                                |),
                                [ M.read (| target_address |) ]
                              |)
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_pop_extcall_target_address :
      M.IsFunction.C
        "revm_interpreter::instructions::contract::pop_extcall_target_address"
        pop_extcall_target_address.
    Admitted.
    Global Typeclasses Opaque pop_extcall_target_address.
    
    (*
    pub fn extcall<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        require_eof!(interpreter);
    
        // Pop target address
        let Some(target_address) = pop_extcall_target_address(interpreter) else {
            return;
        };
    
        // Input call
        let Some(input) = extcall_input(interpreter) else {
            return;
        };
    
        popn!([value], interpreter);
        let has_transfer = !value.is_zero();
        if interpreter.runtime_flag.is_static() && has_transfer {
            interpreter
                .control
                .set_instruction_result(InstructionResult::CallNotAllowedInsideStatic);
            return;
        }
    
        let Some(gas_limit) = extcall_gas_calc(interpreter, host, target_address, has_transfer) else {
            return;
        };
    
        // Call host to interact with target contract
        interpreter.control.set_next_action(
            InterpreterAction::NewFrame(FrameInput::Call(Box::new(CallInputs {
                input,
                gas_limit,
                target_address,
                caller: interpreter.input.target_address(),
                bytecode_address: target_address,
                value: CallValue::Transfer(value),
                scheme: CallScheme::ExtCall,
                is_static: interpreter.runtime_flag.is_static(),
                is_eof: true,
                return_memory_offset: 0..0,
            }))),
            InstructionResult::CallOrCreate,
        );
    }
    *)
    Definition extcall (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.path "alloy_primitives::bits::address::Address" ],
                      M.get_function (|
                        "revm_interpreter::instructions::contract::pop_extcall_target_address",
                        [],
                        [ WIRE ]
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| interpreter |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let target_address := M.copy (| γ0_0 |) in
                        M.match_operator (|
                          None,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                              M.get_function (|
                                "revm_interpreter::instructions::contract::extcall_input",
                                [],
                                [ WIRE ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| interpreter |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let input := M.copy (| γ0_0 |) in
                                M.match_operator (|
                                  None,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 1 ]
                                            [
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                []
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::StackTrait",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Stack",
                                        [],
                                        [],
                                        "popn",
                                        [ Value.Integer IntegerKind.Usize 1 ],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "stack"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                                        let value := M.copy (| γ1_0 |) in
                                        let~ has_transfer : Ty.path "bool" :=
                                          M.alloc (|
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    [],
                                                  "is_zero",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, value |) ]
                                              |)
                                            |)
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        LogicalOp.and (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "revm_interpreter::interpreter_types::RuntimeFlag",
                                                              Ty.associated_in_trait
                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                []
                                                                []
                                                                WIRE
                                                                "RuntimeFlag",
                                                              [],
                                                              [],
                                                              "is_static",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (|
                                                                    M.read (| interpreter |)
                                                                  |),
                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                  "runtime_flag"
                                                                |)
                                                              |)
                                                            ]
                                                          |),
                                                          ltac:(M.monadic
                                                            (M.read (| has_transfer |)))
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let~ _ : Ty.tuple [] :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_trait_method (|
                                                                "revm_interpreter::interpreter_types::LoopControl",
                                                                Ty.associated_in_trait
                                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                  []
                                                                  []
                                                                  WIRE
                                                                  "Control",
                                                                [],
                                                                [],
                                                                "set_instruction_result",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (|
                                                                      M.read (| interpreter |)
                                                                    |),
                                                                    "revm_interpreter::interpreter::Interpreter",
                                                                    "control"
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "revm_interpreter::instruction_result::InstructionResult::CallNotAllowedInsideStatic"
                                                                  []
                                                              ]
                                                            |)
                                                          |) in
                                                        M.return_ (| Value.Tuple [] |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        M.match_operator (|
                                          None,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "u64" ],
                                              M.get_function (|
                                                "revm_interpreter::instructions::contract::extcall_gas_calc",
                                                [],
                                                [ WIRE; H ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| interpreter |) |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| host |) |)
                                                |);
                                                M.read (| target_address |);
                                                M.read (| has_transfer |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let gas_limit := M.copy (| γ0_0 |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated_in_trait
                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                          []
                                                          []
                                                          WIRE
                                                          "Control",
                                                        [],
                                                        [],
                                                        "set_next_action",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| interpreter |) |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::interpreter_action::InterpreterAction::NewFrame"
                                                          [
                                                            Value.StructTuple
                                                              "revm_interpreter::interpreter_action::FrameInput::Call"
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.StructRecord
                                                                      "revm_interpreter::interpreter_action::call_inputs::CallInputs"
                                                                      [
                                                                        ("input",
                                                                          M.read (| input |));
                                                                        ("gas_limit",
                                                                          M.read (| gas_limit |));
                                                                        ("target_address",
                                                                          M.read (|
                                                                            target_address
                                                                          |));
                                                                        ("caller",
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "alloy_primitives::bits::address::Address",
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::InputsTrait",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "Input",
                                                                              [],
                                                                              [],
                                                                              "target_address",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "input"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |));
                                                                        ("bytecode_address",
                                                                          M.read (|
                                                                            target_address
                                                                          |));
                                                                        ("value",
                                                                          Value.StructTuple
                                                                            "revm_interpreter::interpreter_action::call_inputs::CallValue::Transfer"
                                                                            [ M.read (| value |) ]);
                                                                        ("scheme",
                                                                          Value.StructTuple
                                                                            "revm_interpreter::interpreter_action::call_inputs::CallScheme::ExtCall"
                                                                            []);
                                                                        ("is_static",
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::RuntimeFlag",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "RuntimeFlag",
                                                                              [],
                                                                              [],
                                                                              "is_static",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "runtime_flag"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |));
                                                                        ("is_eof", Value.Bool true);
                                                                        ("return_memory_offset",
                                                                          Value.StructRecord
                                                                            "core::ops::range::Range"
                                                                            [
                                                                              ("start",
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  0);
                                                                              ("end_",
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  0)
                                                                            ])
                                                                      ]
                                                                  ]
                                                                |)
                                                              ]
                                                          ];
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::CallOrCreate"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_extcall :
      M.IsFunction.C "revm_interpreter::instructions::contract::extcall" extcall.
    Admitted.
    Global Typeclasses Opaque extcall.
    
    (*
    pub fn extdelegatecall<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        require_eof!(interpreter);
    
        // Pop target address
        let Some(target_address) = pop_extcall_target_address(interpreter) else {
            return;
        };
    
        // Input call
        let Some(input) = extcall_input(interpreter) else {
            return;
        };
    
        let Some(gas_limit) = extcall_gas_calc(interpreter, host, target_address, false) else {
            return;
        };
    
        // Call host to interact with target contract
        interpreter.control.set_next_action(
            InterpreterAction::NewFrame(FrameInput::Call(Box::new(CallInputs {
                input,
                gas_limit,
                target_address: interpreter.input.target_address(),
                caller: interpreter.input.caller_address(),
                bytecode_address: target_address,
                value: CallValue::Apparent(interpreter.input.call_value()),
                scheme: CallScheme::ExtDelegateCall,
                is_static: interpreter.runtime_flag.is_static(),
                is_eof: true,
                return_memory_offset: 0..0,
            }))),
            InstructionResult::CallOrCreate,
        );
    }
    *)
    Definition extdelegatecall (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.path "alloy_primitives::bits::address::Address" ],
                      M.get_function (|
                        "revm_interpreter::instructions::contract::pop_extcall_target_address",
                        [],
                        [ WIRE ]
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| interpreter |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let target_address := M.copy (| γ0_0 |) in
                        M.match_operator (|
                          None,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                              M.get_function (|
                                "revm_interpreter::instructions::contract::extcall_input",
                                [],
                                [ WIRE ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| interpreter |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let input := M.copy (| γ0_0 |) in
                                M.match_operator (|
                                  None,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "u64" ],
                                      M.get_function (|
                                        "revm_interpreter::instructions::contract::extcall_gas_calc",
                                        [],
                                        [ WIRE; H ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| interpreter |) |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| host |) |)
                                        |);
                                        M.read (| target_address |);
                                        Value.Bool false
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let gas_limit := M.copy (| γ0_0 |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Control",
                                                [],
                                                [],
                                                "set_next_action",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::interpreter_action::InterpreterAction::NewFrame"
                                                  [
                                                    Value.StructTuple
                                                      "revm_interpreter::interpreter_action::FrameInput::Call"
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "alloc::boxed::Box")
                                                            []
                                                            [
                                                              Ty.path
                                                                "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            Value.StructRecord
                                                              "revm_interpreter::interpreter_action::call_inputs::CallInputs"
                                                              [
                                                                ("input", M.read (| input |));
                                                                ("gas_limit",
                                                                  M.read (| gas_limit |));
                                                                ("target_address",
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "alloy_primitives::bits::address::Address",
                                                                    M.get_trait_method (|
                                                                      "revm_interpreter::interpreter_types::InputsTrait",
                                                                      Ty.associated_in_trait
                                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                        []
                                                                        []
                                                                        WIRE
                                                                        "Input",
                                                                      [],
                                                                      [],
                                                                      "target_address",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| interpreter |)
                                                                          |),
                                                                          "revm_interpreter::interpreter::Interpreter",
                                                                          "input"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |));
                                                                ("caller",
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "alloy_primitives::bits::address::Address",
                                                                    M.get_trait_method (|
                                                                      "revm_interpreter::interpreter_types::InputsTrait",
                                                                      Ty.associated_in_trait
                                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                        []
                                                                        []
                                                                        WIRE
                                                                        "Input",
                                                                      [],
                                                                      [],
                                                                      "caller_address",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| interpreter |)
                                                                          |),
                                                                          "revm_interpreter::interpreter::Interpreter",
                                                                          "input"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |));
                                                                ("bytecode_address",
                                                                  M.read (| target_address |));
                                                                ("value",
                                                                  Value.StructTuple
                                                                    "revm_interpreter::interpreter_action::call_inputs::CallValue::Apparent"
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "ruint::Uint")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              256;
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              4
                                                                          ]
                                                                          [],
                                                                        M.get_trait_method (|
                                                                          "revm_interpreter::interpreter_types::InputsTrait",
                                                                          Ty.associated_in_trait
                                                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                            []
                                                                            []
                                                                            WIRE
                                                                            "Input",
                                                                          [],
                                                                          [],
                                                                          "call_value",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  interpreter
                                                                                |)
                                                                              |),
                                                                              "revm_interpreter::interpreter::Interpreter",
                                                                              "input"
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]);
                                                                ("scheme",
                                                                  Value.StructTuple
                                                                    "revm_interpreter::interpreter_action::call_inputs::CallScheme::ExtDelegateCall"
                                                                    []);
                                                                ("is_static",
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_trait_method (|
                                                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                                                      Ty.associated_in_trait
                                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                        []
                                                                        []
                                                                        WIRE
                                                                        "RuntimeFlag",
                                                                      [],
                                                                      [],
                                                                      "is_static",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| interpreter |)
                                                                          |),
                                                                          "revm_interpreter::interpreter::Interpreter",
                                                                          "runtime_flag"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |));
                                                                ("is_eof", Value.Bool true);
                                                                ("return_memory_offset",
                                                                  Value.StructRecord
                                                                    "core::ops::range::Range"
                                                                    [
                                                                      ("start",
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          0);
                                                                      ("end_",
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          0)
                                                                    ])
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  ];
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::CallOrCreate"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_extdelegatecall :
      M.IsFunction.C "revm_interpreter::instructions::contract::extdelegatecall" extdelegatecall.
    Admitted.
    Global Typeclasses Opaque extdelegatecall.
    
    (*
    pub fn extstaticcall<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        require_eof!(interpreter);
    
        // Pop target address
        let Some(target_address) = pop_extcall_target_address(interpreter) else {
            return;
        };
    
        // Input call
        let Some(input) = extcall_input(interpreter) else {
            return;
        };
    
        let Some(gas_limit) = extcall_gas_calc(interpreter, host, target_address, false) else {
            return;
        };
    
        // Call host to interact with target contract
        interpreter.control.set_next_action(
            InterpreterAction::NewFrame(FrameInput::Call(Box::new(CallInputs {
                input,
                gas_limit,
                target_address,
                caller: interpreter.input.target_address(),
                bytecode_address: target_address,
                value: CallValue::Transfer(U256::ZERO),
                scheme: CallScheme::ExtStaticCall,
                is_static: true,
                is_eof: true,
                return_memory_offset: 0..0,
            }))),
            InstructionResult::CallOrCreate,
        );
    }
    *)
    Definition extstaticcall (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.path "alloy_primitives::bits::address::Address" ],
                      M.get_function (|
                        "revm_interpreter::instructions::contract::pop_extcall_target_address",
                        [],
                        [ WIRE ]
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| interpreter |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let target_address := M.copy (| γ0_0 |) in
                        M.match_operator (|
                          None,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                              M.get_function (|
                                "revm_interpreter::instructions::contract::extcall_input",
                                [],
                                [ WIRE ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| interpreter |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let input := M.copy (| γ0_0 |) in
                                M.match_operator (|
                                  None,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "u64" ],
                                      M.get_function (|
                                        "revm_interpreter::instructions::contract::extcall_gas_calc",
                                        [],
                                        [ WIRE; H ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| interpreter |) |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| host |) |)
                                        |);
                                        M.read (| target_address |);
                                        Value.Bool false
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let gas_limit := M.copy (| γ0_0 |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Control",
                                                [],
                                                [],
                                                "set_next_action",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::interpreter_action::InterpreterAction::NewFrame"
                                                  [
                                                    Value.StructTuple
                                                      "revm_interpreter::interpreter_action::FrameInput::Call"
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "alloc::boxed::Box")
                                                            []
                                                            [
                                                              Ty.path
                                                                "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            Value.StructRecord
                                                              "revm_interpreter::interpreter_action::call_inputs::CallInputs"
                                                              [
                                                                ("input", M.read (| input |));
                                                                ("gas_limit",
                                                                  M.read (| gas_limit |));
                                                                ("target_address",
                                                                  M.read (| target_address |));
                                                                ("caller",
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "alloy_primitives::bits::address::Address",
                                                                    M.get_trait_method (|
                                                                      "revm_interpreter::interpreter_types::InputsTrait",
                                                                      Ty.associated_in_trait
                                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                        []
                                                                        []
                                                                        WIRE
                                                                        "Input",
                                                                      [],
                                                                      [],
                                                                      "target_address",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| interpreter |)
                                                                          |),
                                                                          "revm_interpreter::interpreter::Interpreter",
                                                                          "input"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |));
                                                                ("bytecode_address",
                                                                  M.read (| target_address |));
                                                                ("value",
                                                                  Value.StructTuple
                                                                    "revm_interpreter::interpreter_action::call_inputs::CallValue::Transfer"
                                                                    [
                                                                      M.read (|
                                                                        get_associated_constant (|
                                                                          Ty.apply
                                                                            (Ty.path "ruint::Uint")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                256;
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                4
                                                                            ]
                                                                            [],
                                                                          "ZERO",
                                                                          Ty.apply
                                                                            (Ty.path "ruint::Uint")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                256;
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                4
                                                                            ]
                                                                            []
                                                                        |)
                                                                      |)
                                                                    ]);
                                                                ("scheme",
                                                                  Value.StructTuple
                                                                    "revm_interpreter::interpreter_action::call_inputs::CallScheme::ExtStaticCall"
                                                                    []);
                                                                ("is_static", Value.Bool true);
                                                                ("is_eof", Value.Bool true);
                                                                ("return_memory_offset",
                                                                  Value.StructRecord
                                                                    "core::ops::range::Range"
                                                                    [
                                                                      ("start",
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          0);
                                                                      ("end_",
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          0)
                                                                    ])
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  ];
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::CallOrCreate"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_extstaticcall :
      M.IsFunction.C "revm_interpreter::instructions::contract::extstaticcall" extstaticcall.
    Admitted.
    Global Typeclasses Opaque extstaticcall.
    
    (*
    pub fn create<WIRE: InterpreterTypes, const IS_CREATE2: bool, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        require_non_staticcall!(interpreter);
    
        // EIP-1014: Skinny CREATE2
        if IS_CREATE2 {
            check!(interpreter, PETERSBURG);
        }
    
        popn!([value, code_offset, len], interpreter);
        let len = as_usize_or_fail!(interpreter, len);
    
        let mut code = Bytes::new();
        if len != 0 {
            // EIP-3860: Limit and meter initcode
            if interpreter
                .runtime_flag
                .spec_id()
                .is_enabled_in(SpecId::SHANGHAI)
            {
                // Limit is set as double of max contract bytecode size
                let max_initcode_size = host.cfg().max_code_size().saturating_mul(2);
                if len > max_initcode_size {
                    interpreter
                        .control
                        .set_instruction_result(InstructionResult::CreateInitCodeSizeLimit);
                    return;
                }
                gas!(interpreter, gas::initcode_cost(len));
            }
    
            let code_offset = as_usize_or_fail!(interpreter, code_offset);
            resize_memory!(interpreter, code_offset, len);
            code = Bytes::copy_from_slice(interpreter.memory.slice_len(code_offset, len).as_ref());
        }
    
        // EIP-1014: Skinny CREATE2
        let scheme = if IS_CREATE2 {
            popn!([salt], interpreter);
            // SAFETY: `len` is reasonable in size as gas for it is already deducted.
            gas_or_fail!(interpreter, gas::create2_cost(len));
            CreateScheme::Create2 { salt }
        } else {
            gas!(interpreter, gas::CREATE);
            CreateScheme::Create
        };
    
        let mut gas_limit = interpreter.control.gas().remaining();
    
        // EIP-150: Gas cost changes for IO-heavy operations
        if interpreter
            .runtime_flag
            .spec_id()
            .is_enabled_in(SpecId::TANGERINE)
        {
            // Take remaining gas and deduce l64 part of it.
            gas_limit -= gas_limit / 64
        }
        gas!(interpreter, gas_limit);
    
        // Call host to interact with target contract
        interpreter.control.set_next_action(
            InterpreterAction::NewFrame(FrameInput::Create(Box::new(CreateInputs {
                caller: interpreter.input.target_address(),
                scheme,
                value,
                init_code: code,
                gas_limit,
            }))),
            InstructionResult::CallOrCreate,
        );
    }
    *)
    Definition create (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ IS_CREATE2 ], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::RuntimeFlag",
                                    Ty.associated_in_trait
                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                      []
                                      []
                                      WIRE
                                      "RuntimeFlag",
                                    [],
                                    [],
                                    "is_static",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| interpreter |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "runtime_flag"
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StateChangeDuringStaticCall"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| IS_CREATE2 |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.path "revm_specification::hardfork::SpecId",
                                                "is_enabled_in",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "revm_specification::hardfork::SpecId",
                                                  M.get_trait_method (|
                                                    "revm_interpreter::interpreter_types::RuntimeFlag",
                                                    Ty.associated_in_trait
                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                      []
                                                      []
                                                      WIRE
                                                      "RuntimeFlag",
                                                    [],
                                                    [],
                                                    "spec_id",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| interpreter |) |),
                                                        "revm_interpreter::interpreter::Interpreter",
                                                        "runtime_flag"
                                                      |)
                                                    |)
                                                  ]
                                                |);
                                                Value.StructTuple
                                                  "revm_specification::hardfork::SpecId::PETERSBURG"
                                                  []
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_trait_method (|
                                                  "revm_interpreter::interpreter_types::LoopControl",
                                                  Ty.associated_in_trait
                                                    "revm_interpreter::interpreter_types::InterpreterTypes"
                                                    []
                                                    []
                                                    WIRE
                                                    "Control",
                                                  [],
                                                  [],
                                                  "set_instruction_result",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| interpreter |) |),
                                                      "revm_interpreter::interpreter::Interpreter",
                                                      "control"
                                                    |)
                                                  |);
                                                  Value.StructTuple
                                                    "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                                    []
                                                ]
                                              |)
                                            |) in
                                          M.return_ (| Value.Tuple [] |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 3 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 3 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let γ1_2 := M.SubPointer.get_slice_index (| γ0_0, 2 |) in
                        let value := M.copy (| γ1_0 |) in
                        let code_offset := M.copy (| γ1_1 |) in
                        let len := M.copy (| γ1_2 |) in
                        let~ len : Ty.path "usize" :=
                          M.copy (|
                            M.match_operator (|
                              Some (Ty.path "usize"),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [ Ty.path "u64" ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    "as_limbs",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, len |) ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Some (Ty.tuple []),
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.Wrap.bit_or,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.Wrap.bit_or,
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.Wrap.bit_or,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.gt,
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| x |)
                                                                        |),
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          0
                                                                      |)
                                                                    |);
                                                                    M.cast
                                                                      (Ty.path "u64")
                                                                      (M.read (|
                                                                        get_associated_constant (|
                                                                          Ty.path "usize",
                                                                          "MAX",
                                                                          Ty.path "usize"
                                                                        |)
                                                                      |))
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.ne,
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| x |)
                                                                        |),
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      |)
                                                                    |);
                                                                    Value.Integer IntegerKind.U64 0
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.ne,
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.deref (| M.read (| x |) |),
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  |)
                                                                |);
                                                                Value.Integer IntegerKind.U64 0
                                                              ]
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.ne,
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (| M.read (| x |) |),
                                                                Value.Integer IntegerKind.Usize 3
                                                              |)
                                                            |);
                                                            Value.Integer IntegerKind.U64 0
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.tuple [],
                                                          M.get_trait_method (|
                                                            "revm_interpreter::interpreter_types::LoopControl",
                                                            Ty.associated_in_trait
                                                              "revm_interpreter::interpreter_types::InterpreterTypes"
                                                              []
                                                              []
                                                              WIRE
                                                              "Control",
                                                            [],
                                                            [],
                                                            "set_instruction_result",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (|
                                                                  M.read (| interpreter |)
                                                                |),
                                                                "revm_interpreter::interpreter::Interpreter",
                                                                "control"
                                                              |)
                                                            |);
                                                            Value.StructTuple
                                                              "revm_interpreter::instruction_result::InstructionResult::InvalidOperandOOG"
                                                              []
                                                          ]
                                                        |)
                                                      |) in
                                                    M.return_ (| Value.Tuple [] |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (|
                                      M.cast
                                        (Ty.path "usize")
                                        (M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.deref (| M.read (| x |) |),
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |))
                                    |)))
                              ]
                            |)
                          |) in
                        let~ code : Ty.path "alloy_primitives::bytes_::Bytes" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "alloy_primitives::bytes_::Bytes",
                              M.get_associated_function (|
                                Ty.path "alloy_primitives::bytes_::Bytes",
                                "new",
                                [],
                                []
                              |),
                              []
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ne,
                                          [ M.read (| len |); Value.Integer IntegerKind.Usize 0 ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Some (Ty.tuple []),
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "revm_specification::hardfork::SpecId",
                                                      "is_enabled_in",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path
                                                          "revm_specification::hardfork::SpecId",
                                                        M.get_trait_method (|
                                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                                          Ty.associated_in_trait
                                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                                            []
                                                            []
                                                            WIRE
                                                            "RuntimeFlag",
                                                          [],
                                                          [],
                                                          "spec_id",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (|
                                                                M.read (| interpreter |)
                                                              |),
                                                              "revm_interpreter::interpreter::Interpreter",
                                                              "runtime_flag"
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      Value.StructTuple
                                                        "revm_specification::hardfork::SpecId::SHANGHAI"
                                                        []
                                                    ]
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let~ max_initcode_size : Ty.path "usize" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.path "usize",
                                                    "saturating_mul",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_trait_method (|
                                                        "revm_context_interface::cfg::Cfg",
                                                        Ty.associated_in_trait
                                                          "revm_context_interface::cfg::CfgGetter"
                                                          []
                                                          []
                                                          H
                                                          "Cfg",
                                                        [],
                                                        [],
                                                        "max_code_size",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "revm_context_interface::cfg::CfgGetter"
                                                                    []
                                                                    []
                                                                    H
                                                                    "Cfg"
                                                                ],
                                                              M.get_trait_method (|
                                                                "revm_context_interface::cfg::CfgGetter",
                                                                H,
                                                                [],
                                                                [],
                                                                "cfg",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| host |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.Usize 2
                                                  ]
                                                |)
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Some (Ty.tuple []),
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.gt,
                                                              [
                                                                M.read (| len |);
                                                                M.read (| max_initcode_size |)
                                                              ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ _ : Ty.tuple [] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                                    Ty.associated_in_trait
                                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                      []
                                                                      []
                                                                      WIRE
                                                                      "Control",
                                                                    [],
                                                                    [],
                                                                    "set_instruction_result",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| interpreter |)
                                                                        |),
                                                                        "revm_interpreter::interpreter::Interpreter",
                                                                        "control"
                                                                      |)
                                                                    |);
                                                                    Value.StructTuple
                                                                      "revm_interpreter::instruction_result::InstructionResult::CreateInitCodeSizeLimit"
                                                                      []
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.return_ (| Value.Tuple [] |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Some (Ty.tuple []),
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "revm_interpreter::gas::Gas",
                                                                  "record_cost",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "revm_interpreter::gas::Gas"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "revm_interpreter::interpreter_types::LoopControl",
                                                                          Ty.associated_in_trait
                                                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                            []
                                                                            []
                                                                            WIRE
                                                                            "Control",
                                                                          [],
                                                                          [],
                                                                          "gas",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  interpreter
                                                                                |)
                                                                              |),
                                                                              "revm_interpreter::interpreter::Interpreter",
                                                                              "control"
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.call_closure (|
                                                                    Ty.path "u64",
                                                                    M.get_function (|
                                                                      "revm_interpreter::gas::calc::initcode_cost",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [ M.read (| len |) ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ _ : Ty.tuple [] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                                    Ty.associated_in_trait
                                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                      []
                                                                      []
                                                                      WIRE
                                                                      "Control",
                                                                    [],
                                                                    [],
                                                                    "set_instruction_result",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| interpreter |)
                                                                        |),
                                                                        "revm_interpreter::interpreter::Interpreter",
                                                                        "control"
                                                                      |)
                                                                    |);
                                                                    Value.StructTuple
                                                                      "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                      []
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.return_ (| Value.Tuple [] |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  let~ code_offset : Ty.path "usize" :=
                                    M.copy (|
                                      M.match_operator (|
                                        Some (Ty.path "usize"),
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [ Ty.path "u64" ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                [],
                                              "as_limbs",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, code_offset |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| γ |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Some (Ty.tuple []),
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.Wrap.bit_or,
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.Wrap.bit_or,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        BinOp.Wrap.bit_or,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            BinOp.gt,
                                                                            [
                                                                              M.read (|
                                                                                M.SubPointer.get_array_field (|
                                                                                  M.deref (|
                                                                                    M.read (| x |)
                                                                                  |),
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    0
                                                                                |)
                                                                              |);
                                                                              M.cast
                                                                                (Ty.path "u64")
                                                                                (M.read (|
                                                                                  get_associated_constant (|
                                                                                    Ty.path "usize",
                                                                                    "MAX",
                                                                                    Ty.path "usize"
                                                                                  |)
                                                                                |))
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            BinOp.ne,
                                                                            [
                                                                              M.read (|
                                                                                M.SubPointer.get_array_field (|
                                                                                  M.deref (|
                                                                                    M.read (| x |)
                                                                                  |),
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                |)
                                                                              |);
                                                                              Value.Integer
                                                                                IntegerKind.U64
                                                                                0
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        BinOp.ne,
                                                                        [
                                                                          M.read (|
                                                                            M.SubPointer.get_array_field (|
                                                                              M.deref (|
                                                                                M.read (| x |)
                                                                              |),
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            |)
                                                                          |);
                                                                          Value.Integer
                                                                            IntegerKind.U64
                                                                            0
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.ne,
                                                                    [
                                                                      M.read (|
                                                                        M.SubPointer.get_array_field (|
                                                                          M.deref (|
                                                                            M.read (| x |)
                                                                          |),
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            3
                                                                        |)
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.U64
                                                                        0
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let~ _ : Ty.tuple [] :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.tuple [],
                                                                    M.get_trait_method (|
                                                                      "revm_interpreter::interpreter_types::LoopControl",
                                                                      Ty.associated_in_trait
                                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                        []
                                                                        []
                                                                        WIRE
                                                                        "Control",
                                                                      [],
                                                                      [],
                                                                      "set_instruction_result",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| interpreter |)
                                                                          |),
                                                                          "revm_interpreter::interpreter::Interpreter",
                                                                          "control"
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "revm_interpreter::instruction_result::InstructionResult::InvalidOperandOOG"
                                                                        []
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.return_ (| Value.Tuple [] |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |) in
                                              M.alloc (|
                                                M.cast
                                                  (Ty.path "usize")
                                                  (M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (| M.read (| x |) |),
                                                      Value.Integer IntegerKind.Usize 0
                                                    |)
                                                  |))
                                              |)))
                                        ]
                                      |)
                                    |) in
                                  let~ words_num : Ty.path "usize" :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_function (|
                                          "revm_interpreter::interpreter::shared_memory::num_words",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.path "usize",
                                              "saturating_add",
                                              [],
                                              []
                                            |),
                                            [ M.read (| code_offset |); M.read (| len |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Some (Ty.tuple []),
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "revm_interpreter::gas::MemoryExtensionResult",
                                          M.get_associated_function (|
                                            Ty.path "revm_interpreter::gas::Gas",
                                            "record_memory_expansion",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [ Ty.path "revm_interpreter::gas::Gas" ],
                                                  M.get_trait_method (|
                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                    Ty.associated_in_trait
                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                      []
                                                      []
                                                      WIRE
                                                      "Control",
                                                    [],
                                                    [],
                                                    "gas",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| interpreter |) |),
                                                        "revm_interpreter::interpreter::Interpreter",
                                                        "control"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.read (| words_num |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "revm_interpreter::gas::MemoryExtensionResult::Extended"
                                              |) in
                                            let~ _ : Ty.path "bool" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_trait_method (|
                                                    "revm_interpreter::interpreter_types::MemoryTrait",
                                                    Ty.associated_in_trait
                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                      []
                                                      []
                                                      WIRE
                                                      "Memory",
                                                    [],
                                                    [],
                                                    "resize",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| interpreter |) |),
                                                        "revm_interpreter::interpreter::Interpreter",
                                                        "memory"
                                                      |)
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.mul,
                                                      [
                                                        M.read (| words_num |);
                                                        Value.Integer IntegerKind.Usize 32
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "revm_interpreter::gas::MemoryExtensionResult::OutOfGas"
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.read (|
                                                  let~ _ : Ty.tuple [] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_trait_method (|
                                                          "revm_interpreter::interpreter_types::LoopControl",
                                                          Ty.associated_in_trait
                                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                                            []
                                                            []
                                                            WIRE
                                                            "Control",
                                                          [],
                                                          [],
                                                          "set_instruction_result",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (|
                                                                M.read (| interpreter |)
                                                              |),
                                                              "revm_interpreter::interpreter::Interpreter",
                                                              "control"
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "revm_interpreter::instruction_result::InstructionResult::MemoryOOG"
                                                            []
                                                        ]
                                                      |)
                                                    |) in
                                                  M.return_ (| Value.Tuple [] |)
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "revm_interpreter::gas::MemoryExtensionResult::Same"
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (|
                                      M.write (|
                                        code,
                                        M.call_closure (|
                                          Ty.path "alloy_primitives::bytes_::Bytes",
                                          M.get_associated_function (|
                                            Ty.path "alloy_primitives::bytes_::Bytes",
                                            "copy_from_slice",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::convert::AsRef",
                                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                                    [],
                                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ]
                                                    ],
                                                    "as_ref",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [ Ty.path "u8" ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.associated_in_trait
                                                              "revm_interpreter::interpreter_types::MemoryTrait"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                []
                                                                []
                                                                WIRE
                                                                "Memory")
                                                              "{{synthetic}}'1",
                                                            [],
                                                            [],
                                                            "deref",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.associated_in_trait
                                                                    "revm_interpreter::interpreter_types::MemoryTrait"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                      []
                                                                      []
                                                                      WIRE
                                                                      "Memory")
                                                                    "{{synthetic}}'1",
                                                                  M.get_trait_method (|
                                                                    "revm_interpreter::interpreter_types::MemoryTrait",
                                                                    Ty.associated_in_trait
                                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                      []
                                                                      []
                                                                      WIRE
                                                                      "Memory",
                                                                    [],
                                                                    [],
                                                                    "slice_len",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| interpreter |)
                                                                        |),
                                                                        "revm_interpreter::interpreter::Interpreter",
                                                                        "memory"
                                                                      |)
                                                                    |);
                                                                    M.read (| code_offset |);
                                                                    M.read (| len |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ scheme : Ty.path "revm_context_interface::cfg::CreateScheme" :=
                          M.copy (|
                            M.match_operator (|
                              Some (Ty.path "revm_context_interface::cfg::CreateScheme"),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.use (M.alloc (| IS_CREATE2 |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.match_operator (|
                                      None,
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 1 ]
                                                [
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    []
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "revm_interpreter::interpreter_types::StackTrait",
                                            Ty.associated_in_trait
                                              "revm_interpreter::interpreter_types::InterpreterTypes"
                                              []
                                              []
                                              WIRE
                                              "Stack",
                                            [],
                                            [],
                                            "popn",
                                            [ Value.Integer IntegerKind.Usize 1 ],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| interpreter |) |),
                                                "revm_interpreter::interpreter::Interpreter",
                                                "stack"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                                            let salt := M.copy (| γ1_0 |) in
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Some (Ty.tuple []),
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "u64" ],
                                                    M.get_function (|
                                                      "revm_interpreter::gas::calc::create2_cost",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.read (| len |) ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::option::Option::Some",
                                                          0
                                                        |) in
                                                      let gas_used := M.copy (| γ0_0 |) in
                                                      M.match_operator (|
                                                        Some (Ty.tuple []),
                                                        M.alloc (| Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    UnOp.not (|
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "revm_interpreter::gas::Gas",
                                                                          "record_cost",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&mut")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "revm_interpreter::gas::Gas"
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "revm_interpreter::interpreter_types::LoopControl",
                                                                                  Ty.associated_in_trait
                                                                                    "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                    []
                                                                                    []
                                                                                    WIRE
                                                                                    "Control",
                                                                                  [],
                                                                                  [],
                                                                                  "gas",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.MutRef,
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          interpreter
                                                                                        |)
                                                                                      |),
                                                                                      "revm_interpreter::interpreter::Interpreter",
                                                                                      "control"
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.read (| gas_used |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.tuple [],
                                                                          M.get_trait_method (|
                                                                            "revm_interpreter::interpreter_types::LoopControl",
                                                                            Ty.associated_in_trait
                                                                              "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                              []
                                                                              []
                                                                              WIRE
                                                                              "Control",
                                                                            [],
                                                                            [],
                                                                            "set_instruction_result",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    interpreter
                                                                                  |)
                                                                                |),
                                                                                "revm_interpreter::interpreter::Interpreter",
                                                                                "control"
                                                                              |)
                                                                            |);
                                                                            Value.StructTuple
                                                                              "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                              []
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.return_ (| Value.Tuple [] |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.is_struct_tuple (|
                                                          γ,
                                                          "core::option::Option::None"
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ _ : Ty.tuple [] :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_trait_method (|
                                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                                    Ty.associated_in_trait
                                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                      []
                                                                      []
                                                                      WIRE
                                                                      "Control",
                                                                    [],
                                                                    [],
                                                                    "set_instruction_result",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| interpreter |)
                                                                        |),
                                                                        "revm_interpreter::interpreter::Interpreter",
                                                                        "control"
                                                                      |)
                                                                    |);
                                                                    Value.StructTuple
                                                                      "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                      []
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.return_ (| Value.Tuple [] |)
                                                          |)
                                                        |)
                                                      |)))
                                                ]
                                              |) in
                                            M.alloc (|
                                              Value.StructRecord
                                                "revm_context_interface::cfg::CreateScheme::Create2"
                                                [ ("salt", M.read (| salt |)) ]
                                            |)))
                                      ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Some (Ty.tuple []),
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_associated_function (|
                                                          Ty.path "revm_interpreter::gas::Gas",
                                                          "record_cost",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&mut")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "revm_interpreter::gas::Gas"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "revm_interpreter::interpreter_types::LoopControl",
                                                                  Ty.associated_in_trait
                                                                    "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                    []
                                                                    []
                                                                    WIRE
                                                                    "Control",
                                                                  [],
                                                                  [],
                                                                  "gas",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| interpreter |)
                                                                      |),
                                                                      "revm_interpreter::interpreter::Interpreter",
                                                                      "control"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.read (|
                                                            get_constant (|
                                                              "revm_interpreter::gas::constants::CREATE",
                                                              Ty.path "u64"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.tuple [],
                                                          M.get_trait_method (|
                                                            "revm_interpreter::interpreter_types::LoopControl",
                                                            Ty.associated_in_trait
                                                              "revm_interpreter::interpreter_types::InterpreterTypes"
                                                              []
                                                              []
                                                              WIRE
                                                              "Control",
                                                            [],
                                                            [],
                                                            "set_instruction_result",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (|
                                                                  M.read (| interpreter |)
                                                                |),
                                                                "revm_interpreter::interpreter::Interpreter",
                                                                "control"
                                                              |)
                                                            |);
                                                            Value.StructTuple
                                                              "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                              []
                                                          ]
                                                        |)
                                                      |) in
                                                    M.return_ (| Value.Tuple [] |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "revm_context_interface::cfg::CreateScheme::Create"
                                        []
                                    |)))
                              ]
                            |)
                          |) in
                        let~ gas_limit : Ty.path "u64" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "u64",
                              M.get_associated_function (|
                                Ty.path "revm_interpreter::gas::Gas",
                                "remaining",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.path "revm_interpreter::gas::Gas" ],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "gas",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_associated_function (|
                                            Ty.path "revm_specification::hardfork::SpecId",
                                            "is_enabled_in",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.path "revm_specification::hardfork::SpecId",
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::RuntimeFlag",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "RuntimeFlag",
                                                [],
                                                [],
                                                "spec_id",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "runtime_flag"
                                                  |)
                                                |)
                                              ]
                                            |);
                                            Value.StructTuple
                                              "revm_specification::hardfork::SpecId::TANGERINE"
                                              []
                                          ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    let β := gas_limit in
                                    M.write (|
                                      β,
                                      M.call_closure (|
                                        Ty.path "u64",
                                        BinOp.Wrap.sub,
                                        [
                                          M.read (| β |);
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.div,
                                            [
                                              M.read (| gas_limit |);
                                              Value.Integer IntegerKind.U64 64
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_associated_function (|
                                              Ty.path "revm_interpreter::gas::Gas",
                                              "record_cost",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.path "revm_interpreter::gas::Gas" ],
                                                    M.get_trait_method (|
                                                      "revm_interpreter::interpreter_types::LoopControl",
                                                      Ty.associated_in_trait
                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                        []
                                                        []
                                                        WIRE
                                                        "Control",
                                                      [],
                                                      [],
                                                      "gas",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| interpreter |) |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "control"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| gas_limit |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Control",
                                                [],
                                                [],
                                                "set_instruction_result",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "revm_interpreter::interpreter_types::LoopControl",
                                Ty.associated_in_trait
                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                  []
                                  []
                                  WIRE
                                  "Control",
                                [],
                                [],
                                "set_next_action",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| interpreter |) |),
                                    "revm_interpreter::interpreter::Interpreter",
                                    "control"
                                  |)
                                |);
                                Value.StructTuple
                                  "revm_interpreter::interpreter_action::InterpreterAction::NewFrame"
                                  [
                                    Value.StructTuple
                                      "revm_interpreter::interpreter_action::FrameInput::Create"
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::boxed::Box")
                                            []
                                            [
                                              Ty.path
                                                "revm_interpreter::interpreter_action::create_inputs::CreateInputs";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              []
                                              [
                                                Ty.path
                                                  "revm_interpreter::interpreter_action::create_inputs::CreateInputs";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            [],
                                            []
                                          |),
                                          [
                                            Value.StructRecord
                                              "revm_interpreter::interpreter_action::create_inputs::CreateInputs"
                                              [
                                                ("caller",
                                                  M.call_closure (|
                                                    Ty.path
                                                      "alloy_primitives::bits::address::Address",
                                                    M.get_trait_method (|
                                                      "revm_interpreter::interpreter_types::InputsTrait",
                                                      Ty.associated_in_trait
                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                        []
                                                        []
                                                        WIRE
                                                        "Input",
                                                      [],
                                                      [],
                                                      "target_address",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| interpreter |) |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "input"
                                                        |)
                                                      |)
                                                    ]
                                                  |));
                                                ("scheme", M.read (| scheme |));
                                                ("value", M.read (| value |));
                                                ("init_code", M.read (| code |));
                                                ("gas_limit", M.read (| gas_limit |))
                                              ]
                                          ]
                                        |)
                                      ]
                                  ];
                                Value.StructTuple
                                  "revm_interpreter::instruction_result::InstructionResult::CallOrCreate"
                                  []
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_create :
      M.IsFunction.C "revm_interpreter::instructions::contract::create" create.
    Admitted.
    Global Typeclasses Opaque create.
    
    (*
    pub fn call<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        popn!([local_gas_limit, to, value], interpreter);
        let to = to.into_address();
        // Max gas limit is not possible in real ethereum situation.
        let local_gas_limit = u64::try_from(local_gas_limit).unwrap_or(u64::MAX);
    
        let has_transfer = !value.is_zero();
        if interpreter.runtime_flag.is_static() && has_transfer {
            interpreter
                .control
                .set_instruction_result(InstructionResult::CallNotAllowedInsideStatic);
            return;
        }
    
        let Some((input, return_memory_offset)) = get_memory_input_and_out_ranges(interpreter) else {
            return;
        };
    
        let Some(account_load) = host.load_account_delegated(to) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
        let Some(mut gas_limit) =
            calc_call_gas(interpreter, account_load, has_transfer, local_gas_limit)
        else {
            return;
        };
    
        gas!(interpreter, gas_limit);
    
        // Add call stipend if there is value to be transferred.
        if has_transfer {
            gas_limit = gas_limit.saturating_add(gas::CALL_STIPEND);
        }
    
        // Call host to interact with target contract
        interpreter.control.set_next_action(
            InterpreterAction::NewFrame(FrameInput::Call(Box::new(CallInputs {
                input,
                gas_limit,
                target_address: to,
                caller: interpreter.input.target_address(),
                bytecode_address: to,
                value: CallValue::Transfer(value),
                scheme: CallScheme::Call,
                is_static: interpreter.runtime_flag.is_static(),
                is_eof: false,
                return_memory_offset,
            }))),
            InstructionResult::CallOrCreate,
        );
    }
    *)
    Definition call (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 3 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 3 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let γ1_2 := M.SubPointer.get_slice_index (| γ0_0, 2 |) in
                        let local_gas_limit := M.copy (| γ1_0 |) in
                        let to := M.copy (| γ1_1 |) in
                        let value := M.copy (| γ1_2 |) in
                        let~ to : Ty.path "alloy_primitives::bits::address::Address" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "alloy_primitives::bits::address::Address",
                              M.get_trait_method (|
                                "revm_interpreter::instructions::utility::IntoAddress",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                [],
                                "into_address",
                                [],
                                []
                              |),
                              [ M.read (| to |) ]
                            |)
                          |) in
                        let~ local_gas_limit : Ty.path "u64" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "u64",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "u64";
                                    Ty.apply
                                      (Ty.path "ruint::from::FromUintError")
                                      []
                                      [ Ty.path "u64" ]
                                  ],
                                "unwrap_or",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "u64";
                                      Ty.apply
                                        (Ty.path "ruint::from::FromUintError")
                                        []
                                        [ Ty.path "u64" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::convert::TryFrom",
                                    Ty.path "u64",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                    "try_from",
                                    [],
                                    []
                                  |),
                                  [ M.read (| local_gas_limit |) ]
                                |);
                                M.read (|
                                  get_associated_constant (| Ty.path "u64", "MAX", Ty.path "u64" |)
                                |)
                              ]
                            |)
                          |) in
                        let~ has_transfer : Ty.path "bool" :=
                          M.alloc (|
                            UnOp.not (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "is_zero",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, value |) ]
                              |)
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        LogicalOp.and (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::RuntimeFlag",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "RuntimeFlag",
                                              [],
                                              [],
                                              "is_static",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "runtime_flag"
                                                |)
                                              |)
                                            ]
                                          |),
                                          ltac:(M.monadic (M.read (| has_transfer |)))
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Control",
                                                [],
                                                [],
                                                "set_instruction_result",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::CallNotAllowedInsideStatic"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.match_operator (|
                          None,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "alloy_primitives::bytes_::Bytes";
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ]
                                    ]
                                ],
                              M.get_function (|
                                "revm_interpreter::instructions::contract::call_helpers::get_memory_input_and_out_ranges",
                                [],
                                [ WIRE ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| interpreter |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                let input := M.copy (| γ1_0 |) in
                                let return_memory_offset := M.copy (| γ1_1 |) in
                                M.match_operator (|
                                  None,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.path
                                            "revm_context_interface::journaled_state::AccountLoad"
                                        ],
                                      M.get_trait_method (|
                                        "revm_context_interface::host::Host",
                                        H,
                                        [],
                                        [],
                                        "load_account_delegated",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| host |) |)
                                        |);
                                        M.read (| to |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let account_load := M.copy (| γ0_0 |) in
                                        M.match_operator (|
                                          None,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "u64" ],
                                              M.get_function (|
                                                "revm_interpreter::instructions::contract::call_helpers::calc_call_gas",
                                                [],
                                                [ WIRE ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| interpreter |) |)
                                                |);
                                                M.read (| account_load |);
                                                M.read (| has_transfer |);
                                                M.read (| local_gas_limit |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let gas_limit := M.copy (| γ0_0 |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "revm_interpreter::gas::Gas",
                                                                      "record_cost",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "revm_interpreter::gas::Gas"
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::LoopControl",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "Control",
                                                                              [],
                                                                              [],
                                                                              "gas",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "control"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.read (| gas_limit |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.tuple [],
                                                                      M.get_trait_method (|
                                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                                        Ty.associated_in_trait
                                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                          []
                                                                          []
                                                                          WIRE
                                                                          "Control",
                                                                        [],
                                                                        [],
                                                                        "set_instruction_result",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (|
                                                                                interpreter
                                                                              |)
                                                                            |),
                                                                            "revm_interpreter::interpreter::Interpreter",
                                                                            "control"
                                                                          |)
                                                                        |);
                                                                        Value.StructTuple
                                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.return_ (| Value.Tuple [] |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ := M.use has_transfer in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.alloc (|
                                                              M.write (|
                                                                gas_limit,
                                                                M.call_closure (|
                                                                  Ty.path "u64",
                                                                  M.get_associated_function (|
                                                                    Ty.path "u64",
                                                                    "saturating_add",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| gas_limit |);
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "revm_interpreter::gas::constants::CALL_STIPEND",
                                                                        Ty.path "u64"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated_in_trait
                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                          []
                                                          []
                                                          WIRE
                                                          "Control",
                                                        [],
                                                        [],
                                                        "set_next_action",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| interpreter |) |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::interpreter_action::InterpreterAction::NewFrame"
                                                          [
                                                            Value.StructTuple
                                                              "revm_interpreter::interpreter_action::FrameInput::Call"
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.StructRecord
                                                                      "revm_interpreter::interpreter_action::call_inputs::CallInputs"
                                                                      [
                                                                        ("input",
                                                                          M.read (| input |));
                                                                        ("gas_limit",
                                                                          M.read (| gas_limit |));
                                                                        ("target_address",
                                                                          M.read (| to |));
                                                                        ("caller",
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "alloy_primitives::bits::address::Address",
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::InputsTrait",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "Input",
                                                                              [],
                                                                              [],
                                                                              "target_address",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "input"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |));
                                                                        ("bytecode_address",
                                                                          M.read (| to |));
                                                                        ("value",
                                                                          Value.StructTuple
                                                                            "revm_interpreter::interpreter_action::call_inputs::CallValue::Transfer"
                                                                            [ M.read (| value |) ]);
                                                                        ("scheme",
                                                                          Value.StructTuple
                                                                            "revm_interpreter::interpreter_action::call_inputs::CallScheme::Call"
                                                                            []);
                                                                        ("is_static",
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::RuntimeFlag",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "RuntimeFlag",
                                                                              [],
                                                                              [],
                                                                              "is_static",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "runtime_flag"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |));
                                                                        ("is_eof",
                                                                          Value.Bool false);
                                                                        ("return_memory_offset",
                                                                          M.read (|
                                                                            return_memory_offset
                                                                          |))
                                                                      ]
                                                                  ]
                                                                |)
                                                              ]
                                                          ];
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::CallOrCreate"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_call :
      M.IsFunction.C "revm_interpreter::instructions::contract::call" call.
    Admitted.
    Global Typeclasses Opaque call.
    
    (*
    pub fn call_code<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        popn!([local_gas_limit, to, value], interpreter);
        let to = Address::from_word(B256::from(to));
        // Max gas limit is not possible in real ethereum situation.
        let local_gas_limit = u64::try_from(local_gas_limit).unwrap_or(u64::MAX);
    
        //pop!(interpreter, value);
        let Some((input, return_memory_offset)) = get_memory_input_and_out_ranges(interpreter) else {
            return;
        };
    
        let Some(mut load) = host.load_account_delegated(to) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
        // Set `is_empty` to false as we are not creating this account.
        load.is_empty = false;
        let Some(mut gas_limit) = calc_call_gas(interpreter, load, !value.is_zero(), local_gas_limit)
        else {
            return;
        };
    
        gas!(interpreter, gas_limit);
    
        // Add call stipend if there is value to be transferred.
        if !value.is_zero() {
            gas_limit = gas_limit.saturating_add(gas::CALL_STIPEND);
        }
    
        // Call host to interact with target contract
        interpreter.control.set_next_action(
            InterpreterAction::NewFrame(FrameInput::Call(Box::new(CallInputs {
                input,
                gas_limit,
                target_address: interpreter.input.target_address(),
                caller: interpreter.input.target_address(),
                bytecode_address: to,
                value: CallValue::Transfer(value),
                scheme: CallScheme::CallCode,
                is_static: interpreter.runtime_flag.is_static(),
                is_eof: false,
                return_memory_offset,
            }))),
            InstructionResult::CallOrCreate,
        );
    }
    *)
    Definition call_code (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 3 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 3 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let γ1_2 := M.SubPointer.get_slice_index (| γ0_0, 2 |) in
                        let local_gas_limit := M.copy (| γ1_0 |) in
                        let to := M.copy (| γ1_1 |) in
                        let value := M.copy (| γ1_2 |) in
                        let~ to : Ty.path "alloy_primitives::bits::address::Address" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "alloy_primitives::bits::address::Address",
                              M.get_associated_function (|
                                Ty.path "alloy_primitives::bits::address::Address",
                                "from_word",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [],
                                  M.get_trait_method (|
                                    "core::convert::From",
                                    Ty.apply
                                      (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                    "from",
                                    [],
                                    []
                                  |),
                                  [ M.read (| to |) ]
                                |)
                              ]
                            |)
                          |) in
                        let~ local_gas_limit : Ty.path "u64" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "u64",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "u64";
                                    Ty.apply
                                      (Ty.path "ruint::from::FromUintError")
                                      []
                                      [ Ty.path "u64" ]
                                  ],
                                "unwrap_or",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "u64";
                                      Ty.apply
                                        (Ty.path "ruint::from::FromUintError")
                                        []
                                        [ Ty.path "u64" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::convert::TryFrom",
                                    Ty.path "u64",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                    "try_from",
                                    [],
                                    []
                                  |),
                                  [ M.read (| local_gas_limit |) ]
                                |);
                                M.read (|
                                  get_associated_constant (| Ty.path "u64", "MAX", Ty.path "u64" |)
                                |)
                              ]
                            |)
                          |) in
                        M.match_operator (|
                          None,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "alloy_primitives::bytes_::Bytes";
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ]
                                    ]
                                ],
                              M.get_function (|
                                "revm_interpreter::instructions::contract::call_helpers::get_memory_input_and_out_ranges",
                                [],
                                [ WIRE ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| interpreter |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                let input := M.copy (| γ1_0 |) in
                                let return_memory_offset := M.copy (| γ1_1 |) in
                                M.match_operator (|
                                  None,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.path
                                            "revm_context_interface::journaled_state::AccountLoad"
                                        ],
                                      M.get_trait_method (|
                                        "revm_context_interface::host::Host",
                                        H,
                                        [],
                                        [],
                                        "load_account_delegated",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| host |) |)
                                        |);
                                        M.read (| to |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let load := M.copy (| γ0_0 |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.write (|
                                              M.SubPointer.get_struct_record_field (|
                                                load,
                                                "revm_context_interface::journaled_state::AccountLoad",
                                                "is_empty"
                                              |),
                                              Value.Bool false
                                            |)
                                          |) in
                                        M.match_operator (|
                                          None,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "u64" ],
                                              M.get_function (|
                                                "revm_interpreter::instructions::contract::call_helpers::calc_call_gas",
                                                [],
                                                [ WIRE ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| interpreter |) |)
                                                |);
                                                M.read (| load |);
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "ruint::Uint")
                                                        [
                                                          Value.Integer IntegerKind.Usize 256;
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                        [],
                                                      "is_zero",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, value |) ]
                                                  |)
                                                |);
                                                M.read (| local_gas_limit |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let gas_limit := M.copy (| γ0_0 |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "revm_interpreter::gas::Gas",
                                                                      "record_cost",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "revm_interpreter::gas::Gas"
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::LoopControl",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "Control",
                                                                              [],
                                                                              [],
                                                                              "gas",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "control"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.read (| gas_limit |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.tuple [],
                                                                      M.get_trait_method (|
                                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                                        Ty.associated_in_trait
                                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                          []
                                                                          []
                                                                          WIRE
                                                                          "Control",
                                                                        [],
                                                                        [],
                                                                        "set_instruction_result",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (|
                                                                                interpreter
                                                                              |)
                                                                            |),
                                                                            "revm_interpreter::interpreter::Interpreter",
                                                                            "control"
                                                                          |)
                                                                        |);
                                                                        Value.StructTuple
                                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.return_ (| Value.Tuple [] |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "ruint::Uint")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            256;
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            4
                                                                        ]
                                                                        [],
                                                                      "is_zero",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        value
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.alloc (|
                                                              M.write (|
                                                                gas_limit,
                                                                M.call_closure (|
                                                                  Ty.path "u64",
                                                                  M.get_associated_function (|
                                                                    Ty.path "u64",
                                                                    "saturating_add",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| gas_limit |);
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "revm_interpreter::gas::constants::CALL_STIPEND",
                                                                        Ty.path "u64"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated_in_trait
                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                          []
                                                          []
                                                          WIRE
                                                          "Control",
                                                        [],
                                                        [],
                                                        "set_next_action",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| interpreter |) |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::interpreter_action::InterpreterAction::NewFrame"
                                                          [
                                                            Value.StructTuple
                                                              "revm_interpreter::interpreter_action::FrameInput::Call"
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.StructRecord
                                                                      "revm_interpreter::interpreter_action::call_inputs::CallInputs"
                                                                      [
                                                                        ("input",
                                                                          M.read (| input |));
                                                                        ("gas_limit",
                                                                          M.read (| gas_limit |));
                                                                        ("target_address",
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "alloy_primitives::bits::address::Address",
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::InputsTrait",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "Input",
                                                                              [],
                                                                              [],
                                                                              "target_address",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "input"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |));
                                                                        ("caller",
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "alloy_primitives::bits::address::Address",
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::InputsTrait",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "Input",
                                                                              [],
                                                                              [],
                                                                              "target_address",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "input"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |));
                                                                        ("bytecode_address",
                                                                          M.read (| to |));
                                                                        ("value",
                                                                          Value.StructTuple
                                                                            "revm_interpreter::interpreter_action::call_inputs::CallValue::Transfer"
                                                                            [ M.read (| value |) ]);
                                                                        ("scheme",
                                                                          Value.StructTuple
                                                                            "revm_interpreter::interpreter_action::call_inputs::CallScheme::CallCode"
                                                                            []);
                                                                        ("is_static",
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::RuntimeFlag",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "RuntimeFlag",
                                                                              [],
                                                                              [],
                                                                              "is_static",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "runtime_flag"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |));
                                                                        ("is_eof",
                                                                          Value.Bool false);
                                                                        ("return_memory_offset",
                                                                          M.read (|
                                                                            return_memory_offset
                                                                          |))
                                                                      ]
                                                                  ]
                                                                |)
                                                              ]
                                                          ];
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::CallOrCreate"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_call_code :
      M.IsFunction.C "revm_interpreter::instructions::contract::call_code" call_code.
    Admitted.
    Global Typeclasses Opaque call_code.
    
    (*
    pub fn delegate_call<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        check!(interpreter, HOMESTEAD);
        popn!([local_gas_limit, to], interpreter);
        let to = Address::from_word(B256::from(to));
        // Max gas limit is not possible in real ethereum situation.
        let local_gas_limit = u64::try_from(local_gas_limit).unwrap_or(u64::MAX);
    
        let Some((input, return_memory_offset)) = get_memory_input_and_out_ranges(interpreter) else {
            return;
        };
    
        let Some(mut load) = host.load_account_delegated(to) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
        // Set is_empty to false as we are not creating this account.
        load.is_empty = false;
        let Some(gas_limit) = calc_call_gas(interpreter, load, false, local_gas_limit) else {
            return;
        };
    
        gas!(interpreter, gas_limit);
    
        // Call host to interact with target contract
        interpreter.control.set_next_action(
            InterpreterAction::NewFrame(FrameInput::Call(Box::new(CallInputs {
                input,
                gas_limit,
                target_address: interpreter.input.target_address(),
                caller: interpreter.input.caller_address(),
                bytecode_address: to,
                value: CallValue::Apparent(interpreter.input.call_value()),
                scheme: CallScheme::DelegateCall,
                is_static: interpreter.runtime_flag.is_static(),
                is_eof: false,
                return_memory_offset,
            }))),
            InstructionResult::CallOrCreate,
        );
    }
    *)
    Definition delegate_call (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_specification::hardfork::SpecId",
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated_in_trait
                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                            []
                                            []
                                            WIRE
                                            "RuntimeFlag",
                                          [],
                                          [],
                                          "spec_id",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| interpreter |) |),
                                              "revm_interpreter::interpreter::Interpreter",
                                              "runtime_flag"
                                            |)
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::HOMESTEAD"
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 2 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let local_gas_limit := M.copy (| γ1_0 |) in
                        let to := M.copy (| γ1_1 |) in
                        let~ to : Ty.path "alloy_primitives::bits::address::Address" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "alloy_primitives::bits::address::Address",
                              M.get_associated_function (|
                                Ty.path "alloy_primitives::bits::address::Address",
                                "from_word",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [],
                                  M.get_trait_method (|
                                    "core::convert::From",
                                    Ty.apply
                                      (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                    "from",
                                    [],
                                    []
                                  |),
                                  [ M.read (| to |) ]
                                |)
                              ]
                            |)
                          |) in
                        let~ local_gas_limit : Ty.path "u64" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "u64",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "u64";
                                    Ty.apply
                                      (Ty.path "ruint::from::FromUintError")
                                      []
                                      [ Ty.path "u64" ]
                                  ],
                                "unwrap_or",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "u64";
                                      Ty.apply
                                        (Ty.path "ruint::from::FromUintError")
                                        []
                                        [ Ty.path "u64" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::convert::TryFrom",
                                    Ty.path "u64",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                    "try_from",
                                    [],
                                    []
                                  |),
                                  [ M.read (| local_gas_limit |) ]
                                |);
                                M.read (|
                                  get_associated_constant (| Ty.path "u64", "MAX", Ty.path "u64" |)
                                |)
                              ]
                            |)
                          |) in
                        M.match_operator (|
                          None,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "alloy_primitives::bytes_::Bytes";
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ]
                                    ]
                                ],
                              M.get_function (|
                                "revm_interpreter::instructions::contract::call_helpers::get_memory_input_and_out_ranges",
                                [],
                                [ WIRE ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| interpreter |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                let input := M.copy (| γ1_0 |) in
                                let return_memory_offset := M.copy (| γ1_1 |) in
                                M.match_operator (|
                                  None,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.path
                                            "revm_context_interface::journaled_state::AccountLoad"
                                        ],
                                      M.get_trait_method (|
                                        "revm_context_interface::host::Host",
                                        H,
                                        [],
                                        [],
                                        "load_account_delegated",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| host |) |)
                                        |);
                                        M.read (| to |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let load := M.copy (| γ0_0 |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.write (|
                                              M.SubPointer.get_struct_record_field (|
                                                load,
                                                "revm_context_interface::journaled_state::AccountLoad",
                                                "is_empty"
                                              |),
                                              Value.Bool false
                                            |)
                                          |) in
                                        M.match_operator (|
                                          None,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "u64" ],
                                              M.get_function (|
                                                "revm_interpreter::instructions::contract::call_helpers::calc_call_gas",
                                                [],
                                                [ WIRE ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| interpreter |) |)
                                                |);
                                                M.read (| load |);
                                                Value.Bool false;
                                                M.read (| local_gas_limit |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let gas_limit := M.copy (| γ0_0 |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "revm_interpreter::gas::Gas",
                                                                      "record_cost",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "revm_interpreter::gas::Gas"
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::LoopControl",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "Control",
                                                                              [],
                                                                              [],
                                                                              "gas",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "control"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.read (| gas_limit |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.tuple [],
                                                                      M.get_trait_method (|
                                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                                        Ty.associated_in_trait
                                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                          []
                                                                          []
                                                                          WIRE
                                                                          "Control",
                                                                        [],
                                                                        [],
                                                                        "set_instruction_result",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (|
                                                                                interpreter
                                                                              |)
                                                                            |),
                                                                            "revm_interpreter::interpreter::Interpreter",
                                                                            "control"
                                                                          |)
                                                                        |);
                                                                        Value.StructTuple
                                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.return_ (| Value.Tuple [] |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated_in_trait
                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                          []
                                                          []
                                                          WIRE
                                                          "Control",
                                                        [],
                                                        [],
                                                        "set_next_action",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| interpreter |) |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::interpreter_action::InterpreterAction::NewFrame"
                                                          [
                                                            Value.StructTuple
                                                              "revm_interpreter::interpreter_action::FrameInput::Call"
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.StructRecord
                                                                      "revm_interpreter::interpreter_action::call_inputs::CallInputs"
                                                                      [
                                                                        ("input",
                                                                          M.read (| input |));
                                                                        ("gas_limit",
                                                                          M.read (| gas_limit |));
                                                                        ("target_address",
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "alloy_primitives::bits::address::Address",
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::InputsTrait",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "Input",
                                                                              [],
                                                                              [],
                                                                              "target_address",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "input"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |));
                                                                        ("caller",
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "alloy_primitives::bits::address::Address",
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::InputsTrait",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "Input",
                                                                              [],
                                                                              [],
                                                                              "caller_address",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "input"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |));
                                                                        ("bytecode_address",
                                                                          M.read (| to |));
                                                                        ("value",
                                                                          Value.StructTuple
                                                                            "revm_interpreter::interpreter_action::call_inputs::CallValue::Apparent"
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "ruint::Uint")
                                                                                  [
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      256;
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      4
                                                                                  ]
                                                                                  [],
                                                                                M.get_trait_method (|
                                                                                  "revm_interpreter::interpreter_types::InputsTrait",
                                                                                  Ty.associated_in_trait
                                                                                    "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                    []
                                                                                    []
                                                                                    WIRE
                                                                                    "Input",
                                                                                  [],
                                                                                  [],
                                                                                  "call_value",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          interpreter
                                                                                        |)
                                                                                      |),
                                                                                      "revm_interpreter::interpreter::Interpreter",
                                                                                      "input"
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]);
                                                                        ("scheme",
                                                                          Value.StructTuple
                                                                            "revm_interpreter::interpreter_action::call_inputs::CallScheme::DelegateCall"
                                                                            []);
                                                                        ("is_static",
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::RuntimeFlag",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "RuntimeFlag",
                                                                              [],
                                                                              [],
                                                                              "is_static",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "runtime_flag"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |));
                                                                        ("is_eof",
                                                                          Value.Bool false);
                                                                        ("return_memory_offset",
                                                                          M.read (|
                                                                            return_memory_offset
                                                                          |))
                                                                      ]
                                                                  ]
                                                                |)
                                                              ]
                                                          ];
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::CallOrCreate"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_delegate_call :
      M.IsFunction.C "revm_interpreter::instructions::contract::delegate_call" delegate_call.
    Admitted.
    Global Typeclasses Opaque delegate_call.
    
    (*
    pub fn static_call<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        host: &mut H,
    ) {
        check!(interpreter, BYZANTIUM);
        popn!([local_gas_limit, to], interpreter);
        let to = Address::from_word(B256::from(to));
        // Max gas limit is not possible in real ethereum situation.
        let local_gas_limit = u64::try_from(local_gas_limit).unwrap_or(u64::MAX);
    
        let Some((input, return_memory_offset)) = get_memory_input_and_out_ranges(interpreter) else {
            return;
        };
    
        let Some(mut load) = host.load_account_delegated(to) else {
            interpreter
                .control
                .set_instruction_result(InstructionResult::FatalExternalError);
            return;
        };
        // Set `is_empty` to false as we are not creating this account.
        load.is_empty = false;
        let Some(gas_limit) = calc_call_gas(interpreter, load, false, local_gas_limit) else {
            return;
        };
        gas!(interpreter, gas_limit);
    
        // Call host to interact with target contract
        interpreter.control.set_next_action(
            InterpreterAction::NewFrame(FrameInput::Call(Box::new(CallInputs {
                input,
                gas_limit,
                target_address: to,
                caller: interpreter.input.target_address(),
                bytecode_address: to,
                value: CallValue::Transfer(U256::ZERO),
                scheme: CallScheme::StaticCall,
                is_static: true,
                is_eof: false,
                return_memory_offset,
            }))),
            InstructionResult::CallOrCreate,
        );
    }
    *)
    Definition static_call (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_specification::hardfork::SpecId",
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated_in_trait
                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                            []
                                            []
                                            WIRE
                                            "RuntimeFlag",
                                          [],
                                          [],
                                          "spec_id",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| interpreter |) |),
                                              "revm_interpreter::interpreter::Interpreter",
                                              "runtime_flag"
                                            |)
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::BYZANTIUM"
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 2 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let local_gas_limit := M.copy (| γ1_0 |) in
                        let to := M.copy (| γ1_1 |) in
                        let~ to : Ty.path "alloy_primitives::bits::address::Address" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "alloy_primitives::bits::address::Address",
                              M.get_associated_function (|
                                Ty.path "alloy_primitives::bits::address::Address",
                                "from_word",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [],
                                  M.get_trait_method (|
                                    "core::convert::From",
                                    Ty.apply
                                      (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                    "from",
                                    [],
                                    []
                                  |),
                                  [ M.read (| to |) ]
                                |)
                              ]
                            |)
                          |) in
                        let~ local_gas_limit : Ty.path "u64" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "u64",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "u64";
                                    Ty.apply
                                      (Ty.path "ruint::from::FromUintError")
                                      []
                                      [ Ty.path "u64" ]
                                  ],
                                "unwrap_or",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "u64";
                                      Ty.apply
                                        (Ty.path "ruint::from::FromUintError")
                                        []
                                        [ Ty.path "u64" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::convert::TryFrom",
                                    Ty.path "u64",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                    "try_from",
                                    [],
                                    []
                                  |),
                                  [ M.read (| local_gas_limit |) ]
                                |);
                                M.read (|
                                  get_associated_constant (| Ty.path "u64", "MAX", Ty.path "u64" |)
                                |)
                              ]
                            |)
                          |) in
                        M.match_operator (|
                          None,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "alloy_primitives::bytes_::Bytes";
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ]
                                    ]
                                ],
                              M.get_function (|
                                "revm_interpreter::instructions::contract::call_helpers::get_memory_input_and_out_ranges",
                                [],
                                [ WIRE ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| interpreter |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                let input := M.copy (| γ1_0 |) in
                                let return_memory_offset := M.copy (| γ1_1 |) in
                                M.match_operator (|
                                  None,
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.path
                                            "revm_context_interface::journaled_state::AccountLoad"
                                        ],
                                      M.get_trait_method (|
                                        "revm_context_interface::host::Host",
                                        H,
                                        [],
                                        [],
                                        "load_account_delegated",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| host |) |)
                                        |);
                                        M.read (| to |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let load := M.copy (| γ0_0 |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.write (|
                                              M.SubPointer.get_struct_record_field (|
                                                load,
                                                "revm_context_interface::journaled_state::AccountLoad",
                                                "is_empty"
                                              |),
                                              Value.Bool false
                                            |)
                                          |) in
                                        M.match_operator (|
                                          None,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "u64" ],
                                              M.get_function (|
                                                "revm_interpreter::instructions::contract::call_helpers::calc_call_gas",
                                                [],
                                                [ WIRE ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| interpreter |) |)
                                                |);
                                                M.read (| load |);
                                                Value.Bool false;
                                                M.read (| local_gas_limit |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let gas_limit := M.copy (| γ0_0 |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "revm_interpreter::gas::Gas",
                                                                      "record_cost",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "revm_interpreter::gas::Gas"
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::LoopControl",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "Control",
                                                                              [],
                                                                              [],
                                                                              "gas",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "control"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.read (| gas_limit |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.tuple [],
                                                                      M.get_trait_method (|
                                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                                        Ty.associated_in_trait
                                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                          []
                                                                          []
                                                                          WIRE
                                                                          "Control",
                                                                        [],
                                                                        [],
                                                                        "set_instruction_result",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (|
                                                                                interpreter
                                                                              |)
                                                                            |),
                                                                            "revm_interpreter::interpreter::Interpreter",
                                                                            "control"
                                                                          |)
                                                                        |);
                                                                        Value.StructTuple
                                                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.return_ (| Value.Tuple [] |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "revm_interpreter::interpreter_types::LoopControl",
                                                        Ty.associated_in_trait
                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                          []
                                                          []
                                                          WIRE
                                                          "Control",
                                                        [],
                                                        [],
                                                        "set_next_action",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| interpreter |) |),
                                                            "revm_interpreter::interpreter::Interpreter",
                                                            "control"
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "revm_interpreter::interpreter_action::InterpreterAction::NewFrame"
                                                          [
                                                            Value.StructTuple
                                                              "revm_interpreter::interpreter_action::FrameInput::Call"
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "revm_interpreter::interpreter_action::call_inputs::CallInputs";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    Value.StructRecord
                                                                      "revm_interpreter::interpreter_action::call_inputs::CallInputs"
                                                                      [
                                                                        ("input",
                                                                          M.read (| input |));
                                                                        ("gas_limit",
                                                                          M.read (| gas_limit |));
                                                                        ("target_address",
                                                                          M.read (| to |));
                                                                        ("caller",
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "alloy_primitives::bits::address::Address",
                                                                            M.get_trait_method (|
                                                                              "revm_interpreter::interpreter_types::InputsTrait",
                                                                              Ty.associated_in_trait
                                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                                []
                                                                                []
                                                                                WIRE
                                                                                "Input",
                                                                              [],
                                                                              [],
                                                                              "target_address",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      interpreter
                                                                                    |)
                                                                                  |),
                                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                                  "input"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |));
                                                                        ("bytecode_address",
                                                                          M.read (| to |));
                                                                        ("value",
                                                                          Value.StructTuple
                                                                            "revm_interpreter::interpreter_action::call_inputs::CallValue::Transfer"
                                                                            [
                                                                              M.read (|
                                                                                get_associated_constant (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "ruint::Uint")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        256;
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        4
                                                                                    ]
                                                                                    [],
                                                                                  "ZERO",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "ruint::Uint")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        256;
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        4
                                                                                    ]
                                                                                    []
                                                                                |)
                                                                              |)
                                                                            ]);
                                                                        ("scheme",
                                                                          Value.StructTuple
                                                                            "revm_interpreter::interpreter_action::call_inputs::CallScheme::StaticCall"
                                                                            []);
                                                                        ("is_static",
                                                                          Value.Bool true);
                                                                        ("is_eof",
                                                                          Value.Bool false);
                                                                        ("return_memory_offset",
                                                                          M.read (|
                                                                            return_memory_offset
                                                                          |))
                                                                      ]
                                                                  ]
                                                                |)
                                                              ]
                                                          ];
                                                        Value.StructTuple
                                                          "revm_interpreter::instruction_result::InstructionResult::CallOrCreate"
                                                          []
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_static_call :
      M.IsFunction.C "revm_interpreter::instructions::contract::static_call" static_call.
    Admitted.
    Global Typeclasses Opaque static_call.
  End contract.
End instructions.
