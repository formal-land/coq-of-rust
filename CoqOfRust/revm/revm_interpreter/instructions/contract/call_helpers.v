(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module instructions.
  Module contract.
    Module call_helpers.
      (*
      pub fn get_memory_input_and_out_ranges(
          interpreter: &mut Interpreter<impl InterpreterTypes>,
      ) -> Option<(Bytes, Range<usize>)> {
          popn!([in_offset, in_len, out_offset, out_len], interpreter, None);
      
          let in_range = resize_memory(interpreter, in_offset, in_len)?;
      
          let mut input = Bytes::new();
          if !in_range.is_empty() {
              input = Bytes::copy_from_slice(interpreter.memory.slice(in_range).as_ref());
          }
      
          let ret_range = resize_memory(interpreter, out_offset, out_len)?;
          Some((input, ret_range))
      }
      *)
      Definition get_memory_input_and_out_ranges
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [ impl_InterpreterTypes ], [ interpreter ] =>
          ltac:(M.monadic
            (let interpreter := M.alloc (| interpreter |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  M.match_operator (|
                    None,
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  []
                              ]
                          ],
                        M.get_trait_method (|
                          "revm_interpreter::interpreter_types::StackTrait",
                          Ty.associated_in_trait
                            "revm_interpreter::interpreter_types::InterpreterTypes"
                            []
                            []
                            impl_InterpreterTypes
                            "Stack",
                          [],
                          [],
                          "popn",
                          [ Value.Integer IntegerKind.Usize 4 ],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| interpreter |) |),
                              "revm_interpreter::interpreter::Interpreter",
                              "stack"
                            |)
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                          let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                          let γ1_2 := M.SubPointer.get_slice_index (| γ0_0, 2 |) in
                          let γ1_3 := M.SubPointer.get_slice_index (| γ0_0, 3 |) in
                          let in_offset := M.copy (| γ1_0 |) in
                          let in_len := M.copy (| γ1_1 |) in
                          let out_offset := M.copy (| γ1_2 |) in
                          let out_len := M.copy (| γ1_3 |) in
                          let~ in_range :
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] :=
                            M.copy (|
                              M.match_operator (|
                                Some
                                  (Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]),
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "core::convert::Infallible" ];
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                        M.get_function (|
                                          "revm_interpreter::instructions::contract::call_helpers::resize_memory",
                                          [],
                                          [ impl_InterpreterTypes ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| interpreter |) |)
                                          |);
                                          M.read (| in_offset |);
                                          M.read (| in_len |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "alloy_primitives::bytes_::Bytes";
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "alloy_primitives::bytes_::Bytes";
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ]
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "core::convert::Infallible" ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          let~ input : Ty.path "alloy_primitives::bytes_::Bytes" :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "alloy_primitives::bytes_::Bytes",
                                M.get_associated_function (|
                                  Ty.path "alloy_primitives::bytes_::Bytes",
                                  "new",
                                  [],
                                  []
                                |),
                                []
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ],
                                                "is_empty",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, in_range |) ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.write (|
                                          input,
                                          M.call_closure (|
                                            Ty.path "alloy_primitives::bytes_::Bytes",
                                            M.get_associated_function (|
                                              Ty.path "alloy_primitives::bytes_::Bytes",
                                              "copy_from_slice",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::convert::AsRef",
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [ Ty.path "u8" ],
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ]
                                                      ],
                                                      "as_ref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [ Ty.path "u8" ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.associated_in_trait
                                                                "revm_interpreter::interpreter_types::MemoryTrait"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                  []
                                                                  []
                                                                  impl_InterpreterTypes
                                                                  "Memory")
                                                                "{{synthetic}}",
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "revm_interpreter::interpreter_types::MemoryTrait"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                        []
                                                                        []
                                                                        impl_InterpreterTypes
                                                                        "Memory")
                                                                      "{{synthetic}}",
                                                                    M.get_trait_method (|
                                                                      "revm_interpreter::interpreter_types::MemoryTrait",
                                                                      Ty.associated_in_trait
                                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                        []
                                                                        []
                                                                        impl_InterpreterTypes
                                                                        "Memory",
                                                                      [],
                                                                      [],
                                                                      "slice",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| interpreter |)
                                                                          |),
                                                                          "revm_interpreter::interpreter::Interpreter",
                                                                          "memory"
                                                                        |)
                                                                      |);
                                                                      M.read (| in_range |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          let~ ret_range :
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] :=
                            M.copy (|
                              M.match_operator (|
                                Some
                                  (Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]),
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "core::convert::Infallible" ];
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                      [],
                                      [],
                                      "branch",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                        M.get_function (|
                                          "revm_interpreter::instructions::contract::call_helpers::resize_memory",
                                          [],
                                          [ impl_InterpreterTypes ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| interpreter |) |)
                                          |);
                                          M.read (| out_offset |);
                                          M.read (| out_len |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "alloy_primitives::bytes_::Bytes";
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "alloy_primitives::bytes_::Bytes";
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ]
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "core::convert::Infallible" ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::option::Option::Some"
                              [ Value.Tuple [ M.read (| input |); M.read (| ret_range |) ] ]
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_get_memory_input_and_out_ranges :
        M.IsFunction.C
          "revm_interpreter::instructions::contract::call_helpers::get_memory_input_and_out_ranges"
          get_memory_input_and_out_ranges.
      Admitted.
      Global Typeclasses Opaque get_memory_input_and_out_ranges.
      
      (*
      pub fn resize_memory(
          interpreter: &mut Interpreter<impl InterpreterTypes>,
          offset: U256,
          len: U256,
      ) -> Option<Range<usize>> {
          let len = as_usize_or_fail_ret!(interpreter, len, None);
          let offset = if len != 0 {
              let offset = as_usize_or_fail_ret!(interpreter, offset, None);
              resize_memory!(interpreter, offset, len, None);
              offset
          } else {
              usize::MAX //unrealistic value so we are sure it is not used
          };
          Some(offset..offset + len)
      }
      *)
      Definition resize_memory (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ impl_InterpreterTypes ], [ interpreter; offset; len ] =>
          ltac:(M.monadic
            (let interpreter := M.alloc (| interpreter |) in
            let offset := M.alloc (| offset |) in
            let len := M.alloc (| len |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ len : Ty.path "usize" :=
                    M.copy (|
                      M.match_operator (|
                        Some (Ty.path "usize"),
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [ Ty.path "u64" ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [],
                              "as_limbs",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, len |) ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let x := M.copy (| γ |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              BinOp.bit_or
                                                (BinOp.bit_or
                                                  (BinOp.bit_or
                                                    (BinOp.gt (|
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| x |) |),
                                                          Value.Integer IntegerKind.Usize 0
                                                        |)
                                                      |),
                                                      M.cast
                                                        (Ty.path "u64")
                                                        (M.read (|
                                                          get_associated_constant (|
                                                            Ty.path "usize",
                                                            "MAX",
                                                            Ty.path "usize"
                                                          |)
                                                        |))
                                                    |))
                                                    (BinOp.ne (|
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| x |) |),
                                                          Value.Integer IntegerKind.Usize 1
                                                        |)
                                                      |),
                                                      Value.Integer IntegerKind.U64 0
                                                    |)))
                                                  (BinOp.ne (|
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| x |) |),
                                                        Value.Integer IntegerKind.Usize 2
                                                      |)
                                                    |),
                                                    Value.Integer IntegerKind.U64 0
                                                  |)))
                                                (BinOp.ne (|
                                                  M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (| M.read (| x |) |),
                                                      Value.Integer IntegerKind.Usize 3
                                                    |)
                                                  |),
                                                  Value.Integer IntegerKind.U64 0
                                                |))
                                            |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "revm_interpreter::interpreter_types::LoopControl",
                                                      Ty.associated_in_trait
                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                        []
                                                        []
                                                        impl_InterpreterTypes
                                                        "Control",
                                                      [],
                                                      [],
                                                      "set_instruction_result",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| interpreter |) |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "control"
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "revm_interpreter::instruction_result::InstructionResult::InvalidOperandOOG"
                                                        []
                                                    ]
                                                  |)
                                                |) in
                                              M.return_ (|
                                                Value.StructTuple "core::option::Option::None" []
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (|
                                M.cast
                                  (Ty.path "usize")
                                  (M.read (|
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| x |) |),
                                      Value.Integer IntegerKind.Usize 0
                                    |)
                                  |))
                              |)))
                        ]
                      |)
                    |) in
                  let~ offset : Ty.path "usize" :=
                    M.copy (|
                      M.match_operator (|
                        Some (Ty.path "usize"),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.ne (|
                                      M.read (| len |),
                                      Value.Integer IntegerKind.Usize 0
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let~ offset : Ty.path "usize" :=
                                M.copy (|
                                  M.match_operator (|
                                    Some (Ty.path "usize"),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [ Ty.path "u64" ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          "as_limbs",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, offset |) ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let x := M.copy (| γ |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Some (Ty.tuple []),
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          BinOp.bit_or
                                                            (BinOp.bit_or
                                                              (BinOp.bit_or
                                                                (BinOp.gt (|
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.deref (| M.read (| x |) |),
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        0
                                                                    |)
                                                                  |),
                                                                  M.cast
                                                                    (Ty.path "u64")
                                                                    (M.read (|
                                                                      get_associated_constant (|
                                                                        Ty.path "usize",
                                                                        "MAX",
                                                                        Ty.path "usize"
                                                                      |)
                                                                    |))
                                                                |))
                                                                (BinOp.ne (|
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.deref (| M.read (| x |) |),
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    |)
                                                                  |),
                                                                  Value.Integer IntegerKind.U64 0
                                                                |)))
                                                              (BinOp.ne (|
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.deref (| M.read (| x |) |),
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  |)
                                                                |),
                                                                Value.Integer IntegerKind.U64 0
                                                              |)))
                                                            (BinOp.ne (|
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.deref (| M.read (| x |) |),
                                                                  Value.Integer IntegerKind.Usize 3
                                                                |)
                                                              |),
                                                              Value.Integer IntegerKind.U64 0
                                                            |))
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.tuple [],
                                                                M.get_trait_method (|
                                                                  "revm_interpreter::interpreter_types::LoopControl",
                                                                  Ty.associated_in_trait
                                                                    "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                    []
                                                                    []
                                                                    impl_InterpreterTypes
                                                                    "Control",
                                                                  [],
                                                                  [],
                                                                  "set_instruction_result",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| interpreter |)
                                                                      |),
                                                                      "revm_interpreter::interpreter::Interpreter",
                                                                      "control"
                                                                    |)
                                                                  |);
                                                                  Value.StructTuple
                                                                    "revm_interpreter::instruction_result::InstructionResult::InvalidOperandOOG"
                                                                    []
                                                                ]
                                                              |)
                                                            |) in
                                                          M.return_ (|
                                                            Value.StructTuple
                                                              "core::option::Option::None"
                                                              []
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          M.alloc (|
                                            M.cast
                                              (Ty.path "usize")
                                              (M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| x |) |),
                                                  Value.Integer IntegerKind.Usize 0
                                                |)
                                              |))
                                          |)))
                                    ]
                                  |)
                                |) in
                              let~ words_num : Ty.path "usize" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_function (|
                                      "revm_interpreter::interpreter::shared_memory::num_words",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.path "usize",
                                          "saturating_add",
                                          [],
                                          []
                                        |),
                                        [ M.read (| offset |); M.read (| len |) ]
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.path "revm_interpreter::gas::MemoryExtensionResult",
                                      M.get_associated_function (|
                                        Ty.path "revm_interpreter::gas::Gas",
                                        "record_memory_expansion",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.path "revm_interpreter::gas::Gas" ],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  impl_InterpreterTypes
                                                  "Control",
                                                [],
                                                [],
                                                "gas",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.read (| words_num |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "revm_interpreter::gas::MemoryExtensionResult::Extended"
                                          |) in
                                        let~ _ : Ty.path "bool" :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::MemoryTrait",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  impl_InterpreterTypes
                                                  "Memory",
                                                [],
                                                [],
                                                "resize",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "memory"
                                                  |)
                                                |);
                                                BinOp.Wrap.mul (|
                                                  M.read (| words_num |),
                                                  Value.Integer IntegerKind.Usize 32
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "revm_interpreter::gas::MemoryExtensionResult::OutOfGas"
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "revm_interpreter::interpreter_types::LoopControl",
                                                      Ty.associated_in_trait
                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                        []
                                                        []
                                                        impl_InterpreterTypes
                                                        "Control",
                                                      [],
                                                      [],
                                                      "set_instruction_result",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| interpreter |) |),
                                                          "revm_interpreter::interpreter::Interpreter",
                                                          "control"
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "revm_interpreter::instruction_result::InstructionResult::MemoryOOG"
                                                        []
                                                    ]
                                                  |)
                                                |) in
                                              M.return_ (|
                                                Value.StructTuple "core::option::Option::None" []
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "revm_interpreter::gas::MemoryExtensionResult::Same"
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              offset));
                          fun γ =>
                            ltac:(M.monadic
                              (get_associated_constant (|
                                Ty.path "usize",
                                "MAX",
                                Ty.path "usize"
                              |)))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::option::Option::Some"
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          [
                            ("start", M.read (| offset |));
                            ("end_", BinOp.Wrap.add (| M.read (| offset |), M.read (| len |) |))
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_resize_memory :
        M.IsFunction.C
          "revm_interpreter::instructions::contract::call_helpers::resize_memory"
          resize_memory.
      Admitted.
      Global Typeclasses Opaque resize_memory.
      
      (*
      pub fn calc_call_gas(
          interpreter: &mut Interpreter<impl InterpreterTypes>,
          account_load: AccountLoad,
          has_transfer: bool,
          local_gas_limit: u64,
      ) -> Option<u64> {
          let call_cost = gas::call_cost(
              interpreter.runtime_flag.spec_id(),
              has_transfer,
              account_load,
          );
          gas!(interpreter, call_cost, None);
      
          // EIP-150: Gas cost changes for IO-heavy operations
          let gas_limit = if interpreter.runtime_flag.spec_id().is_enabled_in(TANGERINE) {
              // Take l64 part of gas_limit
              min(
                  interpreter.control.gas().remaining_63_of_64_parts(),
                  local_gas_limit,
              )
          } else {
              local_gas_limit
          };
      
          Some(gas_limit)
      }
      *)
      Definition calc_call_gas (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [],
            [ impl_InterpreterTypes ],
            [ interpreter; account_load; has_transfer; local_gas_limit ] =>
          ltac:(M.monadic
            (let interpreter := M.alloc (| interpreter |) in
            let account_load := M.alloc (| account_load |) in
            let has_transfer := M.alloc (| has_transfer |) in
            let local_gas_limit := M.alloc (| local_gas_limit |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ call_cost : Ty.path "u64" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_function (| "revm_interpreter::gas::calc::call_cost", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "revm_specification::hardfork::SpecId",
                            M.get_trait_method (|
                              "revm_interpreter::interpreter_types::RuntimeFlag",
                              Ty.associated_in_trait
                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                []
                                []
                                impl_InterpreterTypes
                                "RuntimeFlag",
                              [],
                              [],
                              "spec_id",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| interpreter |) |),
                                  "revm_interpreter::interpreter::Interpreter",
                                  "runtime_flag"
                                |)
                              |)
                            ]
                          |);
                          M.read (| has_transfer |);
                          M.read (| account_load |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.path "revm_interpreter::gas::Gas",
                                        "record_cost",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.path "revm_interpreter::gas::Gas" ],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  impl_InterpreterTypes
                                                  "Control",
                                                [],
                                                [],
                                                "gas",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.read (| call_cost |)
                                      ]
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::LoopControl",
                                          Ty.associated_in_trait
                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                            []
                                            []
                                            impl_InterpreterTypes
                                            "Control",
                                          [],
                                          [],
                                          "set_instruction_result",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| interpreter |) |),
                                              "revm_interpreter::interpreter::Interpreter",
                                              "control"
                                            |)
                                          |);
                                          Value.StructTuple
                                            "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                            []
                                        ]
                                      |)
                                    |) in
                                  M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ gas_limit : Ty.path "u64" :=
                    M.copy (|
                      M.match_operator (|
                        Some (Ty.path "u64"),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.path "revm_specification::hardfork::SpecId",
                                        "is_enabled_in",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.path "revm_specification::hardfork::SpecId",
                                          M.get_trait_method (|
                                            "revm_interpreter::interpreter_types::RuntimeFlag",
                                            Ty.associated_in_trait
                                              "revm_interpreter::interpreter_types::InterpreterTypes"
                                              []
                                              []
                                              impl_InterpreterTypes
                                              "RuntimeFlag",
                                            [],
                                            [],
                                            "spec_id",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| interpreter |) |),
                                                "revm_interpreter::interpreter::Interpreter",
                                                "runtime_flag"
                                              |)
                                            |)
                                          ]
                                        |);
                                        Value.StructTuple
                                          "revm_specification::hardfork::SpecId::TANGERINE"
                                          []
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "u64",
                                  M.get_function (| "core::cmp::min", [], [ Ty.path "u64" ] |),
                                  [
                                    M.call_closure (|
                                      Ty.path "u64",
                                      M.get_associated_function (|
                                        Ty.path "revm_interpreter::gas::Gas",
                                        "remaining_63_of_64_parts",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.path "revm_interpreter::gas::Gas" ],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  impl_InterpreterTypes
                                                  "Control",
                                                [],
                                                [],
                                                "gas",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.read (| local_gas_limit |)
                                  ]
                                |)
                              |)));
                          fun γ => ltac:(M.monadic local_gas_limit)
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple "core::option::Option::Some" [ M.read (| gas_limit |) ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_calc_call_gas :
        M.IsFunction.C
          "revm_interpreter::instructions::contract::call_helpers::calc_call_gas"
          calc_call_gas.
      Admitted.
      Global Typeclasses Opaque calc_call_gas.
    End call_helpers.
  End contract.
End instructions.
