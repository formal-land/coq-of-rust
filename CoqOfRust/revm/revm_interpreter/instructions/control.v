(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module instructions.
  Module control.
    (*
    pub fn rjump<WIRE: InterpreterTypes, H: ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        require_eof!(interpreter);
        gas!(interpreter, gas::BASE);
        let offset = interpreter.bytecode.read_i16() as isize;
        // In spec it is +3 but pointer is already incremented in
        // `Interpreter::step` so for revm is +2.
        interpreter.bytecode.relative_jump(offset + 2);
    }
    *)
    Definition rjump (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::BASE",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ offset : Ty.path "isize" :=
                  M.alloc (|
                    M.cast
                      (Ty.path "isize")
                      (M.call_closure (|
                        Ty.path "i16",
                        M.get_trait_method (|
                          "revm_interpreter::interpreter_types::Immediates",
                          Ty.associated_in_trait
                            "revm_interpreter::interpreter_types::InterpreterTypes"
                            []
                            []
                            WIRE
                            "Bytecode",
                          [],
                          [],
                          "read_i16",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| interpreter |) |),
                              "revm_interpreter::interpreter::Interpreter",
                              "bytecode"
                            |)
                          |)
                        ]
                      |))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::Jumps",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Bytecode",
                        [],
                        [],
                        "relative_jump",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |);
                        BinOp.Wrap.add (| M.read (| offset |), Value.Integer IntegerKind.Isize 2 |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_rjump :
      M.IsFunction.C "revm_interpreter::instructions::control::rjump" rjump.
    Admitted.
    Global Typeclasses Opaque rjump.
    
    (*
    pub fn rjumpi<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        require_eof!(interpreter);
        gas!(interpreter, gas::CONDITION_JUMP_GAS);
        popn!([condition], interpreter);
        // In spec it is +3 but pointer is already incremented in
        // `Interpreter::step` so for revm is +2.
        let mut offset = 2;
        if !condition.is_zero() {
            offset += interpreter.bytecode.read_i16() as isize;
        }
    
        interpreter.bytecode.relative_jump(offset);
    }
    *)
    Definition rjumpi (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::CONDITION_JUMP_GAS",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let condition := M.copy (| γ1_0 |) in
                        let~ offset : Ty.path "isize" :=
                          M.alloc (| Value.Integer IntegerKind.Isize 2 |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                [],
                                              "is_zero",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, condition |) ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (|
                                      let β := offset in
                                      M.write (|
                                        β,
                                        BinOp.Wrap.add (|
                                          M.read (| β |),
                                          M.cast
                                            (Ty.path "isize")
                                            (M.call_closure (|
                                              Ty.path "i16",
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::Immediates",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Bytecode",
                                                [],
                                                [],
                                                "read_i16",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "bytecode"
                                                  |)
                                                |)
                                              ]
                                            |))
                                        |)
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "revm_interpreter::interpreter_types::Jumps",
                                Ty.associated_in_trait
                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                  []
                                  []
                                  WIRE
                                  "Bytecode",
                                [],
                                [],
                                "relative_jump",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| interpreter |) |),
                                    "revm_interpreter::interpreter::Interpreter",
                                    "bytecode"
                                  |)
                                |);
                                M.read (| offset |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_rjumpi :
      M.IsFunction.C "revm_interpreter::instructions::control::rjumpi" rjumpi.
    Admitted.
    Global Typeclasses Opaque rjumpi.
    
    (*
    pub fn rjumpv<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        require_eof!(interpreter);
        gas!(interpreter, gas::CONDITION_JUMP_GAS);
        popn!([case], interpreter);
        let case = as_isize_saturated!(case);
    
        let max_index = interpreter.bytecode.read_u8() as isize;
        // For number of items we are adding 1 to max_index, multiply by 2 as each offset is 2 bytes
        // and add 1 for max_index itself. Note that revm already incremented the instruction pointer
        let mut offset = (max_index + 1) * 2 + 1;
    
        if case <= max_index {
            offset += interpreter.bytecode.read_offset_i16(1 + case * 2) as isize;
        }
        interpreter.bytecode.relative_jump(offset);
    }
    *)
    Definition rjumpv (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::CONDITION_JUMP_GAS",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let case := M.copy (| γ1_0 |) in
                        let~ case : Ty.path "isize" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "isize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [ Ty.path "isize"; Ty.path "core::num::error::TryFromIntError" ],
                                "unwrap_or",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [ Ty.path "isize"; Ty.path "core::num::error::TryFromIntError"
                                    ],
                                  M.get_trait_method (|
                                    "core::convert::TryFrom",
                                    Ty.path "isize",
                                    [],
                                    [ Ty.path "u64" ],
                                    "try_from",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.match_operator (|
                                        Some (Ty.path "u64"),
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [ Ty.path "u64" ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                [],
                                              "as_limbs",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, case |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| γ |) in
                                              M.match_operator (|
                                                Some (Ty.path "u64"),
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            BinOp.bit_and
                                                              (BinOp.bit_and
                                                                (BinOp.eq (|
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.deref (| M.read (| x |) |),
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    |)
                                                                  |),
                                                                  Value.Integer IntegerKind.U64 0
                                                                |))
                                                                (BinOp.eq (|
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.deref (| M.read (| x |) |),
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        2
                                                                    |)
                                                                  |),
                                                                  Value.Integer IntegerKind.U64 0
                                                                |)))
                                                              (BinOp.eq (|
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.deref (| M.read (| x |) |),
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      3
                                                                  |)
                                                                |),
                                                                Value.Integer IntegerKind.U64 0
                                                              |))
                                                          |)) in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| x |) |),
                                                        Value.Integer IntegerKind.Usize 0
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (get_associated_constant (|
                                                        Ty.path "u64",
                                                        "MAX",
                                                        Ty.path "u64"
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (|
                                  get_associated_constant (|
                                    Ty.path "isize",
                                    "MAX",
                                    Ty.path "isize"
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        let~ max_index : Ty.path "isize" :=
                          M.alloc (|
                            M.cast
                              (Ty.path "isize")
                              (M.call_closure (|
                                Ty.path "u8",
                                M.get_trait_method (|
                                  "revm_interpreter::interpreter_types::Immediates",
                                  Ty.associated_in_trait
                                    "revm_interpreter::interpreter_types::InterpreterTypes"
                                    []
                                    []
                                    WIRE
                                    "Bytecode",
                                  [],
                                  [],
                                  "read_u8",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| interpreter |) |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "bytecode"
                                    |)
                                  |)
                                ]
                              |))
                          |) in
                        let~ offset : Ty.path "isize" :=
                          M.alloc (|
                            BinOp.Wrap.add (|
                              BinOp.Wrap.mul (|
                                BinOp.Wrap.add (|
                                  M.read (| max_index |),
                                  Value.Integer IntegerKind.Isize 1
                                |),
                                Value.Integer IntegerKind.Isize 2
                              |),
                              Value.Integer IntegerKind.Isize 1
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.le (| M.read (| case |), M.read (| max_index |) |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (|
                                      let β := offset in
                                      M.write (|
                                        β,
                                        BinOp.Wrap.add (|
                                          M.read (| β |),
                                          M.cast
                                            (Ty.path "isize")
                                            (M.call_closure (|
                                              Ty.path "i16",
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::Immediates",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Bytecode",
                                                [],
                                                [],
                                                "read_offset_i16",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "bytecode"
                                                  |)
                                                |);
                                                BinOp.Wrap.add (|
                                                  Value.Integer IntegerKind.Isize 1,
                                                  BinOp.Wrap.mul (|
                                                    M.read (| case |),
                                                    Value.Integer IntegerKind.Isize 2
                                                  |)
                                                |)
                                              ]
                                            |))
                                        |)
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "revm_interpreter::interpreter_types::Jumps",
                                Ty.associated_in_trait
                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                  []
                                  []
                                  WIRE
                                  "Bytecode",
                                [],
                                [],
                                "relative_jump",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| interpreter |) |),
                                    "revm_interpreter::interpreter::Interpreter",
                                    "bytecode"
                                  |)
                                |);
                                M.read (| offset |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_rjumpv :
      M.IsFunction.C "revm_interpreter::instructions::control::rjumpv" rjumpv.
    Admitted.
    Global Typeclasses Opaque rjumpv.
    
    (*
    pub fn jump<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::MID);
        popn!([target], interpreter);
        jump_inner(interpreter, target);
    }
    *)
    Definition jump (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::MID",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let target := M.copy (| γ1_0 |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_function (|
                                "revm_interpreter::instructions::control::jump_inner",
                                [],
                                [ WIRE ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| interpreter |) |)
                                |);
                                M.read (| target |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_jump :
      M.IsFunction.C "revm_interpreter::instructions::control::jump" jump.
    Admitted.
    Global Typeclasses Opaque jump.
    
    (*
    pub fn jumpi<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::HIGH);
        popn!([target, cond], interpreter);
    
        if !cond.is_zero() {
            jump_inner(interpreter, target);
        }
    }
    *)
    Definition jumpi (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::HIGH",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 2 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let target := M.copy (| γ1_0 |) in
                        let cond := M.copy (| γ1_1 |) in
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              [],
                                            "is_zero",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, cond |) ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_function (|
                                        "revm_interpreter::instructions::control::jump_inner",
                                        [],
                                        [ WIRE ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| interpreter |) |)
                                        |);
                                        M.read (| target |)
                                      ]
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_jumpi :
      M.IsFunction.C "revm_interpreter::instructions::control::jumpi" jumpi.
    Admitted.
    Global Typeclasses Opaque jumpi.
    
    (*
    fn jump_inner<WIRE: InterpreterTypes>(interpreter: &mut Interpreter<WIRE>, target: U256) {
        let target = as_usize_or_fail!(interpreter, target, InstructionResult::InvalidJump);
        if !interpreter.bytecode.is_valid_legacy_jump(target) {
            interpreter
                .control
                .set_instruction_result(InstructionResult::InvalidJump);
            return;
        }
        // SAFETY: `is_valid_jump` ensures that `dest` is in bounds.
        interpreter.bytecode.absolute_jump(target);
    }
    *)
    Definition jump_inner (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE ], [ interpreter; target ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let target := M.alloc (| target |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ target : Ty.path "usize" :=
                  M.copy (|
                    M.match_operator (|
                      Some (Ty.path "usize"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [ Ty.path "u64" ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            "as_limbs",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, target |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let x := M.copy (| γ |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            BinOp.bit_or
                                              (BinOp.bit_or
                                                (BinOp.bit_or
                                                  (BinOp.gt (|
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| x |) |),
                                                        Value.Integer IntegerKind.Usize 0
                                                      |)
                                                    |),
                                                    M.cast
                                                      (Ty.path "u64")
                                                      (M.read (|
                                                        get_associated_constant (|
                                                          Ty.path "usize",
                                                          "MAX",
                                                          Ty.path "usize"
                                                        |)
                                                      |))
                                                  |))
                                                  (BinOp.ne (|
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| x |) |),
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |),
                                                    Value.Integer IntegerKind.U64 0
                                                  |)))
                                                (BinOp.ne (|
                                                  M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (| M.read (| x |) |),
                                                      Value.Integer IntegerKind.Usize 2
                                                    |)
                                                  |),
                                                  Value.Integer IntegerKind.U64 0
                                                |)))
                                              (BinOp.ne (|
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (| M.read (| x |) |),
                                                    Value.Integer IntegerKind.Usize 3
                                                  |)
                                                |),
                                                Value.Integer IntegerKind.U64 0
                                              |))
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_trait_method (|
                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                    Ty.associated_in_trait
                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                      []
                                                      []
                                                      WIRE
                                                      "Control",
                                                    [],
                                                    [],
                                                    "set_instruction_result",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| interpreter |) |),
                                                        "revm_interpreter::interpreter::Interpreter",
                                                        "control"
                                                      |)
                                                    |);
                                                    Value.StructTuple
                                                      "revm_interpreter::instruction_result::InstructionResult::InvalidJump"
                                                      []
                                                  ]
                                                |)
                                              |) in
                                            M.return_ (| Value.Tuple [] |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (|
                              M.cast
                                (Ty.path "usize")
                                (M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| x |) |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |))
                            |)))
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::Jumps",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "Bytecode",
                                      [],
                                      [],
                                      "is_valid_legacy_jump",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "bytecode"
                                        |)
                                      |);
                                      M.read (| target |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::InvalidJump"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::Jumps",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Bytecode",
                        [],
                        [],
                        "absolute_jump",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |);
                        M.read (| target |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_jump_inner :
      M.IsFunction.C "revm_interpreter::instructions::control::jump_inner" jump_inner.
    Admitted.
    Global Typeclasses Opaque jump_inner.
    
    (*
    pub fn jumpdest_or_nop<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::JUMPDEST);
    }
    *)
    Definition jumpdest_or_nop (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::JUMPDEST",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_jumpdest_or_nop :
      M.IsFunction.C "revm_interpreter::instructions::control::jumpdest_or_nop" jumpdest_or_nop.
    Admitted.
    Global Typeclasses Opaque jumpdest_or_nop.
    
    (*
    pub fn callf<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        require_eof!(interpreter);
        gas!(interpreter, gas::LOW);
    
        let idx = interpreter.bytecode.read_u16() as usize;
    
        // Get target types
        let Some(types) = interpreter.bytecode.code_section_info(idx) else {
            panic!("Invalid EOF in execution, expecting correct intermediate in callf")
        };
    
        // Check max stack height for target code section.
        // Safe to subtract as max_stack_height is always more than inputs.
        if interpreter.stack.len() + (types.max_stack_size - types.inputs as u16) as usize > 1024 {
            interpreter
                .control
                .set_instruction_result(InstructionResult::StackOverflow);
            return;
        }
    
        // Push current idx and PC to the callf stack.
        // PC is incremented by 2 to point to the next instruction after callf.
        if !(interpreter
            .sub_routine
            .push(interpreter.bytecode.pc() + 2, idx))
        {
            interpreter
                .control
                .set_instruction_result(InstructionResult::SubRoutineStackOverflow);
            return;
        };
        let pc = interpreter
            .bytecode
            .code_section_pc(idx)
            .expect("Invalid code section index");
        interpreter.bytecode.absolute_jump(pc);
    }
    *)
    Definition callf (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::LOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ idx : Ty.path "usize" :=
                  M.alloc (|
                    M.cast
                      (Ty.path "usize")
                      (M.call_closure (|
                        Ty.path "u16",
                        M.get_trait_method (|
                          "revm_interpreter::interpreter_types::Immediates",
                          Ty.associated_in_trait
                            "revm_interpreter::interpreter_types::InterpreterTypes"
                            []
                            []
                            WIRE
                            "Bytecode",
                          [],
                          [],
                          "read_u16",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| interpreter |) |),
                              "revm_interpreter::interpreter::Interpreter",
                              "bytecode"
                            |)
                          |)
                        ]
                      |))
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "revm_bytecode::eof::types_section::TypesSection" ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::EofCodeInfo",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Bytecode",
                        [],
                        [],
                        "code_section_info",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |);
                        M.read (| idx |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let types := M.copy (| γ0_0 |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.gt (|
                                          BinOp.Wrap.add (|
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::StackTrait",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Stack",
                                                [],
                                                [],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "stack"
                                                  |)
                                                |)
                                              ]
                                            |),
                                            M.cast
                                              (Ty.path "usize")
                                              (BinOp.Wrap.sub (|
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| types |) |),
                                                    "revm_bytecode::eof::types_section::TypesSection",
                                                    "max_stack_size"
                                                  |)
                                                |),
                                                M.cast
                                                  (Ty.path "u16")
                                                  (M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| types |) |),
                                                      "revm_bytecode::eof::types_section::TypesSection",
                                                      "inputs"
                                                    |)
                                                  |))
                                              |))
                                          |),
                                          Value.Integer IntegerKind.Usize 1024
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Control",
                                                [],
                                                [],
                                                "set_instruction_result",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::SubRoutineStack",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "SubRoutineStack",
                                              [],
                                              [],
                                              "push",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "sub_routine"
                                                |)
                                              |);
                                              BinOp.Wrap.add (|
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_trait_method (|
                                                    "revm_interpreter::interpreter_types::Jumps",
                                                    Ty.associated_in_trait
                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                      []
                                                      []
                                                      WIRE
                                                      "Bytecode",
                                                    [],
                                                    [],
                                                    "pc",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| interpreter |) |),
                                                        "revm_interpreter::interpreter::Interpreter",
                                                        "bytecode"
                                                      |)
                                                    |)
                                                  ]
                                                |),
                                                Value.Integer IntegerKind.Usize 2
                                              |);
                                              M.read (| idx |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::LoopControl",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Control",
                                                [],
                                                [],
                                                "set_instruction_result",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "control"
                                                  |)
                                                |);
                                                Value.StructTuple
                                                  "revm_interpreter::instruction_result::InstructionResult::SubRoutineStackOverflow"
                                                  []
                                              ]
                                            |)
                                          |) in
                                        M.return_ (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ pc : Ty.path "usize" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                "expect",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::EofCodeInfo",
                                    Ty.associated_in_trait
                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                      []
                                      []
                                      WIRE
                                      "Bytecode",
                                    [],
                                    [],
                                    "code_section_pc",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| interpreter |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "bytecode"
                                      |)
                                    |);
                                    M.read (| idx |)
                                  ]
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| mk_str (| "Invalid code section index" |) |)
                                |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "revm_interpreter::interpreter_types::Jumps",
                                Ty.associated_in_trait
                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                  []
                                  []
                                  WIRE
                                  "Bytecode",
                                [],
                                [],
                                "absolute_jump",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| interpreter |) |),
                                    "revm_interpreter::interpreter::Interpreter",
                                    "bytecode"
                                  |)
                                |);
                                M.read (| pc |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_callf :
      M.IsFunction.C "revm_interpreter::instructions::control::callf" callf.
    Admitted.
    Global Typeclasses Opaque callf.
    
    (*
    pub fn retf<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        require_eof!(interpreter);
        gas!(interpreter, gas::RETF_GAS);
    
        let Some(jump) = interpreter.sub_routine.pop() else {
            panic!("Expected function frame")
        };
    
        interpreter.bytecode.absolute_jump(jump);
    }
    *)
    Definition retf (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::RETF_GAS",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::SubRoutineStack",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "SubRoutineStack",
                        [],
                        [],
                        "pop",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "sub_routine"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let jump := M.copy (| γ0_0 |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "revm_interpreter::interpreter_types::Jumps",
                                Ty.associated_in_trait
                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                  []
                                  []
                                  WIRE
                                  "Bytecode",
                                [],
                                [],
                                "absolute_jump",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| interpreter |) |),
                                    "revm_interpreter::interpreter::Interpreter",
                                    "bytecode"
                                  |)
                                |);
                                M.read (| jump |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_retf :
      M.IsFunction.C "revm_interpreter::instructions::control::retf" retf.
    Admitted.
    Global Typeclasses Opaque retf.
    
    (*
    pub fn jumpf<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        require_eof!(interpreter);
        gas!(interpreter, gas::LOW);
    
        let idx = interpreter.bytecode.read_u16() as usize;
    
        // Get target types
        let types = interpreter
            .bytecode
            .code_section_info(idx)
            .expect("Invalid code section index");
    
        // Check max stack height for target code section.
        // Safe to subtract as max_stack_height is always more than inputs.
        if interpreter.stack.len() + (types.max_stack_size - types.inputs as u16) as usize > 1024 {
            interpreter
                .control
                .set_instruction_result(InstructionResult::StackOverflow);
            return;
        }
        interpreter.sub_routine.set_routine_idx(idx);
        let pc = interpreter
            .bytecode
            .code_section_pc(idx)
            .expect("Invalid code section index");
        interpreter.bytecode.absolute_jump(pc);
    }
    *)
    Definition jumpf (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::LOW",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ idx : Ty.path "usize" :=
                  M.alloc (|
                    M.cast
                      (Ty.path "usize")
                      (M.call_closure (|
                        Ty.path "u16",
                        M.get_trait_method (|
                          "revm_interpreter::interpreter_types::Immediates",
                          Ty.associated_in_trait
                            "revm_interpreter::interpreter_types::InterpreterTypes"
                            []
                            []
                            WIRE
                            "Bytecode",
                          [],
                          [],
                          "read_u16",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| interpreter |) |),
                              "revm_interpreter::interpreter::Interpreter",
                              "bytecode"
                            |)
                          |)
                        ]
                      |))
                  |) in
                let~ types :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "revm_bytecode::eof::types_section::TypesSection" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.path "revm_bytecode::eof::types_section::TypesSection" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "revm_bytecode::eof::types_section::TypesSection" ]
                          ],
                        "expect",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "revm_bytecode::eof::types_section::TypesSection" ]
                            ],
                          M.get_trait_method (|
                            "revm_interpreter::interpreter_types::EofCodeInfo",
                            Ty.associated_in_trait
                              "revm_interpreter::interpreter_types::InterpreterTypes"
                              []
                              []
                              WIRE
                              "Bytecode",
                            [],
                            [],
                            "code_section_info",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| interpreter |) |),
                                "revm_interpreter::interpreter::Interpreter",
                                "bytecode"
                              |)
                            |);
                            M.read (| idx |)
                          ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "Invalid code section index" |) |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.gt (|
                                  BinOp.Wrap.add (|
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::StackTrait",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Stack",
                                        [],
                                        [],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "stack"
                                          |)
                                        |)
                                      ]
                                    |),
                                    M.cast
                                      (Ty.path "usize")
                                      (BinOp.Wrap.sub (|
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| types |) |),
                                            "revm_bytecode::eof::types_section::TypesSection",
                                            "max_stack_size"
                                          |)
                                        |),
                                        M.cast
                                          (Ty.path "u16")
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| types |) |),
                                              "revm_bytecode::eof::types_section::TypesSection",
                                              "inputs"
                                            |)
                                          |))
                                      |))
                                  |),
                                  Value.Integer IntegerKind.Usize 1024
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::SubRoutineStack",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "SubRoutineStack",
                        [],
                        [],
                        "set_routine_idx",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "sub_routine"
                          |)
                        |);
                        M.read (| idx |)
                      ]
                    |)
                  |) in
                let~ pc : Ty.path "usize" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                        "expect",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "revm_interpreter::interpreter_types::EofCodeInfo",
                            Ty.associated_in_trait
                              "revm_interpreter::interpreter_types::InterpreterTypes"
                              []
                              []
                              WIRE
                              "Bytecode",
                            [],
                            [],
                            "code_section_pc",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| interpreter |) |),
                                "revm_interpreter::interpreter::Interpreter",
                                "bytecode"
                              |)
                            |);
                            M.read (| idx |)
                          ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "Invalid code section index" |) |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::Jumps",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Bytecode",
                        [],
                        [],
                        "absolute_jump",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |);
                        M.read (| pc |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_jumpf :
      M.IsFunction.C "revm_interpreter::instructions::control::jumpf" jumpf.
    Admitted.
    Global Typeclasses Opaque jumpf.
    
    (*
    pub fn pc<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::BASE);
        // - 1 because we have already advanced the instruction pointer in `Interpreter::step`
        push!(interpreter, U256::from(interpreter.bytecode.pc() - 1));
    }
    *)
    Definition pc (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "revm_interpreter::gas::constants::BASE",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "Stack",
                                      [],
                                      [],
                                      "push",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "stack"
                                        |)
                                      |);
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          "from",
                                          [],
                                          [ Ty.path "usize" ]
                                        |),
                                        [
                                          BinOp.Wrap.sub (|
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_trait_method (|
                                                "revm_interpreter::interpreter_types::Jumps",
                                                Ty.associated_in_trait
                                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                                  []
                                                  []
                                                  WIRE
                                                  "Bytecode",
                                                [],
                                                [],
                                                "pc",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| interpreter |) |),
                                                    "revm_interpreter::interpreter::Interpreter",
                                                    "bytecode"
                                                  |)
                                                |)
                                              ]
                                            |),
                                            Value.Integer IntegerKind.Usize 1
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_pc :
      M.IsFunction.C "revm_interpreter::instructions::control::pc" pc.
    Admitted.
    Global Typeclasses Opaque pc.
    
    (*
    fn return_inner(
        interpreter: &mut Interpreter<impl InterpreterTypes>,
        instruction_result: InstructionResult,
    ) {
        // Zero gas cost
        // gas!(interpreter, gas::ZERO)
        popn!([offset, len], interpreter);
        let len = as_usize_or_fail!(interpreter, len);
        // Important: Offset must be ignored if len is zeros
        let mut output = Bytes::default();
        if len != 0 {
            let offset = as_usize_or_fail!(interpreter, offset);
            resize_memory!(interpreter, offset, len);
            output = interpreter.memory.slice_len(offset, len).to_vec().into()
        }
    
        let gas = *interpreter.control.gas();
        interpreter.control.set_next_action(
            InterpreterAction::Return {
                result: InterpreterResult {
                    output,
                    gas,
                    result: instruction_result,
                },
            },
            instruction_result,
        );
    }
    *)
    Definition return_inner (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ impl_InterpreterTypes ], [ interpreter; instruction_result ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let instruction_result := M.alloc (| instruction_result |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          impl_InterpreterTypes
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 2 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_slice_index (| γ0_0, 1 |) in
                        let offset := M.copy (| γ1_0 |) in
                        let len := M.copy (| γ1_1 |) in
                        let~ len : Ty.path "usize" :=
                          M.copy (|
                            M.match_operator (|
                              Some (Ty.path "usize"),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [ Ty.path "u64" ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    "as_limbs",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, len |) ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let x := M.copy (| γ |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Some (Ty.tuple []),
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    BinOp.bit_or
                                                      (BinOp.bit_or
                                                        (BinOp.bit_or
                                                          (BinOp.gt (|
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (| M.read (| x |) |),
                                                                Value.Integer IntegerKind.Usize 0
                                                              |)
                                                            |),
                                                            M.cast
                                                              (Ty.path "u64")
                                                              (M.read (|
                                                                get_associated_constant (|
                                                                  Ty.path "usize",
                                                                  "MAX",
                                                                  Ty.path "usize"
                                                                |)
                                                              |))
                                                          |))
                                                          (BinOp.ne (|
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (| M.read (| x |) |),
                                                                Value.Integer IntegerKind.Usize 1
                                                              |)
                                                            |),
                                                            Value.Integer IntegerKind.U64 0
                                                          |)))
                                                        (BinOp.ne (|
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (| M.read (| x |) |),
                                                              Value.Integer IntegerKind.Usize 2
                                                            |)
                                                          |),
                                                          Value.Integer IntegerKind.U64 0
                                                        |)))
                                                      (BinOp.ne (|
                                                        M.read (|
                                                          M.SubPointer.get_array_field (|
                                                            M.deref (| M.read (| x |) |),
                                                            Value.Integer IntegerKind.Usize 3
                                                          |)
                                                        |),
                                                        Value.Integer IntegerKind.U64 0
                                                      |))
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.tuple [],
                                                          M.get_trait_method (|
                                                            "revm_interpreter::interpreter_types::LoopControl",
                                                            Ty.associated_in_trait
                                                              "revm_interpreter::interpreter_types::InterpreterTypes"
                                                              []
                                                              []
                                                              impl_InterpreterTypes
                                                              "Control",
                                                            [],
                                                            [],
                                                            "set_instruction_result",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (|
                                                                  M.read (| interpreter |)
                                                                |),
                                                                "revm_interpreter::interpreter::Interpreter",
                                                                "control"
                                                              |)
                                                            |);
                                                            Value.StructTuple
                                                              "revm_interpreter::instruction_result::InstructionResult::InvalidOperandOOG"
                                                              []
                                                          ]
                                                        |)
                                                      |) in
                                                    M.return_ (| Value.Tuple [] |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (|
                                      M.cast
                                        (Ty.path "usize")
                                        (M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.deref (| M.read (| x |) |),
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |))
                                    |)))
                              ]
                            |)
                          |) in
                        let~ output : Ty.path "alloy_primitives::bytes_::Bytes" :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "alloy_primitives::bytes_::Bytes",
                              M.get_trait_method (|
                                "core::default::Default",
                                Ty.path "alloy_primitives::bytes_::Bytes",
                                [],
                                [],
                                "default",
                                [],
                                []
                              |),
                              []
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.ne (|
                                          M.read (| len |),
                                          Value.Integer IntegerKind.Usize 0
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ offset : Ty.path "usize" :=
                                    M.copy (|
                                      M.match_operator (|
                                        Some (Ty.path "usize"),
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [ Ty.path "u64" ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                [],
                                              "as_limbs",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, offset |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| γ |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Some (Ty.tuple []),
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              BinOp.bit_or
                                                                (BinOp.bit_or
                                                                  (BinOp.bit_or
                                                                    (BinOp.gt (|
                                                                      M.read (|
                                                                        M.SubPointer.get_array_field (|
                                                                          M.deref (|
                                                                            M.read (| x |)
                                                                          |),
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            0
                                                                        |)
                                                                      |),
                                                                      M.cast
                                                                        (Ty.path "u64")
                                                                        (M.read (|
                                                                          get_associated_constant (|
                                                                            Ty.path "usize",
                                                                            "MAX",
                                                                            Ty.path "usize"
                                                                          |)
                                                                        |))
                                                                    |))
                                                                    (BinOp.ne (|
                                                                      M.read (|
                                                                        M.SubPointer.get_array_field (|
                                                                          M.deref (|
                                                                            M.read (| x |)
                                                                          |),
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        |)
                                                                      |),
                                                                      Value.Integer
                                                                        IntegerKind.U64
                                                                        0
                                                                    |)))
                                                                  (BinOp.ne (|
                                                                    M.read (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| x |)
                                                                        |),
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          2
                                                                      |)
                                                                    |),
                                                                    Value.Integer IntegerKind.U64 0
                                                                  |)))
                                                                (BinOp.ne (|
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.deref (| M.read (| x |) |),
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        3
                                                                    |)
                                                                  |),
                                                                  Value.Integer IntegerKind.U64 0
                                                                |))
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let~ _ : Ty.tuple [] :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.tuple [],
                                                                    M.get_trait_method (|
                                                                      "revm_interpreter::interpreter_types::LoopControl",
                                                                      Ty.associated_in_trait
                                                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                        []
                                                                        []
                                                                        impl_InterpreterTypes
                                                                        "Control",
                                                                      [],
                                                                      [],
                                                                      "set_instruction_result",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| interpreter |)
                                                                          |),
                                                                          "revm_interpreter::interpreter::Interpreter",
                                                                          "control"
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "revm_interpreter::instruction_result::InstructionResult::InvalidOperandOOG"
                                                                        []
                                                                    ]
                                                                  |)
                                                                |) in
                                                              M.return_ (| Value.Tuple [] |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |) in
                                              M.alloc (|
                                                M.cast
                                                  (Ty.path "usize")
                                                  (M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (| M.read (| x |) |),
                                                      Value.Integer IntegerKind.Usize 0
                                                    |)
                                                  |))
                                              |)))
                                        ]
                                      |)
                                    |) in
                                  let~ words_num : Ty.path "usize" :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_function (|
                                          "revm_interpreter::interpreter::shared_memory::num_words",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.path "usize",
                                              "saturating_add",
                                              [],
                                              []
                                            |),
                                            [ M.read (| offset |); M.read (| len |) ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Some (Ty.tuple []),
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "revm_interpreter::gas::MemoryExtensionResult",
                                          M.get_associated_function (|
                                            Ty.path "revm_interpreter::gas::Gas",
                                            "record_memory_expansion",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [ Ty.path "revm_interpreter::gas::Gas" ],
                                                  M.get_trait_method (|
                                                    "revm_interpreter::interpreter_types::LoopControl",
                                                    Ty.associated_in_trait
                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                      []
                                                      []
                                                      impl_InterpreterTypes
                                                      "Control",
                                                    [],
                                                    [],
                                                    "gas",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| interpreter |) |),
                                                        "revm_interpreter::interpreter::Interpreter",
                                                        "control"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.read (| words_num |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "revm_interpreter::gas::MemoryExtensionResult::Extended"
                                              |) in
                                            let~ _ : Ty.path "bool" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_trait_method (|
                                                    "revm_interpreter::interpreter_types::MemoryTrait",
                                                    Ty.associated_in_trait
                                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                                      []
                                                      []
                                                      impl_InterpreterTypes
                                                      "Memory",
                                                    [],
                                                    [],
                                                    "resize",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| interpreter |) |),
                                                        "revm_interpreter::interpreter::Interpreter",
                                                        "memory"
                                                      |)
                                                    |);
                                                    BinOp.Wrap.mul (|
                                                      M.read (| words_num |),
                                                      Value.Integer IntegerKind.Usize 32
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "revm_interpreter::gas::MemoryExtensionResult::OutOfGas"
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.read (|
                                                  let~ _ : Ty.tuple [] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_trait_method (|
                                                          "revm_interpreter::interpreter_types::LoopControl",
                                                          Ty.associated_in_trait
                                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                                            []
                                                            []
                                                            impl_InterpreterTypes
                                                            "Control",
                                                          [],
                                                          [],
                                                          "set_instruction_result",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (|
                                                                M.read (| interpreter |)
                                                              |),
                                                              "revm_interpreter::interpreter::Interpreter",
                                                              "control"
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "revm_interpreter::instruction_result::InstructionResult::MemoryOOG"
                                                            []
                                                        ]
                                                      |)
                                                    |) in
                                                  M.return_ (| Value.Tuple [] |)
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "revm_interpreter::gas::MemoryExtensionResult::Same"
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (|
                                    M.write (|
                                      output,
                                      M.call_closure (|
                                        Ty.path "alloy_primitives::bytes_::Bytes",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                          [],
                                          [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                              "to_vec",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.associated_in_trait
                                                        "revm_interpreter::interpreter_types::MemoryTrait"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                                          []
                                                          []
                                                          impl_InterpreterTypes
                                                          "Memory")
                                                        "{{synthetic}}'1",
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "revm_interpreter::interpreter_types::MemoryTrait"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                []
                                                                []
                                                                impl_InterpreterTypes
                                                                "Memory")
                                                              "{{synthetic}}'1",
                                                            M.get_trait_method (|
                                                              "revm_interpreter::interpreter_types::MemoryTrait",
                                                              Ty.associated_in_trait
                                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                                []
                                                                []
                                                                impl_InterpreterTypes
                                                                "Memory",
                                                              [],
                                                              [],
                                                              "slice_len",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (|
                                                                    M.read (| interpreter |)
                                                                  |),
                                                                  "revm_interpreter::interpreter::Interpreter",
                                                                  "memory"
                                                                |)
                                                              |);
                                                              M.read (| offset |);
                                                              M.read (| len |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ gas : Ty.path "revm_interpreter::gas::Gas" :=
                          M.copy (|
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.path "revm_interpreter::gas::Gas" ],
                                M.get_trait_method (|
                                  "revm_interpreter::interpreter_types::LoopControl",
                                  Ty.associated_in_trait
                                    "revm_interpreter::interpreter_types::InterpreterTypes"
                                    []
                                    []
                                    impl_InterpreterTypes
                                    "Control",
                                  [],
                                  [],
                                  "gas",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| interpreter |) |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "control"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "revm_interpreter::interpreter_types::LoopControl",
                                Ty.associated_in_trait
                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                  []
                                  []
                                  impl_InterpreterTypes
                                  "Control",
                                [],
                                [],
                                "set_next_action",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| interpreter |) |),
                                    "revm_interpreter::interpreter::Interpreter",
                                    "control"
                                  |)
                                |);
                                Value.StructRecord
                                  "revm_interpreter::interpreter_action::InterpreterAction::Return"
                                  [
                                    ("result",
                                      Value.StructRecord
                                        "revm_interpreter::interpreter::InterpreterResult"
                                        [
                                          ("output", M.read (| output |));
                                          ("gas", M.read (| gas |));
                                          ("result", M.read (| instruction_result |))
                                        ])
                                  ];
                                M.read (| instruction_result |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_return_inner :
      M.IsFunction.C "revm_interpreter::instructions::control::return_inner" return_inner.
    Admitted.
    Global Typeclasses Opaque return_inner.
    
    (*
    pub fn ret<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        return_inner(interpreter, InstructionResult::Return);
    }
    *)
    Definition ret (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (|
                    "revm_interpreter::instructions::control::return_inner",
                    [],
                    [ WIRE ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| interpreter |) |) |);
                    Value.StructTuple
                      "revm_interpreter::instruction_result::InstructionResult::Return"
                      []
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_ret :
      M.IsFunction.C "revm_interpreter::instructions::control::ret" ret.
    Admitted.
    Global Typeclasses Opaque ret.
    
    (*
    pub fn revert<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        check!(interpreter, BYZANTIUM);
        return_inner(interpreter, InstructionResult::Revert);
    }
    *)
    Definition revert (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_specification::hardfork::SpecId",
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated_in_trait
                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                            []
                                            []
                                            WIRE
                                            "RuntimeFlag",
                                          [],
                                          [],
                                          "spec_id",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| interpreter |) |),
                                              "revm_interpreter::interpreter::Interpreter",
                                              "runtime_flag"
                                            |)
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::BYZANTIUM"
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_function (|
                        "revm_interpreter::instructions::control::return_inner",
                        [],
                        [ WIRE ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| interpreter |) |) |);
                        Value.StructTuple
                          "revm_interpreter::instruction_result::InstructionResult::Revert"
                          []
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_revert :
      M.IsFunction.C "revm_interpreter::instructions::control::revert" revert.
    Admitted.
    Global Typeclasses Opaque revert.
    
    (*
    pub fn stop<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        interpreter
            .control
            .set_instruction_result(InstructionResult::Stop);
    }
    *)
    Definition stop (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "revm_interpreter::interpreter_types::LoopControl",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      WIRE
                      "Control",
                    [],
                    [],
                    "set_instruction_result",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| interpreter |) |),
                        "revm_interpreter::interpreter::Interpreter",
                        "control"
                      |)
                    |);
                    Value.StructTuple
                      "revm_interpreter::instruction_result::InstructionResult::Stop"
                      []
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_stop :
      M.IsFunction.C "revm_interpreter::instructions::control::stop" stop.
    Admitted.
    Global Typeclasses Opaque stop.
    
    (*
    pub fn invalid<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        interpreter
            .control
            .set_instruction_result(InstructionResult::InvalidFEOpcode);
    }
    *)
    Definition invalid (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "revm_interpreter::interpreter_types::LoopControl",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      WIRE
                      "Control",
                    [],
                    [],
                    "set_instruction_result",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| interpreter |) |),
                        "revm_interpreter::interpreter::Interpreter",
                        "control"
                      |)
                    |);
                    Value.StructTuple
                      "revm_interpreter::instruction_result::InstructionResult::InvalidFEOpcode"
                      []
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_invalid :
      M.IsFunction.C "revm_interpreter::instructions::control::invalid" invalid.
    Admitted.
    Global Typeclasses Opaque invalid.
    
    (*
    pub fn unknown<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        interpreter
            .control
            .set_instruction_result(InstructionResult::OpcodeNotFound);
    }
    *)
    Definition unknown (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "revm_interpreter::interpreter_types::LoopControl",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      WIRE
                      "Control",
                    [],
                    [],
                    "set_instruction_result",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| interpreter |) |),
                        "revm_interpreter::interpreter::Interpreter",
                        "control"
                      |)
                    |);
                    Value.StructTuple
                      "revm_interpreter::instruction_result::InstructionResult::OpcodeNotFound"
                      []
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_unknown :
      M.IsFunction.C "revm_interpreter::instructions::control::unknown" unknown.
    Admitted.
    Global Typeclasses Opaque unknown.
  End control.
End instructions.
