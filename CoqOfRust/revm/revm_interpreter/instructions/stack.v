(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module instructions.
  Module stack.
    (*
    pub fn pop<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::BASE);
        // Can ignore return. as relative N jump is safe operation.
        popn!([_i], interpreter);
    }
    *)
    Definition pop (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        M.get_constant "revm_interpreter::gas::constants::BASE"
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                        let _i := M.copy (| γ1_0 |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_pop :
      M.IsFunction.Trait "revm_interpreter::instructions::stack::pop" pop.
    Admitted.
    Global Typeclasses Opaque pop.
    
    (*
    pub fn push0<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        check!(interpreter, SHANGHAI);
        gas!(interpreter, gas::BASE);
        push!(interpreter, U256::ZERO);
    }
    *)
    Definition push0 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_specification::hardfork::SpecId",
                                      "is_enabled_in",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_specification::hardfork::SpecId",
                                        M.get_trait_method (|
                                          "revm_interpreter::interpreter_types::RuntimeFlag",
                                          Ty.associated_in_trait
                                            "revm_interpreter::interpreter_types::InterpreterTypes"
                                            []
                                            []
                                            WIRE
                                            "RuntimeFlag",
                                          [],
                                          [],
                                          "spec_id",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| interpreter |) |),
                                              "revm_interpreter::interpreter::Interpreter",
                                              "runtime_flag"
                                            |)
                                          |)
                                        ]
                                      |);
                                      Value.StructTuple
                                        "revm_specification::hardfork::SpecId::SHANGHAI"
                                        []
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::NotActivated"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        M.get_constant "revm_interpreter::gas::constants::BASE"
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "Stack",
                                      [],
                                      [],
                                      "push",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "stack"
                                        |)
                                      |);
                                      M.read (| M.get_constant "ruint::ZERO" |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_push0 :
      M.IsFunction.Trait "revm_interpreter::instructions::stack::push0" push0.
    Admitted.
    Global Typeclasses Opaque push0.
    
    (*
    pub fn push<const N: usize, WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        // TODO : Check performance degradation.
        push!(interpreter, U256::ZERO);
        popn_top!([], top, interpreter);
    
        let imm = interpreter.bytecode.read_slice(N);
        cast_slice_to_u256(imm, top);
    
        // Can ignore return. as relative N jump is safe operation
        interpreter.bytecode.relative_jump(N as isize);
    }
    *)
    Definition push (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ N ], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        M.get_constant "revm_interpreter::gas::constants::VERYLOW"
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "Stack",
                                      [],
                                      [],
                                      "push",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "stack"
                                        |)
                                      |);
                                      M.read (| M.get_constant "ruint::ZERO" |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 0 ]
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::StackTrait",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Stack",
                        [],
                        [],
                        "popn_top",
                        [ Value.Integer IntegerKind.Usize 0 ],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                        let top := M.copy (| γ1_1 |) in
                        let~ imm :
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_trait_method (|
                                "revm_interpreter::interpreter_types::Immediates",
                                Ty.associated_in_trait
                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                  []
                                  []
                                  WIRE
                                  "Bytecode",
                                [],
                                [],
                                "read_slice",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| interpreter |) |),
                                    "revm_interpreter::interpreter::Interpreter",
                                    "bytecode"
                                  |)
                                |);
                                M.read (|
                                  M.get_constant "revm_interpreter::instructions::stack::push::N"
                                |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_function (|
                                "revm_interpreter::instructions::utility::cast_slice_to_u256",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| imm |) |) |);
                                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| top |) |) |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "revm_interpreter::interpreter_types::Jumps",
                                Ty.associated_in_trait
                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                  []
                                  []
                                  WIRE
                                  "Bytecode",
                                [],
                                [],
                                "relative_jump",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| interpreter |) |),
                                    "revm_interpreter::interpreter::Interpreter",
                                    "bytecode"
                                  |)
                                |);
                                M.cast
                                  (Ty.path "isize")
                                  (M.read (|
                                    M.get_constant "revm_interpreter::instructions::stack::push::N"
                                  |))
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_push :
      M.IsFunction.Trait "revm_interpreter::instructions::stack::push" push.
    Admitted.
    Global Typeclasses Opaque push.
    
    (*
    pub fn dup<const N: usize, WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        if !interpreter.stack.dup(N) {
            interpreter
                .control
                .set_instruction_result(crate::InstructionResult::StackOverflow);
        }
    }
    *)
    Definition dup (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ N ], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        M.get_constant "revm_interpreter::gas::constants::VERYLOW"
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::StackTrait",
                                    Ty.associated_in_trait
                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                      []
                                      []
                                      WIRE
                                      "Stack",
                                    [],
                                    [],
                                    "dup",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| interpreter |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "stack"
                                      |)
                                    |);
                                    M.read (|
                                      M.get_constant "revm_interpreter::instructions::stack::dup::N"
                                    |)
                                  ]
                                |)
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "revm_interpreter::interpreter_types::LoopControl",
                                Ty.associated_in_trait
                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                  []
                                  []
                                  WIRE
                                  "Control",
                                [],
                                [],
                                "set_instruction_result",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| interpreter |) |),
                                    "revm_interpreter::interpreter::Interpreter",
                                    "control"
                                  |)
                                |);
                                Value.StructTuple
                                  "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                  []
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_dup :
      M.IsFunction.Trait "revm_interpreter::instructions::stack::dup" dup.
    Admitted.
    Global Typeclasses Opaque dup.
    
    (*
    pub fn swap<const N: usize, WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        gas!(interpreter, gas::VERYLOW);
        assert!(N != 0);
        if !interpreter.stack.exchange(0, N) {
            interpreter
                .control
                .set_instruction_result(crate::InstructionResult::StackOverflow);
        }
    }
    *)
    Definition swap (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ N ], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        M.get_constant "revm_interpreter::gas::constants::VERYLOW"
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  BinOp.ne (|
                                    M.read (|
                                      M.get_constant
                                        "revm_interpreter::instructions::stack::swap::N"
                                    |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic", [], [] |),
                                [ M.read (| Value.String "assertion failed: N != 0" |) ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "revm_interpreter::interpreter_types::StackTrait",
                                    Ty.associated_in_trait
                                      "revm_interpreter::interpreter_types::InterpreterTypes"
                                      []
                                      []
                                      WIRE
                                      "Stack",
                                    [],
                                    [],
                                    "exchange",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| interpreter |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "stack"
                                      |)
                                    |);
                                    Value.Integer IntegerKind.Usize 0;
                                    M.read (|
                                      M.get_constant
                                        "revm_interpreter::instructions::stack::swap::N"
                                    |)
                                  ]
                                |)
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "revm_interpreter::interpreter_types::LoopControl",
                                Ty.associated_in_trait
                                  "revm_interpreter::interpreter_types::InterpreterTypes"
                                  []
                                  []
                                  WIRE
                                  "Control",
                                [],
                                [],
                                "set_instruction_result",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| interpreter |) |),
                                    "revm_interpreter::interpreter::Interpreter",
                                    "control"
                                  |)
                                |);
                                Value.StructTuple
                                  "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                  []
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_swap :
      M.IsFunction.Trait "revm_interpreter::instructions::stack::swap" swap.
    Admitted.
    Global Typeclasses Opaque swap.
    
    (*
    pub fn dupn<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        require_eof!(interpreter);
        gas!(interpreter, gas::VERYLOW);
        let imm = interpreter.bytecode.read_u8();
        if !interpreter.stack.dup(imm as usize + 1) {
            interpreter
                .control
                .set_instruction_result(crate::InstructionResult::StackOverflow);
        }
        interpreter.bytecode.relative_jump(1);
    }
    *)
    Definition dupn (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        M.get_constant "revm_interpreter::gas::constants::VERYLOW"
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ imm : Ty.path "u8" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "u8",
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::Immediates",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Bytecode",
                        [],
                        [],
                        "read_u8",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "Stack",
                                      [],
                                      [],
                                      "dup",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "stack"
                                        |)
                                      |);
                                      BinOp.Wrap.add (|
                                        M.cast (Ty.path "usize") (M.read (| imm |)),
                                        Value.Integer IntegerKind.Usize 1
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "revm_interpreter::interpreter_types::LoopControl",
                                  Ty.associated_in_trait
                                    "revm_interpreter::interpreter_types::InterpreterTypes"
                                    []
                                    []
                                    WIRE
                                    "Control",
                                  [],
                                  [],
                                  "set_instruction_result",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| interpreter |) |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "control"
                                    |)
                                  |);
                                  Value.StructTuple
                                    "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                    []
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::Jumps",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Bytecode",
                        [],
                        [],
                        "relative_jump",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |);
                        Value.Integer IntegerKind.Isize 1
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_dupn :
      M.IsFunction.Trait "revm_interpreter::instructions::stack::dupn" dupn.
    Admitted.
    Global Typeclasses Opaque dupn.
    
    (*
    pub fn swapn<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        require_eof!(interpreter);
        gas!(interpreter, gas::VERYLOW);
        let imm = interpreter.bytecode.read_u8();
        if !interpreter.stack.exchange(0, imm as usize + 1) {
            interpreter
                .control
                .set_instruction_result(crate::InstructionResult::StackOverflow);
        }
        interpreter.bytecode.relative_jump(1);
    }
    *)
    Definition swapn (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        M.get_constant "revm_interpreter::gas::constants::VERYLOW"
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ imm : Ty.path "u8" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "u8",
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::Immediates",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Bytecode",
                        [],
                        [],
                        "read_u8",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "Stack",
                                      [],
                                      [],
                                      "exchange",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "stack"
                                        |)
                                      |);
                                      Value.Integer IntegerKind.Usize 0;
                                      BinOp.Wrap.add (|
                                        M.cast (Ty.path "usize") (M.read (| imm |)),
                                        Value.Integer IntegerKind.Usize 1
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "revm_interpreter::interpreter_types::LoopControl",
                                  Ty.associated_in_trait
                                    "revm_interpreter::interpreter_types::InterpreterTypes"
                                    []
                                    []
                                    WIRE
                                    "Control",
                                  [],
                                  [],
                                  "set_instruction_result",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| interpreter |) |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "control"
                                    |)
                                  |);
                                  Value.StructTuple
                                    "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                    []
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::Jumps",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Bytecode",
                        [],
                        [],
                        "relative_jump",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |);
                        Value.Integer IntegerKind.Isize 1
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_swapn :
      M.IsFunction.Trait "revm_interpreter::instructions::stack::swapn" swapn.
    Admitted.
    Global Typeclasses Opaque swapn.
    
    (*
    pub fn exchange<WIRE: InterpreterTypes, H: Host + ?Sized>(
        interpreter: &mut Interpreter<WIRE>,
        _host: &mut H,
    ) {
        require_eof!(interpreter);
        gas!(interpreter, gas::VERYLOW);
        let imm = interpreter.bytecode.read_u8();
        let n = (imm >> 4) + 1;
        let m = (imm & 0x0F) + 1;
        if !interpreter.stack.exchange(n as usize, m as usize) {
            interpreter
                .control
                .set_instruction_result(crate::InstructionResult::StackOverflow);
        }
        interpreter.bytecode.relative_jump(1);
    }
    *)
    Definition exchange (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ WIRE; H ], [ interpreter; _host ] =>
        ltac:(M.monadic
          (let interpreter := M.alloc (| interpreter |) in
          let _host := M.alloc (| _host |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::RuntimeFlag",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "RuntimeFlag",
                                      [],
                                      [],
                                      "is_eof",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "runtime_flag"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::EOFOpcodeDisabledInLegacy"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "revm_interpreter::gas::Gas",
                                      "record_cost",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_interpreter::gas::Gas" ],
                                            M.get_trait_method (|
                                              "revm_interpreter::interpreter_types::LoopControl",
                                              Ty.associated_in_trait
                                                "revm_interpreter::interpreter_types::InterpreterTypes"
                                                []
                                                []
                                                WIRE
                                                "Control",
                                              [],
                                              [],
                                              "gas",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| interpreter |) |),
                                                  "revm_interpreter::interpreter::Interpreter",
                                                  "control"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.read (|
                                        M.get_constant "revm_interpreter::gas::constants::VERYLOW"
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "revm_interpreter::interpreter_types::LoopControl",
                                        Ty.associated_in_trait
                                          "revm_interpreter::interpreter_types::InterpreterTypes"
                                          []
                                          []
                                          WIRE
                                          "Control",
                                        [],
                                        [],
                                        "set_instruction_result",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| interpreter |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "control"
                                          |)
                                        |);
                                        Value.StructTuple
                                          "revm_interpreter::instruction_result::InstructionResult::OutOfGas"
                                          []
                                      ]
                                    |)
                                  |) in
                                M.return_ (| Value.Tuple [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ imm : Ty.path "u8" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "u8",
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::Immediates",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Bytecode",
                        [],
                        [],
                        "read_u8",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ n : Ty.path "u8" :=
                  M.alloc (|
                    BinOp.Wrap.add (|
                      BinOp.Wrap.shr (| M.read (| imm |), Value.Integer IntegerKind.I32 4 |),
                      Value.Integer IntegerKind.U8 1
                    |)
                  |) in
                let~ m : Ty.path "u8" :=
                  M.alloc (|
                    BinOp.Wrap.add (|
                      BinOp.bit_and (M.read (| imm |)) (Value.Integer IntegerKind.U8 15),
                      Value.Integer IntegerKind.U8 1
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::StackTrait",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        WIRE
                                        "Stack",
                                      [],
                                      [],
                                      "exchange",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| interpreter |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "stack"
                                        |)
                                      |);
                                      M.cast (Ty.path "usize") (M.read (| n |));
                                      M.cast (Ty.path "usize") (M.read (| m |))
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "revm_interpreter::interpreter_types::LoopControl",
                                  Ty.associated_in_trait
                                    "revm_interpreter::interpreter_types::InterpreterTypes"
                                    []
                                    []
                                    WIRE
                                    "Control",
                                  [],
                                  [],
                                  "set_instruction_result",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| interpreter |) |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "control"
                                    |)
                                  |);
                                  Value.StructTuple
                                    "revm_interpreter::instruction_result::InstructionResult::StackOverflow"
                                    []
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::Jumps",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          WIRE
                          "Bytecode",
                        [],
                        [],
                        "relative_jump",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| interpreter |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |);
                        Value.Integer IntegerKind.Isize 1
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_exchange :
      M.IsFunction.Trait "revm_interpreter::instructions::stack::exchange" exchange.
    Admitted.
    Global Typeclasses Opaque exchange.
  End stack.
End instructions.
