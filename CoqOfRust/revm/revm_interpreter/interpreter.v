(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module interpreter.
  (* StructRecord
    {
      name := "Interpreter";
      const_params := [];
      ty_params := [ "WIRE" ];
      fields :=
        [
          ("bytecode",
            Ty.associated_in_trait
              "revm_interpreter::interpreter_types::InterpreterTypes"
              []
              []
              WIRE
              "Bytecode");
          ("stack",
            Ty.associated_in_trait
              "revm_interpreter::interpreter_types::InterpreterTypes"
              []
              []
              WIRE
              "Stack");
          ("return_data",
            Ty.associated_in_trait
              "revm_interpreter::interpreter_types::InterpreterTypes"
              []
              []
              WIRE
              "ReturnData");
          ("memory",
            Ty.associated_in_trait
              "revm_interpreter::interpreter_types::InterpreterTypes"
              []
              []
              WIRE
              "Memory");
          ("input",
            Ty.associated_in_trait
              "revm_interpreter::interpreter_types::InterpreterTypes"
              []
              []
              WIRE
              "Input");
          ("sub_routine",
            Ty.associated_in_trait
              "revm_interpreter::interpreter_types::InterpreterTypes"
              []
              []
              WIRE
              "SubRoutineStack");
          ("control",
            Ty.associated_in_trait
              "revm_interpreter::interpreter_types::InterpreterTypes"
              []
              []
              WIRE
              "Control");
          ("runtime_flag",
            Ty.associated_in_trait
              "revm_interpreter::interpreter_types::InterpreterTypes"
              []
              []
              WIRE
              "RuntimeFlag");
          ("extend",
            Ty.associated_in_trait
              "revm_interpreter::interpreter_types::InterpreterTypes"
              []
              []
              WIRE
              "Extend")
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_WIRE_where_revm_interpreter_interpreter_types_InterpreterTypes_WIRE_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Bytecode_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Stack_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_ReturnData_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Memory_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Input_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_SubRoutineStack_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Control_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_RuntimeFlag_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Extend_for_revm_interpreter_interpreter_Interpreter_WIRE.
    Definition Self (WIRE : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_interpreter::interpreter::Interpreter") [] [ WIRE ].
    
    (* Debug *)
    Definition fmt (WIRE : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self WIRE in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let~ names :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 9 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ]
                  ] :=
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Value.Array
                          [
                            mk_str (| "bytecode" |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "stack" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "return_data" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "memory" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "input" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "sub_routine" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "control" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "runtime_flag" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "extend" |) |) |)
                          ]
                      |)
                    |)
                  |)
                |)
              |) in
            let~ values :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]
                  ] :=
              M.alloc (|
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Value.Array
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "bytecode"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "stack"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "return_data"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "memory"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "input"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "sub_routine"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "control"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "revm_interpreter::interpreter::Interpreter",
                                        "runtime_flag"
                                      |)
                                    |)
                                  |)
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "revm_interpreter::interpreter::Interpreter",
                                            "extend"
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                |))
                            ]
                        |)
                      |)
                    |)
                  |))
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Interpreter" |) |) |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |));
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIRE : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIRE)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt WIRE)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_WIRE_where_revm_interpreter_interpreter_types_InterpreterTypes_WIRE_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Bytecode_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Stack_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_ReturnData_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Memory_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Input_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_SubRoutineStack_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Control_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_RuntimeFlag_where_core_fmt_Debug_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Extend_for_revm_interpreter_interpreter_Interpreter_WIRE.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_WIRE_where_revm_interpreter_interpreter_types_InterpreterTypes_WIRE_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Bytecode_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Stack_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_ReturnData_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Memory_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Input_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_SubRoutineStack_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Control_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_RuntimeFlag_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Extend_for_revm_interpreter_interpreter_Interpreter_WIRE.
    Definition Self (WIRE : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_interpreter::interpreter::Interpreter") [] [ WIRE ].
    
    (* Clone *)
    Definition clone (WIRE : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self WIRE in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "revm_interpreter::interpreter::Interpreter"
            []
            [ WIRE ]
            [
              ("bytecode",
                M.call_closure (|
                  Ty.associated_in_trait
                    "revm_interpreter::interpreter_types::InterpreterTypes"
                    []
                    []
                    WIRE
                    "Bytecode",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      WIRE
                      "Bytecode",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "bytecode"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("stack",
                M.call_closure (|
                  Ty.associated_in_trait
                    "revm_interpreter::interpreter_types::InterpreterTypes"
                    []
                    []
                    WIRE
                    "Stack",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      WIRE
                      "Stack",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "stack"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("return_data",
                M.call_closure (|
                  Ty.associated_in_trait
                    "revm_interpreter::interpreter_types::InterpreterTypes"
                    []
                    []
                    WIRE
                    "ReturnData",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      WIRE
                      "ReturnData",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "return_data"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("memory",
                M.call_closure (|
                  Ty.associated_in_trait
                    "revm_interpreter::interpreter_types::InterpreterTypes"
                    []
                    []
                    WIRE
                    "Memory",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      WIRE
                      "Memory",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "memory"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("input",
                M.call_closure (|
                  Ty.associated_in_trait
                    "revm_interpreter::interpreter_types::InterpreterTypes"
                    []
                    []
                    WIRE
                    "Input",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      WIRE
                      "Input",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "input"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("sub_routine",
                M.call_closure (|
                  Ty.associated_in_trait
                    "revm_interpreter::interpreter_types::InterpreterTypes"
                    []
                    []
                    WIRE
                    "SubRoutineStack",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      WIRE
                      "SubRoutineStack",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "sub_routine"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("control",
                M.call_closure (|
                  Ty.associated_in_trait
                    "revm_interpreter::interpreter_types::InterpreterTypes"
                    []
                    []
                    WIRE
                    "Control",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      WIRE
                      "Control",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "control"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("runtime_flag",
                M.call_closure (|
                  Ty.associated_in_trait
                    "revm_interpreter::interpreter_types::InterpreterTypes"
                    []
                    []
                    WIRE
                    "RuntimeFlag",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      WIRE
                      "RuntimeFlag",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "runtime_flag"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("extend",
                M.call_closure (|
                  Ty.associated_in_trait
                    "revm_interpreter::interpreter_types::InterpreterTypes"
                    []
                    []
                    WIRE
                    "Extend",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      WIRE
                      "Extend",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "extend"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIRE : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIRE)
        (* Instance *) [ ("clone", InstanceField.Method (clone WIRE)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_WIRE_where_revm_interpreter_interpreter_types_InterpreterTypes_WIRE_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Bytecode_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Stack_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_ReturnData_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Memory_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Input_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_SubRoutineStack_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Control_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_RuntimeFlag_where_core_clone_Clone_associated_in_trait_revm_interpreter_interpreter_types_InterpreterTypes___WIRE_Extend_for_revm_interpreter_interpreter_Interpreter_WIRE.
  
  Module Impl_revm_interpreter_interpreter_Interpreter_revm_interpreter_interpreter_EthInterpreter_EXT_MG.
    Definition Self (EXT MG : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "revm_interpreter::interpreter::Interpreter")
        []
        [ Ty.apply (Ty.path "revm_interpreter::interpreter::EthInterpreter") [] [ EXT; MG ] ].
    
    (*
        pub fn new(
            memory: Rc<RefCell<MG>>,
            bytecode: Bytecode,
            inputs: InputsImpl,
            is_static: bool,
            is_eof_init: bool,
            spec_id: SpecId,
            gas_limit: u64,
        ) -> Self {
            let runtime_flag = RuntimeFlags {
                spec_id,
                is_static,
                is_eof: bytecode.is_eof(),
                is_eof_init,
            };
            Self {
                bytecode: ExtBytecode::new(bytecode),
                stack: Stack::new(),
                return_data: ReturnDataImpl::default(),
                memory,
                input: inputs,
                sub_routine: SubRoutineImpl::default(),
                control: LoopControlImpl::new(gas_limit),
                runtime_flag,
                extend: EXT::default(),
            }
        }
    *)
    Definition new (EXT MG : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self EXT MG in
      match ε, τ, α with
      | [], [], [ memory; bytecode; inputs; is_static; is_eof_init; spec_id; gas_limit ] =>
        ltac:(M.monadic
          (let memory := M.alloc (| memory |) in
          let bytecode := M.alloc (| bytecode |) in
          let inputs := M.alloc (| inputs |) in
          let is_static := M.alloc (| is_static |) in
          let is_eof_init := M.alloc (| is_eof_init |) in
          let spec_id := M.alloc (| spec_id |) in
          let gas_limit := M.alloc (| gas_limit |) in
          M.read (|
            let~ runtime_flag :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.path "revm_interpreter::interpreter::runtime_flags::RuntimeFlags" ] :=
              M.alloc (|
                Value.StructRecord
                  "revm_interpreter::interpreter::runtime_flags::RuntimeFlags"
                  []
                  []
                  [
                    ("spec_id", M.read (| spec_id |));
                    ("is_static", M.read (| is_static |));
                    ("is_eof",
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_associated_function (|
                          Ty.path "revm_bytecode::bytecode::Bytecode",
                          "is_eof",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, bytecode |) ]
                      |));
                    ("is_eof_init", M.read (| is_eof_init |))
                  ]
              |) in
            M.alloc (|
              Value.StructRecord
                "revm_interpreter::interpreter::Interpreter"
                []
                [ Ty.apply (Ty.path "revm_interpreter::interpreter::EthInterpreter") [] [ EXT; MG ]
                ]
                [
                  ("bytecode",
                    M.call_closure (|
                      Ty.path "revm_interpreter::interpreter::ext_bytecode::ExtBytecode",
                      M.get_associated_function (|
                        Ty.path "revm_interpreter::interpreter::ext_bytecode::ExtBytecode",
                        "new",
                        [],
                        []
                      |),
                      [ M.read (| bytecode |) ]
                    |));
                  ("stack",
                    M.call_closure (|
                      Ty.path "revm_interpreter::interpreter::stack::Stack",
                      M.get_associated_function (|
                        Ty.path "revm_interpreter::interpreter::stack::Stack",
                        "new",
                        [],
                        []
                      |),
                      []
                    |));
                  ("return_data",
                    M.call_closure (|
                      Ty.path "revm_interpreter::interpreter::return_data::ReturnDataImpl",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "revm_interpreter::interpreter::return_data::ReturnDataImpl",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |));
                  ("memory", M.read (| memory |));
                  ("input", M.read (| inputs |));
                  ("sub_routine",
                    M.call_closure (|
                      Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |));
                  ("control",
                    M.call_closure (|
                      Ty.path "revm_interpreter::interpreter::loop_control::LoopControl",
                      M.get_associated_function (|
                        Ty.path "revm_interpreter::interpreter::loop_control::LoopControl",
                        "new",
                        [],
                        []
                      |),
                      [ M.read (| gas_limit |) ]
                    |));
                  ("runtime_flag", M.read (| runtime_flag |));
                  ("extend",
                    M.call_closure (|
                      EXT,
                      M.get_trait_method (|
                        "core::default::Default",
                        EXT,
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (EXT MG : Ty.t),
      M.IsAssociatedFunction.C (Self EXT MG) "new" (new EXT MG).
    Admitted.
    Global Typeclasses Opaque new.
  End Impl_revm_interpreter_interpreter_Interpreter_revm_interpreter_interpreter_EthInterpreter_EXT_MG.
  
  (* StructRecord
    {
      name := "EthInterpreter";
      const_params := [];
      ty_params := [ "EXT"; "MG" ];
      fields :=
        [
          ("_phantom",
            Ty.apply
              (Ty.path "core::marker::PhantomData")
              []
              [ Ty.function [] (Ty.tuple [ EXT; MG ]) ])
        ];
    } *)
  
  Module Impl_revm_interpreter_interpreter_types_InterpreterTypes_where_revm_interpreter_interpreter_shared_memory_MemoryGetter_MG_for_revm_interpreter_interpreter_EthInterpreter_EXT_MG.
    Definition Self (EXT MG : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_interpreter::interpreter::EthInterpreter") [] [ EXT; MG ].
    
    (*     type Stack = Stack; *)
    Definition _Stack (EXT MG : Ty.t) : Ty.t :=
      Ty.path "revm_interpreter::interpreter::stack::Stack".
    
    (*     type Memory = Rc<RefCell<MG>>; *)
    Definition _Memory (EXT MG : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "alloc::rc::Rc")
        []
        [ Ty.apply (Ty.path "core::cell::RefCell") [] [ MG ]; Ty.path "alloc::alloc::Global" ].
    
    (*     type Bytecode = ExtBytecode; *)
    Definition _Bytecode (EXT MG : Ty.t) : Ty.t :=
      Ty.path "revm_interpreter::interpreter::ext_bytecode::ExtBytecode".
    
    (*     type ReturnData = ReturnDataImpl; *)
    Definition _ReturnData (EXT MG : Ty.t) : Ty.t :=
      Ty.path "revm_interpreter::interpreter::return_data::ReturnDataImpl".
    
    (*     type Input = InputsImpl; *)
    Definition _Input (EXT MG : Ty.t) : Ty.t :=
      Ty.path "revm_interpreter::interpreter::input::InputsImpl".
    
    (*     type SubRoutineStack = SubRoutineImpl; *)
    Definition _SubRoutineStack (EXT MG : Ty.t) : Ty.t :=
      Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl".
    
    (*     type Control = LoopControlImpl; *)
    Definition _Control (EXT MG : Ty.t) : Ty.t :=
      Ty.path "revm_interpreter::interpreter::loop_control::LoopControl".
    
    (*     type RuntimeFlag = RuntimeFlags; *)
    Definition _RuntimeFlag (EXT MG : Ty.t) : Ty.t :=
      Ty.path "revm_interpreter::interpreter::runtime_flags::RuntimeFlags".
    
    (*     type Extend = EXT; *)
    Definition _Extend (EXT MG : Ty.t) : Ty.t := EXT.
    
    Axiom Implements :
      forall (EXT MG : Ty.t),
      M.IsTraitInstance
        "revm_interpreter::interpreter_types::InterpreterTypes"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self EXT MG)
        (* Instance *)
        [
          ("Stack", InstanceField.Ty (_Stack EXT MG));
          ("Memory", InstanceField.Ty (_Memory EXT MG));
          ("Bytecode", InstanceField.Ty (_Bytecode EXT MG));
          ("ReturnData", InstanceField.Ty (_ReturnData EXT MG));
          ("Input", InstanceField.Ty (_Input EXT MG));
          ("SubRoutineStack", InstanceField.Ty (_SubRoutineStack EXT MG));
          ("Control", InstanceField.Ty (_Control EXT MG));
          ("RuntimeFlag", InstanceField.Ty (_RuntimeFlag EXT MG));
          ("Extend", InstanceField.Ty (_Extend EXT MG))
        ].
  End Impl_revm_interpreter_interpreter_types_InterpreterTypes_where_revm_interpreter_interpreter_shared_memory_MemoryGetter_MG_for_revm_interpreter_interpreter_EthInterpreter_EXT_MG.
  
  (* Trait *)
  (* Empty module 'InstructionProvider' *)
  
  (* StructRecord
    {
      name := "EthInstructionProvider";
      const_params := [];
      ty_params := [ "WIRE"; "HOST" ];
      fields :=
        [
          ("instruction_table",
            Ty.apply
              (Ty.path "alloc::rc::Rc")
              []
              [
                Ty.apply
                  (Ty.path "array")
                  [ Value.Integer IntegerKind.Usize 256 ]
                  [
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "revm_interpreter::interpreter::Interpreter")
                              []
                              [ WIRE ]
                          ];
                        Ty.apply (Ty.path "&mut") [] [ HOST ]
                      ]
                      (Ty.tuple [])
                  ];
                Ty.path "alloc::alloc::Global"
              ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_where_revm_interpreter_interpreter_types_InterpreterTypes_WIRE_for_revm_interpreter_interpreter_EthInstructionProvider_WIRE_HOST.
    Definition Self (WIRE HOST : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_interpreter::interpreter::EthInstructionProvider") [] [ WIRE; HOST ].
    
    (*
        fn clone(&self) -> Self {
            Self {
                instruction_table: self.instruction_table.clone(),
            }
        }
    *)
    Definition clone (WIRE HOST : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self WIRE HOST in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "revm_interpreter::interpreter::EthInstructionProvider"
            []
            [ WIRE; HOST ]
            [
              ("instruction_table",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 256 ]
                        [
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "revm_interpreter::interpreter::Interpreter")
                                    []
                                    [ WIRE ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ HOST ]
                            ]
                            (Ty.tuple [])
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::rc::Rc")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 256 ]
                          [
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "revm_interpreter::interpreter::Interpreter")
                                      []
                                      [ WIRE ]
                                  ];
                                Ty.apply (Ty.path "&mut") [] [ HOST ]
                              ]
                              (Ty.tuple [])
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_interpreter::interpreter::EthInstructionProvider",
                        "instruction_table"
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIRE HOST : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIRE HOST)
        (* Instance *) [ ("clone", InstanceField.Method (clone WIRE HOST)) ].
  End Impl_core_clone_Clone_where_revm_interpreter_interpreter_types_InterpreterTypes_WIRE_for_revm_interpreter_interpreter_EthInstructionProvider_WIRE_HOST.
  
  Module Impl_revm_interpreter_interpreter_InstructionProvider_where_revm_interpreter_interpreter_types_InterpreterTypes_WIRE_where_revm_context_interface_host_Host_HOST_for_revm_interpreter_interpreter_EthInstructionProvider_WIRE_HOST.
    Definition Self (WIRE HOST : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_interpreter::interpreter::EthInstructionProvider") [] [ WIRE; HOST ].
    
    (*     type WIRE = WIRE; *)
    Definition _WIRE (WIRE HOST : Ty.t) : Ty.t := WIRE.
    
    (*     type Host = HOST; *)
    Definition _Host (WIRE HOST : Ty.t) : Ty.t := HOST.
    
    (*
        fn new(_context: &mut Self::Host) -> Self {
            Self {
                instruction_table: Rc::new(crate::table::make_instruction_table::<WIRE, HOST>()),
            }
        }
    *)
    Definition new (WIRE HOST : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self WIRE HOST in
      match ε, τ, α with
      | [], [], [ _context ] =>
        ltac:(M.monadic
          (let _context := M.alloc (| _context |) in
          Value.StructRecord
            "revm_interpreter::interpreter::EthInstructionProvider"
            []
            [ WIRE; HOST ]
            [
              ("instruction_table",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 256 ]
                        [
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "revm_interpreter::interpreter::Interpreter")
                                    []
                                    [ WIRE ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ HOST ]
                            ]
                            (Ty.tuple [])
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::rc::Rc")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 256 ]
                          [
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "revm_interpreter::interpreter::Interpreter")
                                      []
                                      [ WIRE ]
                                  ];
                                Ty.apply (Ty.path "&mut") [] [ HOST ]
                              ]
                              (Ty.tuple [])
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 256 ]
                        [
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "revm_interpreter::interpreter::Interpreter")
                                    []
                                    [ WIRE ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ HOST ]
                            ]
                            (Ty.tuple [])
                        ],
                      M.get_function (|
                        "revm_interpreter::table::make_instruction_table",
                        [],
                        [ WIRE; HOST ]
                      |),
                      []
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn table(&mut self) -> &[impl CustomInstruction<Wire = Self::WIRE, Host = Self::Host>; 256] {
            self.instruction_table.as_ref()
        }
    *)
    Definition table (WIRE HOST : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self WIRE HOST in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 256 ]
                          [
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "revm_interpreter::interpreter::Interpreter")
                                      []
                                      [ WIRE ]
                                  ];
                                Ty.apply (Ty.path "&mut") [] [ HOST ]
                              ]
                              (Ty.tuple [])
                          ]
                      ],
                    M.get_trait_method (|
                      "core::convert::AsRef",
                      Ty.apply
                        (Ty.path "alloc::rc::Rc")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 256 ]
                            [
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "revm_interpreter::interpreter::Interpreter")
                                        []
                                        [ WIRE ]
                                    ];
                                  Ty.apply (Ty.path "&mut") [] [ HOST ]
                                ]
                                (Ty.tuple [])
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 256 ]
                          [
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "revm_interpreter::interpreter::Interpreter")
                                      []
                                      [ WIRE ]
                                  ];
                                Ty.apply (Ty.path "&mut") [] [ HOST ]
                              ]
                              (Ty.tuple [])
                          ]
                      ],
                      "as_ref",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_interpreter::interpreter::EthInstructionProvider",
                          "instruction_table"
                        |)
                      |)
                    ]
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (WIRE HOST : Ty.t),
      M.IsTraitInstance
        "revm_interpreter::interpreter::InstructionProvider"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self WIRE HOST)
        (* Instance *)
        [
          ("WIRE", InstanceField.Ty (_WIRE WIRE HOST));
          ("Host", InstanceField.Ty (_Host WIRE HOST));
          ("new", InstanceField.Method (new WIRE HOST));
          ("table", InstanceField.Method (table WIRE HOST))
        ].
  End Impl_revm_interpreter_interpreter_InstructionProvider_where_revm_interpreter_interpreter_types_InterpreterTypes_WIRE_where_revm_context_interface_host_Host_HOST_for_revm_interpreter_interpreter_EthInstructionProvider_WIRE_HOST.
  
  Module Impl_revm_interpreter_table_CustomInstruction_where_revm_interpreter_interpreter_types_InterpreterTypes_IW_where_revm_context_interface_host_Host_H_for_ref_mut_revm_interpreter_interpreter_Interpreter_IWref_mut_HToTuple_.
    Definition Self (IW H : Ty.t) : Ty.t :=
      Ty.function
        [
          Ty.apply
            (Ty.path "&mut")
            []
            [ Ty.apply (Ty.path "revm_interpreter::interpreter::Interpreter") [] [ IW ] ];
          Ty.apply (Ty.path "&mut") [] [ H ]
        ]
        (Ty.tuple []).
    
    (*     type Wire = IW; *)
    Definition _Wire (IW H : Ty.t) : Ty.t := IW.
    
    (*     type Host = H; *)
    Definition _Host (IW H : Ty.t) : Ty.t := H.
    
    (*
        fn exec(&self, interpreter: &mut Interpreter<Self::Wire>, host: &mut Self::Host) {
            (self)(interpreter, host);
        }
    *)
    Definition exec (IW H : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self IW H in
      match ε, τ, α with
      | [], [], [ self; interpreter; host ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let interpreter := M.alloc (| interpreter |) in
          let host := M.alloc (| host |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.read (| M.deref (| M.read (| self |) |) |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| interpreter |) |) |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| host |) |) |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn from_base(instruction: Instruction<Self::Wire, Self::Host>) -> Self {
            instruction
        }
    *)
    Definition from_base (IW H : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self IW H in
      match ε, τ, α with
      | [], [], [ instruction ] =>
        ltac:(M.monadic
          (let instruction := M.alloc (| instruction |) in
          M.read (| instruction |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (IW H : Ty.t),
      M.IsTraitInstance
        "revm_interpreter::table::CustomInstruction"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self IW H)
        (* Instance *)
        [
          ("Wire", InstanceField.Ty (_Wire IW H));
          ("Host", InstanceField.Ty (_Host IW H));
          ("exec", InstanceField.Method (exec IW H));
          ("from_base", InstanceField.Method (from_base IW H))
        ].
  End Impl_revm_interpreter_table_CustomInstruction_where_revm_interpreter_interpreter_types_InterpreterTypes_IW_where_revm_context_interface_host_Host_H_for_ref_mut_revm_interpreter_interpreter_Interpreter_IWref_mut_HToTuple_.
  
  Module Impl_revm_interpreter_interpreter_Interpreter_IW.
    Definition Self (IW : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_interpreter::interpreter::Interpreter") [] [ IW ].
    
    (*
        pub(crate) fn step<FN, H: Host>(&mut self, instruction_table: &[FN; 256], host: &mut H)
        where
            FN: CustomInstruction<Wire = IW, Host = H>,
        {
            // Get current opcode.
            let opcode = self.bytecode.opcode();
    
            // SAFETY: In analysis we are doing padding of bytecode so that we are sure that last
            // byte instruction is STOP so we are safe to just increment program_counter bcs on last instruction
            // it will do noop and just stop execution of this contract
            self.bytecode.relative_jump(1);
    
            // Execute instruction.
            instruction_table[opcode as usize].exec(self, host)
        }
    *)
    Definition step (IW : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self IW in
      match ε, τ, α with
      | [], [ FN; H ], [ self; instruction_table; host ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let instruction_table := M.alloc (| instruction_table |) in
          let host := M.alloc (| host |) in
          M.read (|
            let~ opcode : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u8",
                  M.get_trait_method (|
                    "revm_interpreter::interpreter_types::Jumps",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      IW
                      "Bytecode",
                    [],
                    [],
                    "opcode",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_interpreter::interpreter::Interpreter",
                        "bytecode"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "revm_interpreter::interpreter_types::Jumps",
                    Ty.associated_in_trait
                      "revm_interpreter::interpreter_types::InterpreterTypes"
                      []
                      []
                      IW
                      "Bytecode",
                    [],
                    [],
                    "relative_jump",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_interpreter::interpreter::Interpreter",
                        "bytecode"
                      |)
                    |);
                    Value.Integer IntegerKind.Isize 1
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "revm_interpreter::table::CustomInstruction",
                  FN,
                  [],
                  [],
                  "exec",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_array_field (|
                      M.deref (| M.read (| instruction_table |) |),
                      M.cast (Ty.path "usize") (M.read (| opcode |))
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| host |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_step :
      forall (IW : Ty.t),
      M.IsAssociatedFunction.C (Self IW) "step" (step IW).
    Admitted.
    Global Typeclasses Opaque step.
    
    (*
        pub fn run<FN, H: Host>(
            &mut self,
            instruction_table: &[FN; 256],
            host: &mut H,
        ) -> InterpreterAction
        where
            FN: CustomInstruction<Wire = IW, Host = H>,
        {
            self.control
                .set_next_action(InterpreterAction::None, InstructionResult::Continue);
    
            // Main loop
            while self.control.instruction_result().is_continue() {
                self.step(instruction_table, host);
            }
    
            // Return next action if it is some.
            let action = self.control.take_next_action();
            if action.is_some() {
                return action;
            }
            // If not, return action without output as it is a halt.
            InterpreterAction::Return {
                result: InterpreterResult {
                    result: self.control.instruction_result(),
                    // Return empty bytecode
                    output: Bytes::new(),
                    gas: *self.control.gas(),
                },
            }
        }
    *)
    Definition run (IW : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self IW in
      match ε, τ, α with
      | [], [ FN; H ], [ self; instruction_table; host ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let instruction_table := M.alloc (| instruction_table |) in
          let host := M.alloc (| host |) in
          M.catch_return (Ty.path "revm_interpreter::interpreter_action::InterpreterAction") (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::LoopControl",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          IW
                          "Control",
                        [],
                        [],
                        "set_next_action",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "control"
                          |)
                        |);
                        Value.StructTuple
                          "revm_interpreter::interpreter_action::InterpreterAction::None"
                          []
                          []
                          [];
                        Value.StructTuple
                          "revm_interpreter::instruction_result::InstructionResult::Continue"
                          []
                          []
                          []
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.loop (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.path
                                          "revm_interpreter::instruction_result::InstructionResult",
                                        "is_continue",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.path
                                            "revm_interpreter::instruction_result::InstructionResult",
                                          M.get_trait_method (|
                                            "revm_interpreter::interpreter_types::LoopControl",
                                            Ty.associated_in_trait
                                              "revm_interpreter::interpreter_types::InterpreterTypes"
                                              []
                                              []
                                              IW
                                              "Control",
                                            [],
                                            [],
                                            "instruction_result",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "revm_interpreter::interpreter::Interpreter",
                                                "control"
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "revm_interpreter::interpreter::Interpreter")
                                        []
                                        [ IW ],
                                      "step",
                                      [],
                                      [ FN; H ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| self |) |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| instruction_table |) |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| host |) |)
                                      |)
                                    ]
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                let~ action :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.path "revm_interpreter::interpreter_action::InterpreterAction" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "revm_interpreter::interpreter_action::InterpreterAction",
                      M.get_trait_method (|
                        "revm_interpreter::interpreter_types::LoopControl",
                        Ty.associated_in_trait
                          "revm_interpreter::interpreter_types::InterpreterTypes"
                          []
                          []
                          IW
                          "Control",
                        [],
                        [],
                        "take_next_action",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::Interpreter",
                            "control"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.path
                                      "revm_interpreter::interpreter_action::InterpreterAction",
                                    "is_some",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, action |) ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (| M.read (| M.return_ (| M.read (| action |) |) |) |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  Value.StructRecord
                    "revm_interpreter::interpreter_action::InterpreterAction::Return"
                    []
                    []
                    [
                      ("result",
                        Value.StructRecord
                          "revm_interpreter::interpreter::InterpreterResult"
                          []
                          []
                          [
                            ("result",
                              M.call_closure (|
                                Ty.path "revm_interpreter::instruction_result::InstructionResult",
                                M.get_trait_method (|
                                  "revm_interpreter::interpreter_types::LoopControl",
                                  Ty.associated_in_trait
                                    "revm_interpreter::interpreter_types::InterpreterTypes"
                                    []
                                    []
                                    IW
                                    "Control",
                                  [],
                                  [],
                                  "instruction_result",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "revm_interpreter::interpreter::Interpreter",
                                      "control"
                                    |)
                                  |)
                                ]
                              |));
                            ("output",
                              M.call_closure (|
                                Ty.path "alloy_primitives::bytes_::Bytes",
                                M.get_associated_function (|
                                  Ty.path "alloy_primitives::bytes_::Bytes",
                                  "new",
                                  [],
                                  []
                                |),
                                []
                              |));
                            ("gas",
                              M.read (|
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.path "revm_interpreter::gas::Gas" ],
                                    M.get_trait_method (|
                                      "revm_interpreter::interpreter_types::LoopControl",
                                      Ty.associated_in_trait
                                        "revm_interpreter::interpreter_types::InterpreterTypes"
                                        []
                                        []
                                        IW
                                        "Control",
                                      [],
                                      [],
                                      "gas",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "revm_interpreter::interpreter::Interpreter",
                                          "control"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |))
                          ])
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_run :
      forall (IW : Ty.t),
      M.IsAssociatedFunction.C (Self IW) "run" (run IW).
    Admitted.
    Global Typeclasses Opaque run.
  End Impl_revm_interpreter_interpreter_Interpreter_IW.
  
  (* StructRecord
    {
      name := "InterpreterResult";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("result", Ty.path "revm_interpreter::instruction_result::InstructionResult");
          ("output", Ty.path "alloy_primitives::bytes_::Bytes");
          ("gas", Ty.path "revm_interpreter::gas::Gas")
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_revm_interpreter_interpreter_InterpreterResult.
    Definition Self : Ty.t := Ty.path "revm_interpreter::interpreter::InterpreterResult".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "revm_interpreter::interpreter::InterpreterResult"
            []
            []
            [
              ("result",
                M.call_closure (|
                  Ty.path "revm_interpreter::instruction_result::InstructionResult",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "revm_interpreter::instruction_result::InstructionResult",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::InterpreterResult",
                            "result"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("output",
                M.call_closure (|
                  Ty.path "alloy_primitives::bytes_::Bytes",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "alloy_primitives::bytes_::Bytes",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::InterpreterResult",
                            "output"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("gas",
                M.call_closure (|
                  Ty.path "revm_interpreter::gas::Gas",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "revm_interpreter::gas::Gas",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::InterpreterResult",
                            "gas"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_revm_interpreter_interpreter_InterpreterResult.
  
  Module Impl_core_fmt_Debug_for_revm_interpreter_interpreter_InterpreterResult.
    Definition Self : Ty.t := Ty.path "revm_interpreter::interpreter::InterpreterResult".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "InterpreterResult" |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "result" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_interpreter::interpreter::InterpreterResult",
                        "result"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "output" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_interpreter::interpreter::InterpreterResult",
                        "output"
                      |)
                    |)
                  |)
                |));
              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "gas" |) |) |);
              (* Unsize *)
              M.pointer_coercion
                (M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::InterpreterResult",
                            "gas"
                          |)
                        |)
                      |)
                    |)
                  |)
                |))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_interpreter_interpreter_InterpreterResult.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_interpreter_interpreter_InterpreterResult.
    Definition Self : Ty.t := Ty.path "revm_interpreter::interpreter::InterpreterResult".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_interpreter_interpreter_InterpreterResult.
  
  Module Impl_core_cmp_PartialEq_revm_interpreter_interpreter_InterpreterResult_for_revm_interpreter_interpreter_InterpreterResult.
    Definition Self : Ty.t := Ty.path "revm_interpreter::interpreter::InterpreterResult".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            LogicalOp.and (|
              M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.path "revm_interpreter::instruction_result::InstructionResult",
                  [],
                  [ Ty.path "revm_interpreter::instruction_result::InstructionResult" ],
                  "eq",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_interpreter::interpreter::InterpreterResult",
                      "result"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "revm_interpreter::interpreter::InterpreterResult",
                      "result"
                    |)
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.path "alloy_primitives::bytes_::Bytes",
                    [],
                    [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                    "eq",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_interpreter::interpreter::InterpreterResult",
                        "output"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "revm_interpreter::interpreter::InterpreterResult",
                        "output"
                      |)
                    |)
                  ]
                |)))
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.path "revm_interpreter::gas::Gas",
                  [],
                  [ Ty.path "revm_interpreter::gas::Gas" ],
                  "eq",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_interpreter::interpreter::InterpreterResult",
                      "gas"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "revm_interpreter::interpreter::InterpreterResult",
                      "gas"
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "revm_interpreter::interpreter::InterpreterResult" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_revm_interpreter_interpreter_InterpreterResult_for_revm_interpreter_interpreter_InterpreterResult.
  
  Module Impl_core_cmp_Eq_for_revm_interpreter_interpreter_InterpreterResult.
    Definition Self : Ty.t := Ty.path "revm_interpreter::interpreter::InterpreterResult".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              Value.DeclaredButUndefined,
                              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_interpreter_interpreter_InterpreterResult.
  
  Module Impl_revm_interpreter_interpreter_InterpreterResult.
    Definition Self : Ty.t := Ty.path "revm_interpreter::interpreter::InterpreterResult".
    
    (*
        pub fn new(result: InstructionResult, output: Bytes, gas: Gas) -> Self {
            Self {
                result,
                output,
                gas,
            }
        }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ result; output; gas ] =>
        ltac:(M.monadic
          (let result := M.alloc (| result |) in
          let output := M.alloc (| output |) in
          let gas := M.alloc (| gas |) in
          Value.StructRecord
            "revm_interpreter::interpreter::InterpreterResult"
            []
            []
            [
              ("result", M.read (| result |));
              ("output", M.read (| output |));
              ("gas", M.read (| gas |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub const fn is_ok(&self) -> bool {
            self.result.is_ok()
        }
    *)
    Definition is_ok (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_associated_function (|
              Ty.path "revm_interpreter::instruction_result::InstructionResult",
              "is_ok",
              [],
              []
            |),
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "revm_interpreter::interpreter::InterpreterResult",
                  "result"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_ok : M.IsAssociatedFunction.C Self "is_ok" is_ok.
    Admitted.
    Global Typeclasses Opaque is_ok.
    
    (*
        pub const fn is_revert(&self) -> bool {
            self.result.is_revert()
        }
    *)
    Definition is_revert (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_associated_function (|
              Ty.path "revm_interpreter::instruction_result::InstructionResult",
              "is_revert",
              [],
              []
            |),
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "revm_interpreter::interpreter::InterpreterResult",
                  "result"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_revert :
      M.IsAssociatedFunction.C Self "is_revert" is_revert.
    Admitted.
    Global Typeclasses Opaque is_revert.
    
    (*
        pub const fn is_error(&self) -> bool {
            self.result.is_error()
        }
    *)
    Definition is_error (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_associated_function (|
              Ty.path "revm_interpreter::instruction_result::InstructionResult",
              "is_error",
              [],
              []
            |),
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "revm_interpreter::interpreter::InterpreterResult",
                  "result"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_error : M.IsAssociatedFunction.C Self "is_error" is_error.
    Admitted.
    Global Typeclasses Opaque is_error.
  End Impl_revm_interpreter_interpreter_InterpreterResult.
End interpreter.
