(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module interpreter.
  Module runtime_flags.
    (* StructRecord
      {
        name := "RuntimeFlags";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("is_static", Ty.path "bool");
            ("is_eof_init", Ty.path "bool");
            ("is_eof", Ty.path "bool");
            ("spec_id", Ty.path "revm_specification::hardfork::SpecId")
          ];
      } *)
    
    Module Impl_revm_interpreter_interpreter_types_RuntimeFlag_for_revm_interpreter_interpreter_runtime_flags_RuntimeFlags.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::runtime_flags::RuntimeFlags".
      
      (*
          fn is_static(&self) -> bool {
              self.is_static
          }
      *)
      Definition is_static (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "revm_interpreter::interpreter::runtime_flags::RuntimeFlags",
                "is_static"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn is_eof(&self) -> bool {
              self.is_eof
          }
      *)
      Definition is_eof (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "revm_interpreter::interpreter::runtime_flags::RuntimeFlags",
                "is_eof"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn is_eof_init(&self) -> bool {
              self.is_eof_init
          }
      *)
      Definition is_eof_init (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "revm_interpreter::interpreter::runtime_flags::RuntimeFlags",
                "is_eof_init"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn spec_id(&self) -> SpecId {
              self.spec_id
          }
      *)
      Definition spec_id (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "revm_interpreter::interpreter::runtime_flags::RuntimeFlags",
                "spec_id"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "revm_interpreter::interpreter_types::RuntimeFlag"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [
            ("is_static", InstanceField.Method is_static);
            ("is_eof", InstanceField.Method is_eof);
            ("is_eof_init", InstanceField.Method is_eof_init);
            ("spec_id", InstanceField.Method spec_id)
          ].
    End Impl_revm_interpreter_interpreter_types_RuntimeFlag_for_revm_interpreter_interpreter_runtime_flags_RuntimeFlags.
  End runtime_flags.
End interpreter.
