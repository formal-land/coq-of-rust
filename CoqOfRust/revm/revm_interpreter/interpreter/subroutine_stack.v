(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module interpreter.
  Module subroutine_stack.
    (* StructRecord
      {
        name := "SubRoutineReturnFrame";
        const_params := [];
        ty_params := [];
        fields := [ ("idx", Ty.path "usize"); ("pc", Ty.path "usize") ];
      } *)
    
    Module Impl_core_fmt_Debug_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "SubRoutineReturnFrame" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "idx" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame",
                          "idx"
                        |)
                      |)
                    |)
                  |));
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "pc" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame",
                              "pc"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
    
    Module Impl_core_default_Default_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame".
      
      (* Default *)
      Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.StructRecord
              "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame"
              [
                ("idx",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "usize",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("pc",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "usize",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
    
    Module Impl_core_clone_Clone_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
    
    Module Impl_core_marker_Copy_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
    
    Module Impl_core_marker_StructuralPartialEq_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
    
    Module Impl_core_cmp_PartialEq_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame",
                      "idx"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame",
                      "idx"
                    |)
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  BinOp.eq,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame",
                        "pc"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame",
                        "pc"
                      |)
                    |)
                  ]
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
    
    Module Impl_core_cmp_Eq_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
    
    Module Impl_core_hash_Hash_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame".
      
      (* Hash *)
      Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::hash::Hash",
                      Ty.path "usize",
                      [],
                      [],
                      "hash",
                      [],
                      [ __H ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame",
                              "idx"
                            |)
                          |)
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.path "usize",
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame",
                            "pc"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
    
    Module Impl_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame".
      
      (*
          pub fn new(idx: usize, pc: usize) -> Self {
              Self { idx, pc }
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ idx; pc ] =>
          ltac:(M.monadic
            (let idx := M.alloc (| idx |) in
            let pc := M.alloc (| pc |) in
            Value.StructRecord
              "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame"
              [ ("idx", M.read (| idx |)); ("pc", M.read (| pc |)) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_revm_interpreter_interpreter_subroutine_stack_SubRoutineReturnFrame.
    
    (* StructRecord
      {
        name := "SubRoutineImpl";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("return_stack",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                  Ty.path "alloc::alloc::Global"
                ]);
            ("current_code_idx", Ty.path "usize")
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl"
              [
                ("return_stack",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path
                          "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.path
                            "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                              "return_stack"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("current_code_idx",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "usize",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                              "current_code_idx"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
    
    Module Impl_core_fmt_Debug_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "SubRoutineImpl" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "return_stack" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                          "return_stack"
                        |)
                      |)
                    |)
                  |));
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "current_code_idx" |) |) |);
                (* Unsize *)
                M.pointer_coercion
                  (M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                              "current_code_idx"
                            |)
                          |)
                        |)
                      |)
                    |)
                  |))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
    
    Module Impl_core_default_Default_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl".
      
      (* Default *)
      Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.StructRecord
              "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl"
              [
                ("return_stack",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path
                          "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.path
                            "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("current_code_idx",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "usize",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
    
    Module Impl_core_marker_StructuralPartialEq_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
    
    Module Impl_core_cmp_PartialEq_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.path
                        "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                      Ty.path "alloc::alloc::Global"
                    ],
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path
                          "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ],
                  "eq",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                      "return_stack"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                      "return_stack"
                    |)
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  BinOp.eq,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                        "current_code_idx"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                        "current_code_idx"
                      |)
                    |)
                  ]
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
    
    Module Impl_core_cmp_Eq_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                None,
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        None,
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
    
    Module Impl_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl".
      
      (*
          pub fn new() -> Self {
              Self {
                  return_stack: Vec::new(),
                  current_code_idx: 0,
              }
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.StructRecord
              "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl"
              [
                ("return_stack",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path
                          "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.path
                            "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |));
                ("current_code_idx", Value.Integer IntegerKind.Usize 0)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn len(&self) -> usize {
              self.return_stack.len()
          }
      *)
      Definition len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path
                      "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                    Ty.path "alloc::alloc::Global"
                  ],
                "len",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                    "return_stack"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_len : M.IsAssociatedFunction.C Self "len" len.
      Admitted.
      Global Typeclasses Opaque len.
      
      (*
          pub fn is_empty(&self) -> bool {
              self.return_stack.is_empty()
          }
      *)
      Definition is_empty (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path
                      "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                    Ty.path "alloc::alloc::Global"
                  ],
                "is_empty",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                    "return_stack"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_is_empty :
        M.IsAssociatedFunction.C Self "is_empty" is_empty.
      Admitted.
      Global Typeclasses Opaque is_empty.
      
      (*
          pub fn return_stack_len(&self) -> usize {
              self.return_stack.len()
          }
      *)
      Definition return_stack_len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path
                      "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                    Ty.path "alloc::alloc::Global"
                  ],
                "len",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                    "return_stack"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_return_stack_len :
        M.IsAssociatedFunction.C Self "return_stack_len" return_stack_len.
      Admitted.
      Global Typeclasses Opaque return_stack_len.
      
      (*
          pub fn set_current_code_idx(&mut self, idx: usize) {
              self.current_code_idx = idx;
          }
      *)
      Definition set_current_code_idx (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; idx ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let idx := M.alloc (| idx |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                      "current_code_idx"
                    |),
                    M.read (| idx |)
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_current_code_idx :
        M.IsAssociatedFunction.C Self "set_current_code_idx" set_current_code_idx.
      Admitted.
      Global Typeclasses Opaque set_current_code_idx.
    End Impl_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
    
    Module Impl_revm_interpreter_interpreter_types_SubRoutineStack_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
      Definition Self : Ty.t :=
        Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl".
      
      (*
          fn len(&self) -> usize {
              self.return_stack.len()
          }
      *)
      Definition len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path
                      "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                    Ty.path "alloc::alloc::Global"
                  ],
                "len",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                    "return_stack"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn routine_idx(&self) -> usize {
              self.current_code_idx
          }
      *)
      Definition routine_idx (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                "current_code_idx"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn push(&mut self, program_counter: usize, new_idx: usize) -> bool {
              if self.return_stack.len() >= 1024 {
                  return false;
              }
              self.return_stack.push(SubRoutineReturnFrame {
                  idx: self.current_code_idx,
                  pc: program_counter,
              });
              self.current_code_idx = new_idx;
              true
          }
      *)
      Definition push (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; program_counter; new_idx ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let program_counter := M.alloc (| program_counter |) in
            let new_idx := M.alloc (| new_idx |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ge,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.path
                                                "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                                              "return_stack"
                                            |)
                                          |)
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1024
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (| M.read (| M.return_ (| Value.Bool false |) |) |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.path
                                "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "push",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                              "return_stack"
                            |)
                          |);
                          Value.StructRecord
                            "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame"
                            [
                              ("idx",
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                                    "current_code_idx"
                                  |)
                                |));
                              ("pc", M.read (| program_counter |))
                            ]
                        ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.alloc (|
                      M.write (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                          "current_code_idx"
                        |),
                        M.read (| new_idx |)
                      |)
                    |) in
                  M.alloc (| Value.Bool true |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn pop(&mut self) -> Option<usize> {
              self.return_stack.pop().map(|i| {
                  self.current_code_idx = i.idx;
                  i.pc
              })
          }
      *)
      Definition pop (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.path "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame"
                  ],
                "map",
                [],
                [
                  Ty.path "usize";
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.path
                            "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame"
                        ]
                    ]
                    (Ty.path "usize")
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [
                      Ty.path
                        "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path
                          "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame";
                        Ty.path "alloc::alloc::Global"
                      ],
                    "pop",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                        "return_stack"
                      |)
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Some
                              (Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.path
                                        "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame"
                                    ]
                                ]
                                (Ty.path "usize")),
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let i := M.copy (| γ |) in
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.write (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                                            "current_code_idx"
                                          |),
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              i,
                                              "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame",
                                              "idx"
                                            |)
                                          |)
                                        |)
                                      |) in
                                    M.SubPointer.get_struct_record_field (|
                                      i,
                                      "revm_interpreter::interpreter::subroutine_stack::SubRoutineReturnFrame",
                                      "pc"
                                    |)
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn set_routine_idx(&mut self, idx: usize) {
              self.current_code_idx = idx;
          }
      *)
      Definition set_routine_idx (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; idx ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let idx := M.alloc (| idx |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "revm_interpreter::interpreter::subroutine_stack::SubRoutineImpl",
                      "current_code_idx"
                    |),
                    M.read (| idx |)
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "revm_interpreter::interpreter_types::SubRoutineStack"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [
            ("len", InstanceField.Method len);
            ("routine_idx", InstanceField.Method routine_idx);
            ("push", InstanceField.Method push);
            ("pop", InstanceField.Method pop);
            ("set_routine_idx", InstanceField.Method set_routine_idx)
          ].
    End Impl_revm_interpreter_interpreter_types_SubRoutineStack_for_revm_interpreter_interpreter_subroutine_stack_SubRoutineImpl.
  End subroutine_stack.
End interpreter.
