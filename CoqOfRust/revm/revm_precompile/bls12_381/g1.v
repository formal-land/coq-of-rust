(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module bls12_381.
  Module g1.
    Definition value_G1_INPUT_ITEM_LENGTH
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 128 |))).
    
    Global Instance Instance_IsConstant_value_G1_INPUT_ITEM_LENGTH :
      M.IsFunction.C
        "revm_precompile::bls12_381::g1::G1_INPUT_ITEM_LENGTH"
        value_G1_INPUT_ITEM_LENGTH.
    Admitted.
    Global Typeclasses Opaque value_G1_INPUT_ITEM_LENGTH.
    
    Definition value_G1_OUTPUT_LENGTH (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 128 |))).
    
    Global Instance Instance_IsConstant_value_G1_OUTPUT_LENGTH :
      M.IsFunction.C "revm_precompile::bls12_381::g1::G1_OUTPUT_LENGTH" value_G1_OUTPUT_LENGTH.
    Admitted.
    Global Typeclasses Opaque value_G1_OUTPUT_LENGTH.
    
    (*
    pub(super) fn encode_g1_point(input: *const blst_p1_affine) -> Bytes {
        let mut out = vec![0u8; G1_OUTPUT_LENGTH];
        // SAFETY: Out comes from fixed length array, input is a blst value.
        unsafe {
            fp_to_bytes(&mut out[..PADDED_FP_LENGTH], &( *input).x);
            fp_to_bytes(&mut out[PADDED_FP_LENGTH..], &( *input).y);
        }
        out.into()
    }
    *)
    Definition encode_g1_point (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ input ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          M.read (|
            let~ out :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                  M.get_function (| "alloc::vec::from_elem", [], [ Ty.path "u8" ] |),
                  [
                    Value.Integer IntegerKind.U8 0;
                    M.read (|
                      get_constant (|
                        "revm_precompile::bls12_381::g1::G1_OUTPUT_LENGTH",
                        Ty.path "usize"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (| "revm_precompile::bls12_381::utils::fp_to_bytes", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_trait_method (|
                                  "core::ops::index::IndexMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeTo")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                  "index_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, out |);
                                  Value.StructRecord
                                    "core::ops::range::RangeTo"
                                    [
                                      ("end_",
                                        M.read (|
                                          get_constant (|
                                            "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |)
                            |)
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.ConstPointer,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| input |) |),
                              "blst::blst_p1_affine",
                              "x"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (| "revm_precompile::bls12_381::utils::fp_to_bytes", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_trait_method (|
                                  "core::ops::index::IndexMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeFrom")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                  "index_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, out |);
                                  Value.StructRecord
                                    "core::ops::range::RangeFrom"
                                    [
                                      ("start",
                                        M.read (|
                                          get_constant (|
                                            "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                            Ty.path "usize"
                                          |)
                                        |))
                                    ]
                                ]
                              |)
                            |)
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.ConstPointer,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| input |) |),
                              "blst::blst_p1_affine",
                              "y"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "alloy_primitives::bytes_::Bytes",
                M.get_trait_method (|
                  "core::convert::Into",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                  [],
                  [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                  "into",
                  [],
                  []
                |),
                [ M.read (| out |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_encode_g1_point :
      M.IsFunction.C "revm_precompile::bls12_381::g1::encode_g1_point" encode_g1_point.
    Admitted.
    Global Typeclasses Opaque encode_g1_point.
    
    (*
    pub(super) fn decode_and_check_g1(
        p0_x: &[u8; 48],
        p0_y: &[u8; 48],
    ) -> Result<blst_p1_affine, PrecompileError> {
        let out = blst_p1_affine {
            x: fp_from_bendian(p0_x)?,
            y: fp_from_bendian(p0_y)?,
        };
    
        Ok(out)
    }
    *)
    Definition decode_and_check_g1 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ p0_x; p0_y ] =>
        ltac:(M.monadic
          (let p0_x := M.alloc (| p0_x |) in
          let p0_y := M.alloc (| p0_y |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ out : Ty.path "blst::blst_p1_affine" :=
                  M.alloc (|
                    Value.StructRecord
                      "blst::blst_p1_affine"
                      [
                        ("x",
                          M.read (|
                            M.match_operator (|
                              Some (Ty.path "blst::blst_fp"),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "revm_precompile::interface::PrecompileError"
                                        ];
                                      Ty.path "blst::blst_fp"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "blst::blst_fp";
                                        Ty.path "revm_precompile::interface::PrecompileError"
                                      ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "blst::blst_fp";
                                          Ty.path "revm_precompile::interface::PrecompileError"
                                        ],
                                      M.get_function (|
                                        "revm_precompile::bls12_381::utils::fp_from_bendian",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| p0_x |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "blst::blst_p1_affine";
                                                  Ty.path
                                                    "revm_precompile::interface::PrecompileError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "blst::blst_p1_affine";
                                                    Ty.path
                                                      "revm_precompile::interface::PrecompileError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "revm_precompile::interface::PrecompileError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |));
                        ("y",
                          M.read (|
                            M.match_operator (|
                              Some (Ty.path "blst::blst_fp"),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "revm_precompile::interface::PrecompileError"
                                        ];
                                      Ty.path "blst::blst_fp"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "blst::blst_fp";
                                        Ty.path "revm_precompile::interface::PrecompileError"
                                      ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "blst::blst_fp";
                                          Ty.path "revm_precompile::interface::PrecompileError"
                                        ],
                                      M.get_function (|
                                        "revm_precompile::bls12_381::utils::fp_from_bendian",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| p0_y |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "blst::blst_p1_affine";
                                                  Ty.path
                                                    "revm_precompile::interface::PrecompileError"
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "blst::blst_p1_affine";
                                                    Ty.path
                                                      "revm_precompile::interface::PrecompileError"
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path
                                                        "revm_precompile::interface::PrecompileError"
                                                    ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |))
                      ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| out |) ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_decode_and_check_g1 :
      M.IsFunction.C "revm_precompile::bls12_381::g1::decode_and_check_g1" decode_and_check_g1.
    Admitted.
    Global Typeclasses Opaque decode_and_check_g1.
    
    (*
    pub(super) fn extract_g1_input(
        input: &[u8],
        subgroup_check: bool,
    ) -> Result<blst_p1_affine, PrecompileError> {
        if input.len() != G1_INPUT_ITEM_LENGTH {
            return Err(PrecompileError::Other(format!(
                "Input should be {G1_INPUT_ITEM_LENGTH} bytes, was {}",
                input.len()
            )));
        }
    
        let input_p0_x = remove_padding(&input[..PADDED_FP_LENGTH])?;
        let input_p0_y = remove_padding(&input[PADDED_FP_LENGTH..G1_INPUT_ITEM_LENGTH])?;
        let out = decode_and_check_g1(input_p0_x, input_p0_y)?;
    
        if subgroup_check {
            // NB: Subgroup checks
            //
            // Scalar multiplications, MSMs and pairings MUST perform a subgroup check.
            //
            // Implementations SHOULD use the optimized subgroup check method:
            //
            // https://eips.ethereum.org/assets/eip-2537/fast_subgroup_checks
            //
            // On any input that fail the subgroup check, the precompile MUST return an error.
            //
            // As endomorphism acceleration requires input on the correct subgroup, implementers MAY
            // use endomorphism acceleration.
            if unsafe { !blst_p1_affine_in_g1(&out) } {
                return Err(PrecompileError::Other("Element not in G1".to_string()));
            }
        } else {
            // From EIP-2537:
            //
            // Error cases:
            //
            // * An input is neither a point on the G1 elliptic curve nor the infinity point
            //
            // NB: There is no subgroup check for the G1 addition precompile.
            //
            // We use blst_p1_affine_on_curve instead of blst_p1_affine_in_g1 because the latter performs
            // the subgroup check.
            //
            // SAFETY: Out is a blst value.
            if unsafe { !blst_p1_affine_on_curve(&out) } {
                return Err(PrecompileError::Other(
                    "Element not on G1 curve".to_string(),
                ));
            }
        }
    
        Ok(out)
    }
    *)
    Definition extract_g1_input (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ input; subgroup_check ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          let subgroup_check := M.alloc (| subgroup_check |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.ne (|
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| input |) |)
                                      |)
                                    ]
                                  |),
                                  M.read (|
                                    get_constant (|
                                      "revm_precompile::bls12_381::g1::G1_INPUT_ITEM_LENGTH",
                                      Ty.path "usize"
                                    |)
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_precompile::interface::PrecompileError::Other"
                                        [
                                          M.call_closure (|
                                            Ty.path "alloc::string::String",
                                            M.get_function (|
                                              "core::hint::must_use",
                                              [],
                                              [ Ty.path "alloc::string::String" ]
                                            |),
                                            [
                                              M.read (|
                                                let~ res : Ty.path "alloc::string::String" :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.path "alloc::string::String",
                                                      M.get_function (|
                                                        "alloc::fmt::format",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::Arguments",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::Arguments",
                                                            "new_v1",
                                                            [
                                                              Value.Integer IntegerKind.Usize 2;
                                                              Value.Integer IntegerKind.Usize 2
                                                            ],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        mk_str (|
                                                                          "Input should be "
                                                                        |);
                                                                        mk_str (| " bytes, was " |)
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.match_operator (|
                                                                    Some
                                                                      (Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::rt::Argument"
                                                                        ]),
                                                                    M.alloc (|
                                                                      Value.Tuple
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [ Ty.path "u8"
                                                                                    ],
                                                                                  "len",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        input
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            get_constant (|
                                                                              "revm_precompile::bls12_381::g1::G1_INPUT_ITEM_LENGTH",
                                                                              Ty.path "usize"
                                                                            |)
                                                                          |)
                                                                        ]
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let args :=
                                                                            M.copy (| γ |) in
                                                                          M.alloc (|
                                                                            Value.Array
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument",
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "core::fmt::rt::Argument",
                                                                                    "new_display",
                                                                                    [],
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            args,
                                                                                            1
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument",
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "core::fmt::rt::Argument",
                                                                                    "new_display",
                                                                                    [],
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            args,
                                                                                            0
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                res
                                              |)
                                            ]
                                          |)
                                        ]
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ input_p0_x :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 48 ]
                          [ Ty.path "u8" ]
                      ] :=
                  M.copy (|
                    M.match_operator (|
                      Some
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 48 ]
                              [ Ty.path "u8" ]
                          ]),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 48 ]
                                    [ Ty.path "u8" ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 48 ]
                                      [ Ty.path "u8" ]
                                  ];
                                Ty.path "revm_precompile::interface::PrecompileError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 48 ]
                                        [ Ty.path "u8" ]
                                    ];
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ],
                              M.get_function (|
                                "revm_precompile::bls12_381::utils::remove_padding",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                          M.get_trait_method (|
                                            "core::ops::index::Index",
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::RangeTo")
                                                []
                                                [ Ty.path "usize" ]
                                            ],
                                            "index",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| input |) |)
                                            |);
                                            Value.StructRecord
                                              "core::ops::range::RangeTo"
                                              [
                                                ("end_",
                                                  M.read (|
                                                    get_constant (|
                                                      "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                                      Ty.path "usize"
                                                    |)
                                                  |))
                                              ]
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "blst::blst_p1_affine";
                                          Ty.path "revm_precompile::interface::PrecompileError"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "blst::blst_p1_affine";
                                            Ty.path "revm_precompile::interface::PrecompileError"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "revm_precompile::interface::PrecompileError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ input_p0_y :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 48 ]
                          [ Ty.path "u8" ]
                      ] :=
                  M.copy (|
                    M.match_operator (|
                      Some
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 48 ]
                              [ Ty.path "u8" ]
                          ]),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 48 ]
                                    [ Ty.path "u8" ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 48 ]
                                      [ Ty.path "u8" ]
                                  ];
                                Ty.path "revm_precompile::interface::PrecompileError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 48 ]
                                        [ Ty.path "u8" ]
                                    ];
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ],
                              M.get_function (|
                                "revm_precompile::bls12_381::utils::remove_padding",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                          M.get_trait_method (|
                                            "core::ops::index::Index",
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ]
                                            ],
                                            "index",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| input |) |)
                                            |);
                                            Value.StructRecord
                                              "core::ops::range::Range"
                                              [
                                                ("start",
                                                  M.read (|
                                                    get_constant (|
                                                      "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                                      Ty.path "usize"
                                                    |)
                                                  |));
                                                ("end_",
                                                  M.read (|
                                                    get_constant (|
                                                      "revm_precompile::bls12_381::g1::G1_INPUT_ITEM_LENGTH",
                                                      Ty.path "usize"
                                                    |)
                                                  |))
                                              ]
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "blst::blst_p1_affine";
                                          Ty.path "revm_precompile::interface::PrecompileError"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "blst::blst_p1_affine";
                                            Ty.path "revm_precompile::interface::PrecompileError"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "revm_precompile::interface::PrecompileError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ out : Ty.path "blst::blst_p1_affine" :=
                  M.copy (|
                    M.match_operator (|
                      Some (Ty.path "blst::blst_p1_affine"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ];
                              Ty.path "blst::blst_p1_affine"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "blst::blst_p1_affine";
                                Ty.path "revm_precompile::interface::PrecompileError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "blst::blst_p1_affine";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ],
                              M.get_function (|
                                "revm_precompile::bls12_381::g1::decode_and_check_g1",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| input_p0_x |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| input_p0_y |) |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "blst::blst_p1_affine";
                                          Ty.path "revm_precompile::interface::PrecompileError"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "blst::blst_p1_affine";
                                            Ty.path "revm_precompile::interface::PrecompileError"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "revm_precompile::interface::PrecompileError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use subgroup_check in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_function (|
                                              "blst::blst_p1_affine_in_g1",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.ConstPointer,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, out |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              Value.StructTuple
                                                "revm_precompile::interface::PrecompileError::Other"
                                                [
                                                  M.call_closure (|
                                                    Ty.path "alloc::string::String",
                                                    M.get_trait_method (|
                                                      "alloc::string::ToString",
                                                      Ty.path "str",
                                                      [],
                                                      [],
                                                      "to_string",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          mk_str (| "Element not in G1" |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_function (|
                                              "blst::blst_p1_affine_on_curve",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.ConstPointer,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, out |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              Value.StructTuple
                                                "revm_precompile::interface::PrecompileError::Other"
                                                [
                                                  M.call_closure (|
                                                    Ty.path "alloc::string::String",
                                                    M.get_trait_method (|
                                                      "alloc::string::ToString",
                                                      Ty.path "str",
                                                      [],
                                                      [],
                                                      "to_string",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          mk_str (| "Element not on G1 curve" |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| out |) ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_extract_g1_input :
      M.IsFunction.C "revm_precompile::bls12_381::g1::extract_g1_input" extract_g1_input.
    Admitted.
    Global Typeclasses Opaque extract_g1_input.
  End g1.
End bls12_381.
