(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module bls12_381.
  Module g2.
    Definition value_G2_INPUT_ITEM_LENGTH
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 256 |))).
    
    Global Instance Instance_IsConstant_value_G2_INPUT_ITEM_LENGTH :
      M.IsFunction.C
        "revm_precompile::bls12_381::g2::G2_INPUT_ITEM_LENGTH"
        value_G2_INPUT_ITEM_LENGTH.
    Admitted.
    Global Typeclasses Opaque value_G2_INPUT_ITEM_LENGTH.
    
    Definition value_G2_OUTPUT_LENGTH (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 256 |))).
    
    Global Instance Instance_IsConstant_value_G2_OUTPUT_LENGTH :
      M.IsFunction.C "revm_precompile::bls12_381::g2::G2_OUTPUT_LENGTH" value_G2_OUTPUT_LENGTH.
    Admitted.
    Global Typeclasses Opaque value_G2_OUTPUT_LENGTH.
    
    (*
    pub(super) fn encode_g2_point(input: &blst_p2_affine) -> Bytes {
        let mut out = vec![0u8; G2_OUTPUT_LENGTH];
        fp_to_bytes(&mut out[..PADDED_FP_LENGTH], &input.x.fp[0]);
        fp_to_bytes(
            &mut out[PADDED_FP_LENGTH..2 * PADDED_FP_LENGTH],
            &input.x.fp[1],
        );
        fp_to_bytes(
            &mut out[2 * PADDED_FP_LENGTH..3 * PADDED_FP_LENGTH],
            &input.y.fp[0],
        );
        fp_to_bytes(
            &mut out[3 * PADDED_FP_LENGTH..4 * PADDED_FP_LENGTH],
            &input.y.fp[1],
        );
        out.into()
    }
    *)
    Definition encode_g2_point (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ input ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          M.read (|
            let~ out :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                  M.get_function (| "alloc::vec::from_elem", [], [ Ty.path "u8" ] |),
                  [
                    Value.Integer IntegerKind.U8 0;
                    M.read (|
                      get_constant (|
                        "revm_precompile::bls12_381::g2::G2_OUTPUT_LENGTH",
                        Ty.path "usize"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (| "revm_precompile::bls12_381::utils::fp_to_bytes", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_trait_method (|
                                "core::ops::index::IndexMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeTo")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index_mut",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, out |);
                                Value.StructRecord
                                  "core::ops::range::RangeTo"
                                  [
                                    ("end_",
                                      M.read (|
                                        get_constant (|
                                          "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                          Ty.path "usize"
                                        |)
                                      |))
                                  ]
                              ]
                            |)
                          |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.ConstPointer,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| input |) |),
                                "blst::blst_p2_affine",
                                "x"
                              |),
                              "blst::blst_fp2",
                              "fp"
                            |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (| "revm_precompile::bls12_381::utils::fp_to_bytes", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_trait_method (|
                                "core::ops::index::IndexMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index_mut",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, out |);
                                Value.StructRecord
                                  "core::ops::range::Range"
                                  [
                                    ("start",
                                      M.read (|
                                        get_constant (|
                                          "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                          Ty.path "usize"
                                        |)
                                      |));
                                    ("end_",
                                      BinOp.Wrap.mul (|
                                        Value.Integer IntegerKind.Usize 2,
                                        M.read (|
                                          get_constant (|
                                            "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                            Ty.path "usize"
                                          |)
                                        |)
                                      |))
                                  ]
                              ]
                            |)
                          |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.ConstPointer,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| input |) |),
                                "blst::blst_p2_affine",
                                "x"
                              |),
                              "blst::blst_fp2",
                              "fp"
                            |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (| "revm_precompile::bls12_381::utils::fp_to_bytes", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_trait_method (|
                                "core::ops::index::IndexMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index_mut",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, out |);
                                Value.StructRecord
                                  "core::ops::range::Range"
                                  [
                                    ("start",
                                      BinOp.Wrap.mul (|
                                        Value.Integer IntegerKind.Usize 2,
                                        M.read (|
                                          get_constant (|
                                            "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                            Ty.path "usize"
                                          |)
                                        |)
                                      |));
                                    ("end_",
                                      BinOp.Wrap.mul (|
                                        Value.Integer IntegerKind.Usize 3,
                                        M.read (|
                                          get_constant (|
                                            "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                            Ty.path "usize"
                                          |)
                                        |)
                                      |))
                                  ]
                              ]
                            |)
                          |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.ConstPointer,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| input |) |),
                                "blst::blst_p2_affine",
                                "y"
                              |),
                              "blst::blst_fp2",
                              "fp"
                            |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (| "revm_precompile::bls12_381::utils::fp_to_bytes", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_trait_method (|
                                "core::ops::index::IndexMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index_mut",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, out |);
                                Value.StructRecord
                                  "core::ops::range::Range"
                                  [
                                    ("start",
                                      BinOp.Wrap.mul (|
                                        Value.Integer IntegerKind.Usize 3,
                                        M.read (|
                                          get_constant (|
                                            "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                            Ty.path "usize"
                                          |)
                                        |)
                                      |));
                                    ("end_",
                                      BinOp.Wrap.mul (|
                                        Value.Integer IntegerKind.Usize 4,
                                        M.read (|
                                          get_constant (|
                                            "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                            Ty.path "usize"
                                          |)
                                        |)
                                      |))
                                  ]
                              ]
                            |)
                          |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.ConstPointer,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| input |) |),
                                "blst::blst_p2_affine",
                                "y"
                              |),
                              "blst::blst_fp2",
                              "fp"
                            |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "alloy_primitives::bytes_::Bytes",
                M.get_trait_method (|
                  "core::convert::Into",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                  [],
                  [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                  "into",
                  [],
                  []
                |),
                [ M.read (| out |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_encode_g2_point :
      M.IsFunction.C "revm_precompile::bls12_381::g2::encode_g2_point" encode_g2_point.
    Admitted.
    Global Typeclasses Opaque encode_g2_point.
    
    (*
    pub(super) fn decode_and_check_g2(
        x1: &[u8; 48],
        x2: &[u8; 48],
        y1: &[u8; 48],
        y2: &[u8; 48],
    ) -> Result<blst_p2_affine, PrecompileError> {
        Ok(blst_p2_affine {
            x: check_canonical_fp2(x1, x2)?,
            y: check_canonical_fp2(y1, y2)?,
        })
    }
    *)
    Definition decode_and_check_g2 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ x1; x2; y1; y2 ] =>
        ltac:(M.monadic
          (let x1 := M.alloc (| x1 |) in
          let x2 := M.alloc (| x2 |) in
          let y1 := M.alloc (| y1 |) in
          let y2 := M.alloc (| y2 |) in
          M.catch_return (|
            ltac:(M.monadic
              (Value.StructTuple
                "core::result::Result::Ok"
                [
                  Value.StructRecord
                    "blst::blst_p2_affine"
                    [
                      ("x",
                        M.read (|
                          M.match_operator (|
                            Some (Ty.path "blst::blst_fp2"),
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.path "revm_precompile::interface::PrecompileError"
                                      ];
                                    Ty.path "blst::blst_fp2"
                                  ],
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "blst::blst_fp2";
                                      Ty.path "revm_precompile::interface::PrecompileError"
                                    ],
                                  [],
                                  [],
                                  "branch",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "blst::blst_fp2";
                                        Ty.path "revm_precompile::interface::PrecompileError"
                                      ],
                                    M.get_function (|
                                      "revm_precompile::bls12_381::g2::check_canonical_fp2",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| x1 |) |)
                                      |);
                                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x2 |) |) |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "blst::blst_p2_affine";
                                                Ty.path
                                                  "revm_precompile::interface::PrecompileError"
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "blst::blst_p2_affine";
                                                  Ty.path
                                                    "revm_precompile::interface::PrecompileError"
                                                ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path
                                                      "revm_precompile::interface::PrecompileError"
                                                  ]
                                              ],
                                              "from_residual",
                                              [],
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |)
                        |));
                      ("y",
                        M.read (|
                          M.match_operator (|
                            Some (Ty.path "blst::blst_fp2"),
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.path "revm_precompile::interface::PrecompileError"
                                      ];
                                    Ty.path "blst::blst_fp2"
                                  ],
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "blst::blst_fp2";
                                      Ty.path "revm_precompile::interface::PrecompileError"
                                    ],
                                  [],
                                  [],
                                  "branch",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "blst::blst_fp2";
                                        Ty.path "revm_precompile::interface::PrecompileError"
                                      ],
                                    M.get_function (|
                                      "revm_precompile::bls12_381::g2::check_canonical_fp2",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| y1 |) |)
                                      |);
                                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y2 |) |) |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "blst::blst_p2_affine";
                                                Ty.path
                                                  "revm_precompile::interface::PrecompileError"
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "blst::blst_p2_affine";
                                                  Ty.path
                                                    "revm_precompile::interface::PrecompileError"
                                                ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path
                                                      "revm_precompile::interface::PrecompileError"
                                                  ]
                                              ],
                                              "from_residual",
                                              [],
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |)
                        |))
                    ]
                ]))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_decode_and_check_g2 :
      M.IsFunction.C "revm_precompile::bls12_381::g2::decode_and_check_g2" decode_and_check_g2.
    Admitted.
    Global Typeclasses Opaque decode_and_check_g2.
    
    (*
    pub(super) fn check_canonical_fp2(
        input_1: &[u8; 48],
        input_2: &[u8; 48],
    ) -> Result<blst_fp2, PrecompileError> {
        let fp_1 = fp_from_bendian(input_1)?;
        let fp_2 = fp_from_bendian(input_2)?;
    
        let fp2 = blst_fp2 { fp: [fp_1, fp_2] };
    
        Ok(fp2)
    }
    *)
    Definition check_canonical_fp2 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ input_1; input_2 ] =>
        ltac:(M.monadic
          (let input_1 := M.alloc (| input_1 |) in
          let input_2 := M.alloc (| input_2 |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ fp_1 : Ty.path "blst::blst_fp" :=
                  M.copy (|
                    M.match_operator (|
                      Some (Ty.path "blst::blst_fp"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ];
                              Ty.path "blst::blst_fp"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "blst::blst_fp";
                                Ty.path "revm_precompile::interface::PrecompileError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "blst::blst_fp";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ],
                              M.get_function (|
                                "revm_precompile::bls12_381::utils::fp_from_bendian",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input_1 |) |) |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "blst::blst_fp2";
                                          Ty.path "revm_precompile::interface::PrecompileError"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "blst::blst_fp2";
                                            Ty.path "revm_precompile::interface::PrecompileError"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "revm_precompile::interface::PrecompileError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ fp_2 : Ty.path "blst::blst_fp" :=
                  M.copy (|
                    M.match_operator (|
                      Some (Ty.path "blst::blst_fp"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ];
                              Ty.path "blst::blst_fp"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "blst::blst_fp";
                                Ty.path "revm_precompile::interface::PrecompileError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "blst::blst_fp";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ],
                              M.get_function (|
                                "revm_precompile::bls12_381::utils::fp_from_bendian",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input_2 |) |) |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "blst::blst_fp2";
                                          Ty.path "revm_precompile::interface::PrecompileError"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "blst::blst_fp2";
                                            Ty.path "revm_precompile::interface::PrecompileError"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "revm_precompile::interface::PrecompileError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ fp2 : Ty.path "blst::blst_fp2" :=
                  M.alloc (|
                    Value.StructRecord
                      "blst::blst_fp2"
                      [ ("fp", Value.Array [ M.read (| fp_1 |); M.read (| fp_2 |) ]) ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| fp2 |) ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_check_canonical_fp2 :
      M.IsFunction.C "revm_precompile::bls12_381::g2::check_canonical_fp2" check_canonical_fp2.
    Admitted.
    Global Typeclasses Opaque check_canonical_fp2.
    
    (*
    pub(super) fn extract_g2_input(
        input: &[u8],
        subgroup_check: bool,
    ) -> Result<blst_p2_affine, PrecompileError> {
        if input.len() != G2_INPUT_ITEM_LENGTH {
            return Err(PrecompileError::Other(format!(
                "Input should be {G2_INPUT_ITEM_LENGTH} bytes, was {}",
                input.len()
            )));
        }
    
        let mut input_fps = [&[0; FP_LENGTH]; 4];
        for i in 0..4 {
            input_fps[i] = remove_padding(&input[i * PADDED_FP_LENGTH..(i + 1) * PADDED_FP_LENGTH])?;
        }
    
        let out = decode_and_check_g2(input_fps[0], input_fps[1], input_fps[2], input_fps[3])?;
    
        if subgroup_check {
            // NB: Subgroup checks
            //
            // Scalar multiplications, MSMs and pairings MUST perform a subgroup check.
            //
            // Implementations SHOULD use the optimized subgroup check method:
            //
            // https://eips.ethereum.org/assets/eip-2537/fast_subgroup_checks
            //
            // On any input that fail the subgroup check, the precompile MUST return an error.
            //
            // As endomorphism acceleration requires input on the correct subgroup, implementers MAY
            // use endomorphism acceleration.
            if unsafe { !blst_p2_affine_in_g2(&out) } {
                return Err(PrecompileError::Other("Element not in G2".to_string()));
            }
        } else {
            // From EIP-2537:
            //
            // Error cases:
            //
            // * An input is neither a point on the G2 elliptic curve nor the infinity point
            //
            // NB: There is no subgroup check for the G2 addition precompile.
            //
            // We use blst_p2_affine_on_curve instead of blst_p2_affine_in_g2 because the latter performs
            // the subgroup check.
            //
            // SAFETY: Out is a blst value.
            if unsafe { !blst_p2_affine_on_curve(&out) } {
                return Err(PrecompileError::Other(
                    "Element not on G2 curve".to_string(),
                ));
            }
        }
    
        Ok(out)
    }
    *)
    Definition extract_g2_input (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ input; subgroup_check ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          let subgroup_check := M.alloc (| subgroup_check |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.ne (|
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| input |) |)
                                      |)
                                    ]
                                  |),
                                  M.read (|
                                    get_constant (|
                                      "revm_precompile::bls12_381::g2::G2_INPUT_ITEM_LENGTH",
                                      Ty.path "usize"
                                    |)
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_precompile::interface::PrecompileError::Other"
                                        [
                                          M.call_closure (|
                                            Ty.path "alloc::string::String",
                                            M.get_function (|
                                              "core::hint::must_use",
                                              [],
                                              [ Ty.path "alloc::string::String" ]
                                            |),
                                            [
                                              M.read (|
                                                let~ res : Ty.path "alloc::string::String" :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.path "alloc::string::String",
                                                      M.get_function (|
                                                        "alloc::fmt::format",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::Arguments",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::Arguments",
                                                            "new_v1",
                                                            [
                                                              Value.Integer IntegerKind.Usize 2;
                                                              Value.Integer IntegerKind.Usize 2
                                                            ],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        mk_str (|
                                                                          "Input should be "
                                                                        |);
                                                                        mk_str (| " bytes, was " |)
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.match_operator (|
                                                                    Some
                                                                      (Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::rt::Argument"
                                                                        ]),
                                                                    M.alloc (|
                                                                      Value.Tuple
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [ Ty.path "u8"
                                                                                    ],
                                                                                  "len",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        input
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            get_constant (|
                                                                              "revm_precompile::bls12_381::g2::G2_INPUT_ITEM_LENGTH",
                                                                              Ty.path "usize"
                                                                            |)
                                                                          |)
                                                                        ]
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let args :=
                                                                            M.copy (| γ |) in
                                                                          M.alloc (|
                                                                            Value.Array
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument",
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "core::fmt::rt::Argument",
                                                                                    "new_display",
                                                                                    [],
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            args,
                                                                                            1
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  Ty.path
                                                                                    "core::fmt::rt::Argument",
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "core::fmt::rt::Argument",
                                                                                    "new_display",
                                                                                    [],
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            args,
                                                                                            0
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                res
                                              |)
                                            ]
                                          |)
                                        ]
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ input_fps :
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 48 ]
                              [ Ty.path "u8" ]
                          ]
                      ] :=
                  M.alloc (|
                    repeat (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          repeat (|
                            Value.Integer IntegerKind.U8 0,
                            Value.Integer IntegerKind.Usize 48
                          |)
                        |)
                      |),
                      Value.Integer IntegerKind.Usize 4
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.use
                    (M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer IntegerKind.Usize 0);
                                ("end_", Value.Integer IntegerKind.Usize 4)
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let i := M.copy (| γ0_0 |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.alloc (|
                                              M.write (|
                                                M.SubPointer.get_array_field (|
                                                  input_fps,
                                                  M.read (| i |)
                                                |),
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.read (|
                                                      M.match_operator (|
                                                        Some
                                                          (Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 48
                                                                ]
                                                                [ Ty.path "u8" ]
                                                            ]),
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::control_flow::ControlFlow")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "revm_precompile::interface::PrecompileError"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          48
                                                                      ]
                                                                      [ Ty.path "u8" ]
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::Try",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            48
                                                                        ]
                                                                        [ Ty.path "u8" ]
                                                                    ];
                                                                  Ty.path
                                                                    "revm_precompile::interface::PrecompileError"
                                                                ],
                                                              [],
                                                              [],
                                                              "branch",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              48
                                                                          ]
                                                                          [ Ty.path "u8" ]
                                                                      ];
                                                                    Ty.path
                                                                      "revm_precompile::interface::PrecompileError"
                                                                  ],
                                                                M.get_function (|
                                                                  "revm_precompile::bls12_381::utils::remove_padding",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ Ty.path "u8" ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::index::Index",
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [ Ty.path "u8" ],
                                                                              [],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::ops::range::Range")
                                                                                  []
                                                                                  [ Ty.path "usize"
                                                                                  ]
                                                                              ],
                                                                              "index",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (| input |)
                                                                                |)
                                                                              |);
                                                                              Value.StructRecord
                                                                                "core::ops::range::Range"
                                                                                [
                                                                                  ("start",
                                                                                    BinOp.Wrap.mul (|
                                                                                      M.read (|
                                                                                        i
                                                                                      |),
                                                                                      M.read (|
                                                                                        get_constant (|
                                                                                          "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        |)
                                                                                      |)
                                                                                    |));
                                                                                  ("end_",
                                                                                    BinOp.Wrap.mul (|
                                                                                      BinOp.Wrap.add (|
                                                                                        M.read (|
                                                                                          i
                                                                                        |),
                                                                                        Value.Integer
                                                                                          IntegerKind.Usize
                                                                                          1
                                                                                      |),
                                                                                      M.read (|
                                                                                        get_constant (|
                                                                                          "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH",
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        |)
                                                                                      |)
                                                                                    |))
                                                                                ]
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                  0
                                                                |) in
                                                              let residual := M.copy (| γ0_0 |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    M.return_ (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "blst::blst_p2_affine";
                                                                            Ty.path
                                                                              "revm_precompile::interface::PrecompileError"
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::try_trait::FromResidual",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "blst::blst_p2_affine";
                                                                              Ty.path
                                                                                "revm_precompile::interface::PrecompileError"
                                                                            ],
                                                                          [],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "core::convert::Infallible";
                                                                                Ty.path
                                                                                  "revm_precompile::interface::PrecompileError"
                                                                              ]
                                                                          ],
                                                                          "from_residual",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [ M.read (| residual |) ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                  0
                                                                |) in
                                                              let val := M.copy (| γ0_0 |) in
                                                              M.alloc (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| val |) |)
                                                                |)
                                                              |)))
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let~ out : Ty.path "blst::blst_p2_affine" :=
                  M.copy (|
                    M.match_operator (|
                      Some (Ty.path "blst::blst_p2_affine"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ];
                              Ty.path "blst::blst_p2_affine"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "blst::blst_p2_affine";
                                Ty.path "revm_precompile::interface::PrecompileError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "blst::blst_p2_affine";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ],
                              M.get_function (|
                                "revm_precompile::bls12_381::g2::decode_and_check_g2",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.read (|
                                      M.SubPointer.get_array_field (|
                                        input_fps,
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.read (|
                                      M.SubPointer.get_array_field (|
                                        input_fps,
                                        Value.Integer IntegerKind.Usize 1
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.read (|
                                      M.SubPointer.get_array_field (|
                                        input_fps,
                                        Value.Integer IntegerKind.Usize 2
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.read (|
                                      M.SubPointer.get_array_field (|
                                        input_fps,
                                        Value.Integer IntegerKind.Usize 3
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "blst::blst_p2_affine";
                                          Ty.path "revm_precompile::interface::PrecompileError"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "blst::blst_p2_affine";
                                            Ty.path "revm_precompile::interface::PrecompileError"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "revm_precompile::interface::PrecompileError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use subgroup_check in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_function (|
                                              "blst::blst_p2_affine_in_g2",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.ConstPointer,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, out |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              Value.StructTuple
                                                "revm_precompile::interface::PrecompileError::Other"
                                                [
                                                  M.call_closure (|
                                                    Ty.path "alloc::string::String",
                                                    M.get_trait_method (|
                                                      "alloc::string::ToString",
                                                      Ty.path "str",
                                                      [],
                                                      [],
                                                      "to_string",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          mk_str (| "Element not in G2" |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_function (|
                                              "blst::blst_p2_affine_on_curve",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.ConstPointer,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, out |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              Value.StructTuple
                                                "revm_precompile::interface::PrecompileError::Other"
                                                [
                                                  M.call_closure (|
                                                    Ty.path "alloc::string::String",
                                                    M.get_trait_method (|
                                                      "alloc::string::ToString",
                                                      Ty.path "str",
                                                      [],
                                                      [],
                                                      "to_string",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          mk_str (| "Element not on G2 curve" |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| out |) ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_extract_g2_input :
      M.IsFunction.C "revm_precompile::bls12_381::g2::extract_g2_input" extract_g2_input.
    Admitted.
    Global Typeclasses Opaque extract_g2_input.
  End g2.
End bls12_381.
