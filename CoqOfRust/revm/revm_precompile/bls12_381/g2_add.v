(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module bls12_381.
  Module g2_add.
    Definition value_PRECOMPILE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          Value.StructTuple
            "revm_precompile::PrecompileWithAddress"
            [
              M.call_closure (|
                Ty.path "alloy_primitives::bits::address::Address",
                M.get_function (| "revm_precompile::u64_to_address", [], [] |),
                [
                  M.read (|
                    get_constant (| "revm_precompile::bls12_381::g2_add::ADDRESS", Ty.path "u64" |)
                  |)
                ]
              |);
              (* ReifyFnPointer *)
              M.pointer_coercion
                (M.get_function (| "revm_precompile::bls12_381::g2_add::g2_add", [], [] |))
            ]
        |))).
    
    Global Instance Instance_IsConstant_value_PRECOMPILE :
      M.IsFunction.C "revm_precompile::bls12_381::g2_add::PRECOMPILE" value_PRECOMPILE.
    Admitted.
    Global Typeclasses Opaque value_PRECOMPILE.
    
    Definition value_ADDRESS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 14 |))).
    
    Global Instance Instance_IsConstant_value_ADDRESS :
      M.IsFunction.C "revm_precompile::bls12_381::g2_add::ADDRESS" value_ADDRESS.
    Admitted.
    Global Typeclasses Opaque value_ADDRESS.
    
    Definition value_BASE_GAS_FEE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 800 |))).
    
    Global Instance Instance_IsConstant_value_BASE_GAS_FEE :
      M.IsFunction.C "revm_precompile::bls12_381::g2_add::BASE_GAS_FEE" value_BASE_GAS_FEE.
    Admitted.
    Global Typeclasses Opaque value_BASE_GAS_FEE.
    
    Definition value_INPUT_LENGTH (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 512 |))).
    
    Global Instance Instance_IsConstant_value_INPUT_LENGTH :
      M.IsFunction.C "revm_precompile::bls12_381::g2_add::INPUT_LENGTH" value_INPUT_LENGTH.
    Admitted.
    Global Typeclasses Opaque value_INPUT_LENGTH.
    
    (*
    pub(super) fn g2_add(input: &Bytes, gas_limit: u64) -> PrecompileResult {
        if BASE_GAS_FEE > gas_limit {
            return Err(PrecompileError::OutOfGas.into());
        }
    
        if input.len() != INPUT_LENGTH {
            return Err(PrecompileError::Other(format!(
                "G2ADD input should be {INPUT_LENGTH} bytes, was {}",
                input.len()
            ))
            .into());
        }
    
        // NB: There is no subgroup check for the G2 addition precompile.
        //
        // So we set the subgroup checks here to `false`
        let a_aff = &extract_g2_input(&input[..G2_INPUT_ITEM_LENGTH], false)?;
        let b_aff = &extract_g2_input(&input[G2_INPUT_ITEM_LENGTH..], false)?;
    
        let mut b = blst_p2::default();
        // SAFETY: `b` and `b_aff` are blst values.
        unsafe { blst_p2_from_affine(&mut b, b_aff) };
    
        let mut p = blst_p2::default();
        // SAFETY: `p`, `b` and `a_aff` are blst values.
        unsafe { blst_p2_add_or_double_affine(&mut p, &b, a_aff) };
    
        let mut p_aff = blst_p2_affine::default();
        // SAFETY: `p_aff` and `p` are blst values.
        unsafe { blst_p2_to_affine(&mut p_aff, &p) };
    
        let out = encode_g2_point(&p_aff);
        Ok(PrecompileOutput::new(BASE_GAS_FEE, out))
    }
    *)
    Definition g2_add (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ input; gas_limit ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          let gas_limit := M.alloc (| gas_limit |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.path "revm_precompile::interface::PrecompileOutput";
                Ty.path "revm_precompile::interface::PrecompileErrors"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.gt,
                                  [
                                    M.read (|
                                      get_constant (|
                                        "revm_precompile::bls12_381::g2_add::BASE_GAS_FEE",
                                        Ty.path "u64"
                                      |)
                                    |);
                                    M.read (| gas_limit |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_precompile::interface::PrecompileErrors",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.path "revm_precompile::interface::PrecompileError",
                                          [],
                                          [ Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "revm_precompile::interface::PrecompileError::OutOfGas"
                                            []
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ne,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.path "bytes::bytes::Bytes",
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "bytes::bytes::Bytes" ],
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.path "alloy_primitives::bytes_::Bytes",
                                                [],
                                                [],
                                                "deref",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| input |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.read (|
                                      get_constant (|
                                        "revm_precompile::bls12_381::g2_add::INPUT_LENGTH",
                                        Ty.path "usize"
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_precompile::interface::PrecompileErrors",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.path "revm_precompile::interface::PrecompileError",
                                          [],
                                          [ Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "revm_precompile::interface::PrecompileError::Other"
                                            [
                                              M.call_closure (|
                                                Ty.path "alloc::string::String",
                                                M.get_function (|
                                                  "core::hint::must_use",
                                                  [],
                                                  [ Ty.path "alloc::string::String" ]
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :
                                                        Ty.apply
                                                          (Ty.path "*")
                                                          []
                                                          [ Ty.path "alloc::string::String" ] :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "alloc::string::String",
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::Arguments",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_v1",
                                                                [
                                                                  Value.Integer IntegerKind.Usize 2;
                                                                  Value.Integer IntegerKind.Usize 2
                                                                ],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            mk_str (|
                                                                              "G2ADD input should be "
                                                                            |);
                                                                            mk_str (|
                                                                              " bytes, was "
                                                                            |)
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.match_operator (|
                                                                        Ty.apply
                                                                          (Ty.path "*")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  2
                                                                              ]
                                                                              [
                                                                                Ty.path
                                                                                  "core::fmt::rt::Argument"
                                                                              ]
                                                                          ],
                                                                        M.alloc (|
                                                                          Value.Tuple
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.path "usize",
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "bytes::bytes::Bytes",
                                                                                      "len",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "bytes::bytes::Bytes"
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::deref::Deref",
                                                                                              Ty.path
                                                                                                "alloy_primitives::bytes_::Bytes",
                                                                                              [],
                                                                                              [],
                                                                                              "deref",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    input
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |)
                                                                              |);
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                get_constant (|
                                                                                  "revm_precompile::bls12_381::g2_add::INPUT_LENGTH",
                                                                                  Ty.path "usize"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let args :=
                                                                                M.copy (| γ |) in
                                                                              M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "core::fmt::rt::Argument",
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_display",
                                                                                        [],
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                args,
                                                                                                1
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "core::fmt::rt::Argument",
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_display",
                                                                                        [],
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                args,
                                                                                                0
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              |)))
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ a_aff :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "blst::blst_p2_affine" ] ] :=
                  M.alloc (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.path "blst::blst_p2_affine" ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "revm_precompile::interface::PrecompileError"
                                  ];
                                Ty.path "blst::blst_p2_affine"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "blst::blst_p2_affine";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "blst::blst_p2_affine";
                                    Ty.path "revm_precompile::interface::PrecompileError"
                                  ],
                                M.get_function (|
                                  "revm_precompile::bls12_381::g2::extract_g2_input",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                            M.get_trait_method (|
                                              "core::ops::index::Index",
                                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::RangeTo")
                                                  []
                                                  [ Ty.path "usize" ]
                                              ],
                                              "index",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.path "bytes::bytes::Bytes",
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "bytes::bytes::Bytes" ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.path
                                                                "alloy_primitives::bytes_::Bytes",
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| input |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              Value.StructRecord
                                                "core::ops::range::RangeTo"
                                                [
                                                  ("end_",
                                                    M.read (|
                                                      get_constant (|
                                                        "revm_precompile::bls12_381::g2::G2_INPUT_ITEM_LENGTH",
                                                        Ty.path "usize"
                                                      |)
                                                    |))
                                                ]
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |);
                                  Value.Bool false
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "revm_precompile::interface::PrecompileOutput";
                                            Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path
                                                "revm_precompile::interface::PrecompileOutput";
                                              Ty.path "revm_precompile::interface::PrecompileErrors"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path
                                                  "revm_precompile::interface::PrecompileError"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |)
                  |) in
                let~ b_aff :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "blst::blst_p2_affine" ] ] :=
                  M.alloc (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.path "blst::blst_p2_affine" ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "revm_precompile::interface::PrecompileError"
                                  ];
                                Ty.path "blst::blst_p2_affine"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "blst::blst_p2_affine";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "blst::blst_p2_affine";
                                    Ty.path "revm_precompile::interface::PrecompileError"
                                  ],
                                M.get_function (|
                                  "revm_precompile::bls12_381::g2::extract_g2_input",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                            M.get_trait_method (|
                                              "core::ops::index::Index",
                                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::RangeFrom")
                                                  []
                                                  [ Ty.path "usize" ]
                                              ],
                                              "index",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u8" ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.path "bytes::bytes::Bytes",
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "bytes::bytes::Bytes" ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.path
                                                                "alloy_primitives::bytes_::Bytes",
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| input |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              Value.StructRecord
                                                "core::ops::range::RangeFrom"
                                                [
                                                  ("start",
                                                    M.read (|
                                                      get_constant (|
                                                        "revm_precompile::bls12_381::g2::G2_INPUT_ITEM_LENGTH",
                                                        Ty.path "usize"
                                                      |)
                                                    |))
                                                ]
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |);
                                  Value.Bool false
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "revm_precompile::interface::PrecompileOutput";
                                            Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path
                                                "revm_precompile::interface::PrecompileOutput";
                                              Ty.path "revm_precompile::interface::PrecompileErrors"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path
                                                  "revm_precompile::interface::PrecompileError"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |)
                  |) in
                let~ b : Ty.apply (Ty.path "*") [] [ Ty.path "blst::blst_p2" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "blst::blst_p2",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "blst::blst_p2",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_function (| "blst::blst_p2_from_affine", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutPointer,
                          M.deref (| M.borrow (| Pointer.Kind.MutRef, b |) |)
                        |);
                        M.borrow (| Pointer.Kind.ConstPointer, M.deref (| M.read (| b_aff |) |) |)
                      ]
                    |)
                  |) in
                let~ p : Ty.apply (Ty.path "*") [] [ Ty.path "blst::blst_p2" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "blst::blst_p2",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "blst::blst_p2",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_function (| "blst::blst_p2_add_or_double_affine", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutPointer,
                          M.deref (| M.borrow (| Pointer.Kind.MutRef, p |) |)
                        |);
                        M.borrow (|
                          Pointer.Kind.ConstPointer,
                          M.deref (| M.borrow (| Pointer.Kind.Ref, b |) |)
                        |);
                        M.borrow (| Pointer.Kind.ConstPointer, M.deref (| M.read (| a_aff |) |) |)
                      ]
                    |)
                  |) in
                let~ p_aff : Ty.apply (Ty.path "*") [] [ Ty.path "blst::blst_p2_affine" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "blst::blst_p2_affine",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "blst::blst_p2_affine",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_function (| "blst::blst_p2_to_affine", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutPointer,
                          M.deref (| M.borrow (| Pointer.Kind.MutRef, p_aff |) |)
                        |);
                        M.borrow (|
                          Pointer.Kind.ConstPointer,
                          M.deref (| M.borrow (| Pointer.Kind.Ref, p |) |)
                        |)
                      ]
                    |)
                  |) in
                let~ out :
                    Ty.apply (Ty.path "*") [] [ Ty.path "alloy_primitives::bytes_::Bytes" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "alloy_primitives::bytes_::Bytes",
                      M.get_function (|
                        "revm_precompile::bls12_381::g2::encode_g2_point",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.borrow (| Pointer.Kind.Ref, p_aff |) |)
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      M.call_closure (|
                        Ty.path "revm_precompile::interface::PrecompileOutput",
                        M.get_associated_function (|
                          Ty.path "revm_precompile::interface::PrecompileOutput",
                          "new",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            get_constant (|
                              "revm_precompile::bls12_381::g2_add::BASE_GAS_FEE",
                              Ty.path "u64"
                            |)
                          |);
                          M.read (| out |)
                        ]
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_g2_add :
      M.IsFunction.C "revm_precompile::bls12_381::g2_add::g2_add" g2_add.
    Admitted.
    Global Typeclasses Opaque g2_add.
  End g2_add.
End bls12_381.
