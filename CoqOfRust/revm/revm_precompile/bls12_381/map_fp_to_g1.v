(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module bls12_381.
  Module map_fp_to_g1.
    Definition value_PRECOMPILE : Value.t :=
      M.run_constant
        ltac:(M.monadic
          (M.alloc (|
            Value.StructTuple
              "revm_precompile::PrecompileWithAddress"
              [
                M.call_closure (|
                  Ty.path "alloy_primitives::bits::address::Address",
                  M.get_function (| "revm_precompile::u64_to_address", [], [] |),
                  [ M.read (| M.get_constant "revm_precompile::bls12_381::map_fp_to_g1::ADDRESS" |)
                  ]
                |);
                (* ReifyFnPointer *)
                M.pointer_coercion
                  (M.get_function (|
                    "revm_precompile::bls12_381::map_fp_to_g1::map_fp_to_g1",
                    [],
                    []
                  |))
              ]
          |))).
    
    Axiom Constant_value_PRECOMPILE :
      (M.get_constant "revm_precompile::bls12_381::map_fp_to_g1::PRECOMPILE") = value_PRECOMPILE.
    Global Hint Rewrite Constant_value_PRECOMPILE : constant_rewrites.
    
    Definition value_ADDRESS : Value.t :=
      M.run_constant ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 18 |))).
    
    Axiom Constant_value_ADDRESS :
      (M.get_constant "revm_precompile::bls12_381::map_fp_to_g1::ADDRESS") = value_ADDRESS.
    Global Hint Rewrite Constant_value_ADDRESS : constant_rewrites.
    
    Definition value_MAP_FP_TO_G1_BASE : Value.t :=
      M.run_constant ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 5500 |))).
    
    Axiom Constant_value_MAP_FP_TO_G1_BASE :
      (M.get_constant "revm_precompile::bls12_381::map_fp_to_g1::MAP_FP_TO_G1_BASE") =
        value_MAP_FP_TO_G1_BASE.
    Global Hint Rewrite Constant_value_MAP_FP_TO_G1_BASE : constant_rewrites.
    
    (*
    pub(super) fn map_fp_to_g1(input: &Bytes, gas_limit: u64) -> PrecompileResult {
        if MAP_FP_TO_G1_BASE > gas_limit {
            return Err(PrecompileError::OutOfGas.into());
        }
    
        if input.len() != PADDED_FP_LENGTH {
            return Err(PrecompileError::Other(format!(
                "MAP_FP_TO_G1 input should be {PADDED_FP_LENGTH} bytes, was {}",
                input.len()
            ))
            .into());
        }
    
        let input_p0 = remove_padding(input)?;
        let fp = fp_from_bendian(input_p0)?;
    
        let mut p = blst_p1::default();
        // SAFETY: `p` and `fp` are blst values.
        // Third argument is unused if null.
        unsafe { blst_map_to_g1(&mut p, &fp, core::ptr::null()) };
    
        let mut p_aff = blst_p1_affine::default();
        // SAFETY: `p_aff` and `p` are blst values.
        unsafe { blst_p1_to_affine(&mut p_aff, &p) };
    
        let out = encode_g1_point(&p_aff);
        Ok(PrecompileOutput::new(MAP_FP_TO_G1_BASE, out))
    }
    *)
    Definition map_fp_to_g1 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ input; gas_limit ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          let gas_limit := M.alloc (| gas_limit |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.gt (|
                                  M.read (|
                                    M.get_constant
                                      "revm_precompile::bls12_381::map_fp_to_g1::MAP_FP_TO_G1_BASE"
                                  |),
                                  M.read (| gas_limit |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_precompile::interface::PrecompileErrors",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.path "revm_precompile::interface::PrecompileError",
                                          [],
                                          [ Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "revm_precompile::interface::PrecompileError::OutOfGas"
                                            []
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.ne (|
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.path "bytes::bytes::Bytes",
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "bytes::bytes::Bytes" ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.path "alloy_primitives::bytes_::Bytes",
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| input |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |),
                                  M.read (|
                                    M.get_constant
                                      "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH"
                                  |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_precompile::interface::PrecompileErrors",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.path "revm_precompile::interface::PrecompileError",
                                          [],
                                          [ Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "revm_precompile::interface::PrecompileError::Other"
                                            [
                                              M.call_closure (|
                                                Ty.path "alloc::string::String",
                                                M.get_function (|
                                                  "core::hint::must_use",
                                                  [],
                                                  [ Ty.path "alloc::string::String" ]
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res : Ty.path "alloc::string::String" :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "alloc::string::String",
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::Arguments",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_v1",
                                                                [
                                                                  Value.Integer IntegerKind.Usize 2;
                                                                  Value.Integer IntegerKind.Usize 2
                                                                ],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            M.read (|
                                                                              Value.String
                                                                                "MAP_FP_TO_G1 input should be "
                                                                            |);
                                                                            M.read (|
                                                                              Value.String
                                                                                " bytes, was "
                                                                            |)
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.match_operator (|
                                                                        Some
                                                                          (Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument"
                                                                            ]),
                                                                        M.alloc (|
                                                                          Value.Tuple
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    Ty.path "usize",
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "bytes::bytes::Bytes",
                                                                                      "len",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "bytes::bytes::Bytes"
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::deref::Deref",
                                                                                              Ty.path
                                                                                                "alloy_primitives::bytes_::Bytes",
                                                                                              [],
                                                                                              [],
                                                                                              "deref",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    input
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |)
                                                                              |);
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.get_constant
                                                                                  "revm_precompile::bls12_381::utils::PADDED_FP_LENGTH"
                                                                              |)
                                                                            ]
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let args :=
                                                                                M.copy (| γ |) in
                                                                              M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "core::fmt::rt::Argument",
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_display",
                                                                                        [],
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                args,
                                                                                                1
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "core::fmt::rt::Argument",
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::rt::Argument",
                                                                                        "new_display",
                                                                                        [],
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                args,
                                                                                                0
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              |)))
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ input_p0 :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 48 ]
                          [ Ty.path "u8" ]
                      ] :=
                  M.copy (|
                    M.match_operator (|
                      Some
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 48 ]
                              [ Ty.path "u8" ]
                          ]),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 48 ]
                                    [ Ty.path "u8" ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 48 ]
                                      [ Ty.path "u8" ]
                                  ];
                                Ty.path "revm_precompile::interface::PrecompileError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 48 ]
                                        [ Ty.path "u8" ]
                                    ];
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ],
                              M.get_function (|
                                "revm_precompile::bls12_381::utils::remove_padding",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.path "bytes::bytes::Bytes",
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "bytes::bytes::Bytes" ],
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.path "alloy_primitives::bytes_::Bytes",
                                                [],
                                                [],
                                                "deref",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| input |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "revm_precompile::interface::PrecompileOutput";
                                          Ty.path "revm_precompile::interface::PrecompileErrors"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "revm_precompile::interface::PrecompileOutput";
                                            Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "revm_precompile::interface::PrecompileError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ fp : Ty.path "blst::blst_fp" :=
                  M.copy (|
                    M.match_operator (|
                      Some (Ty.path "blst::blst_fp"),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ];
                              Ty.path "blst::blst_fp"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "blst::blst_fp";
                                Ty.path "revm_precompile::interface::PrecompileError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "blst::blst_fp";
                                  Ty.path "revm_precompile::interface::PrecompileError"
                                ],
                              M.get_function (|
                                "revm_precompile::bls12_381::utils::fp_from_bendian",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input_p0 |) |) |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "revm_precompile::interface::PrecompileOutput";
                                          Ty.path "revm_precompile::interface::PrecompileErrors"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "revm_precompile::interface::PrecompileOutput";
                                            Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "revm_precompile::interface::PrecompileError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ p : Ty.path "blst::blst_p1" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "blst::blst_p1",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "blst::blst_p1",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_function (| "blst::blst_map_to_g1", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutPointer,
                          M.deref (| M.borrow (| Pointer.Kind.MutRef, p |) |)
                        |);
                        M.borrow (|
                          Pointer.Kind.ConstPointer,
                          M.deref (| M.borrow (| Pointer.Kind.Ref, fp |) |)
                        |);
                        M.call_closure (|
                          Ty.apply (Ty.path "*const") [] [ Ty.path "blst::blst_fp" ],
                          M.get_function (| "core::ptr::null", [], [ Ty.path "blst::blst_fp" ] |),
                          []
                        |)
                      ]
                    |)
                  |) in
                let~ p_aff : Ty.path "blst::blst_p1_affine" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "blst::blst_p1_affine",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "blst::blst_p1_affine",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_function (| "blst::blst_p1_to_affine", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutPointer,
                          M.deref (| M.borrow (| Pointer.Kind.MutRef, p_aff |) |)
                        |);
                        M.borrow (|
                          Pointer.Kind.ConstPointer,
                          M.deref (| M.borrow (| Pointer.Kind.Ref, p |) |)
                        |)
                      ]
                    |)
                  |) in
                let~ out : Ty.path "alloy_primitives::bytes_::Bytes" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "alloy_primitives::bytes_::Bytes",
                      M.get_function (|
                        "revm_precompile::bls12_381::g1::encode_g1_point",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.ConstPointer,
                          M.deref (| M.borrow (| Pointer.Kind.Ref, p_aff |) |)
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      M.call_closure (|
                        Ty.path "revm_precompile::interface::PrecompileOutput",
                        M.get_associated_function (|
                          Ty.path "revm_precompile::interface::PrecompileOutput",
                          "new",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.get_constant
                              "revm_precompile::bls12_381::map_fp_to_g1::MAP_FP_TO_G1_BASE"
                          |);
                          M.read (| out |)
                        ]
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_map_fp_to_g1 :
      M.IsFunction.Trait "revm_precompile::bls12_381::map_fp_to_g1::map_fp_to_g1" map_fp_to_g1.
    Admitted.
    Global Typeclasses Opaque map_fp_to_g1.
  End map_fp_to_g1.
End bls12_381.
