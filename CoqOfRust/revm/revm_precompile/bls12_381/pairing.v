(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module bls12_381.
  Module pairing.
    Definition value_PRECOMPILE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          Value.StructTuple
            "revm_precompile::PrecompileWithAddress"
            [
              M.call_closure (|
                Ty.path "alloy_primitives::bits::address::Address",
                M.get_function (| "revm_precompile::u64_to_address", [], [] |),
                [
                  M.read (|
                    get_constant (| "revm_precompile::bls12_381::pairing::ADDRESS", Ty.path "u64" |)
                  |)
                ]
              |);
              (* ReifyFnPointer *)
              M.pointer_coercion
                (M.get_function (| "revm_precompile::bls12_381::pairing::pairing", [], [] |))
            ]
        |))).
    
    Global Instance Instance_IsConstant_value_PRECOMPILE :
      M.IsFunction.C "revm_precompile::bls12_381::pairing::PRECOMPILE" value_PRECOMPILE.
    Admitted.
    Global Typeclasses Opaque value_PRECOMPILE.
    
    Definition value_ADDRESS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 17 |))).
    
    Global Instance Instance_IsConstant_value_ADDRESS :
      M.IsFunction.C "revm_precompile::bls12_381::pairing::ADDRESS" value_ADDRESS.
    Admitted.
    Global Typeclasses Opaque value_ADDRESS.
    
    Definition value_PAIRING_MULTIPLIER_BASE
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 43000 |))).
    
    Global Instance Instance_IsConstant_value_PAIRING_MULTIPLIER_BASE :
      M.IsFunction.C
        "revm_precompile::bls12_381::pairing::PAIRING_MULTIPLIER_BASE"
        value_PAIRING_MULTIPLIER_BASE.
    Admitted.
    Global Typeclasses Opaque value_PAIRING_MULTIPLIER_BASE.
    
    Definition value_PAIRING_OFFSET_BASE
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 65000 |))).
    
    Global Instance Instance_IsConstant_value_PAIRING_OFFSET_BASE :
      M.IsFunction.C
        "revm_precompile::bls12_381::pairing::PAIRING_OFFSET_BASE"
        value_PAIRING_OFFSET_BASE.
    Admitted.
    Global Typeclasses Opaque value_PAIRING_OFFSET_BASE.
    
    Definition value_INPUT_LENGTH (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 384 |))).
    
    Global Instance Instance_IsConstant_value_INPUT_LENGTH :
      M.IsFunction.C "revm_precompile::bls12_381::pairing::INPUT_LENGTH" value_INPUT_LENGTH.
    Admitted.
    Global Typeclasses Opaque value_INPUT_LENGTH.
    
    (*
    pub(super) fn pairing(input: &Bytes, gas_limit: u64) -> PrecompileResult {
        let input_len = input.len();
        if input_len == 0 || input_len % INPUT_LENGTH != 0 {
            return Err(PrecompileError::Other(format!(
                "Pairing input length should be multiple of {INPUT_LENGTH}, was {input_len}"
            ))
            .into());
        }
    
        let k = input_len / INPUT_LENGTH;
        let required_gas: u64 = PAIRING_MULTIPLIER_BASE * k as u64 + PAIRING_OFFSET_BASE;
        if required_gas > gas_limit {
            return Err(PrecompileError::OutOfGas.into());
        }
    
        // Accumulator for the fp12 multiplications of the miller loops.
        let mut acc = blst_fp12::default();
        for i in 0..k {
            // NB: Scalar multiplications, MSMs and pairings MUST perform a subgroup check.
            //
            // So we set the subgroup_check flag to `true`
            let p1_aff = &extract_g1_input(
                &input[i * INPUT_LENGTH..i * INPUT_LENGTH + G1_INPUT_ITEM_LENGTH],
                true,
            )?;
    
            // NB: Scalar multiplications, MSMs and pairings MUST perform a subgroup check.
            //
            // So we set the subgroup_check flag to `true`
            let p2_aff = &extract_g2_input(
                &input[i * INPUT_LENGTH + G1_INPUT_ITEM_LENGTH
                    ..i * INPUT_LENGTH + G1_INPUT_ITEM_LENGTH + G2_INPUT_ITEM_LENGTH],
                true,
            )?;
    
            if i > 0 {
                // After the first slice (i>0) we use cur_ml to store the current
                // miller loop and accumulate with the previous results using a fp12
                // multiplication.
                let mut cur_ml = blst_fp12::default();
                let mut res = blst_fp12::default();
                // SAFETY: `res`, `acc`, `cur_ml`, `p1_aff` and `p2_aff` are blst values.
                unsafe {
                    blst_miller_loop(&mut cur_ml, p2_aff, p1_aff);
                    blst_fp12_mul(&mut res, &acc, &cur_ml);
                }
                acc = res;
            } else {
                // On the first slice (i==0) there is no previous results and no need
                // to accumulate.
                // SAFETY: `acc`, `p1_aff` and `p2_aff` are blst values.
                unsafe {
                    blst_miller_loop(&mut acc, p2_aff, p1_aff);
                }
            }
        }
    
        // SAFETY: `ret` and `acc` are blst values.
        let mut ret = blst_fp12::default();
        unsafe {
            blst_final_exp(&mut ret, &acc);
        }
    
        let mut result: u8 = 0;
        // SAFETY: `ret` is a blst value.
        unsafe {
            if blst_fp12_is_one(&ret) {
                result = 1;
            }
        }
        Ok(PrecompileOutput::new(
            required_gas,
            B256::with_last_byte(result).into(),
        ))
    }
    *)
    Definition pairing (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ input; gas_limit ] =>
        ltac:(M.monadic
          (let input := M.alloc (| input |) in
          let gas_limit := M.alloc (| gas_limit |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.path "revm_precompile::interface::PrecompileOutput";
                Ty.path "revm_precompile::interface::PrecompileErrors"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ input_len : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (| Ty.path "bytes::bytes::Bytes", "len", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.path "bytes::bytes::Bytes" ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.path "alloy_primitives::bytes_::Bytes",
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.or (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.eq,
                                    [ M.read (| input_len |); Value.Integer IntegerKind.Usize 0 ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.ne,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.rem,
                                          [
                                            M.read (| input_len |);
                                            M.read (|
                                              get_constant (|
                                                "revm_precompile::bls12_381::pairing::INPUT_LENGTH",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 0
                                      ]
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_precompile::interface::PrecompileErrors",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.path "revm_precompile::interface::PrecompileError",
                                          [],
                                          [ Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "revm_precompile::interface::PrecompileError::Other"
                                            [
                                              M.call_closure (|
                                                Ty.path "alloc::string::String",
                                                M.get_function (|
                                                  "core::hint::must_use",
                                                  [],
                                                  [ Ty.path "alloc::string::String" ]
                                                |),
                                                [
                                                  M.read (|
                                                    let~ res :
                                                        Ty.apply
                                                          (Ty.path "*")
                                                          []
                                                          [ Ty.path "alloc::string::String" ] :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "alloc::string::String",
                                                          M.get_function (|
                                                            "alloc::fmt::format",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::Arguments",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_v1",
                                                                [
                                                                  Value.Integer IntegerKind.Usize 2;
                                                                  Value.Integer IntegerKind.Usize 2
                                                                ],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            mk_str (|
                                                                              "Pairing input length should be multiple of "
                                                                            |);
                                                                            mk_str (| ", was " |)
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "core::fmt::rt::Argument",
                                                                                "new_display",
                                                                                [],
                                                                                [ Ty.path "usize" ]
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      get_constant (|
                                                                                        "revm_precompile::bls12_381::pairing::INPUT_LENGTH",
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "core::fmt::rt::Argument",
                                                                                "new_display",
                                                                                [],
                                                                                [ Ty.path "usize" ]
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      input_len
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    res
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ k : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.div,
                      [
                        M.read (| input_len |);
                        M.read (|
                          get_constant (|
                            "revm_precompile::bls12_381::pairing::INPUT_LENGTH",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ required_gas : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "u64",
                      BinOp.Wrap.add,
                      [
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.mul,
                          [
                            M.read (|
                              get_constant (|
                                "revm_precompile::bls12_381::pairing::PAIRING_MULTIPLIER_BASE",
                                Ty.path "u64"
                              |)
                            |);
                            M.cast (Ty.path "u64") (M.read (| k |))
                          ]
                        |);
                        M.read (|
                          get_constant (|
                            "revm_precompile::bls12_381::pairing::PAIRING_OFFSET_BASE",
                            Ty.path "u64"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.gt,
                                  [ M.read (| required_gas |); M.read (| gas_limit |) ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        Ty.path "revm_precompile::interface::PrecompileErrors",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.path "revm_precompile::interface::PrecompileError",
                                          [],
                                          [ Ty.path "revm_precompile::interface::PrecompileErrors"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          Value.StructTuple
                                            "revm_precompile::interface::PrecompileError::OutOfGas"
                                            []
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ acc : Ty.apply (Ty.path "*") [] [ Ty.path "blst::blst_fp12" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "blst::blst_fp12",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "blst::blst_fp12",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.use
                    (M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer IntegerKind.Usize 0);
                                ("end_", M.read (| k |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              ltac:(M.monadic
                                (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let i := M.copy (| γ0_0 |) in
                                          let~ p1_aff :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "blst::blst_p1_affine" ]
                                                ] :=
                                            M.alloc (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.match_operator (|
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [ Ty.path "blst::blst_p1_affine" ],
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::ops::control_flow::ControlFlow")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.path "core::convert::Infallible";
                                                              Ty.path
                                                                "revm_precompile::interface::PrecompileError"
                                                            ];
                                                          Ty.path "blst::blst_p1_affine"
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "blst::blst_p1_affine";
                                                            Ty.path
                                                              "revm_precompile::interface::PrecompileError"
                                                          ],
                                                        [],
                                                        [],
                                                        "branch",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.path "blst::blst_p1_affine";
                                                              Ty.path
                                                                "revm_precompile::interface::PrecompileError"
                                                            ],
                                                          M.get_function (|
                                                            "revm_precompile::bls12_381::g1::extract_g1_input",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ Ty.path "u8" ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Ty.path "u8" ],
                                                                        [],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::ops::range::Range")
                                                                            []
                                                                            [ Ty.path "usize" ]
                                                                        ],
                                                                        "index",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [ Ty.path "u8" ]
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::deref::Deref",
                                                                                Ty.path
                                                                                  "bytes::bytes::Bytes",
                                                                                [],
                                                                                [],
                                                                                "deref",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "bytes::bytes::Bytes"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.path
                                                                                          "alloy_primitives::bytes_::Bytes",
                                                                                        [],
                                                                                        [],
                                                                                        "deref",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              input
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        Value.StructRecord
                                                                          "core::ops::range::Range"
                                                                          [
                                                                            ("start",
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.mul,
                                                                                [
                                                                                  M.read (| i |);
                                                                                  M.read (|
                                                                                    get_constant (|
                                                                                      "revm_precompile::bls12_381::pairing::INPUT_LENGTH",
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |));
                                                                            ("end_",
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.add,
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.path "usize",
                                                                                    BinOp.Wrap.mul,
                                                                                    [
                                                                                      M.read (|
                                                                                        i
                                                                                      |);
                                                                                      M.read (|
                                                                                        get_constant (|
                                                                                          "revm_precompile::bls12_381::pairing::INPUT_LENGTH",
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.read (|
                                                                                    get_constant (|
                                                                                      "revm_precompile::bls12_381::g1::G1_INPUT_ITEM_LENGTH",
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |))
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            Value.Bool true
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "revm_precompile::interface::PrecompileOutput";
                                                                      Ty.path
                                                                        "revm_precompile::interface::PrecompileErrors"
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "revm_precompile::interface::PrecompileOutput";
                                                                        Ty.path
                                                                          "revm_precompile::interface::PrecompileErrors"
                                                                      ],
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "revm_precompile::interface::PrecompileError"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |)
                                              |)
                                            |) in
                                          let~ p2_aff :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "blst::blst_p2_affine" ]
                                                ] :=
                                            M.alloc (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.match_operator (|
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [ Ty.path "blst::blst_p2_affine" ],
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::ops::control_flow::ControlFlow")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.path "core::convert::Infallible";
                                                              Ty.path
                                                                "revm_precompile::interface::PrecompileError"
                                                            ];
                                                          Ty.path "blst::blst_p2_affine"
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "blst::blst_p2_affine";
                                                            Ty.path
                                                              "revm_precompile::interface::PrecompileError"
                                                          ],
                                                        [],
                                                        [],
                                                        "branch",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.path "blst::blst_p2_affine";
                                                              Ty.path
                                                                "revm_precompile::interface::PrecompileError"
                                                            ],
                                                          M.get_function (|
                                                            "revm_precompile::bls12_381::g2::extract_g2_input",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ Ty.path "u8" ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Ty.path "u8" ],
                                                                        [],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::ops::range::Range")
                                                                            []
                                                                            [ Ty.path "usize" ]
                                                                        ],
                                                                        "index",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [ Ty.path "u8" ]
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::deref::Deref",
                                                                                Ty.path
                                                                                  "bytes::bytes::Bytes",
                                                                                [],
                                                                                [],
                                                                                "deref",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "bytes::bytes::Bytes"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.path
                                                                                          "alloy_primitives::bytes_::Bytes",
                                                                                        [],
                                                                                        [],
                                                                                        "deref",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              input
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        Value.StructRecord
                                                                          "core::ops::range::Range"
                                                                          [
                                                                            ("start",
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.add,
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.path "usize",
                                                                                    BinOp.Wrap.mul,
                                                                                    [
                                                                                      M.read (|
                                                                                        i
                                                                                      |);
                                                                                      M.read (|
                                                                                        get_constant (|
                                                                                          "revm_precompile::bls12_381::pairing::INPUT_LENGTH",
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.read (|
                                                                                    get_constant (|
                                                                                      "revm_precompile::bls12_381::g1::G1_INPUT_ITEM_LENGTH",
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |));
                                                                            ("end_",
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.add,
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.path "usize",
                                                                                    BinOp.Wrap.add,
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        Ty.path
                                                                                          "usize",
                                                                                        BinOp.Wrap.mul,
                                                                                        [
                                                                                          M.read (|
                                                                                            i
                                                                                          |);
                                                                                          M.read (|
                                                                                            get_constant (|
                                                                                              "revm_precompile::bls12_381::pairing::INPUT_LENGTH",
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.read (|
                                                                                        get_constant (|
                                                                                          "revm_precompile::bls12_381::g1::G1_INPUT_ITEM_LENGTH",
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.read (|
                                                                                    get_constant (|
                                                                                      "revm_precompile::bls12_381::g2::G2_INPUT_ITEM_LENGTH",
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |))
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            Value.Bool true
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "revm_precompile::interface::PrecompileOutput";
                                                                      Ty.path
                                                                        "revm_precompile::interface::PrecompileErrors"
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "revm_precompile::interface::PrecompileOutput";
                                                                        Ty.path
                                                                          "revm_precompile::interface::PrecompileErrors"
                                                                      ],
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "revm_precompile::interface::PrecompileError"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |)
                                              |)
                                            |) in
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.gt,
                                                          [
                                                            M.read (| i |);
                                                            Value.Integer IntegerKind.Usize 0
                                                          ]
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let~ cur_ml :
                                                      Ty.apply
                                                        (Ty.path "*")
                                                        []
                                                        [ Ty.path "blst::blst_fp12" ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "blst::blst_fp12",
                                                        M.get_trait_method (|
                                                          "core::default::Default",
                                                          Ty.path "blst::blst_fp12",
                                                          [],
                                                          [],
                                                          "default",
                                                          [],
                                                          []
                                                        |),
                                                        []
                                                      |)
                                                    |) in
                                                  let~ res :
                                                      Ty.apply
                                                        (Ty.path "*")
                                                        []
                                                        [ Ty.path "blst::blst_fp12" ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "blst::blst_fp12",
                                                        M.get_trait_method (|
                                                          "core::default::Default",
                                                          Ty.path "blst::blst_fp12",
                                                          [],
                                                          [],
                                                          "default",
                                                          [],
                                                          []
                                                        |),
                                                        []
                                                      |)
                                                    |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    let~ _ :
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.tuple [],
                                                          M.get_function (|
                                                            "blst::blst_miller_loop",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutPointer,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  cur_ml
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.ConstPointer,
                                                              M.deref (| M.read (| p2_aff |) |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.ConstPointer,
                                                              M.deref (| M.read (| p1_aff |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    let~ _ :
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.tuple [],
                                                          M.get_function (|
                                                            "blst::blst_fp12_mul",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutPointer,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  res
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.ConstPointer,
                                                              M.deref (|
                                                                M.borrow (| Pointer.Kind.Ref, acc |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.ConstPointer,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  cur_ml
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |) in
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      M.write (| acc, M.read (| res |) |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_function (|
                                                          "blst::blst_miller_loop",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutPointer,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                acc
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.ConstPointer,
                                                            M.deref (| M.read (| p2_aff |) |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.ConstPointer,
                                                            M.deref (| M.read (| p1_aff |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let~ ret : Ty.apply (Ty.path "*") [] [ Ty.path "blst::blst_fp12" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "blst::blst_fp12",
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "blst::blst_fp12",
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_function (| "blst::blst_final_exp", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutPointer,
                            M.deref (| M.borrow (| Pointer.Kind.MutRef, ret |) |)
                          |);
                          M.borrow (|
                            Pointer.Kind.ConstPointer,
                            M.deref (| M.borrow (| Pointer.Kind.Ref, acc |) |)
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |) in
                let~ result : Ty.apply (Ty.path "*") [] [ Ty.path "u8" ] :=
                  M.alloc (| Value.Integer IntegerKind.U8 0 |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_function (| "blst::blst_fp12_is_one", [], [] |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.ConstPointer,
                                      M.deref (| M.borrow (| Pointer.Kind.Ref, ret |) |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (| M.write (| result, Value.Integer IntegerKind.U8 1 |) |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      M.call_closure (|
                        Ty.path "revm_precompile::interface::PrecompileOutput",
                        M.get_associated_function (|
                          Ty.path "revm_precompile::interface::PrecompileOutput",
                          "new",
                          [],
                          []
                        |),
                        [
                          M.read (| required_gas |);
                          M.call_closure (|
                            Ty.path "alloy_primitives::bytes_::Bytes",
                            M.get_trait_method (|
                              "core::convert::Into",
                              Ty.apply
                                (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [],
                              [],
                              [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                              "into",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [],
                                  "with_last_byte",
                                  [],
                                  []
                                |),
                                [ M.read (| result |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_pairing :
      M.IsFunction.C "revm_precompile::bls12_381::pairing::pairing" pairing.
    Admitted.
    Global Typeclasses Opaque pairing.
  End pairing.
End bls12_381.
