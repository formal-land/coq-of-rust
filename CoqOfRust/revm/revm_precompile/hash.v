(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module hash.
  Definition value_SHA256 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.StructTuple
          "revm_precompile::PrecompileWithAddress"
          []
          []
          [
            M.call_closure (|
              Ty.path "alloy_primitives::bits::address::Address",
              M.get_function (| "revm_precompile::u64_to_address", [], [] |),
              [ Value.Integer IntegerKind.U64 2 ]
            |);
            (* ReifyFnPointer *)
            M.pointer_coercion (M.get_function (| "revm_precompile::hash::sha256_run", [], [] |))
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_SHA256 :
    M.IsFunction.C "revm_precompile::hash::SHA256" value_SHA256.
  Admitted.
  Global Typeclasses Opaque value_SHA256.
  
  Definition value_RIPEMD160 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.StructTuple
          "revm_precompile::PrecompileWithAddress"
          []
          []
          [
            M.call_closure (|
              Ty.path "alloy_primitives::bits::address::Address",
              M.get_function (| "revm_precompile::u64_to_address", [], [] |),
              [ Value.Integer IntegerKind.U64 3 ]
            |);
            (* ReifyFnPointer *)
            M.pointer_coercion (M.get_function (| "revm_precompile::hash::ripemd160_run", [], [] |))
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_RIPEMD160 :
    M.IsFunction.C "revm_precompile::hash::RIPEMD160" value_RIPEMD160.
  Admitted.
  Global Typeclasses Opaque value_RIPEMD160.
  
  (*
  pub fn sha256_run(input: &Bytes, gas_limit: u64) -> PrecompileResult {
      let cost = calc_linear_cost_u32(input.len(), 60, 12);
      if cost > gas_limit {
          Err(PrecompileError::OutOfGas.into())
      } else {
          let output = sha2::Sha256::digest(input);
          Ok(PrecompileOutput::new(cost, output.to_vec().into()))
      }
  }
  *)
  Definition sha256_run (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ input; gas_limit ] =>
      ltac:(M.monadic
        (let input := M.alloc (| input |) in
        let gas_limit := M.alloc (| gas_limit |) in
        M.read (|
          let~ cost : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "u64",
                M.get_function (| "revm_precompile::calc_linear_cost_u32", [], [] |),
                [
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (| Ty.path "bytes::bytes::Bytes", "len", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.path "bytes::bytes::Bytes" ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.path "alloy_primitives::bytes_::Bytes",
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |);
                  Value.Integer IntegerKind.U64 60;
                  Value.Integer IntegerKind.U64 12
                ]
              |)
            |) in
          M.match_operator (|
            Ty.apply
              (Ty.path "*")
              []
              [
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "revm_precompile::interface::PrecompileOutput";
                    Ty.path "revm_precompile::interface::PrecompileErrors"
                  ]
              ],
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          BinOp.gt,
                          [ M.read (| cost |); M.read (| gas_limit |) ]
                        |)
                      |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Err"
                      []
                      [
                        Ty.path "revm_precompile::interface::PrecompileOutput";
                        Ty.path "revm_precompile::interface::PrecompileErrors"
                      ]
                      [
                        M.call_closure (|
                          Ty.path "revm_precompile::interface::PrecompileErrors",
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.path "revm_precompile::interface::PrecompileError",
                            [],
                            [ Ty.path "revm_precompile::interface::PrecompileErrors" ],
                            "into",
                            [],
                            []
                          |),
                          [
                            Value.StructTuple
                              "revm_precompile::interface::PrecompileError::OutOfGas"
                              []
                              []
                              []
                          ]
                        |)
                      ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let~ output :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [
                          Ty.apply
                            (Ty.path "generic_array::GenericArray")
                            []
                            [
                              Ty.path "u8";
                              Ty.apply
                                (Ty.path "typenum::uint::UInt")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "typenum::uint::UInt")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "typenum::uint::UInt")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "typenum::uint::UInt")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "typenum::uint::UInt")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "typenum::uint::UInt")
                                                    []
                                                    [
                                                      Ty.path "typenum::uint::UTerm";
                                                      Ty.path "typenum::bit::B1"
                                                    ];
                                                  Ty.path "typenum::bit::B0"
                                                ];
                                              Ty.path "typenum::bit::B0"
                                            ];
                                          Ty.path "typenum::bit::B0"
                                        ];
                                      Ty.path "typenum::bit::B0"
                                    ];
                                  Ty.path "typenum::bit::B0"
                                ]
                            ]
                        ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "generic_array::GenericArray")
                          []
                          [
                            Ty.path "u8";
                            Ty.apply
                              (Ty.path "typenum::uint::UInt")
                              []
                              [
                                Ty.apply
                                  (Ty.path "typenum::uint::UInt")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "typenum::uint::UInt")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "typenum::uint::UInt")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "typenum::uint::UInt")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "typenum::uint::UInt")
                                                  []
                                                  [
                                                    Ty.path "typenum::uint::UTerm";
                                                    Ty.path "typenum::bit::B1"
                                                  ];
                                                Ty.path "typenum::bit::B0"
                                              ];
                                            Ty.path "typenum::bit::B0"
                                          ];
                                        Ty.path "typenum::bit::B0"
                                      ];
                                    Ty.path "typenum::bit::B0"
                                  ];
                                Ty.path "typenum::bit::B0"
                              ]
                          ],
                        M.get_trait_method (|
                          "digest::digest::Digest",
                          Ty.apply
                            (Ty.path "digest::core_api::wrapper::CoreWrapper")
                            []
                            [
                              Ty.apply
                                (Ty.path "digest::core_api::ct_variable::CtVariableCoreWrapper")
                                []
                                [
                                  Ty.path "sha2::core_api::Sha256VarCore";
                                  Ty.apply
                                    (Ty.path "typenum::uint::UInt")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "typenum::uint::UInt")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "typenum::uint::UInt")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "typenum::uint::UInt")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "typenum::uint::UInt")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "typenum::uint::UInt")
                                                        []
                                                        [
                                                          Ty.path "typenum::uint::UTerm";
                                                          Ty.path "typenum::bit::B1"
                                                        ];
                                                      Ty.path "typenum::bit::B0"
                                                    ];
                                                  Ty.path "typenum::bit::B0"
                                                ];
                                              Ty.path "typenum::bit::B0"
                                            ];
                                          Ty.path "typenum::bit::B0"
                                        ];
                                      Ty.path "typenum::bit::B0"
                                    ];
                                  Ty.path "sha2::OidSha256"
                                ]
                            ],
                          [],
                          [],
                          "digest",
                          [],
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "alloy_primitives::bytes_::Bytes" ]
                          ]
                        |),
                        [ M.read (| input |) ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.path "revm_precompile::interface::PrecompileOutput";
                        Ty.path "revm_precompile::interface::PrecompileErrors"
                      ]
                      [
                        M.call_closure (|
                          Ty.path "revm_precompile::interface::PrecompileOutput",
                          M.get_associated_function (|
                            Ty.path "revm_precompile::interface::PrecompileOutput",
                            "new",
                            [],
                            []
                          |),
                          [
                            M.read (| cost |);
                            M.call_closure (|
                              Ty.path "alloy_primitives::bytes_::Bytes",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                [],
                                [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                "into",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    "to_vec",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "generic_array::GenericArray")
                                              []
                                              [
                                                Ty.path "u8";
                                                Ty.apply
                                                  (Ty.path "typenum::uint::UInt")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "typenum::uint::UInt")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "typenum::uint::UInt")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "typenum::uint::UInt")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "typenum::uint::UInt")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "typenum::uint::UInt")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "typenum::uint::UTerm";
                                                                        Ty.path "typenum::bit::B1"
                                                                      ];
                                                                    Ty.path "typenum::bit::B0"
                                                                  ];
                                                                Ty.path "typenum::bit::B0"
                                                              ];
                                                            Ty.path "typenum::bit::B0"
                                                          ];
                                                        Ty.path "typenum::bit::B0"
                                                      ];
                                                    Ty.path "typenum::bit::B0"
                                                  ]
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, output |) ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_sha256_run :
    M.IsFunction.C "revm_precompile::hash::sha256_run" sha256_run.
  Admitted.
  Global Typeclasses Opaque sha256_run.
  
  (*
  pub fn ripemd160_run(input: &Bytes, gas_limit: u64) -> PrecompileResult {
      let gas_used = calc_linear_cost_u32(input.len(), 600, 120);
      if gas_used > gas_limit {
          Err(PrecompileError::OutOfGas.into())
      } else {
          let mut hasher = ripemd::Ripemd160::new();
          hasher.update(input);
  
          let mut output = [0u8; 32];
          hasher.finalize_into((&mut output[12..]).into());
          Ok(PrecompileOutput::new(gas_used, output.to_vec().into()))
      }
  }
  *)
  Definition ripemd160_run (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ input; gas_limit ] =>
      ltac:(M.monadic
        (let input := M.alloc (| input |) in
        let gas_limit := M.alloc (| gas_limit |) in
        M.read (|
          let~ gas_used : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "u64",
                M.get_function (| "revm_precompile::calc_linear_cost_u32", [], [] |),
                [
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (| Ty.path "bytes::bytes::Bytes", "len", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.path "bytes::bytes::Bytes" ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.path "alloy_primitives::bytes_::Bytes",
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |);
                  Value.Integer IntegerKind.U64 600;
                  Value.Integer IntegerKind.U64 120
                ]
              |)
            |) in
          M.match_operator (|
            Ty.apply
              (Ty.path "*")
              []
              [
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "revm_precompile::interface::PrecompileOutput";
                    Ty.path "revm_precompile::interface::PrecompileErrors"
                  ]
              ],
            M.alloc (| Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          BinOp.gt,
                          [ M.read (| gas_used |); M.read (| gas_limit |) ]
                        |)
                      |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Err"
                      []
                      [
                        Ty.path "revm_precompile::interface::PrecompileOutput";
                        Ty.path "revm_precompile::interface::PrecompileErrors"
                      ]
                      [
                        M.call_closure (|
                          Ty.path "revm_precompile::interface::PrecompileErrors",
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.path "revm_precompile::interface::PrecompileError",
                            [],
                            [ Ty.path "revm_precompile::interface::PrecompileErrors" ],
                            "into",
                            [],
                            []
                          |),
                          [
                            Value.StructTuple
                              "revm_precompile::interface::PrecompileError::OutOfGas"
                              []
                              []
                              []
                          ]
                        |)
                      ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let~ hasher :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [
                          Ty.apply
                            (Ty.path "digest::core_api::wrapper::CoreWrapper")
                            []
                            [ Ty.path "ripemd::Ripemd160Core" ]
                        ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "digest::core_api::wrapper::CoreWrapper")
                          []
                          [ Ty.path "ripemd::Ripemd160Core" ],
                        M.get_trait_method (|
                          "digest::digest::Digest",
                          Ty.apply
                            (Ty.path "digest::core_api::wrapper::CoreWrapper")
                            []
                            [ Ty.path "ripemd::Ripemd160Core" ],
                          [],
                          [],
                          "new",
                          [],
                          []
                        |),
                        []
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "digest::digest::Digest",
                          Ty.apply
                            (Ty.path "digest::core_api::wrapper::CoreWrapper")
                            []
                            [ Ty.path "ripemd::Ripemd160Core" ],
                          [],
                          [],
                          "update",
                          [],
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "alloy_primitives::bytes_::Bytes" ]
                          ]
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, hasher |); M.read (| input |) ]
                      |)
                    |) in
                  let~ output :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ Ty.path "u8" ]
                        ] :=
                    M.alloc (|
                      repeat (|
                        Value.Integer IntegerKind.U8 0,
                        Value.Integer IntegerKind.Usize 32
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "digest::digest::Digest",
                          Ty.apply
                            (Ty.path "digest::core_api::wrapper::CoreWrapper")
                            []
                            [ Ty.path "ripemd::Ripemd160Core" ],
                          [],
                          [],
                          "finalize_into",
                          [],
                          []
                        |),
                        [
                          M.read (| hasher |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "generic_array::GenericArray")
                                  []
                                  [
                                    Ty.path "u8";
                                    Ty.apply
                                      (Ty.path "typenum::uint::UInt")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "typenum::uint::UInt")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "typenum::uint::UInt")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "typenum::uint::UInt")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "typenum::uint::UInt")
                                                      []
                                                      [
                                                        Ty.path "typenum::uint::UTerm";
                                                        Ty.path "typenum::bit::B1"
                                                      ];
                                                    Ty.path "typenum::bit::B0"
                                                  ];
                                                Ty.path "typenum::bit::B1"
                                              ];
                                            Ty.path "typenum::bit::B0"
                                          ];
                                        Ty.path "typenum::bit::B0"
                                      ]
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::convert::Into",
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "generic_array::GenericArray")
                                      []
                                      [
                                        Ty.path "u8";
                                        Ty.apply
                                          (Ty.path "typenum::uint::UInt")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "typenum::uint::UInt")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "typenum::uint::UInt")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "typenum::uint::UInt")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "typenum::uint::UInt")
                                                          []
                                                          [
                                                            Ty.path "typenum::uint::UTerm";
                                                            Ty.path "typenum::bit::B1"
                                                          ];
                                                        Ty.path "typenum::bit::B0"
                                                      ];
                                                    Ty.path "typenum::bit::B1"
                                                  ];
                                                Ty.path "typenum::bit::B0"
                                              ];
                                            Ty.path "typenum::bit::B0"
                                          ]
                                      ]
                                  ]
                              ],
                              "into",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                        M.get_trait_method (|
                                          "core::ops::index::IndexMut",
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 32 ]
                                            [ Ty.path "u8" ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeFrom")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index_mut",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, output |);
                                          Value.StructRecord
                                            "core::ops::range::RangeFrom"
                                            []
                                            [ Ty.path "usize" ]
                                            [ ("start", Value.Integer IntegerKind.Usize 12) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.path "revm_precompile::interface::PrecompileOutput";
                        Ty.path "revm_precompile::interface::PrecompileErrors"
                      ]
                      [
                        M.call_closure (|
                          Ty.path "revm_precompile::interface::PrecompileOutput",
                          M.get_associated_function (|
                            Ty.path "revm_precompile::interface::PrecompileOutput",
                            "new",
                            [],
                            []
                          |),
                          [
                            M.read (| gas_used |);
                            M.call_closure (|
                              Ty.path "alloy_primitives::bytes_::Bytes",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                [],
                                [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                "into",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                    "to_vec",
                                    [],
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion (M.borrow (| Pointer.Kind.Ref, output |))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                  |)))
            ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_ripemd160_run :
    M.IsFunction.C "revm_precompile::hash::ripemd160_run" ripemd160_run.
  Admitted.
  Global Typeclasses Opaque ripemd160_run.
End hash.
