(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module identity.
  Definition value_FUN (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic
      (M.alloc (|
        Value.StructTuple
          "revm_precompile::PrecompileWithAddress"
          [
            M.call_closure (|
              Ty.path "alloy_primitives::bits::address::Address",
              M.get_function (| "revm_precompile::u64_to_address", [], [] |),
              [ Value.Integer IntegerKind.U64 4 ]
            |);
            (* ReifyFnPointer *)
            M.pointer_coercion
              (M.get_function (| "revm_precompile::identity::identity_run", [], [] |))
          ]
      |))).
  
  Global Instance Instance_IsConstant_value_FUN :
    M.IsFunction.C "revm_precompile::identity::FUN" value_FUN.
  Admitted.
  Global Typeclasses Opaque value_FUN.
  
  Definition value_IDENTITY_BASE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 15 |))).
  
  Global Instance Instance_IsConstant_value_IDENTITY_BASE :
    M.IsFunction.C "revm_precompile::identity::IDENTITY_BASE" value_IDENTITY_BASE.
  Admitted.
  Global Typeclasses Opaque value_IDENTITY_BASE.
  
  Definition value_IDENTITY_PER_WORD (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 3 |))).
  
  Global Instance Instance_IsConstant_value_IDENTITY_PER_WORD :
    M.IsFunction.C "revm_precompile::identity::IDENTITY_PER_WORD" value_IDENTITY_PER_WORD.
  Admitted.
  Global Typeclasses Opaque value_IDENTITY_PER_WORD.
  
  (*
  pub fn identity_run(input: &Bytes, gas_limit: u64) -> PrecompileResult {
      let gas_used = calc_linear_cost_u32(input.len(), IDENTITY_BASE, IDENTITY_PER_WORD);
      if gas_used > gas_limit {
          return Err(PrecompileError::OutOfGas.into());
      }
      Ok(PrecompileOutput::new(gas_used, input.clone()))
  }
  *)
  Definition identity_run (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ input; gas_limit ] =>
      ltac:(M.monadic
        (let input := M.alloc (| input |) in
        let gas_limit := M.alloc (| gas_limit |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let~ gas_used : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_function (| "revm_precompile::calc_linear_cost_u32", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.path "bytes::bytes::Bytes",
                          "len",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.path "bytes::bytes::Bytes" ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.path "alloy_primitives::bytes_::Bytes",
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.read (|
                        get_constant (| "revm_precompile::identity::IDENTITY_BASE", Ty.path "u64" |)
                      |);
                      M.read (|
                        get_constant (|
                          "revm_precompile::identity::IDENTITY_PER_WORD",
                          Ty.path "u64"
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.gt,
                                [ M.read (| gas_used |); M.read (| gas_limit |) ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  [
                                    M.call_closure (|
                                      Ty.path "revm_precompile::interface::PrecompileErrors",
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        Ty.path "revm_precompile::interface::PrecompileError",
                                        [],
                                        [ Ty.path "revm_precompile::interface::PrecompileErrors" ],
                                        "into",
                                        [],
                                        []
                                      |),
                                      [
                                        Value.StructTuple
                                          "revm_precompile::interface::PrecompileError::OutOfGas"
                                          []
                                      ]
                                    |)
                                  ]
                              |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                Value.StructTuple
                  "core::result::Result::Ok"
                  [
                    M.call_closure (|
                      Ty.path "revm_precompile::interface::PrecompileOutput",
                      M.get_associated_function (|
                        Ty.path "revm_precompile::interface::PrecompileOutput",
                        "new",
                        [],
                        []
                      |),
                      [
                        M.read (| gas_used |);
                        M.call_closure (|
                          Ty.path "alloy_primitives::bytes_::Bytes",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path "alloy_primitives::bytes_::Bytes",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| input |) |) |) ]
                        |)
                      ]
                    |)
                  ]
              |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_identity_run :
    M.IsFunction.C "revm_precompile::identity::identity_run" identity_run.
  Admitted.
  Global Typeclasses Opaque identity_run.
End identity.
