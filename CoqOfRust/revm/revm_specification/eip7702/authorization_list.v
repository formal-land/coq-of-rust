(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module eip7702.
  Module authorization_list.
    (*
    Enum AuthorizationList
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "Signed";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                      Ty.path "alloc::alloc::Global"
                    ]
                ];
          };
          {
            name := "Recovered";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.path
                        "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                      Ty.path "alloc::alloc::Global"
                    ]
                ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_AuthorizationList_Signed :
      M.IsDiscriminant
        "revm_specification::eip7702::authorization_list::AuthorizationList::Signed"
        0.
    Axiom IsDiscriminant_AuthorizationList_Recovered :
      M.IsDiscriminant
        "revm_specification::eip7702::authorization_list::AuthorizationList::Recovered"
        1.
    
    Module Impl_core_clone_Clone_for_revm_specification_eip7702_authorization_list_AuthorizationList.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_specification::eip7702::authorization_list::AuthorizationList::Signed",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "revm_specification::eip7702::authorization_list::AuthorizationList::Signed"
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_specification::eip7702::authorization_list::AuthorizationList::Recovered",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "revm_specification::eip7702::authorization_list::AuthorizationList::Recovered"
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.path
                                    "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path
                                      "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |)
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_revm_specification_eip7702_authorization_list_AuthorizationList.
    
    Module Impl_core_fmt_Debug_for_revm_specification_eip7702_authorization_list_AuthorizationList.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_specification::eip7702::authorization_list::AuthorizationList::Signed",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Signed" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_specification::eip7702::authorization_list::AuthorizationList::Recovered",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Recovered" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_revm_specification_eip7702_authorization_list_AuthorizationList.
    
    Module Impl_core_cmp_Eq_for_revm_specification_eip7702_authorization_list_AuthorizationList.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_revm_specification_eip7702_authorization_list_AuthorizationList.
    
    Module Impl_core_marker_StructuralPartialEq_for_revm_specification_eip7702_authorization_list_AuthorizationList.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_revm_specification_eip7702_authorization_list_AuthorizationList.
    
    Module Impl_core_cmp_PartialEq_for_revm_specification_eip7702_authorization_list_AuthorizationList.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList"
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList"
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.alloc (|
                LogicalOp.and (|
                  BinOp.eq (| M.read (| __self_discr |), M.read (| __arg1_discr |) |),
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "revm_specification::eip7702::authorization_list::AuthorizationList::Signed",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "revm_specification::eip7702::authorization_list::AuthorizationList::Signed",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.path
                                                "alloy_eip7702::auth_list::SignedAuthorization";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                    M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "revm_specification::eip7702::authorization_list::AuthorizationList::Recovered",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "revm_specification::eip7702::authorization_list::AuthorizationList::Recovered",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path
                                              "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.path
                                                "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                    M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    Ty.path "never",
                                    M.get_function (| "core::intrinsics::unreachable", [], [] |),
                                    []
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)))
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_revm_specification_eip7702_authorization_list_AuthorizationList.
    
    Module Impl_core_default_Default_for_revm_specification_eip7702_authorization_list_AuthorizationList.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList".
      
      (*
          fn default() -> Self {
              Self::Signed(Vec::new())
          }
      *)
      Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.StructTuple
              "revm_specification::eip7702::authorization_list::AuthorizationList::Signed"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_revm_specification_eip7702_authorization_list_AuthorizationList.
    
    Module Impl_core_convert_From_alloc_vec_Vec_alloy_eip7702_auth_list_SignedAuthorization_alloc_alloc_Global_for_revm_specification_eip7702_authorization_list_AuthorizationList.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList".
      
      (*
          fn from(signed: Vec<SignedAuthorization>) -> Self {
              Self::Signed(signed)
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ signed ] =>
          ltac:(M.monadic
            (let signed := M.alloc (| signed |) in
            Value.StructTuple
              "revm_specification::eip7702::authorization_list::AuthorizationList::Signed"
              [ M.read (| signed |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                Ty.path "alloc::alloc::Global"
              ]
          ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_alloc_vec_Vec_alloy_eip7702_auth_list_SignedAuthorization_alloc_alloc_Global_for_revm_specification_eip7702_authorization_list_AuthorizationList.
    
    Module Impl_core_convert_From_alloc_vec_Vec_revm_specification_eip7702_recovered_authorization_RecoveredAuthorization_alloc_alloc_Global_for_revm_specification_eip7702_authorization_list_AuthorizationList.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList".
      
      (*
          fn from(recovered: Vec<RecoveredAuthorization>) -> Self {
              Self::Recovered(recovered)
          }
      *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ recovered ] =>
          ltac:(M.monadic
            (let recovered := M.alloc (| recovered |) in
            Value.StructTuple
              "revm_specification::eip7702::authorization_list::AuthorizationList::Recovered"
              [ M.read (| recovered |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.path
                  "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                Ty.path "alloc::alloc::Global"
              ]
          ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_alloc_vec_Vec_revm_specification_eip7702_recovered_authorization_RecoveredAuthorization_alloc_alloc_Global_for_revm_specification_eip7702_authorization_list_AuthorizationList.
    
    Module Impl_revm_specification_eip7702_authorization_list_AuthorizationList.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList".
      
      (*
          pub fn len(&self) -> usize {
              match self {
                  Self::Signed(signed) => signed.len(),
                  Self::Recovered(recovered) => recovered.len(),
              }
          }
      *)
      Definition len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_specification::eip7702::authorization_list::AuthorizationList::Signed",
                          0
                        |) in
                      let signed := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "len",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| signed |) |) |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_specification::eip7702::authorization_list::AuthorizationList::Recovered",
                          0
                        |) in
                      let recovered := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path
                                  "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "len",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| recovered |) |) |) ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom AssociatedFunction_len : M.IsAssociatedFunction Self "len" len.
      Smpl Add apply AssociatedFunction_len : is_associated.
      
      (*
          pub fn empty() -> Self {
              Self::Recovered(Vec::new())
          }
      *)
      Definition empty (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.StructTuple
              "revm_specification::eip7702::authorization_list::AuthorizationList::Recovered"
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.path
                        "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path
                          "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom AssociatedFunction_empty : M.IsAssociatedFunction Self "empty" empty.
      Smpl Add apply AssociatedFunction_empty : is_associated.
      
      (*
          pub fn is_empty(&self) -> bool {
              self.len() == 0
          }
      *)
      Definition is_empty (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            BinOp.eq (|
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList",
                  "len",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |),
              Value.Integer IntegerKind.Usize 0
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom AssociatedFunction_is_empty : M.IsAssociatedFunction Self "is_empty" is_empty.
      Smpl Add apply AssociatedFunction_is_empty : is_associated.
      
      (*
          pub fn recovered_iter<'a>(&'a self) -> Box<dyn Iterator<Item = RecoveredAuthorization> + 'a> {
              match self {
                  Self::Signed(signed) => Box::new(signed.iter().map(|signed| signed.clone().into())),
                  Self::Recovered(recovered) => Box::new(recovered.clone().into_iter()),
              }
          }
      *)
      Definition recovered_iter (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_specification::eip7702::authorization_list::AuthorizationList::Signed",
                          0
                        |) in
                      let signed := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.path "alloy_eip7702::auth_list::SignedAuthorization" ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.path
                                                "alloy_eip7702::auth_list::SignedAuthorization"
                                            ]
                                        ]
                                    ]
                                    (Ty.path
                                      "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization")
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "alloy_eip7702::auth_list::SignedAuthorization" ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.path
                                                  "alloy_eip7702::auth_list::SignedAuthorization"
                                              ]
                                          ]
                                      ]
                                      (Ty.path
                                        "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization")
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.path "alloy_eip7702::auth_list::SignedAuthorization" ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.path
                                                "alloy_eip7702::auth_list::SignedAuthorization"
                                            ]
                                        ]
                                    ]
                                    (Ty.path
                                      "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization")
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.path "alloy_eip7702::auth_list::SignedAuthorization" ],
                                [],
                                [],
                                "map",
                                [],
                                [
                                  Ty.path
                                    "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.path
                                                "alloy_eip7702::auth_list::SignedAuthorization"
                                            ]
                                        ]
                                    ]
                                    (Ty.path
                                      "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.path "alloy_eip7702::auth_list::SignedAuthorization" ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [ Ty.path "alloy_eip7702::auth_list::SignedAuthorization" ],
                                    "iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.path
                                                    "alloy_eip7702::auth_list::SignedAuthorization"
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.path
                                                  "alloy_eip7702::auth_list::SignedAuthorization";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| signed |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let signed := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    Ty.path
                                                      "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization",
                                                    M.get_trait_method (|
                                                      "core::convert::Into",
                                                      Ty.path
                                                        "alloy_eip7702::auth_list::SignedAuthorization",
                                                      [],
                                                      [
                                                        Ty.path
                                                          "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization"
                                                      ],
                                                      "into",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path
                                                          "alloy_eip7702::auth_list::SignedAuthorization",
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.path
                                                            "alloy_eip7702::auth_list::SignedAuthorization",
                                                          [],
                                                          [],
                                                          "clone",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| signed |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_specification::eip7702::authorization_list::AuthorizationList::Recovered",
                          0
                        |) in
                      let recovered := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.path
                                    "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [
                                    Ty.path
                                      "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.path
                                    "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path
                                      "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path
                                        "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path
                                          "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| recovered |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom AssociatedFunction_recovered_iter :
        M.IsAssociatedFunction Self "recovered_iter" recovered_iter.
      Smpl Add apply AssociatedFunction_recovered_iter : is_associated.
      
      (*
          pub fn into_recovered(self) -> Self {
              let Self::Signed(signed) = self else {
                  return self;
              };
              Self::Recovered(signed.into_iter().map(|signed| signed.into()).collect())
          }
      *)
      Definition into_recovered (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "revm_specification::eip7702::authorization_list::AuthorizationList::Signed",
                          0
                        |) in
                      let signed := M.copy (| γ0_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "revm_specification::eip7702::authorization_list::AuthorizationList::Recovered"
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.path
                                    "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [
                                        Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [ Ty.path "alloy_eip7702::auth_list::SignedAuthorization"
                                          ]
                                      ]
                                      (Ty.path
                                        "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization")
                                  ],
                                [],
                                [],
                                "collect",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path
                                        "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path
                                                "alloy_eip7702::auth_list::SignedAuthorization"
                                            ]
                                        ]
                                        (Ty.path
                                          "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization")
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [
                                        Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "map",
                                    [],
                                    [
                                      Ty.path
                                        "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization";
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path
                                                "alloy_eip7702::auth_list::SignedAuthorization"
                                            ]
                                        ]
                                        (Ty.path
                                          "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization")
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "alloy_eip7702::auth_list::SignedAuthorization";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "into_iter",
                                        [],
                                        []
                                      |),
                                      [ M.read (| signed |) ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let signed := M.copy (| γ |) in
                                                      M.call_closure (|
                                                        Ty.path
                                                          "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path
                                                            "alloy_eip7702::auth_list::SignedAuthorization",
                                                          [],
                                                          [
                                                            Ty.path
                                                              "revm_specification::eip7702::recovered_authorization::RecoveredAuthorization"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| signed |) ]
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom AssociatedFunction_into_recovered :
        M.IsAssociatedFunction Self "into_recovered" into_recovered.
      Smpl Add apply AssociatedFunction_into_recovered : is_associated.
    End Impl_revm_specification_eip7702_authorization_list_AuthorizationList.
    
    (*
    Enum InvalidAuthorization
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "InvalidChainId";
            item := StructTuple [];
          };
          {
            name := "InvalidYParity";
            item := StructTuple [];
          };
          {
            name := "Eip2InvalidSValue";
            item := StructTuple [];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_InvalidAuthorization_InvalidChainId :
      M.IsDiscriminant
        "revm_specification::eip7702::authorization_list::InvalidAuthorization::InvalidChainId"
        0.
    Axiom IsDiscriminant_InvalidAuthorization_InvalidYParity :
      M.IsDiscriminant
        "revm_specification::eip7702::authorization_list::InvalidAuthorization::InvalidYParity"
        1.
    Axiom IsDiscriminant_InvalidAuthorization_Eip2InvalidSValue :
      M.IsDiscriminant
        "revm_specification::eip7702::authorization_list::InvalidAuthorization::Eip2InvalidSValue"
        2.
    
    Module Impl_core_fmt_Debug_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::InvalidAuthorization".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.read (|
                  M.match_operator (|
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_specification::eip7702::authorization_list::InvalidAuthorization::InvalidChainId"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "InvalidChainId" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_specification::eip7702::authorization_list::InvalidAuthorization::InvalidYParity"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "InvalidYParity" |) |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_specification::eip7702::authorization_list::InvalidAuthorization::Eip2InvalidSValue"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Eip2InvalidSValue" |) |)
                            |)
                          |)))
                    ]
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
    
    Module Impl_core_clone_Clone_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::InvalidAuthorization".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "revm_specification::eip7702::authorization_list::InvalidAuthorization::InvalidChainId"
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "revm_specification::eip7702::authorization_list::InvalidAuthorization::InvalidChainId"
                          []
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "revm_specification::eip7702::authorization_list::InvalidAuthorization::InvalidYParity"
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "revm_specification::eip7702::authorization_list::InvalidAuthorization::InvalidYParity"
                          []
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "revm_specification::eip7702::authorization_list::InvalidAuthorization::Eip2InvalidSValue"
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "revm_specification::eip7702::authorization_list::InvalidAuthorization::Eip2InvalidSValue"
                          []
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
    
    Module Impl_core_marker_StructuralPartialEq_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::InvalidAuthorization".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
    
    Module Impl_core_cmp_PartialEq_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::InvalidAuthorization".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [
                        Ty.path
                          "revm_specification::eip7702::authorization_list::InvalidAuthorization"
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [
                        Ty.path
                          "revm_specification::eip7702::authorization_list::InvalidAuthorization"
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |)
                |) in
              M.alloc (| BinOp.eq (| M.read (| __self_discr |), M.read (| __arg1_discr |) |) |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
    
    Module Impl_core_cmp_Eq_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::InvalidAuthorization".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.Tuple []))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
    
    Module Impl_core_hash_Hash_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::InvalidAuthorization".
      
      (* Hash *)
      Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [
                        Ty.path
                          "revm_specification::eip7702::authorization_list::InvalidAuthorization"
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.path "isize",
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
    
    Module Impl_core_fmt_Display_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
      Definition Self : Ty.t :=
        Ty.path "revm_specification::eip7702::authorization_list::InvalidAuthorization".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              let s = match self {
                  Self::InvalidChainId => "Invalid chain_id, Expect chain's ID or zero",
                  Self::InvalidYParity => "Invalid y_parity, Expect 0 or 1.",
                  Self::Eip2InvalidSValue => "Invalid signature s-value.",
              };
              f.write_str(s)
          }
      *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              let~ s : Ty.apply (Ty.path "&") [] [ Ty.path "str" ] :=
                M.copy (|
                  M.match_operator (|
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_specification::eip7702::authorization_list::InvalidAuthorization::InvalidChainId"
                            |) in
                          Value.String "Invalid chain_id, Expect chain's ID or zero"));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_specification::eip7702::authorization_list::InvalidAuthorization::InvalidYParity"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (| Value.String "Invalid y_parity, Expect 0 or 1." |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_specification::eip7702::authorization_list::InvalidAuthorization::Eip2InvalidSValue"
                            |) in
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| Value.String "Invalid signature s-value." |) |)
                            |)
                          |)))
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "write_str",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_revm_specification_eip7702_authorization_list_InvalidAuthorization.
  End authorization_list.
End eip7702.
