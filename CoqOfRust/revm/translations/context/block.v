(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module block.
  (* StructRecord
    {
      name := "BlockEnv";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("number", Ty.path "u64");
          ("beneficiary", Ty.path "alloy_primitives::bits::address::Address");
          ("timestamp", Ty.path "u64");
          ("gas_limit", Ty.path "u64");
          ("basefee", Ty.path "u64");
          ("difficulty",
            Ty.apply
              (Ty.path "ruint::Uint")
              [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
              []);
          ("prevrandao",
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [
                Ty.apply
                  (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  []
              ]);
          ("blob_excess_gas_and_price",
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice" ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_revm_context_block_BlockEnv.
    Definition Self : Ty.t := Ty.path "revm_context::block::BlockEnv".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "revm_context::block::BlockEnv"
            [
              ("number",
                M.call_closure (|
                  M.get_trait_method (| "core::clone::Clone", Ty.path "u64", [], "clone", [] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "number"
                    |)
                  ]
                |));
              ("beneficiary",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "alloy_primitives::bits::address::Address",
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "beneficiary"
                    |)
                  ]
                |));
              ("timestamp",
                M.call_closure (|
                  M.get_trait_method (| "core::clone::Clone", Ty.path "u64", [], "clone", [] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "timestamp"
                    |)
                  ]
                |));
              ("gas_limit",
                M.call_closure (|
                  M.get_trait_method (| "core::clone::Clone", Ty.path "u64", [], "clone", [] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "gas_limit"
                    |)
                  ]
                |));
              ("basefee",
                M.call_closure (|
                  M.get_trait_method (| "core::clone::Clone", Ty.path "u64", [], "clone", [] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "basefee"
                    |)
                  ]
                |));
              ("difficulty",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "difficulty"
                    |)
                  ]
                |));
              ("prevrandao",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          []
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "prevrandao"
                    |)
                  ]
                |));
              ("blob_excess_gas_and_price",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice" ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "blob_excess_gas_and_price"
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_revm_context_block_BlockEnv.
  
  Module Impl_core_fmt_Debug_for_revm_context_block_BlockEnv.
    Definition Self : Ty.t := Ty.path "revm_context::block::BlockEnv".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let~ names :=
              M.alloc (|
                M.alloc (|
                  Value.Array
                    [
                      M.read (| Value.String "number" |);
                      M.read (| Value.String "beneficiary" |);
                      M.read (| Value.String "timestamp" |);
                      M.read (| Value.String "gas_limit" |);
                      M.read (| Value.String "basefee" |);
                      M.read (| Value.String "difficulty" |);
                      M.read (| Value.String "prevrandao" |);
                      M.read (| Value.String "blob_excess_gas_and_price" |)
                    ]
                |)
              |) in
            let~ values :=
              M.alloc (|
                M.alloc (|
                  Value.Array
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::block::BlockEnv",
                        "number"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::block::BlockEnv",
                        "beneficiary"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::block::BlockEnv",
                        "timestamp"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::block::BlockEnv",
                        "gas_limit"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::block::BlockEnv",
                        "basefee"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::block::BlockEnv",
                        "difficulty"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::block::BlockEnv",
                        "prevrandao"
                      |);
                      M.alloc (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm_context::block::BlockEnv",
                          "blob_excess_gas_and_price"
                        |)
                      |)
                    ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "BlockEnv" |);
                  M.read (| names |);
                  M.read (| values |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_context_block_BlockEnv.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_context_block_BlockEnv.
    Definition Self : Ty.t := Ty.path "revm_context::block::BlockEnv".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_context_block_BlockEnv.
  
  Module Impl_core_cmp_PartialEq_for_revm_context_block_BlockEnv.
    Definition Self : Ty.t := Ty.path "revm_context::block::BlockEnv".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            LogicalOp.and (|
              LogicalOp.and (|
                LogicalOp.and (|
                  LogicalOp.and (|
                    LogicalOp.and (|
                      LogicalOp.and (|
                        BinOp.eq (|
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::block::BlockEnv",
                              "number"
                            |)
                          |),
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| other |),
                              "revm_context::block::BlockEnv",
                              "number"
                            |)
                          |)
                        |),
                        ltac:(M.monadic
                          (M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialEq",
                              Ty.path "alloy_primitives::bits::address::Address",
                              [ Ty.path "alloy_primitives::bits::address::Address" ],
                              "eq",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "revm_context::block::BlockEnv",
                                "beneficiary"
                              |);
                              M.SubPointer.get_struct_record_field (|
                                M.read (| other |),
                                "revm_context::block::BlockEnv",
                                "beneficiary"
                              |)
                            ]
                          |)))
                      |),
                      ltac:(M.monadic
                        (BinOp.eq (|
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::block::BlockEnv",
                              "timestamp"
                            |)
                          |),
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| other |),
                              "revm_context::block::BlockEnv",
                              "timestamp"
                            |)
                          |)
                        |)))
                    |),
                    ltac:(M.monadic
                      (BinOp.eq (|
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "revm_context::block::BlockEnv",
                            "gas_limit"
                          |)
                        |),
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| other |),
                            "revm_context::block::BlockEnv",
                            "gas_limit"
                          |)
                        |)
                      |)))
                  |),
                  ltac:(M.monadic
                    (BinOp.eq (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm_context::block::BlockEnv",
                          "basefee"
                        |)
                      |),
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| other |),
                          "revm_context::block::BlockEnv",
                          "basefee"
                        |)
                      |)
                    |)))
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply
                        (Ty.path "ruint::Uint")
                        [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                        [],
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          []
                      ],
                      "eq",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::block::BlockEnv",
                        "difficulty"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "revm_context::block::BlockEnv",
                        "difficulty"
                      |)
                    ]
                  |)))
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          []
                      ],
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            []
                        ]
                    ],
                    "eq",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "prevrandao"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "revm_context::block::BlockEnv",
                      "prevrandao"
                    |)
                  ]
                |)))
            |),
            ltac:(M.monadic
              (M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice" ],
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice" ]
                  ],
                  "eq",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "revm_context::block::BlockEnv",
                    "blob_excess_gas_and_price"
                  |);
                  M.SubPointer.get_struct_record_field (|
                    M.read (| other |),
                    "revm_context::block::BlockEnv",
                    "blob_excess_gas_and_price"
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_revm_context_block_BlockEnv.
  
  Module Impl_core_cmp_Eq_for_revm_context_block_BlockEnv.
    Definition Self : Ty.t := Ty.path "revm_context::block::BlockEnv".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Value.DeclaredButUndefined,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Value.DeclaredButUndefined,
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Value.DeclaredButUndefined,
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_context_block_BlockEnv.
  
  Module Impl_core_hash_Hash_for_revm_context_block_BlockEnv.
    Definition Self : Ty.t := Ty.path "revm_context::block::BlockEnv".
    
    (* Hash *)
    Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::hash::Hash", Ty.path "u64", [], "hash", [ __H ] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "number"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.path "alloy_primitives::bits::address::Address",
                    [],
                    "hash",
                    [ __H ]
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "beneficiary"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::hash::Hash", Ty.path "u64", [], "hash", [ __H ] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "timestamp"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::hash::Hash", Ty.path "u64", [], "hash", [ __H ] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "gas_limit"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::hash::Hash", Ty.path "u64", [], "hash", [ __H ] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "basefee"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    [],
                    "hash",
                    [ __H ]
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "difficulty"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          []
                      ],
                    [],
                    "hash",
                    [ __H ]
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::block::BlockEnv",
                      "prevrandao"
                    |);
                    M.read (| state |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::hash::Hash",
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice" ],
                  [],
                  "hash",
                  [ __H ]
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "revm_context::block::BlockEnv",
                    "blob_excess_gas_and_price"
                  |);
                  M.read (| state |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_revm_context_block_BlockEnv.
  
  Module Impl_revm_context_block_BlockEnv.
    Definition Self : Ty.t := Ty.path "revm_context::block::BlockEnv".
    
    (*
        pub fn set_blob_excess_gas_and_price(&mut self, excess_blob_gas: u64) {
            self.blob_excess_gas_and_price = Some(BlobExcessGasAndPrice::new(excess_blob_gas));
        }
    *)
    Definition set_blob_excess_gas_and_price
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self; excess_blob_gas ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let excess_blob_gas := M.alloc (| excess_blob_gas |) in
          M.read (|
            let~ _ :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::block::BlockEnv",
                  "blob_excess_gas_and_price"
                |),
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice",
                        "new",
                        []
                      |),
                      [ M.read (| excess_blob_gas |) ]
                    |)
                  ]
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_set_blob_excess_gas_and_price :
      M.IsAssociatedFunction Self "set_blob_excess_gas_and_price" set_blob_excess_gas_and_price.
  End Impl_revm_context_block_BlockEnv.
  
  Module Impl_revm_context_interface_block_Block_for_revm_context_block_BlockEnv.
    Definition Self : Ty.t := Ty.path "revm_context::block::BlockEnv".
    
    (*
        fn number(&self) -> u64 {
            self.number
        }
    *)
    Definition number (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::block::BlockEnv",
              "number"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn beneficiary(&self) -> Address {
            self.beneficiary
        }
    *)
    Definition beneficiary (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::block::BlockEnv",
              "beneficiary"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn timestamp(&self) -> u64 {
            self.timestamp
        }
    *)
    Definition timestamp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::block::BlockEnv",
              "timestamp"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn gas_limit(&self) -> u64 {
            self.gas_limit
        }
    *)
    Definition gas_limit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::block::BlockEnv",
              "gas_limit"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn basefee(&self) -> u64 {
            self.basefee
        }
    *)
    Definition basefee (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::block::BlockEnv",
              "basefee"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn difficulty(&self) -> U256 {
            self.difficulty
        }
    *)
    Definition difficulty (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::block::BlockEnv",
              "difficulty"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn prevrandao(&self) -> Option<B256> {
            self.prevrandao
        }
    *)
    Definition prevrandao (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::block::BlockEnv",
              "prevrandao"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn blob_excess_gas_and_price(&self) -> Option<BlobExcessGasAndPrice> {
            self.blob_excess_gas_and_price
        }
    *)
    Definition blob_excess_gas_and_price
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::block::BlockEnv",
              "blob_excess_gas_and_price"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "revm_context_interface::block::Block"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("number", InstanceField.Method number);
          ("beneficiary", InstanceField.Method beneficiary);
          ("timestamp", InstanceField.Method timestamp);
          ("gas_limit", InstanceField.Method gas_limit);
          ("basefee", InstanceField.Method basefee);
          ("difficulty", InstanceField.Method difficulty);
          ("prevrandao", InstanceField.Method prevrandao);
          ("blob_excess_gas_and_price", InstanceField.Method blob_excess_gas_and_price)
        ].
  End Impl_revm_context_interface_block_Block_for_revm_context_block_BlockEnv.
  
  Module Impl_core_default_Default_for_revm_context_block_BlockEnv.
    Definition Self : Ty.t := Ty.path "revm_context::block::BlockEnv".
    
    (*
        fn default() -> Self {
            Self {
                number: 0,
                beneficiary: Address::ZERO,
                timestamp: 1,
                gas_limit: u64::MAX,
                basefee: 0,
                difficulty: U256::ZERO,
                prevrandao: Some(B256::ZERO),
                blob_excess_gas_and_price: Some(BlobExcessGasAndPrice::new(0)),
            }
        }
    *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "revm_context::block::BlockEnv"
            [
              ("number", Value.Integer IntegerKind.U64 0);
              ("beneficiary",
                M.read (| M.get_constant (| "alloy_primitives::bits::address::ZERO" |) |));
              ("timestamp", Value.Integer IntegerKind.U64 1);
              ("gas_limit", M.read (| M.get_constant (| "core::num::MAX" |) |));
              ("basefee", Value.Integer IntegerKind.U64 0);
              ("difficulty", M.read (| M.get_constant (| "ruint::ZERO" |) |));
              ("prevrandao",
                Value.StructTuple
                  "core::option::Option::Some"
                  [ M.read (| M.get_constant (| "alloy_primitives::bits::fixed::ZERO" |) |) ]);
              ("blob_excess_gas_and_price",
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "revm_context_interface::block::blob::BlobExcessGasAndPrice",
                        "new",
                        []
                      |),
                      [ Value.Integer IntegerKind.U64 0 ]
                    |)
                  ])
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_revm_context_block_BlockEnv.
End block.
