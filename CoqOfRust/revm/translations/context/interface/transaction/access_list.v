(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module transaction.
  Module access_list.
    (* Trait *)
    Module AccessListTrait.
      Definition num_account_storages
          (Self : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let~ storage_num :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.associated;
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "alloy_primitives::bits::address::Address";
                                      Ty.associated
                                    ]
                                ]
                            ]
                            (Ty.path "usize")
                        ],
                      [],
                      "sum",
                      [ Ty.path "usize" ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.associated,
                          [],
                          "map",
                          [
                            Ty.path "usize";
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "alloy_primitives::bits::address::Address";
                                        Ty.associated
                                      ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "revm_context_interface::transaction::access_list::AccessListTrait",
                              Self,
                              [],
                              "iter",
                              []
                            |),
                            [ M.read (| self |) ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let i := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.associated,
                                                [],
                                                "count",
                                                []
                                              |),
                                              [ M.read (| M.SubPointer.get_tuple_field (| i, 1 |) |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ account_num :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.associated,
                      [],
                      "count",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "revm_context_interface::transaction::access_list::AccessListTrait",
                          Self,
                          [],
                          "iter",
                          []
                        |),
                        [ M.read (| self |) ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [ M.read (| account_num |); M.read (| storage_num |) ] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom ProvidedMethod_num_account_storages :
        M.IsProvidedMethod
          "revm_context_interface::transaction::access_list::AccessListTrait"
          "num_account_storages"
          num_account_storages.
    End AccessListTrait.
    
    Module underscore.
      Module Impl_revm_context_interface_transaction_access_list_AccessListTrait_where_revm_context_interface_transaction_access_list_AccessListTrait_T_where_core_marker_Sized_T_where_core_clone_Clone_ref__T_for_ref__T.
        Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "&") [] [ T ].
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition iter (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (|
                  "revm_context_interface::transaction::access_list::AccessListTrait",
                  T,
                  [],
                  "iter",
                  []
                |),
                [ M.read (| M.read (| self |) |) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition num_account_storages
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (|
                  "revm_context_interface::transaction::access_list::AccessListTrait",
                  T,
                  [],
                  "num_account_storages",
                  []
                |),
                [ M.read (| M.read (| self |) |) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::access_list::AccessListTrait"
            (Self T)
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("iter", InstanceField.Method (iter T));
              ("num_account_storages", InstanceField.Method (num_account_storages T))
            ].
      End Impl_revm_context_interface_transaction_access_list_AccessListTrait_where_revm_context_interface_transaction_access_list_AccessListTrait_T_where_core_marker_Sized_T_where_core_clone_Clone_ref__T_for_ref__T.
      Module Impl_revm_context_interface_transaction_access_list_AccessListTrait_where_revm_context_interface_transaction_access_list_AccessListTrait_T_where_core_marker_Sized_T_where_core_clone_Clone_alloc_boxed_Box_T_alloc_alloc_Global_for_alloc_boxed_Box_T_alloc_alloc_Global.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "alloc::boxed::Box") [] [ T; Ty.path "alloc::alloc::Global" ].
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition iter (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (|
                  "revm_context_interface::transaction::access_list::AccessListTrait",
                  T,
                  [],
                  "iter",
                  []
                |),
                [ M.read (| M.read (| self |) |) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition num_account_storages
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (|
                  "revm_context_interface::transaction::access_list::AccessListTrait",
                  T,
                  [],
                  "num_account_storages",
                  []
                |),
                [ M.read (| M.read (| self |) |) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::access_list::AccessListTrait"
            (Self T)
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("iter", InstanceField.Method (iter T));
              ("num_account_storages", InstanceField.Method (num_account_storages T))
            ].
      End Impl_revm_context_interface_transaction_access_list_AccessListTrait_where_revm_context_interface_transaction_access_list_AccessListTrait_T_where_core_marker_Sized_T_where_core_clone_Clone_alloc_boxed_Box_T_alloc_alloc_Global_for_alloc_boxed_Box_T_alloc_alloc_Global.
      Module Impl_revm_context_interface_transaction_access_list_AccessListTrait_where_revm_context_interface_transaction_access_list_AccessListTrait_T_where_core_marker_Sized_T_where_core_clone_Clone_alloc_sync_Arc_T_alloc_alloc_Global_for_alloc_sync_Arc_T_alloc_alloc_Global.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "alloc::sync::Arc") [] [ T; Ty.path "alloc::alloc::Global" ].
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition iter (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (|
                  "revm_context_interface::transaction::access_list::AccessListTrait",
                  T,
                  [],
                  "iter",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [ T; Ty.path "alloc::alloc::Global" ],
                      [],
                      "deref",
                      []
                    |),
                    [ M.read (| self |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition num_account_storages
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (|
                  "revm_context_interface::transaction::access_list::AccessListTrait",
                  T,
                  [],
                  "num_account_storages",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [ T; Ty.path "alloc::alloc::Global" ],
                      [],
                      "deref",
                      []
                    |),
                    [ M.read (| self |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::access_list::AccessListTrait"
            (Self T)
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("iter", InstanceField.Method (iter T));
              ("num_account_storages", InstanceField.Method (num_account_storages T))
            ].
      End Impl_revm_context_interface_transaction_access_list_AccessListTrait_where_revm_context_interface_transaction_access_list_AccessListTrait_T_where_core_marker_Sized_T_where_core_clone_Clone_alloc_sync_Arc_T_alloc_alloc_Global_for_alloc_sync_Arc_T_alloc_alloc_Global.
      Module Impl_revm_context_interface_transaction_access_list_AccessListTrait_where_revm_context_interface_transaction_access_list_AccessListTrait_T_where_core_marker_Sized_T_where_core_clone_Clone_alloc_rc_Rc_T_alloc_alloc_Global_for_alloc_rc_Rc_T_alloc_alloc_Global.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "alloc::rc::Rc") [] [ T; Ty.path "alloc::alloc::Global" ].
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition iter (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (|
                  "revm_context_interface::transaction::access_list::AccessListTrait",
                  T,
                  [],
                  "iter",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply (Ty.path "alloc::rc::Rc") [] [ T; Ty.path "alloc::alloc::Global" ],
                      [],
                      "deref",
                      []
                    |),
                    [ M.read (| self |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[auto_impl(&, Box, Arc, Rc)] *)
        Definition num_account_storages
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (|
                  "revm_context_interface::transaction::access_list::AccessListTrait",
                  T,
                  [],
                  "num_account_storages",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.apply (Ty.path "alloc::rc::Rc") [] [ T; Ty.path "alloc::alloc::Global" ],
                      [],
                      "deref",
                      []
                    |),
                    [ M.read (| self |) ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "revm_context_interface::transaction::access_list::AccessListTrait"
            (Self T)
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("iter", InstanceField.Method (iter T));
              ("num_account_storages", InstanceField.Method (num_account_storages T))
            ].
      End Impl_revm_context_interface_transaction_access_list_AccessListTrait_where_revm_context_interface_transaction_access_list_AccessListTrait_T_where_core_marker_Sized_T_where_core_clone_Clone_alloc_rc_Rc_T_alloc_alloc_Global_for_alloc_rc_Rc_T_alloc_alloc_Global.
    End underscore.
    
    
    
    
    Module Impl_revm_context_interface_transaction_access_list_AccessListTrait_for_alloy_eip2930_AccessList.
      Definition Self : Ty.t := Ty.path "alloy_eip2930::AccessList".
      
      (*
          fn iter(&self) -> impl Iterator<Item = (Address, impl Iterator<Item = B256>)> {
              self.0.iter().map(|item| {
                  let slots = item.storage_keys.iter().copied();
                  (item.address, slots)
              })
          }
      *)
      Definition iter (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::slice::iter::Iter")
                  []
                  [ Ty.path "alloy_eip2930::AccessListItem" ],
                [],
                "map",
                [
                  Ty.tuple
                    [
                      Ty.path "alloy_primitives::bits::address::Address";
                      Ty.apply
                        (Ty.path "core::iter::adapters::copied::Copied")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                []
                            ]
                        ]
                    ];
                  Ty.function
                    [
                      Ty.tuple
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "alloy_eip2930::AccessListItem" ] ]
                    ]
                    (Ty.tuple
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.apply
                          (Ty.path "core::iter::adapters::copied::Copied")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  []
                              ]
                          ]
                      ])
                ]
              |),
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "alloy_eip2930::AccessListItem" ],
                    "iter",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "alloy_eip2930::AccessListItem"; Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "deref",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_tuple_field (|
                          M.read (| self |),
                          "alloy_eip2930::AccessList",
                          0
                        |)
                      ]
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let item := M.copy (| γ |) in
                                  M.read (|
                                    let~ slots :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "alloy_primitives::bits::fixed::FixedBytes")
                                                  [ Value.Integer IntegerKind.Usize 32 ]
                                                  []
                                              ],
                                            [],
                                            "copied",
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "alloy_primitives::bits::fixed::FixedBytes")
                                                [ Value.Integer IntegerKind.Usize 32 ]
                                                []
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloy_primitives::bits::fixed::FixedBytes")
                                                      [ Value.Integer IntegerKind.Usize 32 ]
                                                      []
                                                  ],
                                                "iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloy_primitives::bits::fixed::FixedBytes")
                                                          [ Value.Integer IntegerKind.Usize 32 ]
                                                          [];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| item |),
                                                      "alloy_eip2930::AccessListItem",
                                                      "storage_keys"
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (|
                                      Value.Tuple
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| item |),
                                              "alloy_eip2930::AccessListItem",
                                              "address"
                                            |)
                                          |);
                                          M.read (| slots |)
                                        ]
                                    |)
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "revm_context_interface::transaction::access_list::AccessListTrait"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("iter", InstanceField.Method iter) ].
    End Impl_revm_context_interface_transaction_access_list_AccessListTrait_for_alloy_eip2930_AccessList.
  End access_list.
End transaction.
