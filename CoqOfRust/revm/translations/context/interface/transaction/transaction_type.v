(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module transaction.
  Module transaction_type.
    (*
    Enum TransactionType
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "Legacy";
            item := StructTuple [];
            discriminant := None;
          };
          {
            name := "Eip2930";
            item := StructTuple [];
            discriminant := None;
          };
          {
            name := "Eip1559";
            item := StructTuple [];
            discriminant := None;
          };
          {
            name := "Eip4844";
            item := StructTuple [];
            discriminant := None;
          };
          {
            name := "Eip7702";
            item := StructTuple [];
            discriminant := None;
          };
          {
            name := "Custom";
            item := StructTuple [];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_for_revm_context_interface_transaction_transaction_type_TransactionType.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::transaction::transaction_type::TransactionType".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (| M.read (| self |) |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_revm_context_interface_transaction_transaction_type_TransactionType.
    
    Module Impl_core_marker_Copy_for_revm_context_interface_transaction_transaction_type_TransactionType.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::transaction::transaction_type::TransactionType".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_for_revm_context_interface_transaction_transaction_type_TransactionType.
    
    Module Impl_core_fmt_Debug_for_revm_context_interface_transaction_transaction_type_TransactionType.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::transaction::transaction_type::TransactionType".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
              [
                M.read (| f |);
                M.read (|
                  M.match_operator (|
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_context_interface::transaction::transaction_type::TransactionType::Legacy"
                            |) in
                          M.alloc (| M.read (| Value.String "Legacy" |) |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_context_interface::transaction::transaction_type::TransactionType::Eip2930"
                            |) in
                          M.alloc (| M.read (| Value.String "Eip2930" |) |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_context_interface::transaction::transaction_type::TransactionType::Eip1559"
                            |) in
                          M.alloc (| M.read (| Value.String "Eip1559" |) |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_context_interface::transaction::transaction_type::TransactionType::Eip4844"
                            |) in
                          M.alloc (| M.read (| Value.String "Eip4844" |) |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_context_interface::transaction::transaction_type::TransactionType::Eip7702"
                            |) in
                          M.alloc (| M.read (| Value.String "Eip7702" |) |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "revm_context_interface::transaction::transaction_type::TransactionType::Custom"
                            |) in
                          M.alloc (| M.read (| Value.String "Custom" |) |)))
                    ]
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_revm_context_interface_transaction_transaction_type_TransactionType.
    
    Module Impl_core_marker_StructuralPartialEq_for_revm_context_interface_transaction_transaction_type_TransactionType.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::transaction::transaction_type::TransactionType".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_revm_context_interface_transaction_transaction_type_TransactionType.
    
    Module Impl_core_cmp_PartialEq_for_revm_context_interface_transaction_transaction_type_TransactionType.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::transaction::transaction_type::TransactionType".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let~ __self_discr :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [
                        Ty.path
                          "revm_context_interface::transaction::transaction_type::TransactionType"
                      ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let~ __arg1_discr :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [
                        Ty.path
                          "revm_context_interface::transaction::transaction_type::TransactionType"
                      ]
                    |),
                    [ M.read (| other |) ]
                  |)
                |) in
              M.alloc (| BinOp.eq (| M.read (| __self_discr |), M.read (| __arg1_discr |) |) |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_revm_context_interface_transaction_transaction_type_TransactionType.
    
    Module Impl_core_cmp_Eq_for_revm_context_interface_transaction_transaction_type_TransactionType.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::transaction::transaction_type::TransactionType".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.Tuple []))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_revm_context_interface_transaction_transaction_type_TransactionType.
    
    Module Impl_core_hash_Hash_for_revm_context_interface_transaction_transaction_type_TransactionType.
      Definition Self : Ty.t :=
        Ty.path "revm_context_interface::transaction::transaction_type::TransactionType".
      
      (* Hash *)
      Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let state := M.alloc (| state |) in
            M.read (|
              let~ __self_discr :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [
                        Ty.path
                          "revm_context_interface::transaction::transaction_type::TransactionType"
                      ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::hash::Hash", Ty.path "isize", [], "hash", [ __H ] |),
                  [ __self_discr; M.read (| state |) ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_revm_context_interface_transaction_transaction_type_TransactionType.
  End transaction_type.
End transaction.
