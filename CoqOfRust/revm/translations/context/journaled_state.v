(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module journaled_state.
  (* StructRecord
    {
      name := "JournaledState";
      const_params := [];
      ty_params := [ "DB" ];
      fields :=
        [
          ("database", DB);
          ("state",
            Ty.apply
              (Ty.path "hashbrown::map::HashMap")
              []
              [
                Ty.path "alloy_primitives::bits::address::Address";
                Ty.path "revm_state::Account";
                Ty.path "foldhash::seed::fast::RandomState";
                Ty.path "hashbrown::raw::alloc::inner::Global"
              ]);
          ("transient_storage",
            Ty.apply
              (Ty.path "hashbrown::map::HashMap")
              []
              [
                Ty.tuple
                  [
                    Ty.path "alloy_primitives::bits::address::Address";
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      []
                  ];
                Ty.apply
                  (Ty.path "ruint::Uint")
                  [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                  [];
                Ty.path "foldhash::seed::fast::RandomState";
                Ty.path "hashbrown::raw::alloc::inner::Global"
              ]);
          ("logs",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply
                  (Ty.path "alloy_primitives::log::Log")
                  []
                  [ Ty.path "alloy_primitives::log::LogData" ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("depth", Ty.path "usize");
          ("journal",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path "revm_context::journaled_state::JournalEntry";
                    Ty.path "alloc::alloc::Global"
                  ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("spec", Ty.path "revm_specification::hardfork::SpecId");
          ("warm_preloaded_addresses",
            Ty.apply
              (Ty.path "hashbrown::set::HashSet")
              []
              [
                Ty.path "alloy_primitives::bits::address::Address";
                Ty.path "foldhash::seed::fast::RandomState";
                Ty.path "hashbrown::raw::alloc::inner::Global"
              ]);
          ("precompiles",
            Ty.apply
              (Ty.path "hashbrown::set::HashSet")
              []
              [
                Ty.path "alloy_primitives::bits::address::Address";
                Ty.path "foldhash::seed::fast::RandomState";
                Ty.path "hashbrown::raw::alloc::inner::Global"
              ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_DB_for_revm_context_journaled_state_JournaledState_DB.
    Definition Self (DB : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ].
    
    (* Debug *)
    Definition fmt (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let~ names :=
              M.alloc (|
                M.alloc (|
                  Value.Array
                    [
                      M.read (| Value.String "database" |);
                      M.read (| Value.String "state" |);
                      M.read (| Value.String "transient_storage" |);
                      M.read (| Value.String "logs" |);
                      M.read (| Value.String "depth" |);
                      M.read (| Value.String "journal" |);
                      M.read (| Value.String "spec" |);
                      M.read (| Value.String "warm_preloaded_addresses" |);
                      M.read (| Value.String "precompiles" |)
                    ]
                |)
              |) in
            let~ values :=
              M.alloc (|
                M.alloc (|
                  Value.Array
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::journaled_state::JournaledState",
                        "database"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::journaled_state::JournaledState",
                        "state"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::journaled_state::JournaledState",
                        "transient_storage"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::journaled_state::JournaledState",
                        "logs"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::journaled_state::JournaledState",
                        "depth"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::journaled_state::JournaledState",
                        "journal"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::journaled_state::JournaledState",
                        "spec"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::journaled_state::JournaledState",
                        "warm_preloaded_addresses"
                      |);
                      M.alloc (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm_context::journaled_state::JournaledState",
                          "precompiles"
                        |)
                      |)
                    ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "JournaledState" |);
                  M.read (| names |);
                  M.read (| values |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DB : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (Self DB)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method (fmt DB)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_DB_for_revm_context_journaled_state_JournaledState_DB.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_DB_for_revm_context_journaled_state_JournaledState_DB.
    Definition Self (DB : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ].
    
    (* Clone *)
    Definition clone (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "revm_context::journaled_state::JournaledState"
            [
              ("database",
                M.call_closure (|
                  M.get_trait_method (| "core::clone::Clone", DB, [], "clone", [] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "database"
                    |)
                  ]
                |));
              ("state",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "hashbrown::map::HashMap")
                      []
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.path "revm_state::Account";
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "state"
                    |)
                  ]
                |));
              ("transient_storage",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "hashbrown::map::HashMap")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.path "alloy_primitives::bits::address::Address";
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ];
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "transient_storage"
                    |)
                  ]
                |));
              ("logs",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::log::Log")
                          []
                          [ Ty.path "alloy_primitives::log::LogData" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "logs"
                    |)
                  ]
                |));
              ("depth",
                M.call_closure (|
                  M.get_trait_method (| "core::clone::Clone", Ty.path "usize", [], "clone", [] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "depth"
                    |)
                  ]
                |));
              ("journal",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "revm_context::journaled_state::JournalEntry";
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "journal"
                    |)
                  ]
                |));
              ("spec",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "revm_specification::hardfork::SpecId",
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "spec"
                    |)
                  ]
                |));
              ("warm_preloaded_addresses",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "hashbrown::set::HashSet")
                      []
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "warm_preloaded_addresses"
                    |)
                  ]
                |));
              ("precompiles",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "hashbrown::set::HashSet")
                      []
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "precompiles"
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DB : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (Self DB)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method (clone DB)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_DB_for_revm_context_journaled_state_JournaledState_DB.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_context_journaled_state_JournaledState_DB.
    Definition Self (DB : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ].
    
    Axiom Implements :
      forall (DB : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (Self DB)
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_context_journaled_state_JournaledState_DB.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_DB_for_revm_context_journaled_state_JournaledState_DB.
    Definition Self (DB : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ].
    
    (* PartialEq *)
    Definition eq (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            LogicalOp.and (|
              LogicalOp.and (|
                LogicalOp.and (|
                  LogicalOp.and (|
                    LogicalOp.and (|
                      LogicalOp.and (|
                        LogicalOp.and (|
                          M.call_closure (|
                            M.get_trait_method (| "core::cmp::PartialEq", DB, [ DB ], "eq", [] |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "revm_context::journaled_state::JournaledState",
                                "database"
                              |);
                              M.SubPointer.get_struct_record_field (|
                                M.read (| other |),
                                "revm_context::journaled_state::JournaledState",
                                "database"
                              |)
                            ]
                          |),
                          ltac:(M.monadic
                            (M.call_closure (|
                              M.get_trait_method (|
                                "core::cmp::PartialEq",
                                Ty.apply
                                  (Ty.path "hashbrown::map::HashMap")
                                  []
                                  [
                                    Ty.path "alloy_primitives::bits::address::Address";
                                    Ty.path "revm_state::Account";
                                    Ty.path "foldhash::seed::fast::RandomState";
                                    Ty.path "hashbrown::raw::alloc::inner::Global"
                                  ],
                                [
                                  Ty.apply
                                    (Ty.path "hashbrown::map::HashMap")
                                    []
                                    [
                                      Ty.path "alloy_primitives::bits::address::Address";
                                      Ty.path "revm_state::Account";
                                      Ty.path "foldhash::seed::fast::RandomState";
                                      Ty.path "hashbrown::raw::alloc::inner::Global"
                                    ]
                                ],
                                "eq",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "revm_context::journaled_state::JournaledState",
                                  "state"
                                |);
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| other |),
                                  "revm_context::journaled_state::JournaledState",
                                  "state"
                                |)
                              ]
                            |)))
                        |),
                        ltac:(M.monadic
                          (M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialEq",
                              Ty.apply
                                (Ty.path "hashbrown::map::HashMap")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "alloy_primitives::bits::address::Address";
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ];
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [];
                                  Ty.path "foldhash::seed::fast::RandomState";
                                  Ty.path "hashbrown::raw::alloc::inner::Global"
                                ],
                              [
                                Ty.apply
                                  (Ty.path "hashbrown::map::HashMap")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "alloy_primitives::bits::address::Address";
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ];
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [];
                                    Ty.path "foldhash::seed::fast::RandomState";
                                    Ty.path "hashbrown::raw::alloc::inner::Global"
                                  ]
                              ],
                              "eq",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "revm_context::journaled_state::JournaledState",
                                "transient_storage"
                              |);
                              M.SubPointer.get_struct_record_field (|
                                M.read (| other |),
                                "revm_context::journaled_state::JournaledState",
                                "transient_storage"
                              |)
                            ]
                          |)))
                      |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::PartialEq",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloy_primitives::log::Log")
                                  []
                                  [ Ty.path "alloy_primitives::log::LogData" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloy_primitives::log::Log")
                                    []
                                    [ Ty.path "alloy_primitives::log::LogData" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                            "eq",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::journaled_state::JournaledState",
                              "logs"
                            |);
                            M.SubPointer.get_struct_record_field (|
                              M.read (| other |),
                              "revm_context::journaled_state::JournaledState",
                              "logs"
                            |)
                          ]
                        |)))
                    |),
                    ltac:(M.monadic
                      (BinOp.eq (|
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "revm_context::journaled_state::JournaledState",
                            "depth"
                          |)
                        |),
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| other |),
                            "revm_context::journaled_state::JournaledState",
                            "depth"
                          |)
                        |)
                      |)))
                  |),
                  ltac:(M.monadic
                    (M.call_closure (|
                      M.get_trait_method (|
                        "core::cmp::PartialEq",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "revm_context::journaled_state::JournalEntry";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.path "revm_context::journaled_state::JournalEntry";
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                        "eq",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm_context::journaled_state::JournaledState",
                          "journal"
                        |);
                        M.SubPointer.get_struct_record_field (|
                          M.read (| other |),
                          "revm_context::journaled_state::JournaledState",
                          "journal"
                        |)
                      ]
                    |)))
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.path "revm_specification::hardfork::SpecId",
                      [ Ty.path "revm_specification::hardfork::SpecId" ],
                      "eq",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::journaled_state::JournaledState",
                        "spec"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "revm_context::journaled_state::JournaledState",
                        "spec"
                      |)
                    ]
                  |)))
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply
                      (Ty.path "hashbrown::set::HashSet")
                      []
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    [
                      Ty.apply
                        (Ty.path "hashbrown::set::HashSet")
                        []
                        [
                          Ty.path "alloy_primitives::bits::address::Address";
                          Ty.path "foldhash::seed::fast::RandomState";
                          Ty.path "hashbrown::raw::alloc::inner::Global"
                        ]
                    ],
                    "eq",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "warm_preloaded_addresses"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "revm_context::journaled_state::JournaledState",
                      "warm_preloaded_addresses"
                    |)
                  ]
                |)))
            |),
            ltac:(M.monadic
              (M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.apply
                    (Ty.path "hashbrown::set::HashSet")
                    []
                    [
                      Ty.path "alloy_primitives::bits::address::Address";
                      Ty.path "foldhash::seed::fast::RandomState";
                      Ty.path "hashbrown::raw::alloc::inner::Global"
                    ],
                  [
                    Ty.apply
                      (Ty.path "hashbrown::set::HashSet")
                      []
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ]
                  ],
                  "eq",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "revm_context::journaled_state::JournaledState",
                    "precompiles"
                  |);
                  M.SubPointer.get_struct_record_field (|
                    M.read (| other |),
                    "revm_context::journaled_state::JournaledState",
                    "precompiles"
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DB : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (Self DB)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method (eq DB)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_DB_for_revm_context_journaled_state_JournaledState_DB.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_DB_for_revm_context_journaled_state_JournaledState_DB.
    Definition Self (DB : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Value.DeclaredButUndefined,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Value.DeclaredButUndefined,
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Value.DeclaredButUndefined,
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Value.DeclaredButUndefined,
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Value.DeclaredButUndefined,
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Value.DeclaredButUndefined,
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.match_operator (|
                                                                              Value.DeclaredButUndefined,
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.alloc (|
                                                                                      Value.Tuple []
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)))
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DB : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (Self DB)
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq DB)) ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_DB_for_revm_context_journaled_state_JournaledState_DB.
  
  Module Impl_revm_context_interface_journaled_state_Journal_where_revm_database_interface_Database_DB_for_revm_context_journaled_state_JournaledState_DB.
    Definition Self (DB : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ].
    
    (*     type Database = DB; *)
    Definition _Database (DB : Ty.t) : Ty.t := DB.
    
    (*     type FinalOutput = (EvmState, Vec<Log>); *)
    Definition _FinalOutput (DB : Ty.t) : Ty.t :=
      Ty.tuple
        [
          Ty.apply
            (Ty.path "hashbrown::map::HashMap")
            []
            [
              Ty.path "alloy_primitives::bits::address::Address";
              Ty.path "revm_state::Account";
              Ty.path "foldhash::seed::fast::RandomState";
              Ty.path "hashbrown::raw::alloc::inner::Global"
            ];
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            []
            [
              Ty.apply
                (Ty.path "alloy_primitives::log::Log")
                []
                [ Ty.path "alloy_primitives::log::LogData" ];
              Ty.path "alloc::alloc::Global"
            ]
        ].
    
    (*
        fn new(database: DB) -> JournaledState<DB> {
            Self::new(SpecId::LATEST, database)
        }
    *)
    Definition new (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ database ] =>
        ltac:(M.monadic
          (let database := M.alloc (| database |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "new",
              []
            |),
            [
              Value.StructTuple "revm_specification::hardfork::SpecId::LATEST" [];
              M.read (| database |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn db_ref(&self) -> &Self::Database {
            &self.database
        }
    *)
    Definition db_ref (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.SubPointer.get_struct_record_field (|
            M.read (| self |),
            "revm_context::journaled_state::JournaledState",
            "database"
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn db(&mut self) -> &mut Self::Database {
            &mut self.database
        }
    *)
    Definition db (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.SubPointer.get_struct_record_field (|
            M.read (| self |),
            "revm_context::journaled_state::JournaledState",
            "database"
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn sload(
            &mut self,
            address: Address,
            key: U256,
        ) -> Result<StateLoad<U256>, <Self::Database as Database>::Error> {
            self.sload(address, key)
        }
    *)
    Definition sload (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; key ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let key := M.alloc (| key |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "sload",
              []
            |),
            [ M.read (| self |); M.read (| address |); M.read (| key |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn sstore(
            &mut self,
            address: Address,
            key: U256,
            value: U256,
        ) -> Result<StateLoad<SStoreResult>, <Self::Database as Database>::Error> {
            self.sstore(address, key, value)
        }
    *)
    Definition sstore (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; key; value ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let key := M.alloc (| key |) in
          let value := M.alloc (| value |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "sstore",
              []
            |),
            [ M.read (| self |); M.read (| address |); M.read (| key |); M.read (| value |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn tload(&mut self, address: Address, key: U256) -> U256 {
            self.tload(address, key)
        }
    *)
    Definition tload (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; key ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let key := M.alloc (| key |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "tload",
              []
            |),
            [ M.read (| self |); M.read (| address |); M.read (| key |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn tstore(&mut self, address: Address, key: U256, value: U256) {
            self.tstore(address, key, value)
        }
    *)
    Definition tstore (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; key; value ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let key := M.alloc (| key |) in
          let value := M.alloc (| value |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "tstore",
              []
            |),
            [ M.read (| self |); M.read (| address |); M.read (| key |); M.read (| value |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn log(&mut self, log: Log) {
            self.log(log)
        }
    *)
    Definition log (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; log ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let log := M.alloc (| log |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "log",
              []
            |),
            [ M.read (| self |); M.read (| log |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn selfdestruct(
            &mut self,
            address: Address,
            target: Address,
        ) -> Result<StateLoad<SelfDestructResult>, DB::Error> {
            self.selfdestruct(address, target)
        }
    *)
    Definition selfdestruct (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; target ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let target := M.alloc (| target |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "selfdestruct",
              []
            |),
            [ M.read (| self |); M.read (| address |); M.read (| target |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn warm_account(&mut self, address: Address) {
            self.warm_preloaded_addresses.insert(address);
        }
    *)
    Definition warm_account (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          M.read (|
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "hashbrown::set::HashSet")
                      []
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    "insert",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "warm_preloaded_addresses"
                    |);
                    M.read (| address |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn warm_precompiles(&mut self, address: HashSet<Address>) {
            self.precompiles = address;
            self.warm_preloaded_addresses
                .extend(self.precompiles.iter());
        }
    *)
    Definition warm_precompiles
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          M.read (|
            let~ _ :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::journaled_state::JournaledState",
                  "precompiles"
                |),
                M.read (| address |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::collect::Extend",
                    Ty.apply
                      (Ty.path "hashbrown::set::HashSet")
                      []
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.path "alloy_primitives::bits::address::Address" ]
                    ],
                    "extend",
                    [
                      Ty.apply
                        (Ty.path "hashbrown::set::Iter")
                        []
                        [ Ty.path "alloy_primitives::bits::address::Address" ]
                    ]
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "warm_preloaded_addresses"
                    |);
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "hashbrown::set::HashSet")
                          []
                          [
                            Ty.path "alloy_primitives::bits::address::Address";
                            Ty.path "foldhash::seed::fast::RandomState";
                            Ty.path "hashbrown::raw::alloc::inner::Global"
                          ],
                        "iter",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm_context::journaled_state::JournaledState",
                          "precompiles"
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn precompile_addresses(&self) -> &HashSet<Address> {
            &self.precompiles
        }
    *)
    Definition precompile_addresses
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.SubPointer.get_struct_record_field (|
            M.read (| self |),
            "revm_context::journaled_state::JournaledState",
            "precompiles"
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn depth(&self) -> usize {
            self.depth
        }
    *)
    Definition depth (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::journaled_state::JournaledState",
              "depth"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn warm_account_and_storage(
            &mut self,
            address: Address,
            storage_keys: impl IntoIterator<Item = U256>,
        ) -> Result<(), <Self::Database as Database>::Error> {
            self.initial_account_load(address, storage_keys)?;
            Ok(())
        }
    *)
    Definition warm_account_and_storage
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [ impl_IntoIterator_Item___U256_ ], [ self; address; storage_keys ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let storage_keys := M.alloc (| storage_keys |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ];
                              Ty.associated
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "revm_context::journaled_state::JournaledState")
                                []
                                [ DB ],
                              "initial_account_load",
                              [ impl_IntoIterator_Item___U256_ ]
                            |),
                            [ M.read (| self |); M.read (| address |); M.read (| storage_keys |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.associated ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn set_spec_id(&mut self, spec_id: SpecId) {
            self.spec = spec_id;
        }
    *)
    Definition set_spec_id (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; spec_id ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let spec_id := M.alloc (| spec_id |) in
          M.read (|
            let~ _ :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::journaled_state::JournaledState",
                  "spec"
                |),
                M.read (| spec_id |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn transfer(
            &mut self,
            from: &Address,
            to: &Address,
            balance: U256,
        ) -> Result<Option<TransferError>, DB::Error> {
            // TODO : Handle instruction result
            self.transfer(from, to, balance)
        }
    *)
    Definition transfer (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; from; to; balance ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let from := M.alloc (| from |) in
          let to := M.alloc (| to |) in
          let balance := M.alloc (| balance |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "transfer",
              []
            |),
            [ M.read (| self |); M.read (| from |); M.read (| to |); M.read (| balance |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn touch_account(&mut self, address: Address) {
            self.touch(&address);
        }
    *)
    Definition touch_account
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          M.read (|
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
                    "touch",
                    []
                  |),
                  [ M.read (| self |); address ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn inc_account_nonce(&mut self, address: Address) -> Result<Option<u64>, DB::Error> {
            Ok(self.inc_nonce(address))
        }
    *)
    Definition inc_account_nonce
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          Value.StructTuple
            "core::result::Result::Ok"
            [
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
                  "inc_nonce",
                  []
                |),
                [ M.read (| self |); M.read (| address |) ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn load_account(&mut self, address: Address) -> Result<StateLoad<&mut Account>, DB::Error> {
            self.load_account(address)
        }
    *)
    Definition load_account (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "load_account",
              []
            |),
            [ M.read (| self |); M.read (| address |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn load_account_code(
            &mut self,
            address: Address,
        ) -> Result<StateLoad<&mut Account>, DB::Error> {
            self.load_code(address)
        }
    *)
    Definition load_account_code
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "load_code",
              []
            |),
            [ M.read (| self |); M.read (| address |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn load_account_delegated(&mut self, address: Address) -> Result<AccountLoad, DB::Error> {
            self.load_account_delegated(address)
        }
    *)
    Definition load_account_delegated
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "load_account_delegated",
              []
            |),
            [ M.read (| self |); M.read (| address |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn checkpoint(&mut self) -> JournalCheckpoint {
            self.checkpoint()
        }
    *)
    Definition checkpoint (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "checkpoint",
              []
            |),
            [ M.read (| self |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn checkpoint_commit(&mut self) {
            self.checkpoint_commit()
        }
    *)
    Definition checkpoint_commit
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "checkpoint_commit",
              []
            |),
            [ M.read (| self |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn checkpoint_revert(&mut self, checkpoint: JournalCheckpoint) {
            self.checkpoint_revert(checkpoint)
        }
    *)
    Definition checkpoint_revert
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; checkpoint ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let checkpoint := M.alloc (| checkpoint |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "checkpoint_revert",
              []
            |),
            [ M.read (| self |); M.read (| checkpoint |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn set_code_with_hash(&mut self, address: Address, code: Bytecode, hash: B256) {
            self.set_code_with_hash(address, code, hash);
        }
    *)
    Definition set_code_with_hash
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; code; hash ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let code := M.alloc (| code |) in
          let hash := M.alloc (| hash |) in
          M.read (|
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
                    "set_code_with_hash",
                    []
                  |),
                  [ M.read (| self |); M.read (| address |); M.read (| code |); M.read (| hash |) ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn clear(&mut self) {
            // Clears the JournaledState. Preserving only the spec.
            self.state.clear();
            self.transient_storage.clear();
            self.logs.clear();
            self.journal = vec![vec![]];
            self.depth = 0;
            self.warm_preloaded_addresses.clear();
        }
    *)
    Definition clear (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "hashbrown::map::HashMap")
                      []
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.path "revm_state::Account";
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    "clear",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "state"
                    |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "hashbrown::map::HashMap")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.path "alloy_primitives::bits::address::Address";
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ];
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    "clear",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "transient_storage"
                    |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::log::Log")
                          []
                          [ Ty.path "alloy_primitives::log::LogData" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "clear",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "logs"
                    |)
                  ]
                |)
              |) in
            let~ _ :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::journaled_state::JournaledState",
                  "journal"
                |),
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "revm_context::journaled_state::JournalEntry";
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    "into_vec",
                    [ Ty.path "alloc::alloc::Global" ]
                  |),
                  [
                    M.read (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path "revm_context::journaled_state::JournalEntry";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [
                          M.alloc (|
                            Value.Array
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  []
                                |)
                              ]
                          |)
                        ]
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::journaled_state::JournaledState",
                  "depth"
                |),
                Value.Integer IntegerKind.Usize 0
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "hashbrown::set::HashSet")
                      []
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    "clear",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "warm_preloaded_addresses"
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn create_account_checkpoint(
            &mut self,
            caller: Address,
            address: Address,
            balance: U256,
            spec_id: SpecId,
        ) -> Result<JournalCheckpoint, TransferError> {
            // Ignore error.
            self.create_account_checkpoint(caller, address, balance, spec_id)
        }
    *)
    Definition create_account_checkpoint
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; caller; address; balance; spec_id ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let caller := M.alloc (| caller |) in
          let address := M.alloc (| address |) in
          let balance := M.alloc (| balance |) in
          let spec_id := M.alloc (| spec_id |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "create_account_checkpoint",
              []
            |),
            [
              M.read (| self |);
              M.read (| caller |);
              M.read (| address |);
              M.read (| balance |);
              M.read (| spec_id |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn finalize(&mut self) -> Result<Self::FinalOutput, <Self::Database as Database>::Error> {
            let Self {
                state,
                transient_storage,
                logs,
                depth,
                journal,
                // kept, see [Self::new]
                spec: _,
                database: _,
                warm_preloaded_addresses: _,
                precompiles: _,
            } = self;
    
            *transient_storage = TransientStorage::default();
            *journal = vec![vec![]];
            *depth = 0;
            let state = mem::take(state);
            let logs = mem::take(logs);
    
            Ok((state, logs))
        }
    *)
    Definition finalize (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournaledState",
                        "state"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournaledState",
                        "transient_storage"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournaledState",
                        "logs"
                      |) in
                    let γ1_3 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournaledState",
                        "depth"
                      |) in
                    let γ1_4 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournaledState",
                        "journal"
                      |) in
                    let γ1_5 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournaledState",
                        "spec"
                      |) in
                    let γ1_6 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournaledState",
                        "database"
                      |) in
                    let γ1_7 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournaledState",
                        "warm_preloaded_addresses"
                      |) in
                    let γ1_8 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournaledState",
                        "precompiles"
                      |) in
                    let state := M.alloc (| γ1_0 |) in
                    let transient_storage := M.alloc (| γ1_1 |) in
                    let logs := M.alloc (| γ1_2 |) in
                    let depth := M.alloc (| γ1_3 |) in
                    let journal := M.alloc (| γ1_4 |) in
                    let~ _ :=
                      M.write (|
                        M.read (| transient_storage |),
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::default::Default",
                            Ty.apply
                              (Ty.path "hashbrown::map::HashMap")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.path "alloy_primitives::bits::address::Address";
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ];
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [];
                                Ty.path "foldhash::seed::fast::RandomState";
                                Ty.path "hashbrown::raw::alloc::inner::Global"
                              ],
                            [],
                            "default",
                            []
                          |),
                          []
                        |)
                      |) in
                    let~ _ :=
                      M.write (|
                        M.read (| journal |),
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "revm_context::journaled_state::JournalEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            "into_vec",
                            [ Ty.path "alloc::alloc::Global" ]
                          |),
                          [
                            M.read (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.path "revm_context::journaled_state::JournalEntry";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.path
                                                  "revm_context::journaled_state::JournalEntry";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          []
                                        |)
                                      ]
                                  |)
                                ]
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ _ := M.write (| M.read (| depth |), Value.Integer IntegerKind.Usize 0 |) in
                    let~ state :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "core::mem::take",
                            [
                              Ty.apply
                                (Ty.path "hashbrown::map::HashMap")
                                []
                                [
                                  Ty.path "alloy_primitives::bits::address::Address";
                                  Ty.path "revm_state::Account";
                                  Ty.path "foldhash::seed::fast::RandomState";
                                  Ty.path "hashbrown::raw::alloc::inner::Global"
                                ]
                            ]
                          |),
                          [ M.read (| state |) ]
                        |)
                      |) in
                    let~ logs :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "core::mem::take",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloy_primitives::log::Log")
                                    []
                                    [ Ty.path "alloy_primitives::log::LogData" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [ M.read (| logs |) ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.Tuple [ M.read (| state |); M.read (| logs |) ] ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (DB : Ty.t),
      M.IsTraitInstance
        "revm_context_interface::journaled_state::Journal"
        (Self DB)
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("Database", InstanceField.Ty (_Database DB));
          ("FinalOutput", InstanceField.Ty (_FinalOutput DB));
          ("new", InstanceField.Method (new DB));
          ("db_ref", InstanceField.Method (db_ref DB));
          ("db", InstanceField.Method (db DB));
          ("sload", InstanceField.Method (sload DB));
          ("sstore", InstanceField.Method (sstore DB));
          ("tload", InstanceField.Method (tload DB));
          ("tstore", InstanceField.Method (tstore DB));
          ("log", InstanceField.Method (log DB));
          ("selfdestruct", InstanceField.Method (selfdestruct DB));
          ("warm_account", InstanceField.Method (warm_account DB));
          ("warm_precompiles", InstanceField.Method (warm_precompiles DB));
          ("precompile_addresses", InstanceField.Method (precompile_addresses DB));
          ("depth", InstanceField.Method (depth DB));
          ("warm_account_and_storage", InstanceField.Method (warm_account_and_storage DB));
          ("set_spec_id", InstanceField.Method (set_spec_id DB));
          ("transfer", InstanceField.Method (transfer DB));
          ("touch_account", InstanceField.Method (touch_account DB));
          ("inc_account_nonce", InstanceField.Method (inc_account_nonce DB));
          ("load_account", InstanceField.Method (load_account DB));
          ("load_account_code", InstanceField.Method (load_account_code DB));
          ("load_account_delegated", InstanceField.Method (load_account_delegated DB));
          ("checkpoint", InstanceField.Method (checkpoint DB));
          ("checkpoint_commit", InstanceField.Method (checkpoint_commit DB));
          ("checkpoint_revert", InstanceField.Method (checkpoint_revert DB));
          ("set_code_with_hash", InstanceField.Method (set_code_with_hash DB));
          ("clear", InstanceField.Method (clear DB));
          ("create_account_checkpoint", InstanceField.Method (create_account_checkpoint DB));
          ("finalize", InstanceField.Method (finalize DB))
        ].
  End Impl_revm_context_interface_journaled_state_Journal_where_revm_database_interface_Database_DB_for_revm_context_journaled_state_JournaledState_DB.
  
  Module Impl_revm_context_journaled_state_JournaledState_DB.
    Definition Self (DB : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ].
    
    (*
        pub fn new(spec: SpecId, database: DB) -> JournaledState<DB> {
            Self {
                database,
                state: HashMap::default(),
                transient_storage: TransientStorage::default(),
                logs: Vec::new(),
                journal: vec![vec![]],
                depth: 0,
                spec,
                warm_preloaded_addresses: HashSet::default(),
                precompiles: HashSet::default(),
            }
        }
    *)
    Definition new (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ spec; database ] =>
        ltac:(M.monadic
          (let spec := M.alloc (| spec |) in
          let database := M.alloc (| database |) in
          Value.StructRecord
            "revm_context::journaled_state::JournaledState"
            [
              ("database", M.read (| database |));
              ("state",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "hashbrown::map::HashMap")
                      []
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.path "revm_state::Account";
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    [],
                    "default",
                    []
                  |),
                  []
                |));
              ("transient_storage",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "hashbrown::map::HashMap")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.path "alloy_primitives::bits::address::Address";
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ];
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [];
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    [],
                    "default",
                    []
                  |),
                  []
                |));
              ("logs",
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::log::Log")
                          []
                          [ Ty.path "alloy_primitives::log::LogData" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    []
                  |),
                  []
                |));
              ("journal",
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "revm_context::journaled_state::JournalEntry";
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    "into_vec",
                    [ Ty.path "alloc::alloc::Global" ]
                  |),
                  [
                    M.read (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path "revm_context::journaled_state::JournalEntry";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [
                          M.alloc (|
                            Value.Array
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  []
                                |)
                              ]
                          |)
                        ]
                      |)
                    |)
                  ]
                |));
              ("depth", Value.Integer IntegerKind.Usize 0);
              ("spec", M.read (| spec |));
              ("warm_preloaded_addresses",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "hashbrown::set::HashSet")
                      []
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    [],
                    "default",
                    []
                  |),
                  []
                |));
              ("precompiles",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "hashbrown::set::HashSet")
                      []
                      [
                        Ty.path "alloy_primitives::bits::address::Address";
                        Ty.path "foldhash::seed::fast::RandomState";
                        Ty.path "hashbrown::raw::alloc::inner::Global"
                      ],
                    [],
                    "default",
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_new :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "new" (new DB).
    
    (*
        pub fn state(&mut self) -> &mut EvmState {
            &mut self.state
        }
    *)
    Definition state (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.SubPointer.get_struct_record_field (|
            M.read (| self |),
            "revm_context::journaled_state::JournaledState",
            "state"
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_state :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "state" (state DB).
    
    (*
        pub fn set_spec_id(&mut self, spec: SpecId) {
            self.spec = spec;
        }
    *)
    Definition set_spec_id (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; spec ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let spec := M.alloc (| spec |) in
          M.read (|
            let~ _ :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::journaled_state::JournaledState",
                  "spec"
                |),
                M.read (| spec |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_set_spec_id :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "set_spec_id" (set_spec_id DB).
    
    (*
        pub fn touch(&mut self, address: &Address) {
            if let Some(account) = self.state.get_mut(address) {
                Self::touch_account(self.journal.last_mut().unwrap(), address, account);
            }
        }
    *)
    Definition touch (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          M.read (|
            M.match_operator (|
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "hashbrown::map::HashMap")
                              []
                              [
                                Ty.path "alloy_primitives::bits::address::Address";
                                Ty.path "revm_state::Account";
                                Ty.path "foldhash::seed::fast::RandomState";
                                Ty.path "hashbrown::raw::alloc::inner::Global"
                              ],
                            "get_mut",
                            [ Ty.path "alloy_primitives::bits::address::Address" ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::journaled_state::JournaledState",
                              "state"
                            |);
                            M.read (| address |)
                          ]
                        |)
                      |) in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let account := M.copy (| γ0_0 |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "revm_context::journaled_state::JournaledState")
                              []
                              [ DB ],
                            "touch_account",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "revm_context::journaled_state::JournalEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ],
                                "unwrap",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "revm_context::journaled_state::JournalEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    "last_mut",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::DerefMut",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.path
                                                  "revm_context::journaled_state::JournalEntry";
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref_mut",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "revm_context::journaled_state::JournaledState",
                                          "journal"
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.read (| address |);
                            M.read (| account |)
                          ]
                        |)
                      |) in
                    M.alloc (| Value.Tuple [] |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_touch :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "touch" (touch DB).
    
    (*
        fn touch_account(journal: &mut Vec<JournalEntry>, address: &Address, account: &mut Account) {
            if !account.is_touched() {
                journal.push(JournalEntry::AccountTouched { address: *address });
                account.mark_touch();
            }
        }
    *)
    Definition touch_account
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ journal; address; account ] =>
        ltac:(M.monadic
          (let journal := M.alloc (| journal |) in
          let address := M.alloc (| address |) in
          let account := M.alloc (| account |) in
          M.read (|
            M.match_operator (|
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          UnOp.not (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "revm_state::Account",
                                "is_touched",
                                []
                              |),
                              [ M.read (| account |) ]
                            |)
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "revm_context::journaled_state::JournalEntry";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "push",
                            []
                          |),
                          [
                            M.read (| journal |);
                            Value.StructRecord
                              "revm_context::journaled_state::JournalEntry::AccountTouched"
                              [ ("address", M.read (| M.read (| address |) |)) ]
                          ]
                        |)
                      |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "revm_state::Account",
                            "mark_touch",
                            []
                          |),
                          [ M.read (| account |) ]
                        |)
                      |) in
                    M.alloc (| Value.Tuple [] |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_touch_account :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "touch_account" (touch_account DB).
    
    (*
        pub fn account(&self, address: Address) -> &Account {
            self.state
                .get(&address)
                .expect("Account expected to be loaded") // Always assume that acc is already loaded
        }
    *)
    Definition account (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "&") [] [ Ty.path "revm_state::Account" ] ],
              "expect",
              []
            |),
            [
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "hashbrown::map::HashMap")
                    []
                    [
                      Ty.path "alloy_primitives::bits::address::Address";
                      Ty.path "revm_state::Account";
                      Ty.path "foldhash::seed::fast::RandomState";
                      Ty.path "hashbrown::raw::alloc::inner::Global"
                    ],
                  "get",
                  [ Ty.path "alloy_primitives::bits::address::Address" ]
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "revm_context::journaled_state::JournaledState",
                    "state"
                  |);
                  address
                ]
              |);
              M.read (| Value.String "Account expected to be loaded" |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_account :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "account" (account DB).
    
    (*
        pub fn set_code_with_hash(&mut self, address: Address, code: Bytecode, hash: B256) {
            let account = self.state.get_mut(&address).unwrap();
            Self::touch_account(self.journal.last_mut().unwrap(), &address, account);
    
            self.journal
                .last_mut()
                .unwrap()
                .push(JournalEntry::CodeChange { address });
    
            account.info.code_hash = hash;
            account.info.code = Some(code);
        }
    *)
    Definition set_code_with_hash
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; code; hash ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let code := M.alloc (| code |) in
          let hash := M.alloc (| hash |) in
          M.read (|
            let~ account :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ] ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "hashbrown::map::HashMap")
                          []
                          [
                            Ty.path "alloy_primitives::bits::address::Address";
                            Ty.path "revm_state::Account";
                            Ty.path "foldhash::seed::fast::RandomState";
                            Ty.path "hashbrown::raw::alloc::inner::Global"
                          ],
                        "get_mut",
                        [ Ty.path "alloy_primitives::bits::address::Address" ]
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm_context::journaled_state::JournaledState",
                          "state"
                        |);
                        address
                      ]
                    |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
                    "touch_account",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "revm_context::journaled_state::JournalEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "revm_context::journaled_state::JournalEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            "last_mut",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "revm_context::journaled_state::JournaledState",
                                  "journal"
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    address;
                    M.read (| account |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path "revm_context::journaled_state::JournalEntry";
                        Ty.path "alloc::alloc::Global"
                      ],
                    "push",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "revm_context::journaled_state::JournalEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "revm_context::journaled_state::JournalEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            "last_mut",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "revm_context::journaled_state::JournaledState",
                                  "journal"
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    Value.StructRecord
                      "revm_context::journaled_state::JournalEntry::CodeChange"
                      [ ("address", M.read (| address |)) ]
                  ]
                |)
              |) in
            let~ _ :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| account |),
                    "revm_state::Account",
                    "info"
                  |),
                  "revm_state::account_info::AccountInfo",
                  "code_hash"
                |),
                M.read (| hash |)
              |) in
            let~ _ :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| account |),
                    "revm_state::Account",
                    "info"
                  |),
                  "revm_state::account_info::AccountInfo",
                  "code"
                |),
                Value.StructTuple "core::option::Option::Some" [ M.read (| code |) ]
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_set_code_with_hash :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "set_code_with_hash" (set_code_with_hash DB).
    
    (*
        pub fn set_code(&mut self, address: Address, code: Bytecode) {
            let hash = code.hash_slow();
            self.set_code_with_hash(address, code, hash)
        }
    *)
    Definition set_code (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; code ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let code := M.alloc (| code |) in
          M.read (|
            let~ hash :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "revm_bytecode::bytecode::Bytecode",
                    "hash_slow",
                    []
                  |),
                  [ code ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
                  "set_code_with_hash",
                  []
                |),
                [ M.read (| self |); M.read (| address |); M.read (| code |); M.read (| hash |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_set_code :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "set_code" (set_code DB).
    
    (*
        pub fn inc_nonce(&mut self, address: Address) -> Option<u64> {
            let account = self.state.get_mut(&address).unwrap();
            // Check if nonce is going to overflow.
            if account.info.nonce == u64::MAX {
                return None;
            }
            Self::touch_account(self.journal.last_mut().unwrap(), &address, account);
            self.journal
                .last_mut()
                .unwrap()
                .push(JournalEntry::NonceChange { address });
    
            account.info.nonce += 1;
    
            Some(account.info.nonce)
        }
    *)
    Definition inc_nonce (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ account :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ] ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "hashbrown::map::HashMap")
                              []
                              [
                                Ty.path "alloy_primitives::bits::address::Address";
                                Ty.path "revm_state::Account";
                                Ty.path "foldhash::seed::fast::RandomState";
                                Ty.path "hashbrown::raw::alloc::inner::Global"
                              ],
                            "get_mut",
                            [ Ty.path "alloy_primitives::bits::address::Address" ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::journaled_state::JournaledState",
                              "state"
                            |);
                            address
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (|
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| account |),
                                        "revm_state::Account",
                                        "info"
                                      |),
                                      "revm_state::account_info::AccountInfo",
                                      "nonce"
                                    |)
                                  |),
                                  M.read (| M.get_constant (| "core::num::MAX" |) |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "revm_context::journaled_state::JournaledState")
                          []
                          [ DB ],
                        "touch_account",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ],
                            "unwrap",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                "last_mut",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "revm_context::journaled_state::JournalEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "revm_context::journaled_state::JournaledState",
                                      "journal"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |);
                        address;
                        M.read (| account |)
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "revm_context::journaled_state::JournalEntry";
                            Ty.path "alloc::alloc::Global"
                          ],
                        "push",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ],
                            "unwrap",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                "last_mut",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "revm_context::journaled_state::JournalEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "revm_context::journaled_state::JournaledState",
                                      "journal"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |);
                        Value.StructRecord
                          "revm_context::journaled_state::JournalEntry::NonceChange"
                          [ ("address", M.read (| address |)) ]
                      ]
                    |)
                  |) in
                let~ _ :=
                  let β :=
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| account |),
                        "revm_state::Account",
                        "info"
                      |),
                      "revm_state::account_info::AccountInfo",
                      "nonce"
                    |) in
                  M.write (|
                    β,
                    BinOp.Wrap.add (| M.read (| β |), Value.Integer IntegerKind.U64 1 |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::option::Option::Some"
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| account |),
                            "revm_state::Account",
                            "info"
                          |),
                          "revm_state::account_info::AccountInfo",
                          "nonce"
                        |)
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_inc_nonce :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "inc_nonce" (inc_nonce DB).
    
    (*
        pub fn transfer(
            &mut self,
            from: &Address,
            to: &Address,
            balance: U256,
        ) -> Result<Option<TransferError>, DB::Error> {
            if balance.is_zero() {
                self.load_account( *to)?;
                let _ = self.load_account( *to)?;
                let to_account = self.state.get_mut(to).unwrap();
                Self::touch_account(self.journal.last_mut().unwrap(), to, to_account);
                return Ok(None);
            }
            // load accounts
            self.load_account( *from)?;
            self.load_account( *to)?;
    
            // sub balance from
            let from_account = &mut self.state.get_mut(from).unwrap();
            Self::touch_account(self.journal.last_mut().unwrap(), from, from_account);
            let from_balance = &mut from_account.info.balance;
    
            let Some(from_balance_incr) = from_balance.checked_sub(balance) else {
                return Ok(Some(TransferError::OutOfFunds));
            };
            *from_balance = from_balance_incr;
    
            // add balance to
            let to_account = &mut self.state.get_mut(to).unwrap();
            Self::touch_account(self.journal.last_mut().unwrap(), to, to_account);
            let to_balance = &mut to_account.info.balance;
            let Some(to_balance_decr) = to_balance.checked_add(balance) else {
                return Ok(Some(TransferError::OverflowPayment));
            };
            *to_balance = to_balance_decr;
            // Overflow of U256 balance is not possible to happen on mainnet. We don't bother to return funds from from_acc.
    
            self.journal
                .last_mut()
                .unwrap()
                .push(JournalEntry::BalanceTransfer {
                    from: *from,
                    to: *to,
                    balance,
                });
    
            Ok(None)
        }
    *)
    Definition transfer (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; from; to; balance ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let from := M.alloc (| from |) in
          let to := M.alloc (| to |) in
          let balance := M.alloc (| balance |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    "is_zero",
                                    []
                                  |),
                                  [ balance ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "revm_context_interface::journaled_state::StateLoad")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [ Ty.path "revm_state::Account" ]
                                                ];
                                              Ty.associated
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "revm_context::journaled_state::JournaledState")
                                                []
                                                [ DB ],
                                              "load_account",
                                              []
                                            |),
                                            [ M.read (| self |); M.read (| M.read (| to |) |) ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.path
                                                                "revm_context_interface::journaled_state::TransferError"
                                                            ];
                                                          Ty.associated
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.associated
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                M.match_operator (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "revm_context_interface::journaled_state::StateLoad")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [ Ty.path "revm_state::Account" ]
                                                ];
                                              Ty.associated
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "revm_context::journaled_state::JournaledState")
                                                []
                                                [ DB ],
                                              "load_account",
                                              []
                                            |),
                                            [ M.read (| self |); M.read (| M.read (| to |) |) ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.path
                                                                "revm_context_interface::journaled_state::TransferError"
                                                            ];
                                                          Ty.associated
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          []
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.associated
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let~ to_account :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.path "revm_state::Account" ]
                                                  ],
                                                "unwrap",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "hashbrown::map::HashMap")
                                                      []
                                                      [
                                                        Ty.path
                                                          "alloy_primitives::bits::address::Address";
                                                        Ty.path "revm_state::Account";
                                                        Ty.path "foldhash::seed::fast::RandomState";
                                                        Ty.path
                                                          "hashbrown::raw::alloc::inner::Global"
                                                      ],
                                                    "get_mut",
                                                    [
                                                      Ty.path
                                                        "alloy_primitives::bits::address::Address"
                                                    ]
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "revm_context::journaled_state::JournaledState",
                                                      "state"
                                                    |);
                                                    M.read (| to |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let~ _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "revm_context::journaled_state::JournaledState")
                                                  []
                                                  [ DB ],
                                                "touch_account",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "revm_context::journaled_state::JournalEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ],
                                                    "unwrap",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "revm_context::journaled_state::JournalEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ],
                                                        "last_mut",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::DerefMut",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "revm_context::journaled_state::JournalEntry";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "deref_mut",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| self |),
                                                              "revm_context::journaled_state::JournaledState",
                                                              "journal"
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |);
                                                M.read (| to |);
                                                M.read (| to_account |)
                                              ]
                                            |)
                                          |) in
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Ok"
                                            [ Value.StructTuple "core::option::Option::None" [] ]
                                        |)))
                                  ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "revm_context_interface::journaled_state::StateLoad")
                                []
                                [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ] ];
                              Ty.associated
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "revm_context::journaled_state::JournaledState")
                                []
                                [ DB ],
                              "load_account",
                              []
                            |),
                            [ M.read (| self |); M.read (| M.read (| from |) |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.path
                                                "revm_context_interface::journaled_state::TransferError"
                                            ];
                                          Ty.associated
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "revm_context_interface::journaled_state::StateLoad")
                                []
                                [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ] ];
                              Ty.associated
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "revm_context::journaled_state::JournaledState")
                                []
                                [ DB ],
                              "load_account",
                              []
                            |),
                            [ M.read (| self |); M.read (| M.read (| to |) |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.path
                                                "revm_context_interface::journaled_state::TransferError"
                                            ];
                                          Ty.associated
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let~ from_account :=
                  M.alloc (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ] ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "hashbrown::map::HashMap")
                                []
                                [
                                  Ty.path "alloy_primitives::bits::address::Address";
                                  Ty.path "revm_state::Account";
                                  Ty.path "foldhash::seed::fast::RandomState";
                                  Ty.path "hashbrown::raw::alloc::inner::Global"
                                ],
                              "get_mut",
                              [ Ty.path "alloy_primitives::bits::address::Address" ]
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "revm_context::journaled_state::JournaledState",
                                "state"
                              |);
                              M.read (| from |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "revm_context::journaled_state::JournaledState")
                          []
                          [ DB ],
                        "touch_account",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ],
                            "unwrap",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                "last_mut",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "revm_context::journaled_state::JournalEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "revm_context::journaled_state::JournaledState",
                                      "journal"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.read (| from |);
                        M.read (| M.read (| from_account |) |)
                      ]
                    |)
                  |) in
                let~ from_balance :=
                  M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| M.read (| from_account |) |),
                        "revm_state::Account",
                        "info"
                      |),
                      "revm_state::account_info::AccountInfo",
                      "balance"
                    |)
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        "checked_sub",
                        []
                      |),
                      [ M.read (| M.read (| from_balance |) |); M.read (| balance |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let from_balance_incr := M.copy (| γ0_0 |) in
                        let~ _ :=
                          M.write (| M.read (| from_balance |), M.read (| from_balance_incr |) |) in
                        let~ to_account :=
                          M.alloc (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ]
                                    ],
                                  "unwrap",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "hashbrown::map::HashMap")
                                        []
                                        [
                                          Ty.path "alloy_primitives::bits::address::Address";
                                          Ty.path "revm_state::Account";
                                          Ty.path "foldhash::seed::fast::RandomState";
                                          Ty.path "hashbrown::raw::alloc::inner::Global"
                                        ],
                                      "get_mut",
                                      [ Ty.path "alloy_primitives::bits::address::Address" ]
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "revm_context::journaled_state::JournaledState",
                                        "state"
                                      |);
                                      M.read (| to |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |) in
                        let~ _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "revm_context::journaled_state::JournaledState")
                                  []
                                  [ DB ],
                                "touch_account",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.path
                                                  "revm_context::journaled_state::JournalEntry";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ],
                                    "unwrap",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.path
                                                  "revm_context::journaled_state::JournalEntry";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        "last_mut",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::DerefMut",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.path
                                                      "revm_context::journaled_state::JournalEntry";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "deref_mut",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "revm_context::journaled_state::JournaledState",
                                              "journal"
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |);
                                M.read (| to |);
                                M.read (| M.read (| to_account |) |)
                              ]
                            |)
                          |) in
                        let~ to_balance :=
                          M.alloc (|
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| M.read (| to_account |) |),
                                "revm_state::Account",
                                "info"
                              |),
                              "revm_state::account_info::AccountInfo",
                              "balance"
                            |)
                          |) in
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                "checked_add",
                                []
                              |),
                              [ M.read (| M.read (| to_balance |) |); M.read (| balance |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::option::Option::Some",
                                    0
                                  |) in
                                let to_balance_decr := M.copy (| γ0_0 |) in
                                let~ _ :=
                                  M.write (|
                                    M.read (| to_balance |),
                                    M.read (| to_balance_decr |)
                                  |) in
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "revm_context::journaled_state::JournalEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "push",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.path
                                                          "revm_context::journaled_state::JournalEntry";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.path
                                                          "revm_context::journaled_state::JournalEntry";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ],
                                                "last_mut",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::DerefMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path
                                                              "revm_context::journaled_state::JournalEntry";
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref_mut",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "revm_context::journaled_state::JournaledState",
                                                      "journal"
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |);
                                        Value.StructRecord
                                          "revm_context::journaled_state::JournalEntry::BalanceTransfer"
                                          [
                                            ("from", M.read (| M.read (| from |) |));
                                            ("to", M.read (| M.read (| to |) |));
                                            ("balance", M.read (| balance |))
                                          ]
                                      ]
                                    |)
                                  |) in
                                M.alloc (|
                                  Value.StructTuple
                                    "core::result::Result::Ok"
                                    [ Value.StructTuple "core::option::Option::None" [] ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_transfer :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "transfer" (transfer DB).
    
    (*
        pub fn create_account_checkpoint(
            &mut self,
            caller: Address,
            target_address: Address,
            balance: U256,
            spec_id: SpecId,
        ) -> Result<JournalCheckpoint, TransferError> {
            // Enter subroutine
            let checkpoint = self.checkpoint();
    
            // Fetch balance of caller.
            let caller_acc = self.state.get_mut(&caller).unwrap();
            // Check if caller has enough balance to send to the created contract.
            if caller_acc.info.balance < balance {
                self.checkpoint_revert(checkpoint);
                return Err(TransferError::OutOfFunds);
            }
    
            // Newly created account is present, as we just loaded it.
            let target_acc = self.state.get_mut(&target_address).unwrap();
            let last_journal = self.journal.last_mut().unwrap();
    
            // New account can be created if:
            // Bytecode is not empty.
            // Nonce is not zero
            // Account is not precompile.
            if target_acc.info.code_hash != KECCAK_EMPTY || target_acc.info.nonce != 0 {
                self.checkpoint_revert(checkpoint);
                return Err(TransferError::CreateCollision);
            }
    
            // set account status to created.
            target_acc.mark_created();
    
            // this entry will revert set nonce.
            last_journal.push(JournalEntry::AccountCreated {
                address: target_address,
            });
            target_acc.info.code = None;
            // EIP-161: State trie clearing (invariant-preserving alternative)
            if spec_id.is_enabled_in(SPURIOUS_DRAGON) {
                // nonce is going to be reset to zero in AccountCreated journal entry.
                target_acc.info.nonce = 1;
            }
    
            // touch account. This is important as for pre SpuriousDragon account could be
            // saved even empty.
            Self::touch_account(last_journal, &target_address, target_acc);
    
            // Add balance to created account, as we already have target here.
            let Some(new_balance) = target_acc.info.balance.checked_add(balance) else {
                self.checkpoint_revert(checkpoint);
                return Err(TransferError::OverflowPayment);
            };
            target_acc.info.balance = new_balance;
    
            // safe to decrement for the caller as balance check is already done.
            self.state.get_mut(&caller).unwrap().info.balance -= balance;
    
            // add journal entry of transferred balance
            last_journal.push(JournalEntry::BalanceTransfer {
                from: caller,
                to: target_address,
                balance,
            });
    
            Ok(checkpoint)
        }
    *)
    Definition create_account_checkpoint
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; caller; target_address; balance; spec_id ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let caller := M.alloc (| caller |) in
          let target_address := M.alloc (| target_address |) in
          let balance := M.alloc (| balance |) in
          let spec_id := M.alloc (| spec_id |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ checkpoint :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "revm_context::journaled_state::JournaledState")
                          []
                          [ DB ],
                        "checkpoint",
                        []
                      |),
                      [ M.read (| self |) ]
                    |)
                  |) in
                let~ caller_acc :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ] ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "hashbrown::map::HashMap")
                              []
                              [
                                Ty.path "alloy_primitives::bits::address::Address";
                                Ty.path "revm_state::Account";
                                Ty.path "foldhash::seed::fast::RandomState";
                                Ty.path "hashbrown::raw::alloc::inner::Global"
                              ],
                            "get_mut",
                            [ Ty.path "alloy_primitives::bits::address::Address" ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::journaled_state::JournaledState",
                              "state"
                            |);
                            caller
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                    "lt",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| caller_acc |),
                                        "revm_state::Account",
                                        "info"
                                      |),
                                      "revm_state::account_info::AccountInfo",
                                      "balance"
                                    |);
                                    balance
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "revm_context::journaled_state::JournaledState")
                                          []
                                          [ DB ],
                                        "checkpoint_revert",
                                        []
                                      |),
                                      [ M.read (| self |); M.read (| checkpoint |) ]
                                    |)
                                  |) in
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_context_interface::journaled_state::TransferError::OutOfFunds"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ target_acc :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ] ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "hashbrown::map::HashMap")
                              []
                              [
                                Ty.path "alloy_primitives::bits::address::Address";
                                Ty.path "revm_state::Account";
                                Ty.path "foldhash::seed::fast::RandomState";
                                Ty.path "hashbrown::raw::alloc::inner::Global"
                              ],
                            "get_mut",
                            [ Ty.path "alloy_primitives::bits::address::Address" ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::journaled_state::JournaledState",
                              "state"
                            |);
                            target_address
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ last_journal :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "revm_context::journaled_state::JournalEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "revm_context::journaled_state::JournalEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            "last_mut",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "revm_context::journaled_state::JournaledState",
                                  "journal"
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.or (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [],
                                      [
                                        Ty.apply
                                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                                          [ Value.Integer IntegerKind.Usize 32 ]
                                          []
                                      ],
                                      "ne",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| target_acc |),
                                          "revm_state::Account",
                                          "info"
                                        |),
                                        "revm_state::account_info::AccountInfo",
                                        "code_hash"
                                      |);
                                      M.get_constant (| "revm_primitives::KECCAK_EMPTY" |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (BinOp.ne (|
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| target_acc |),
                                            "revm_state::Account",
                                            "info"
                                          |),
                                          "revm_state::account_info::AccountInfo",
                                          "nonce"
                                        |)
                                      |),
                                      Value.Integer IntegerKind.U64 0
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "revm_context::journaled_state::JournaledState")
                                          []
                                          [ DB ],
                                        "checkpoint_revert",
                                        []
                                      |),
                                      [ M.read (| self |); M.read (| checkpoint |) ]
                                    |)
                                  |) in
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "revm_context_interface::journaled_state::TransferError::CreateCollision"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "revm_state::Account",
                        "mark_created",
                        []
                      |),
                      [ M.read (| target_acc |) ]
                    |)
                  |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "revm_context::journaled_state::JournalEntry";
                            Ty.path "alloc::alloc::Global"
                          ],
                        "push",
                        []
                      |),
                      [
                        M.read (| last_journal |);
                        Value.StructRecord
                          "revm_context::journaled_state::JournalEntry::AccountCreated"
                          [ ("address", M.read (| target_address |)) ]
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| target_acc |),
                        "revm_state::Account",
                        "info"
                      |),
                      "revm_state::account_info::AccountInfo",
                      "code"
                    |),
                    Value.StructTuple "core::option::Option::None" []
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "revm_specification::hardfork::SpecId",
                                    "is_enabled_in",
                                    []
                                  |),
                                  [
                                    M.read (| spec_id |);
                                    Value.StructTuple
                                      "revm_specification::hardfork::SpecId::SPURIOUS_DRAGON"
                                      []
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| target_acc |),
                                  "revm_state::Account",
                                  "info"
                                |),
                                "revm_state::account_info::AccountInfo",
                                "nonce"
                              |),
                              Value.Integer IntegerKind.U64 1
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "revm_context::journaled_state::JournaledState")
                          []
                          [ DB ],
                        "touch_account",
                        []
                      |),
                      [ M.read (| last_journal |); target_address; M.read (| target_acc |) ]
                    |)
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          [],
                        "checked_add",
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| target_acc |),
                              "revm_state::Account",
                              "info"
                            |),
                            "revm_state::account_info::AccountInfo",
                            "balance"
                          |)
                        |);
                        M.read (| balance |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let new_balance := M.copy (| γ0_0 |) in
                        let~ _ :=
                          M.write (|
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| target_acc |),
                                "revm_state::Account",
                                "info"
                              |),
                              "revm_state::account_info::AccountInfo",
                              "balance"
                            |),
                            M.read (| new_balance |)
                          |) in
                        let~ _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::arith::SubAssign",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    []
                                ],
                                "sub_assign",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_state::Account" ]
                                          ],
                                        "unwrap",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "hashbrown::map::HashMap")
                                              []
                                              [
                                                Ty.path "alloy_primitives::bits::address::Address";
                                                Ty.path "revm_state::Account";
                                                Ty.path "foldhash::seed::fast::RandomState";
                                                Ty.path "hashbrown::raw::alloc::inner::Global"
                                              ],
                                            "get_mut",
                                            [ Ty.path "alloy_primitives::bits::address::Address" ]
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "revm_context::journaled_state::JournaledState",
                                              "state"
                                            |);
                                            caller
                                          ]
                                        |)
                                      ]
                                    |),
                                    "revm_state::Account",
                                    "info"
                                  |),
                                  "revm_state::account_info::AccountInfo",
                                  "balance"
                                |);
                                M.read (| balance |)
                              ]
                            |)
                          |) in
                        let~ _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "revm_context::journaled_state::JournalEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "push",
                                []
                              |),
                              [
                                M.read (| last_journal |);
                                Value.StructRecord
                                  "revm_context::journaled_state::JournalEntry::BalanceTransfer"
                                  [
                                    ("from", M.read (| caller |));
                                    ("to", M.read (| target_address |));
                                    ("balance", M.read (| balance |))
                                  ]
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ M.read (| checkpoint |) ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_create_account_checkpoint :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "create_account_checkpoint" (create_account_checkpoint DB).
    
    (*
        fn journal_revert(
            state: &mut EvmState,
            transient_storage: &mut TransientStorage,
            journal_entries: Vec<JournalEntry>,
            is_spurious_dragon_enabled: bool,
        ) {
            for entry in journal_entries.into_iter().rev() {
                match entry {
                    JournalEntry::AccountWarmed { address } => {
                        state.get_mut(&address).unwrap().mark_cold();
                    }
                    JournalEntry::AccountTouched { address } => {
                        if is_spurious_dragon_enabled && address == PRECOMPILE3 {
                            continue;
                        }
                        // remove touched status
                        state.get_mut(&address).unwrap().unmark_touch();
                    }
                    JournalEntry::AccountDestroyed {
                        address,
                        target,
                        was_destroyed,
                        had_balance,
                    } => {
                        let account = state.get_mut(&address).unwrap();
                        // set previous state of selfdestructed flag, as there could be multiple
                        // selfdestructs in one transaction.
                        if was_destroyed {
                            // flag is still selfdestructed
                            account.mark_selfdestruct();
                        } else {
                            // flag that is not selfdestructed
                            account.unmark_selfdestruct();
                        }
                        account.info.balance += had_balance;
    
                        if address != target {
                            let target = state.get_mut(&target).unwrap();
                            target.info.balance -= had_balance;
                        }
                    }
                    JournalEntry::BalanceTransfer { from, to, balance } => {
                        // we don't need to check overflow and underflow when adding and subtracting the balance.
                        let from = state.get_mut(&from).unwrap();
                        from.info.balance += balance;
                        let to = state.get_mut(&to).unwrap();
                        to.info.balance -= balance;
                    }
                    JournalEntry::NonceChange { address } => {
                        state.get_mut(&address).unwrap().info.nonce -= 1;
                    }
                    JournalEntry::AccountCreated { address } => {
                        let account = &mut state.get_mut(&address).unwrap();
                        account.unmark_created();
                        account
                            .storage
                            .values_mut()
                            .for_each(|slot| slot.mark_cold());
                        account.info.nonce = 0;
                    }
                    JournalEntry::StorageWarmed { address, key } => {
                        state
                            .get_mut(&address)
                            .unwrap()
                            .storage
                            .get_mut(&key)
                            .unwrap()
                            .mark_cold();
                    }
                    JournalEntry::StorageChanged {
                        address,
                        key,
                        had_value,
                    } => {
                        state
                            .get_mut(&address)
                            .unwrap()
                            .storage
                            .get_mut(&key)
                            .unwrap()
                            .present_value = had_value;
                    }
                    JournalEntry::TransientStorageChange {
                        address,
                        key,
                        had_value,
                    } => {
                        let tkey = (address, key);
                        if had_value.is_zero() {
                            // if previous value is zero, remove it
                            transient_storage.remove(&tkey);
                        } else {
                            // if not zero, reinsert old value to transient storage.
                            transient_storage.insert(tkey, had_value);
                        }
                    }
                    JournalEntry::CodeChange { address } => {
                        let acc = state.get_mut(&address).unwrap();
                        acc.info.code_hash = KECCAK_EMPTY;
                        acc.info.code = None;
                    }
                }
            }
        }
    *)
    Definition journal_revert
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ state; transient_storage; journal_entries; is_spurious_dragon_enabled ] =>
        ltac:(M.monadic
          (let state := M.alloc (| state |) in
          let transient_storage := M.alloc (| transient_storage |) in
          let journal_entries := M.alloc (| journal_entries |) in
          let is_spurious_dragon_enabled := M.alloc (| is_spurious_dragon_enabled |) in
          M.read (|
            M.use
              (M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::rev::Rev")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.path "revm_context::journaled_state::JournalEntry";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      [],
                      "into_iter",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.path "revm_context::journaled_state::JournalEntry";
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          "rev",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.path "revm_context::journaled_state::JournalEntry";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "into_iter",
                              []
                            |),
                            [ M.read (| journal_entries |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        ltac:(M.monadic
                          (let~ _ :=
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::rev::Rev")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [
                                            Ty.path "revm_context::journaled_state::JournalEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    [],
                                    "next",
                                    []
                                  |),
                                  [ iter ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let entry := M.copy (| γ0_0 |) in
                                    M.match_operator (|
                                      entry,
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::AccountWarmed",
                                                "address"
                                              |) in
                                            let address := M.copy (| γ0_0 |) in
                                            let~ _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "revm_state::Account",
                                                    "mark_cold",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [ Ty.path "revm_state::Account" ]
                                                          ],
                                                        "unwrap",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "hashbrown::map::HashMap")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "alloy_primitives::bits::address::Address";
                                                                Ty.path "revm_state::Account";
                                                                Ty.path
                                                                  "foldhash::seed::fast::RandomState";
                                                                Ty.path
                                                                  "hashbrown::raw::alloc::inner::Global"
                                                              ],
                                                            "get_mut",
                                                            [
                                                              Ty.path
                                                                "alloy_primitives::bits::address::Address"
                                                            ]
                                                          |),
                                                          [ M.read (| state |); address ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::AccountTouched",
                                                "address"
                                              |) in
                                            let address := M.copy (| γ0_0 |) in
                                            let~ _ :=
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            LogicalOp.and (|
                                                              M.read (|
                                                                is_spurious_dragon_enabled
                                                              |),
                                                              ltac:(M.monadic
                                                                (M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::cmp::PartialEq",
                                                                    Ty.path
                                                                      "alloy_primitives::bits::address::Address",
                                                                    [
                                                                      Ty.path
                                                                        "alloy_primitives::bits::address::Address"
                                                                    ],
                                                                    "eq",
                                                                    []
                                                                  |),
                                                                  [
                                                                    address;
                                                                    M.get_constant (|
                                                                      "revm_primitives::constants::PRECOMPILE3"
                                                                    |)
                                                                  ]
                                                                |)))
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (| M.continue (||) |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            let~ _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "revm_state::Account",
                                                    "unmark_touch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [ Ty.path "revm_state::Account" ]
                                                          ],
                                                        "unwrap",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "hashbrown::map::HashMap")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "alloy_primitives::bits::address::Address";
                                                                Ty.path "revm_state::Account";
                                                                Ty.path
                                                                  "foldhash::seed::fast::RandomState";
                                                                Ty.path
                                                                  "hashbrown::raw::alloc::inner::Global"
                                                              ],
                                                            "get_mut",
                                                            [
                                                              Ty.path
                                                                "alloy_primitives::bits::address::Address"
                                                            ]
                                                          |),
                                                          [ M.read (| state |); address ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                                                "address"
                                              |) in
                                            let γ0_1 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                                                "target"
                                              |) in
                                            let γ0_2 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                                                "was_destroyed"
                                              |) in
                                            let γ0_3 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                                                "had_balance"
                                              |) in
                                            let address := M.copy (| γ0_0 |) in
                                            let target := M.copy (| γ0_1 |) in
                                            let was_destroyed := M.copy (| γ0_2 |) in
                                            let had_balance := M.copy (| γ0_3 |) in
                                            let~ account :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [ Ty.path "revm_state::Account" ]
                                                      ],
                                                    "unwrap",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "hashbrown::map::HashMap")
                                                          []
                                                          [
                                                            Ty.path
                                                              "alloy_primitives::bits::address::Address";
                                                            Ty.path "revm_state::Account";
                                                            Ty.path
                                                              "foldhash::seed::fast::RandomState";
                                                            Ty.path
                                                              "hashbrown::raw::alloc::inner::Global"
                                                          ],
                                                        "get_mut",
                                                        [
                                                          Ty.path
                                                            "alloy_primitives::bits::address::Address"
                                                        ]
                                                      |),
                                                      [ M.read (| state |); address ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ _ :=
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ := M.use was_destroyed in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      let~ _ :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "revm_state::Account",
                                                              "mark_selfdestruct",
                                                              []
                                                            |),
                                                            [ M.read (| account |) ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let~ _ :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "revm_state::Account",
                                                              "unmark_selfdestruct",
                                                              []
                                                            |),
                                                            [ M.read (| account |) ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            let~ _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::AddAssign",
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [
                                                        Value.Integer IntegerKind.Usize 256;
                                                        Value.Integer IntegerKind.Usize 4
                                                      ]
                                                      [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "ruint::Uint")
                                                        [
                                                          Value.Integer IntegerKind.Usize 256;
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                        []
                                                    ],
                                                    "add_assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| account |),
                                                        "revm_state::Account",
                                                        "info"
                                                      |),
                                                      "revm_state::account_info::AccountInfo",
                                                      "balance"
                                                    |);
                                                    M.read (| had_balance |)
                                                  ]
                                                |)
                                              |) in
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialEq",
                                                              Ty.path
                                                                "alloy_primitives::bits::address::Address",
                                                              [
                                                                Ty.path
                                                                  "alloy_primitives::bits::address::Address"
                                                              ],
                                                              "ne",
                                                              []
                                                            |),
                                                            [ address; target ]
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    let~ target :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&mut")
                                                                  []
                                                                  [ Ty.path "revm_state::Account" ]
                                                              ],
                                                            "unwrap",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "hashbrown::map::HashMap")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "alloy_primitives::bits::address::Address";
                                                                    Ty.path "revm_state::Account";
                                                                    Ty.path
                                                                      "foldhash::seed::fast::RandomState";
                                                                    Ty.path
                                                                      "hashbrown::raw::alloc::inner::Global"
                                                                  ],
                                                                "get_mut",
                                                                [
                                                                  Ty.path
                                                                    "alloy_primitives::bits::address::Address"
                                                                ]
                                                              |),
                                                              [ M.read (| state |); target ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    let~ _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::SubAssign",
                                                            Ty.apply
                                                              (Ty.path "ruint::Uint")
                                                              [
                                                                Value.Integer IntegerKind.Usize 256;
                                                                Value.Integer IntegerKind.Usize 4
                                                              ]
                                                              [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                []
                                                            ],
                                                            "sub_assign",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| target |),
                                                                "revm_state::Account",
                                                                "info"
                                                              |),
                                                              "revm_state::account_info::AccountInfo",
                                                              "balance"
                                                            |);
                                                            M.read (| had_balance |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                                                "from"
                                              |) in
                                            let γ0_1 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                                                "to"
                                              |) in
                                            let γ0_2 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                                                "balance"
                                              |) in
                                            let from := M.copy (| γ0_0 |) in
                                            let to := M.copy (| γ0_1 |) in
                                            let balance := M.copy (| γ0_2 |) in
                                            let~ from :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [ Ty.path "revm_state::Account" ]
                                                      ],
                                                    "unwrap",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "hashbrown::map::HashMap")
                                                          []
                                                          [
                                                            Ty.path
                                                              "alloy_primitives::bits::address::Address";
                                                            Ty.path "revm_state::Account";
                                                            Ty.path
                                                              "foldhash::seed::fast::RandomState";
                                                            Ty.path
                                                              "hashbrown::raw::alloc::inner::Global"
                                                          ],
                                                        "get_mut",
                                                        [
                                                          Ty.path
                                                            "alloy_primitives::bits::address::Address"
                                                        ]
                                                      |),
                                                      [ M.read (| state |); from ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::AddAssign",
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [
                                                        Value.Integer IntegerKind.Usize 256;
                                                        Value.Integer IntegerKind.Usize 4
                                                      ]
                                                      [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "ruint::Uint")
                                                        [
                                                          Value.Integer IntegerKind.Usize 256;
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                        []
                                                    ],
                                                    "add_assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| from |),
                                                        "revm_state::Account",
                                                        "info"
                                                      |),
                                                      "revm_state::account_info::AccountInfo",
                                                      "balance"
                                                    |);
                                                    M.read (| balance |)
                                                  ]
                                                |)
                                              |) in
                                            let~ to :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [ Ty.path "revm_state::Account" ]
                                                      ],
                                                    "unwrap",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "hashbrown::map::HashMap")
                                                          []
                                                          [
                                                            Ty.path
                                                              "alloy_primitives::bits::address::Address";
                                                            Ty.path "revm_state::Account";
                                                            Ty.path
                                                              "foldhash::seed::fast::RandomState";
                                                            Ty.path
                                                              "hashbrown::raw::alloc::inner::Global"
                                                          ],
                                                        "get_mut",
                                                        [
                                                          Ty.path
                                                            "alloy_primitives::bits::address::Address"
                                                        ]
                                                      |),
                                                      [ M.read (| state |); to ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::SubAssign",
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [
                                                        Value.Integer IntegerKind.Usize 256;
                                                        Value.Integer IntegerKind.Usize 4
                                                      ]
                                                      [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "ruint::Uint")
                                                        [
                                                          Value.Integer IntegerKind.Usize 256;
                                                          Value.Integer IntegerKind.Usize 4
                                                        ]
                                                        []
                                                    ],
                                                    "sub_assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| to |),
                                                        "revm_state::Account",
                                                        "info"
                                                      |),
                                                      "revm_state::account_info::AccountInfo",
                                                      "balance"
                                                    |);
                                                    M.read (| balance |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::NonceChange",
                                                "address"
                                              |) in
                                            let address := M.copy (| γ0_0 |) in
                                            let~ _ :=
                                              let β :=
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [ Ty.path "revm_state::Account" ]
                                                          ],
                                                        "unwrap",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "hashbrown::map::HashMap")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "alloy_primitives::bits::address::Address";
                                                                Ty.path "revm_state::Account";
                                                                Ty.path
                                                                  "foldhash::seed::fast::RandomState";
                                                                Ty.path
                                                                  "hashbrown::raw::alloc::inner::Global"
                                                              ],
                                                            "get_mut",
                                                            [
                                                              Ty.path
                                                                "alloy_primitives::bits::address::Address"
                                                            ]
                                                          |),
                                                          [ M.read (| state |); address ]
                                                        |)
                                                      ]
                                                    |),
                                                    "revm_state::Account",
                                                    "info"
                                                  |),
                                                  "revm_state::account_info::AccountInfo",
                                                  "nonce"
                                                |) in
                                              M.write (|
                                                β,
                                                BinOp.Wrap.sub (|
                                                  M.read (| β |),
                                                  Value.Integer IntegerKind.U64 1
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::AccountCreated",
                                                "address"
                                              |) in
                                            let address := M.copy (| γ0_0 |) in
                                            let~ account :=
                                              M.alloc (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [ Ty.path "revm_state::Account" ]
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "hashbrown::map::HashMap")
                                                            []
                                                            [
                                                              Ty.path
                                                                "alloy_primitives::bits::address::Address";
                                                              Ty.path "revm_state::Account";
                                                              Ty.path
                                                                "foldhash::seed::fast::RandomState";
                                                              Ty.path
                                                                "hashbrown::raw::alloc::inner::Global"
                                                            ],
                                                          "get_mut",
                                                          [
                                                            Ty.path
                                                              "alloy_primitives::bits::address::Address"
                                                          ]
                                                        |),
                                                        [ M.read (| state |); address ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |) in
                                            let~ _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "revm_state::Account",
                                                    "unmark_created",
                                                    []
                                                  |),
                                                  [ M.read (| M.read (| account |) |) ]
                                                |)
                                              |) in
                                            let~ _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "hashbrown::map::ValuesMut")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "ruint::Uint")
                                                          [
                                                            Value.Integer IntegerKind.Usize 256;
                                                            Value.Integer IntegerKind.Usize 4
                                                          ]
                                                          [];
                                                        Ty.path "revm_state::EvmStorageSlot"
                                                      ],
                                                    [],
                                                    "for_each",
                                                    [
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "revm_state::EvmStorageSlot"
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.tuple [])
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "hashbrown::map::HashMap")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "ruint::Uint")
                                                              [
                                                                Value.Integer IntegerKind.Usize 256;
                                                                Value.Integer IntegerKind.Usize 4
                                                              ]
                                                              [];
                                                            Ty.path "revm_state::EvmStorageSlot";
                                                            Ty.path
                                                              "foldhash::seed::fast::RandomState";
                                                            Ty.path
                                                              "hashbrown::raw::alloc::inner::Global"
                                                          ],
                                                        "values_mut",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| M.read (| account |) |),
                                                          "revm_state::Account",
                                                          "storage"
                                                        |)
                                                      ]
                                                    |);
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            ltac:(M.monadic
                                                              (M.match_operator (|
                                                                M.alloc (| α0 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let slot := M.copy (| γ |) in
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "revm_state::EvmStorageSlot",
                                                                          "mark_cold",
                                                                          []
                                                                        |),
                                                                        [ M.read (| slot |) ]
                                                                      |)))
                                                                ]
                                                              |)))
                                                          | _ =>
                                                            M.impossible "wrong number of arguments"
                                                          end))
                                                  ]
                                                |)
                                              |) in
                                            let~ _ :=
                                              M.write (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| M.read (| account |) |),
                                                    "revm_state::Account",
                                                    "info"
                                                  |),
                                                  "revm_state::account_info::AccountInfo",
                                                  "nonce"
                                                |),
                                                Value.Integer IntegerKind.U64 0
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::StorageWarmed",
                                                "address"
                                              |) in
                                            let γ0_1 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::StorageWarmed",
                                                "key"
                                              |) in
                                            let address := M.copy (| γ0_0 |) in
                                            let key := M.copy (| γ0_1 |) in
                                            let~ _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "revm_state::EvmStorageSlot",
                                                    "mark_cold",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [ Ty.path "revm_state::EvmStorageSlot"
                                                              ]
                                                          ],
                                                        "unwrap",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "hashbrown::map::HashMap")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "ruint::Uint")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      256;
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                  [];
                                                                Ty.path
                                                                  "revm_state::EvmStorageSlot";
                                                                Ty.path
                                                                  "foldhash::seed::fast::RandomState";
                                                                Ty.path
                                                                  "hashbrown::raw::alloc::inner::Global"
                                                              ],
                                                            "get_mut",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                []
                                                            ]
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "revm_state::Account"
                                                                        ]
                                                                    ],
                                                                  "unwrap",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "hashbrown::map::HashMap")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "alloy_primitives::bits::address::Address";
                                                                          Ty.path
                                                                            "revm_state::Account";
                                                                          Ty.path
                                                                            "foldhash::seed::fast::RandomState";
                                                                          Ty.path
                                                                            "hashbrown::raw::alloc::inner::Global"
                                                                        ],
                                                                      "get_mut",
                                                                      [
                                                                        Ty.path
                                                                          "alloy_primitives::bits::address::Address"
                                                                      ]
                                                                    |),
                                                                    [ M.read (| state |); address ]
                                                                  |)
                                                                ]
                                                              |),
                                                              "revm_state::Account",
                                                              "storage"
                                                            |);
                                                            key
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::StorageChanged",
                                                "address"
                                              |) in
                                            let γ0_1 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::StorageChanged",
                                                "key"
                                              |) in
                                            let γ0_2 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::StorageChanged",
                                                "had_value"
                                              |) in
                                            let address := M.copy (| γ0_0 |) in
                                            let key := M.copy (| γ0_1 |) in
                                            let had_value := M.copy (| γ0_2 |) in
                                            let~ _ :=
                                              M.write (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [ Ty.path "revm_state::EvmStorageSlot" ]
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "hashbrown::map::HashMap")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [];
                                                              Ty.path "revm_state::EvmStorageSlot";
                                                              Ty.path
                                                                "foldhash::seed::fast::RandomState";
                                                              Ty.path
                                                                "hashbrown::raw::alloc::inner::Global"
                                                            ],
                                                          "get_mut",
                                                          [
                                                            Ty.apply
                                                              (Ty.path "ruint::Uint")
                                                              [
                                                                Value.Integer IntegerKind.Usize 256;
                                                                Value.Integer IntegerKind.Usize 4
                                                              ]
                                                              []
                                                          ]
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "revm_state::Account"
                                                                      ]
                                                                  ],
                                                                "unwrap",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "hashbrown::map::HashMap")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "alloy_primitives::bits::address::Address";
                                                                        Ty.path
                                                                          "revm_state::Account";
                                                                        Ty.path
                                                                          "foldhash::seed::fast::RandomState";
                                                                        Ty.path
                                                                          "hashbrown::raw::alloc::inner::Global"
                                                                      ],
                                                                    "get_mut",
                                                                    [
                                                                      Ty.path
                                                                        "alloy_primitives::bits::address::Address"
                                                                    ]
                                                                  |),
                                                                  [ M.read (| state |); address ]
                                                                |)
                                                              ]
                                                            |),
                                                            "revm_state::Account",
                                                            "storage"
                                                          |);
                                                          key
                                                        ]
                                                      |)
                                                    ]
                                                  |),
                                                  "revm_state::EvmStorageSlot",
                                                  "present_value"
                                                |),
                                                M.read (| had_value |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                                                "address"
                                              |) in
                                            let γ0_1 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                                                "key"
                                              |) in
                                            let γ0_2 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                                                "had_value"
                                              |) in
                                            let address := M.copy (| γ0_0 |) in
                                            let key := M.copy (| γ0_1 |) in
                                            let had_value := M.copy (| γ0_2 |) in
                                            let~ tkey :=
                                              M.alloc (|
                                                Value.Tuple
                                                  [ M.read (| address |); M.read (| key |) ]
                                              |) in
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [],
                                                              "is_zero",
                                                              []
                                                            |),
                                                            [ had_value ]
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    let~ _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "hashbrown::map::HashMap")
                                                              []
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path
                                                                      "alloy_primitives::bits::address::Address";
                                                                    Ty.apply
                                                                      (Ty.path "ruint::Uint")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          256;
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          4
                                                                      ]
                                                                      []
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "ruint::Uint")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      256;
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                  [];
                                                                Ty.path
                                                                  "foldhash::seed::fast::RandomState";
                                                                Ty.path
                                                                  "hashbrown::raw::alloc::inner::Global"
                                                              ],
                                                            "remove",
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path
                                                                    "alloy_primitives::bits::address::Address";
                                                                  Ty.apply
                                                                    (Ty.path "ruint::Uint")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        256;
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        4
                                                                    ]
                                                                    []
                                                                ]
                                                            ]
                                                          |),
                                                          [ M.read (| transient_storage |); tkey ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let~ _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "hashbrown::map::HashMap")
                                                              []
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path
                                                                      "alloy_primitives::bits::address::Address";
                                                                    Ty.apply
                                                                      (Ty.path "ruint::Uint")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          256;
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          4
                                                                      ]
                                                                      []
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "ruint::Uint")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      256;
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                  [];
                                                                Ty.path
                                                                  "foldhash::seed::fast::RandomState";
                                                                Ty.path
                                                                  "hashbrown::raw::alloc::inner::Global"
                                                              ],
                                                            "insert",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| transient_storage |);
                                                            M.read (| tkey |);
                                                            M.read (| had_value |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "revm_context::journaled_state::JournalEntry::CodeChange",
                                                "address"
                                              |) in
                                            let address := M.copy (| γ0_0 |) in
                                            let~ acc :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [ Ty.path "revm_state::Account" ]
                                                      ],
                                                    "unwrap",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "hashbrown::map::HashMap")
                                                          []
                                                          [
                                                            Ty.path
                                                              "alloy_primitives::bits::address::Address";
                                                            Ty.path "revm_state::Account";
                                                            Ty.path
                                                              "foldhash::seed::fast::RandomState";
                                                            Ty.path
                                                              "hashbrown::raw::alloc::inner::Global"
                                                          ],
                                                        "get_mut",
                                                        [
                                                          Ty.path
                                                            "alloy_primitives::bits::address::Address"
                                                        ]
                                                      |),
                                                      [ M.read (| state |); address ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ _ :=
                                              M.write (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| acc |),
                                                    "revm_state::Account",
                                                    "info"
                                                  |),
                                                  "revm_state::account_info::AccountInfo",
                                                  "code_hash"
                                                |),
                                                M.read (|
                                                  M.get_constant (|
                                                    "revm_primitives::KECCAK_EMPTY"
                                                  |)
                                                |)
                                              |) in
                                            let~ _ :=
                                              M.write (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| acc |),
                                                    "revm_state::Account",
                                                    "info"
                                                  |),
                                                  "revm_state::account_info::AccountInfo",
                                                  "code"
                                                |),
                                                Value.StructTuple "core::option::Option::None" []
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_journal_revert :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "journal_revert" (journal_revert DB).
    
    (*
        pub fn checkpoint(&mut self) -> JournalCheckpoint {
            let checkpoint = JournalCheckpoint {
                log_i: self.logs.len(),
                journal_i: self.journal.len(),
            };
            self.depth += 1;
            self.journal.push(Default::default());
            checkpoint
        }
    *)
    Definition checkpoint (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ checkpoint :=
              M.alloc (|
                Value.StructRecord
                  "revm_context_interface::journaled_state::JournalCheckpoint"
                  [
                    ("log_i",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloy_primitives::log::Log")
                                []
                                [ Ty.path "alloy_primitives::log::LogData" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "len",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "revm_context::journaled_state::JournaledState",
                            "logs"
                          |)
                        ]
                      |));
                    ("journal_i",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.path "revm_context::journaled_state::JournalEntry";
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "len",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "revm_context::journaled_state::JournaledState",
                            "journal"
                          |)
                        ]
                      |))
                  ]
              |) in
            let~ _ :=
              let β :=
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::journaled_state::JournaledState",
                  "depth"
                |) in
              M.write (|
                β,
                BinOp.Wrap.add (| M.read (| β |), Value.Integer IntegerKind.Usize 1 |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "revm_context::journaled_state::JournalEntry";
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "push",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "journal"
                    |);
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "revm_context::journaled_state::JournalEntry";
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |)
                  ]
                |)
              |) in
            checkpoint
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_checkpoint :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "checkpoint" (checkpoint DB).
    
    (*
        pub fn checkpoint_commit(&mut self) {
            self.depth -= 1;
        }
    *)
    Definition checkpoint_commit
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ _ :=
              let β :=
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::journaled_state::JournaledState",
                  "depth"
                |) in
              M.write (|
                β,
                BinOp.Wrap.sub (| M.read (| β |), Value.Integer IntegerKind.Usize 1 |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_checkpoint_commit :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "checkpoint_commit" (checkpoint_commit DB).
    
    (*
        pub fn checkpoint_revert(&mut self, checkpoint: JournalCheckpoint) {
            let is_spurious_dragon_enabled = self.spec.is_enabled_in(SPURIOUS_DRAGON);
            let state = &mut self.state;
            let transient_storage = &mut self.transient_storage;
            self.depth -= 1;
            // iterate over last N journals sets and revert our global state
            let leng = self.journal.len();
            self.journal
                .iter_mut()
                .rev()
                .take(leng - checkpoint.journal_i)
                .for_each(|cs| {
                    Self::journal_revert(
                        state,
                        transient_storage,
                        mem::take(cs),
                        is_spurious_dragon_enabled,
                    )
                });
    
            self.logs.truncate(checkpoint.log_i);
            self.journal.truncate(checkpoint.journal_i);
        }
    *)
    Definition checkpoint_revert
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; checkpoint ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let checkpoint := M.alloc (| checkpoint |) in
          M.read (|
            let~ is_spurious_dragon_enabled :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "revm_specification::hardfork::SpecId",
                    "is_enabled_in",
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::journaled_state::JournaledState",
                        "spec"
                      |)
                    |);
                    Value.StructTuple "revm_specification::hardfork::SpecId::SPURIOUS_DRAGON" []
                  ]
                |)
              |) in
            let~ state :=
              M.alloc (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::journaled_state::JournaledState",
                  "state"
                |)
              |) in
            let~ transient_storage :=
              M.alloc (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::journaled_state::JournaledState",
                  "transient_storage"
                |)
              |) in
            let~ _ :=
              let β :=
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::journaled_state::JournaledState",
                  "depth"
                |) in
              M.write (|
                β,
                BinOp.Wrap.sub (| M.read (| β |), Value.Integer IntegerKind.Usize 1 |)
              |) in
            let~ leng :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "revm_context::journaled_state::JournalEntry";
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "len",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "journal"
                    |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::take::Take")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::IterMut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "revm_context::journaled_state::JournalEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ]
                      ],
                    [],
                    "for_each",
                    [
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path "revm_context::journaled_state::JournalEntry";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ]
                        ]
                        (Ty.tuple [])
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::IterMut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "revm_context::journaled_state::JournalEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ],
                        [],
                        "take",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::IterMut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "revm_context::journaled_state::JournalEntry";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            "rev",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                "iter_mut",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "revm_context::journaled_state::JournalEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "revm_context::journaled_state::JournaledState",
                                      "journal"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |);
                        BinOp.Wrap.sub (|
                          M.read (| leng |),
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              checkpoint,
                              "revm_context_interface::journaled_state::JournalCheckpoint",
                              "journal_i"
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let cs := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "revm_context::journaled_state::JournaledState")
                                            []
                                            [ DB ],
                                          "journal_revert",
                                          []
                                        |),
                                        [
                                          M.read (| state |);
                                          M.read (| transient_storage |);
                                          M.call_closure (|
                                            M.get_function (|
                                              "core::mem::take",
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.path
                                                      "revm_context::journaled_state::JournalEntry";
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                            |),
                                            [ M.read (| cs |) ]
                                          |);
                                          M.read (| is_spurious_dragon_enabled |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::log::Log")
                          []
                          [ Ty.path "alloy_primitives::log::LogData" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "truncate",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "logs"
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        checkpoint,
                        "revm_context_interface::journaled_state::JournalCheckpoint",
                        "log_i"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "revm_context::journaled_state::JournalEntry";
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "truncate",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "journal"
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        checkpoint,
                        "revm_context_interface::journaled_state::JournalCheckpoint",
                        "journal_i"
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_checkpoint_revert :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "checkpoint_revert" (checkpoint_revert DB).
    
    (*
        pub fn selfdestruct(
            &mut self,
            address: Address,
            target: Address,
        ) -> Result<StateLoad<SelfDestructResult>, DB::Error> {
            let spec = self.spec;
            let account_load = self.load_account(target)?;
            let is_cold = account_load.is_cold;
            let is_empty = account_load.state_clear_aware_is_empty(spec);
    
            if address != target {
                // Both accounts are loaded before this point, `address` as we execute its contract.
                // and `target` at the beginning of the function.
                let acc_balance = self.state.get_mut(&address).unwrap().info.balance;
    
                let target_account = self.state.get_mut(&target).unwrap();
                Self::touch_account(self.journal.last_mut().unwrap(), &target, target_account);
                target_account.info.balance += acc_balance;
            }
    
            let acc = self.state.get_mut(&address).unwrap();
            let balance = acc.info.balance;
            let previously_destroyed = acc.is_selfdestructed();
            let is_cancun_enabled = self.spec.is_enabled_in(CANCUN);
    
            // EIP-6780 (Cancun hard-fork): selfdestruct only if contract is created in the same tx
            let journal_entry = if acc.is_created() || !is_cancun_enabled {
                acc.mark_selfdestruct();
                acc.info.balance = U256::ZERO;
                Some(JournalEntry::AccountDestroyed {
                    address,
                    target,
                    was_destroyed: previously_destroyed,
                    had_balance: balance,
                })
            } else if address != target {
                acc.info.balance = U256::ZERO;
                Some(JournalEntry::BalanceTransfer {
                    from: address,
                    to: target,
                    balance,
                })
            } else {
                // State is not changed:
                // * if we are after Cancun upgrade and
                // * Selfdestruct account that is created in the same transaction and
                // * Specify the target is same as selfdestructed account. The balance stays unchanged.
                None
            };
    
            if let Some(entry) = journal_entry {
                self.journal.last_mut().unwrap().push(entry);
            };
    
            Ok(StateLoad {
                data: SelfDestructResult {
                    had_value: !balance.is_zero(),
                    target_exists: !is_empty,
                    previously_destroyed,
                },
                is_cold,
            })
        }
    *)
    Definition selfdestruct (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; target ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let target := M.alloc (| target |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ spec :=
                  M.copy (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "spec"
                    |)
                  |) in
                let~ account_load :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "revm_context_interface::journaled_state::StateLoad")
                                  []
                                  [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ]
                                  ];
                                Ty.associated
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "revm_context::journaled_state::JournaledState")
                                  []
                                  [ DB ],
                                "load_account",
                                []
                              |),
                              [ M.read (| self |); M.read (| target |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "revm_context_interface::journaled_state::StateLoad")
                                              []
                                              [
                                                Ty.path
                                                  "revm_context_interface::host::SelfDestructResult"
                                              ];
                                            Ty.associated
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ is_cold :=
                  M.copy (|
                    M.SubPointer.get_struct_record_field (|
                      account_load,
                      "revm_context_interface::journaled_state::StateLoad",
                      "is_cold"
                    |)
                  |) in
                let~ is_empty :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "revm_state::Account",
                        "state_clear_aware_is_empty",
                        []
                      |),
                      [
                        M.read (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "revm_context_interface::journaled_state::StateLoad")
                                []
                                [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ] ],
                              [],
                              "deref",
                              []
                            |),
                            [ account_load ]
                          |)
                        |);
                        M.read (| spec |)
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "alloy_primitives::bits::address::Address",
                                    [ Ty.path "alloy_primitives::bits::address::Address" ],
                                    "ne",
                                    []
                                  |),
                                  [ address; target ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ acc_balance :=
                            M.copy (|
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.path "revm_state::Account" ]
                                        ],
                                      "unwrap",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "hashbrown::map::HashMap")
                                            []
                                            [
                                              Ty.path "alloy_primitives::bits::address::Address";
                                              Ty.path "revm_state::Account";
                                              Ty.path "foldhash::seed::fast::RandomState";
                                              Ty.path "hashbrown::raw::alloc::inner::Global"
                                            ],
                                          "get_mut",
                                          [ Ty.path "alloy_primitives::bits::address::Address" ]
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "revm_context::journaled_state::JournaledState",
                                            "state"
                                          |);
                                          address
                                        ]
                                      |)
                                    ]
                                  |),
                                  "revm_state::Account",
                                  "info"
                                |),
                                "revm_state::account_info::AccountInfo",
                                "balance"
                              |)
                            |) in
                          let~ target_account :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ]
                                    ],
                                  "unwrap",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "hashbrown::map::HashMap")
                                        []
                                        [
                                          Ty.path "alloy_primitives::bits::address::Address";
                                          Ty.path "revm_state::Account";
                                          Ty.path "foldhash::seed::fast::RandomState";
                                          Ty.path "hashbrown::raw::alloc::inner::Global"
                                        ],
                                      "get_mut",
                                      [ Ty.path "alloy_primitives::bits::address::Address" ]
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "revm_context::journaled_state::JournaledState",
                                        "state"
                                      |);
                                      target
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          let~ _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "revm_context::journaled_state::JournaledState")
                                    []
                                    [ DB ],
                                  "touch_account",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.path
                                                    "revm_context::journaled_state::JournalEntry";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ],
                                      "unwrap",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.path
                                                    "revm_context::journaled_state::JournalEntry";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          "last_mut",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::DerefMut",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.path
                                                        "revm_context::journaled_state::JournalEntry";
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref_mut",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "revm_context::journaled_state::JournaledState",
                                                "journal"
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |);
                                  target;
                                  M.read (| target_account |)
                                ]
                              |)
                            |) in
                          let~ _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::arith::AddAssign",
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  [
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ],
                                  "add_assign",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| target_account |),
                                      "revm_state::Account",
                                      "info"
                                    |),
                                    "revm_state::account_info::AccountInfo",
                                    "balance"
                                  |);
                                  M.read (| acc_balance |)
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ acc :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ] ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "hashbrown::map::HashMap")
                              []
                              [
                                Ty.path "alloy_primitives::bits::address::Address";
                                Ty.path "revm_state::Account";
                                Ty.path "foldhash::seed::fast::RandomState";
                                Ty.path "hashbrown::raw::alloc::inner::Global"
                              ],
                            "get_mut",
                            [ Ty.path "alloy_primitives::bits::address::Address" ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::journaled_state::JournaledState",
                              "state"
                            |);
                            address
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ balance :=
                  M.copy (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| acc |),
                        "revm_state::Account",
                        "info"
                      |),
                      "revm_state::account_info::AccountInfo",
                      "balance"
                    |)
                  |) in
                let~ previously_destroyed :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "revm_state::Account",
                        "is_selfdestructed",
                        []
                      |),
                      [ M.read (| acc |) ]
                    |)
                  |) in
                let~ is_cancun_enabled :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "revm_specification::hardfork::SpecId",
                        "is_enabled_in",
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "revm_context::journaled_state::JournaledState",
                            "spec"
                          |)
                        |);
                        Value.StructTuple "revm_specification::hardfork::SpecId::CANCUN" []
                      ]
                    |)
                  |) in
                let~ journal_entry :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  LogicalOp.or (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "revm_state::Account",
                                        "is_created",
                                        []
                                      |),
                                      [ M.read (| acc |) ]
                                    |),
                                    ltac:(M.monadic (UnOp.not (| M.read (| is_cancun_enabled |) |)))
                                  |)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "revm_state::Account",
                                    "mark_selfdestruct",
                                    []
                                  |),
                                  [ M.read (| acc |) ]
                                |)
                              |) in
                            let~ _ :=
                              M.write (|
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| acc |),
                                    "revm_state::Account",
                                    "info"
                                  |),
                                  "revm_state::account_info::AccountInfo",
                                  "balance"
                                |),
                                M.read (| M.get_constant (| "ruint::ZERO" |) |)
                              |) in
                            M.alloc (|
                              Value.StructTuple
                                "core::option::Option::Some"
                                [
                                  Value.StructRecord
                                    "revm_context::journaled_state::JournalEntry::AccountDestroyed"
                                    [
                                      ("address", M.read (| address |));
                                      ("target", M.read (| target |));
                                      ("was_destroyed", M.read (| previously_destroyed |));
                                      ("had_balance", M.read (| balance |))
                                    ]
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::cmp::PartialEq",
                                              Ty.path "alloy_primitives::bits::address::Address",
                                              [ Ty.path "alloy_primitives::bits::address::Address"
                                              ],
                                              "ne",
                                              []
                                            |),
                                            [ address; target ]
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    let~ _ :=
                                      M.write (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| acc |),
                                            "revm_state::Account",
                                            "info"
                                          |),
                                          "revm_state::account_info::AccountInfo",
                                          "balance"
                                        |),
                                        M.read (| M.get_constant (| "ruint::ZERO" |) |)
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [
                                          Value.StructRecord
                                            "revm_context::journaled_state::JournalEntry::BalanceTransfer"
                                            [
                                              ("from", M.read (| address |));
                                              ("to", M.read (| target |));
                                              ("balance", M.read (| balance |))
                                            ]
                                        ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      Value.StructTuple "core::option::Option::None" []
                                    |)))
                              ]
                            |)))
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := journal_entry in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let entry := M.copy (| γ0_0 |) in
                          let~ _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path "revm_context::journaled_state::JournalEntry";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "push",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.path
                                                    "revm_context::journaled_state::JournalEntry";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ],
                                      "unwrap",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.path
                                                    "revm_context::journaled_state::JournalEntry";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          "last_mut",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::DerefMut",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.path
                                                        "revm_context::journaled_state::JournalEntry";
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref_mut",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "revm_context::journaled_state::JournaledState",
                                                "journal"
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |);
                                  M.read (| entry |)
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.StructRecord
                        "revm_context_interface::journaled_state::StateLoad"
                        [
                          ("data",
                            Value.StructRecord
                              "revm_context_interface::host::SelfDestructResult"
                              [
                                ("had_value",
                                  UnOp.not (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [],
                                        "is_zero",
                                        []
                                      |),
                                      [ balance ]
                                    |)
                                  |));
                                ("target_exists", UnOp.not (| M.read (| is_empty |) |));
                                ("previously_destroyed", M.read (| previously_destroyed |))
                              ]);
                          ("is_cold", M.read (| is_cold |))
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_selfdestruct :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "selfdestruct" (selfdestruct DB).
    
    (*
        pub fn initial_account_load(
            &mut self,
            address: Address,
            storage_keys: impl IntoIterator<Item = U256>,
        ) -> Result<&mut Account, DB::Error> {
            // load or get account.
            let account = match self.state.entry(address) {
                Entry::Occupied(entry) => entry.into_mut(),
                Entry::Vacant(vac) => vac.insert(
                    self.database
                        .basic(address)?
                        .map(|i| i.into())
                        .unwrap_or(Account::new_not_existing()),
                ),
            };
            // preload storages.
            for storage_key in storage_keys.into_iter() {
                if let Entry::Vacant(entry) = account.storage.entry(storage_key) {
                    let storage = self.database.storage(address, storage_key)?;
                    entry.insert(EvmStorageSlot::new(storage));
                }
            }
            Ok(account)
        }
    *)
    Definition initial_account_load
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [ impl_IntoIterator_Item___U256_ ], [ self; address; storage_keys ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let storage_keys := M.alloc (| storage_keys |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ account :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "hashbrown::map::HashMap")
                              []
                              [
                                Ty.path "alloy_primitives::bits::address::Address";
                                Ty.path "revm_state::Account";
                                Ty.path "foldhash::seed::fast::RandomState";
                                Ty.path "hashbrown::raw::alloc::inner::Global"
                              ],
                            "entry",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::journaled_state::JournaledState",
                              "state"
                            |);
                            M.read (| address |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "hashbrown::map::Entry::Occupied",
                                0
                              |) in
                            let entry := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "hashbrown::map::OccupiedEntry")
                                    []
                                    [
                                      Ty.path "alloy_primitives::bits::address::Address";
                                      Ty.path "revm_state::Account";
                                      Ty.path "foldhash::seed::fast::RandomState";
                                      Ty.path "hashbrown::raw::alloc::inner::Global"
                                    ],
                                  "into_mut",
                                  []
                                |),
                                [ M.read (| entry |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "hashbrown::map::Entry::Vacant",
                                0
                              |) in
                            let vac := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "hashbrown::map::VacantEntry")
                                    []
                                    [
                                      Ty.path "alloy_primitives::bits::address::Address";
                                      Ty.path "revm_state::Account";
                                      Ty.path "foldhash::seed::fast::RandomState";
                                      Ty.path "hashbrown::raw::alloc::inner::Global"
                                    ],
                                  "insert",
                                  []
                                |),
                                [
                                  M.read (| vac |);
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "revm_state::Account" ],
                                      "unwrap_or",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "revm_state::account_info::AccountInfo" ],
                                          "map",
                                          [
                                            Ty.path "revm_state::Account";
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [ Ty.path "revm_state::account_info::AccountInfo"
                                                  ]
                                              ]
                                              (Ty.path "revm_state::Account")
                                          ]
                                        |),
                                        [
                                          M.read (|
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.path
                                                              "revm_state::account_info::AccountInfo"
                                                          ];
                                                        Ty.associated
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "revm_database_interface::Database",
                                                        DB,
                                                        [],
                                                        "basic",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "revm_context::journaled_state::JournaledState",
                                                          "database"
                                                        |);
                                                        M.read (| address |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "revm_state::Account"
                                                                      ];
                                                                    Ty.associated
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.associated
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let i := M.copy (| γ |) in
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::convert::Into",
                                                                Ty.path
                                                                  "revm_state::account_info::AccountInfo",
                                                                [ Ty.path "revm_state::Account" ],
                                                                "into",
                                                                []
                                                              |),
                                                              [ M.read (| i |) ]
                                                            |)))
                                                      ]
                                                    |)))
                                                | _ => M.impossible "wrong number of arguments"
                                                end))
                                        ]
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "revm_state::Account",
                                          "new_not_existing",
                                          []
                                        |),
                                        []
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)))
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.associated,
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                impl_IntoIterator_Item___U256_,
                                [],
                                "into_iter",
                                []
                              |),
                              [ M.read (| storage_keys |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let~ _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.associated,
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let storage_key := M.copy (| γ0_0 |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "hashbrown::map::HashMap")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [];
                                                              Ty.path "revm_state::EvmStorageSlot";
                                                              Ty.path
                                                                "foldhash::seed::fast::RandomState";
                                                              Ty.path
                                                                "hashbrown::raw::alloc::inner::Global"
                                                            ],
                                                          "entry",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| account |),
                                                            "revm_state::Account",
                                                            "storage"
                                                          |);
                                                          M.read (| storage_key |)
                                                        ]
                                                      |)
                                                    |) in
                                                  let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "hashbrown::map::Entry::Vacant",
                                                      0
                                                    |) in
                                                  let entry := M.copy (| γ0_0 |) in
                                                  let~ storage :=
                                                    M.copy (|
                                                      M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::Try",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "ruint::Uint")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        256;
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        4
                                                                    ]
                                                                    [];
                                                                  Ty.associated
                                                                ],
                                                              [],
                                                              "branch",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "revm_database_interface::Database",
                                                                  DB,
                                                                  [],
                                                                  "storage",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "revm_context::journaled_state::JournaledState",
                                                                    "database"
                                                                  |);
                                                                  M.read (| address |);
                                                                  M.read (| storage_key |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                  0
                                                                |) in
                                                              let residual := M.copy (| γ0_0 |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    M.return_ (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::try_trait::FromResidual",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&mut")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "revm_state::Account"
                                                                                ];
                                                                              Ty.associated
                                                                            ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "core::convert::Infallible";
                                                                                Ty.associated
                                                                              ]
                                                                          ],
                                                                          "from_residual",
                                                                          []
                                                                        |),
                                                                        [ M.read (| residual |) ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                  0
                                                                |) in
                                                              let val := M.copy (| γ0_0 |) in
                                                              val))
                                                        ]
                                                      |)
                                                    |) in
                                                  let~ _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "hashbrown::map::VacantEntry")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [
                                                                  Value.Integer
                                                                    IntegerKind.Usize
                                                                    256;
                                                                  Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [];
                                                              Ty.path "revm_state::EvmStorageSlot";
                                                              Ty.path
                                                                "foldhash::seed::fast::RandomState";
                                                              Ty.path
                                                                "hashbrown::raw::alloc::inner::Global"
                                                            ],
                                                          "insert",
                                                          []
                                                        |),
                                                        [
                                                          M.read (| entry |);
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "revm_state::EvmStorageSlot",
                                                              "new",
                                                              []
                                                            |),
                                                            [ M.read (| storage |) ]
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| account |) ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_initial_account_load :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "initial_account_load" (initial_account_load DB).
    
    (*
        pub fn load_account(&mut self, address: Address) -> Result<StateLoad<&mut Account>, DB::Error> {
            self.load_account_optional(address, false)
        }
    *)
    Definition load_account (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "load_account_optional",
              []
            |),
            [ M.read (| self |); M.read (| address |); Value.Bool false ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_load_account :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "load_account" (load_account DB).
    
    (*
        pub fn load_account_delegated(&mut self, address: Address) -> Result<AccountLoad, DB::Error> {
            let spec = self.spec;
            let account = self.load_code(address)?;
            let is_empty = account.state_clear_aware_is_empty(spec);
    
            let mut account_load = AccountLoad {
                is_empty,
                load: Eip7702CodeLoad::new_not_delegated((), account.is_cold),
            };
            // load delegate code if account is EIP-7702
            if let Some(Bytecode::Eip7702(code)) = &account.info.code {
                let address = code.address();
                let delegate_account = self.load_account(address)?;
                account_load
                    .load
                    .set_delegate_load(delegate_account.is_cold);
            }
    
            Ok(account_load)
        }
    *)
    Definition load_account_delegated
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ spec :=
                  M.copy (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "spec"
                    |)
                  |) in
                let~ account :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "revm_context_interface::journaled_state::StateLoad")
                                  []
                                  [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ]
                                  ];
                                Ty.associated
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "revm_context::journaled_state::JournaledState")
                                  []
                                  [ DB ],
                                "load_code",
                                []
                              |),
                              [ M.read (| self |); M.read (| address |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path
                                              "revm_context_interface::journaled_state::AccountLoad";
                                            Ty.associated
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ is_empty :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "revm_state::Account",
                        "state_clear_aware_is_empty",
                        []
                      |),
                      [
                        M.read (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "revm_context_interface::journaled_state::StateLoad")
                                []
                                [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ] ],
                              [],
                              "deref",
                              []
                            |),
                            [ account ]
                          |)
                        |);
                        M.read (| spec |)
                      ]
                    |)
                  |) in
                let~ account_load :=
                  M.alloc (|
                    Value.StructRecord
                      "revm_context_interface::journaled_state::AccountLoad"
                      [
                        ("is_empty", M.read (| is_empty |));
                        ("load",
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "revm_context_interface::journaled_state::Eip7702CodeLoad")
                                []
                                [ Ty.tuple [] ],
                              "new_not_delegated",
                              []
                            |),
                            [
                              Value.Tuple [];
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  account,
                                  "revm_context_interface::journaled_state::StateLoad",
                                  "is_cold"
                                |)
                              |)
                            ]
                          |))
                      ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.alloc (|
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path
                                            "revm_context_interface::journaled_state::StateLoad")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.path "revm_state::Account" ]
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ account ]
                                    |)
                                  |),
                                  "revm_state::Account",
                                  "info"
                                |),
                                "revm_state::account_info::AccountInfo",
                                "code"
                              |)
                            |) in
                          let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let γ2_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ1_0,
                              "revm_bytecode::bytecode::Bytecode::Eip7702",
                              0
                            |) in
                          let code := M.alloc (| γ2_0 |) in
                          let~ address :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "revm_bytecode::eip7702::Eip7702Bytecode",
                                  "address",
                                  []
                                |),
                                [ M.read (| code |) ]
                              |)
                            |) in
                          let~ delegate_account :=
                            M.copy (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "revm_context_interface::journaled_state::StateLoad")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.path "revm_state::Account" ]
                                            ];
                                          Ty.associated
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "revm_context::journaled_state::JournaledState")
                                            []
                                            [ DB ],
                                          "load_account",
                                          []
                                        |),
                                        [ M.read (| self |); M.read (| address |) ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.path
                                                        "revm_context_interface::journaled_state::AccountLoad";
                                                      Ty.associated
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |) in
                          let~ _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "revm_context_interface::journaled_state::Eip7702CodeLoad")
                                    []
                                    [ Ty.tuple [] ],
                                  "set_delegate_load",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    account_load,
                                    "revm_context_interface::journaled_state::AccountLoad",
                                    "load"
                                  |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      delegate_account,
                                      "revm_context_interface::journaled_state::StateLoad",
                                      "is_cold"
                                    |)
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  Value.StructTuple "core::result::Result::Ok" [ M.read (| account_load |) ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_load_account_delegated :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "load_account_delegated" (load_account_delegated DB).
    
    (*
        pub fn load_code(&mut self, address: Address) -> Result<StateLoad<&mut Account>, DB::Error> {
            self.load_account_optional(address, true)
        }
    *)
    Definition load_code (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "revm_context::journaled_state::JournaledState") [] [ DB ],
              "load_account_optional",
              []
            |),
            [ M.read (| self |); M.read (| address |); Value.Bool true ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_load_code :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "load_code" (load_code DB).
    
    (*
        pub fn load_account_optional(
            &mut self,
            address: Address,
            load_code: bool,
        ) -> Result<StateLoad<&mut Account>, DB::Error> {
            let load = match self.state.entry(address) {
                Entry::Occupied(entry) => {
                    let account = entry.into_mut();
                    let is_cold = account.mark_warm();
                    StateLoad {
                        data: account,
                        is_cold,
                    }
                }
                Entry::Vacant(vac) => {
                    let account = if let Some(account) = self.database.basic(address)? {
                        account.into()
                    } else {
                        Account::new_not_existing()
                    };
    
                    // precompiles are warm loaded so we need to take that into account
                    let is_cold = !self.warm_preloaded_addresses.contains(&address);
    
                    StateLoad {
                        data: vac.insert(account),
                        is_cold,
                    }
                }
            };
            // journal loading of cold account.
            if load.is_cold {
                self.journal
                    .last_mut()
                    .unwrap()
                    .push(JournalEntry::AccountWarmed { address });
            }
            if load_code {
                let info = &mut load.data.info;
                if info.code.is_none() {
                    if info.code_hash == KECCAK_EMPTY {
                        let empty = Bytecode::default();
                        info.code = Some(empty);
                    } else {
                        let code = self.database.code_by_hash(info.code_hash)?;
                        info.code = Some(code);
                    }
                }
            }
    
            Ok(load)
        }
    *)
    Definition load_account_optional
        (DB : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; load_code ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let load_code := M.alloc (| load_code |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ load :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "hashbrown::map::HashMap")
                              []
                              [
                                Ty.path "alloy_primitives::bits::address::Address";
                                Ty.path "revm_state::Account";
                                Ty.path "foldhash::seed::fast::RandomState";
                                Ty.path "hashbrown::raw::alloc::inner::Global"
                              ],
                            "entry",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::journaled_state::JournaledState",
                              "state"
                            |);
                            M.read (| address |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "hashbrown::map::Entry::Occupied",
                                0
                              |) in
                            let entry := M.copy (| γ0_0 |) in
                            let~ account :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "hashbrown::map::OccupiedEntry")
                                      []
                                      [
                                        Ty.path "alloy_primitives::bits::address::Address";
                                        Ty.path "revm_state::Account";
                                        Ty.path "foldhash::seed::fast::RandomState";
                                        Ty.path "hashbrown::raw::alloc::inner::Global"
                                      ],
                                    "into_mut",
                                    []
                                  |),
                                  [ M.read (| entry |) ]
                                |)
                              |) in
                            let~ is_cold :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "revm_state::Account",
                                    "mark_warm",
                                    []
                                  |),
                                  [ M.read (| account |) ]
                                |)
                              |) in
                            M.alloc (|
                              Value.StructRecord
                                "revm_context_interface::journaled_state::StateLoad"
                                [ ("data", M.read (| account |)); ("is_cold", M.read (| is_cold |))
                                ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "hashbrown::map::Entry::Vacant",
                                0
                              |) in
                            let vac := M.copy (| γ0_0 |) in
                            let~ account :=
                              M.copy (|
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [
                                                          Ty.path
                                                            "revm_state::account_info::AccountInfo"
                                                        ];
                                                      Ty.associated
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "revm_database_interface::Database",
                                                      DB,
                                                      [],
                                                      "basic",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "revm_context::journaled_state::JournaledState",
                                                        "database"
                                                      |);
                                                      M.read (| address |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "revm_context_interface::journaled_state::StateLoad")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "revm_state::Account"
                                                                        ]
                                                                    ];
                                                                  Ty.associated
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.associated
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let account := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.path "revm_state::account_info::AccountInfo",
                                              [ Ty.path "revm_state::Account" ],
                                              "into",
                                              []
                                            |),
                                            [ M.read (| account |) ]
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "revm_state::Account",
                                              "new_not_existing",
                                              []
                                            |),
                                            []
                                          |)
                                        |)))
                                  ]
                                |)
                              |) in
                            let~ is_cold :=
                              M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "hashbrown::set::HashSet")
                                        []
                                        [
                                          Ty.path "alloy_primitives::bits::address::Address";
                                          Ty.path "foldhash::seed::fast::RandomState";
                                          Ty.path "hashbrown::raw::alloc::inner::Global"
                                        ],
                                      "contains",
                                      [ Ty.path "alloy_primitives::bits::address::Address" ]
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "revm_context::journaled_state::JournaledState",
                                        "warm_preloaded_addresses"
                                      |);
                                      address
                                    ]
                                  |)
                                |)
                              |) in
                            M.alloc (|
                              Value.StructRecord
                                "revm_context_interface::journaled_state::StateLoad"
                                [
                                  ("data",
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "hashbrown::map::VacantEntry")
                                          []
                                          [
                                            Ty.path "alloy_primitives::bits::address::Address";
                                            Ty.path "revm_state::Account";
                                            Ty.path "foldhash::seed::fast::RandomState";
                                            Ty.path "hashbrown::raw::alloc::inner::Global"
                                          ],
                                        "insert",
                                        []
                                      |),
                                      [ M.read (| vac |); M.read (| account |) ]
                                    |));
                                  ("is_cold", M.read (| is_cold |))
                                ]
                            |)))
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.SubPointer.get_struct_record_field (|
                                load,
                                "revm_context_interface::journaled_state::StateLoad",
                                "is_cold"
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path "revm_context::journaled_state::JournalEntry";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "push",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.path
                                                    "revm_context::journaled_state::JournalEntry";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ],
                                      "unwrap",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.path
                                                    "revm_context::journaled_state::JournalEntry";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          "last_mut",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::DerefMut",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.path
                                                        "revm_context::journaled_state::JournalEntry";
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref_mut",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "revm_context::journaled_state::JournaledState",
                                                "journal"
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |);
                                  Value.StructRecord
                                    "revm_context::journaled_state::JournalEntry::AccountWarmed"
                                    [ ("address", M.read (| address |)) ]
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use load_code in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ info :=
                            M.alloc (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    load,
                                    "revm_context_interface::journaled_state::StateLoad",
                                    "data"
                                  |)
                                |),
                                "revm_state::Account",
                                "info"
                              |)
                            |) in
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "revm_bytecode::bytecode::Bytecode" ],
                                            "is_none",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| info |),
                                              "revm_state::account_info::AccountInfo",
                                              "code"
                                            |)
                                          ]
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::cmp::PartialEq",
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloy_primitives::bits::fixed::FixedBytes")
                                                      [ Value.Integer IntegerKind.Usize 32 ]
                                                      [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloy_primitives::bits::fixed::FixedBytes")
                                                        [ Value.Integer IntegerKind.Usize 32 ]
                                                        []
                                                    ],
                                                    "eq",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| info |),
                                                      "revm_state::account_info::AccountInfo",
                                                      "code_hash"
                                                    |);
                                                    M.get_constant (|
                                                      "revm_primitives::KECCAK_EMPTY"
                                                    |)
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          let~ empty :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::default::Default",
                                                  Ty.path "revm_bytecode::bytecode::Bytecode",
                                                  [],
                                                  "default",
                                                  []
                                                |),
                                                []
                                              |)
                                            |) in
                                          let~ _ :=
                                            M.write (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| info |),
                                                "revm_state::account_info::AccountInfo",
                                                "code"
                                              |),
                                              Value.StructTuple
                                                "core::option::Option::Some"
                                                [ M.read (| empty |) ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let~ code :=
                                            M.copy (|
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.path
                                                            "revm_bytecode::bytecode::Bytecode";
                                                          Ty.associated
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "revm_database_interface::Database",
                                                          DB,
                                                          [],
                                                          "code_by_hash",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| self |),
                                                            "revm_context::journaled_state::JournaledState",
                                                            "database"
                                                          |);
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| info |),
                                                              "revm_state::account_info::AccountInfo",
                                                              "code_hash"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "revm_context_interface::journaled_state::StateLoad")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&mut")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "revm_state::Account"
                                                                            ]
                                                                        ];
                                                                      Ty.associated
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.associated
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)
                                            |) in
                                          let~ _ :=
                                            M.write (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| info |),
                                                "revm_state::account_info::AccountInfo",
                                                "code"
                                              |),
                                              Value.StructTuple
                                                "core::option::Option::Some"
                                                [ M.read (| code |) ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| load |) ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_load_account_optional :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "load_account_optional" (load_account_optional DB).
    
    (*
        pub fn sload(&mut self, address: Address, key: U256) -> Result<StateLoad<U256>, DB::Error> {
            // assume acc is warm
            let account = self.state.get_mut(&address).unwrap();
            // only if account is created in this tx we can assume that storage is empty.
            let is_newly_created = account.is_created();
            let (value, is_cold) = match account.storage.entry(key) {
                Entry::Occupied(occ) => {
                    let slot = occ.into_mut();
                    let is_cold = slot.mark_warm();
                    (slot.present_value, is_cold)
                }
                Entry::Vacant(vac) => {
                    // if storage was cleared, we don't need to ping db.
                    let value = if is_newly_created {
                        U256::ZERO
                    } else {
                        self.database.storage(address, key)?
                    };
    
                    vac.insert(EvmStorageSlot::new(value));
    
                    (value, true)
                }
            };
    
            if is_cold {
                // add it to journal as cold loaded.
                self.journal
                    .last_mut()
                    .unwrap()
                    .push(JournalEntry::StorageWarmed { address, key });
            }
    
            Ok(StateLoad::new(value, is_cold))
        }
    *)
    Definition sload (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; key ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let key := M.alloc (| key |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ account :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ] ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "hashbrown::map::HashMap")
                              []
                              [
                                Ty.path "alloy_primitives::bits::address::Address";
                                Ty.path "revm_state::Account";
                                Ty.path "foldhash::seed::fast::RandomState";
                                Ty.path "hashbrown::raw::alloc::inner::Global"
                              ],
                            "get_mut",
                            [ Ty.path "alloy_primitives::bits::address::Address" ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::journaled_state::JournaledState",
                              "state"
                            |);
                            address
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ is_newly_created :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "revm_state::Account",
                        "is_created",
                        []
                      |),
                      [ M.read (| account |) ]
                    |)
                  |) in
                M.match_operator (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "hashbrown::map::HashMap")
                            []
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                [];
                              Ty.path "revm_state::EvmStorageSlot";
                              Ty.path "foldhash::seed::fast::RandomState";
                              Ty.path "hashbrown::raw::alloc::inner::Global"
                            ],
                          "entry",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| account |),
                            "revm_state::Account",
                            "storage"
                          |);
                          M.read (| key |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "hashbrown::map::Entry::Occupied",
                              0
                            |) in
                          let occ := M.copy (| γ0_0 |) in
                          let~ slot :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "hashbrown::map::OccupiedEntry")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [];
                                      Ty.path "revm_state::EvmStorageSlot";
                                      Ty.path "foldhash::seed::fast::RandomState";
                                      Ty.path "hashbrown::raw::alloc::inner::Global"
                                    ],
                                  "into_mut",
                                  []
                                |),
                                [ M.read (| occ |) ]
                              |)
                            |) in
                          let~ is_cold :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "revm_state::EvmStorageSlot",
                                  "mark_warm",
                                  []
                                |),
                                [ M.read (| slot |) ]
                              |)
                            |) in
                          M.alloc (|
                            Value.Tuple
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| slot |),
                                    "revm_state::EvmStorageSlot",
                                    "present_value"
                                  |)
                                |);
                                M.read (| is_cold |)
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "hashbrown::map::Entry::Vacant",
                              0
                            |) in
                          let vac := M.copy (| γ0_0 |) in
                          let~ value :=
                            M.copy (|
                              M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.use is_newly_created in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.get_constant (| "ruint::ZERO" |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [
                                                      Value.Integer IntegerKind.Usize 256;
                                                      Value.Integer IntegerKind.Usize 4
                                                    ]
                                                    [];
                                                  Ty.associated
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "revm_database_interface::Database",
                                                  DB,
                                                  [],
                                                  "storage",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "revm_context::journaled_state::JournaledState",
                                                    "database"
                                                  |);
                                                  M.read (| address |);
                                                  M.read (| key |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "revm_context_interface::journaled_state::StateLoad")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "ruint::Uint")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        256;
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        4
                                                                    ]
                                                                    []
                                                                ];
                                                              Ty.associated
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.associated
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |)))
                                ]
                              |)
                            |) in
                          let~ _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "hashbrown::map::VacantEntry")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [];
                                      Ty.path "revm_state::EvmStorageSlot";
                                      Ty.path "foldhash::seed::fast::RandomState";
                                      Ty.path "hashbrown::raw::alloc::inner::Global"
                                    ],
                                  "insert",
                                  []
                                |),
                                [
                                  M.read (| vac |);
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "revm_state::EvmStorageSlot",
                                      "new",
                                      []
                                    |),
                                    [ M.read (| value |) ]
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [ M.read (| value |); Value.Bool true ] |)))
                    ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let value := M.copy (| γ0_0 |) in
                        let is_cold := M.copy (| γ0_1 |) in
                        let~ _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use is_cold in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.path "revm_context::journaled_state::JournalEntry";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "push",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.path
                                                            "revm_context::journaled_state::JournalEntry";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ],
                                              "unwrap",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.path
                                                            "revm_context::journaled_state::JournalEntry";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  "last_mut",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::DerefMut",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.path
                                                                "revm_context::journaled_state::JournalEntry";
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref_mut",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "revm_context::journaled_state::JournaledState",
                                                        "journal"
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |);
                                          Value.StructRecord
                                            "revm_context::journaled_state::JournalEntry::StorageWarmed"
                                            [
                                              ("address", M.read (| address |));
                                              ("key", M.read (| key |))
                                            ]
                                        ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "revm_context_interface::journaled_state::StateLoad")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                  "new",
                                  []
                                |),
                                [ M.read (| value |); M.read (| is_cold |) ]
                              |)
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_sload :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "sload" (sload DB).
    
    (*
        pub fn sstore(
            &mut self,
            address: Address,
            key: U256,
            new: U256,
        ) -> Result<StateLoad<SStoreResult>, DB::Error> {
            // assume that acc exists and load the slot.
            let present = self.sload(address, key)?;
            let acc = self.state.get_mut(&address).unwrap();
    
            // if there is no original value in dirty return present value, that is our original.
            let slot = acc.storage.get_mut(&key).unwrap();
    
            // new value is same as present, we don't need to do anything
            if present.data == new {
                return Ok(StateLoad::new(
                    SStoreResult {
                        original_value: slot.original_value(),
                        present_value: present.data,
                        new_value: new,
                    },
                    present.is_cold,
                ));
            }
    
            self.journal
                .last_mut()
                .unwrap()
                .push(JournalEntry::StorageChanged {
                    address,
                    key,
                    had_value: present.data,
                });
            // insert value into present state.
            slot.present_value = new;
            Ok(StateLoad::new(
                SStoreResult {
                    original_value: slot.original_value(),
                    present_value: present.data,
                    new_value: new,
                },
                present.is_cold,
            ))
        }
    *)
    Definition sstore (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; key; new ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let key := M.alloc (| key |) in
          let new := M.alloc (| new |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ present :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "revm_context_interface::journaled_state::StateLoad")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ];
                                Ty.associated
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "revm_context::journaled_state::JournaledState")
                                  []
                                  [ DB ],
                                "sload",
                                []
                              |),
                              [ M.read (| self |); M.read (| address |); M.read (| key |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "revm_context_interface::journaled_state::StateLoad")
                                              []
                                              [ Ty.path "revm_context_interface::host::SStoreResult"
                                              ];
                                            Ty.associated
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [ Ty.path "core::convert::Infallible"; Ty.associated ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let~ acc :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::Account" ] ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "hashbrown::map::HashMap")
                              []
                              [
                                Ty.path "alloy_primitives::bits::address::Address";
                                Ty.path "revm_state::Account";
                                Ty.path "foldhash::seed::fast::RandomState";
                                Ty.path "hashbrown::raw::alloc::inner::Global"
                              ],
                            "get_mut",
                            [ Ty.path "alloy_primitives::bits::address::Address" ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::journaled_state::JournaledState",
                              "state"
                            |);
                            address
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ slot :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "revm_state::EvmStorageSlot" ] ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "hashbrown::map::HashMap")
                              []
                              [
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [];
                                Ty.path "revm_state::EvmStorageSlot";
                                Ty.path "foldhash::seed::fast::RandomState";
                                Ty.path "hashbrown::raw::alloc::inner::Global"
                              ],
                            "get_mut",
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| acc |),
                              "revm_state::Account",
                              "storage"
                            |);
                            key
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      [],
                                    [
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ],
                                    "eq",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      present,
                                      "revm_context_interface::journaled_state::StateLoad",
                                      "data"
                                    |);
                                    new
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Ok"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "revm_context_interface::journaled_state::StateLoad")
                                            []
                                            [ Ty.path "revm_context_interface::host::SStoreResult"
                                            ],
                                          "new",
                                          []
                                        |),
                                        [
                                          Value.StructRecord
                                            "revm_context_interface::host::SStoreResult"
                                            [
                                              ("original_value",
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "revm_state::EvmStorageSlot",
                                                    "original_value",
                                                    []
                                                  |),
                                                  [ M.read (| slot |) ]
                                                |));
                                              ("present_value",
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    present,
                                                    "revm_context_interface::journaled_state::StateLoad",
                                                    "data"
                                                  |)
                                                |));
                                              ("new_value", M.read (| new |))
                                            ];
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              present,
                                              "revm_context_interface::journaled_state::StateLoad",
                                              "is_cold"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "revm_context::journaled_state::JournalEntry";
                            Ty.path "alloc::alloc::Global"
                          ],
                        "push",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ],
                            "unwrap",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "revm_context::journaled_state::JournalEntry";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                "last_mut",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "revm_context::journaled_state::JournalEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "revm_context::journaled_state::JournaledState",
                                      "journal"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |);
                        Value.StructRecord
                          "revm_context::journaled_state::JournalEntry::StorageChanged"
                          [
                            ("address", M.read (| address |));
                            ("key", M.read (| key |));
                            ("had_value",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  present,
                                  "revm_context_interface::journaled_state::StateLoad",
                                  "data"
                                |)
                              |))
                          ]
                      ]
                    |)
                  |) in
                let~ _ :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| slot |),
                      "revm_state::EvmStorageSlot",
                      "present_value"
                    |),
                    M.read (| new |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "revm_context_interface::journaled_state::StateLoad")
                            []
                            [ Ty.path "revm_context_interface::host::SStoreResult" ],
                          "new",
                          []
                        |),
                        [
                          Value.StructRecord
                            "revm_context_interface::host::SStoreResult"
                            [
                              ("original_value",
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "revm_state::EvmStorageSlot",
                                    "original_value",
                                    []
                                  |),
                                  [ M.read (| slot |) ]
                                |));
                              ("present_value",
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    present,
                                    "revm_context_interface::journaled_state::StateLoad",
                                    "data"
                                  |)
                                |));
                              ("new_value", M.read (| new |))
                            ];
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              present,
                              "revm_context_interface::journaled_state::StateLoad",
                              "is_cold"
                            |)
                          |)
                        ]
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_sstore :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "sstore" (sstore DB).
    
    (*
        pub fn tload(&mut self, address: Address, key: U256) -> U256 {
            self.transient_storage
                .get(&(address, key))
                .copied()
                .unwrap_or_default()
        }
    *)
    Definition tload (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; key ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let key := M.alloc (| key |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    []
                ],
              "unwrap_or_default",
              []
            |),
            [
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            []
                        ]
                    ],
                  "copied",
                  []
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "hashbrown::map::HashMap")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.path "alloy_primitives::bits::address::Address";
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ];
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [];
                          Ty.path "foldhash::seed::fast::RandomState";
                          Ty.path "hashbrown::raw::alloc::inner::Global"
                        ],
                      "get",
                      [
                        Ty.tuple
                          [
                            Ty.path "alloy_primitives::bits::address::Address";
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ]
                      ]
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::journaled_state::JournaledState",
                        "transient_storage"
                      |);
                      M.alloc (| Value.Tuple [ M.read (| address |); M.read (| key |) ] |)
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_tload :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "tload" (tload DB).
    
    (*
        pub fn tstore(&mut self, address: Address, key: U256, new: U256) {
            let had_value = if new.is_zero() {
                // if new values is zero, remove entry from transient storage.
                // if previous values was some insert it inside journal.
                // If it is none nothing should be inserted.
                self.transient_storage.remove(&(address, key))
            } else {
                // insert values
                let previous_value = self
                    .transient_storage
                    .insert((address, key), new)
                    .unwrap_or_default();
    
                // check if previous value is same
                if previous_value != new {
                    // if it is different, insert previous values inside journal.
                    Some(previous_value)
                } else {
                    None
                }
            };
    
            if let Some(had_value) = had_value {
                // insert in journal only if value was changed.
                self.journal
                    .last_mut()
                    .unwrap()
                    .push(JournalEntry::TransientStorageChange {
                        address,
                        key,
                        had_value,
                    });
            }
        }
    *)
    Definition tstore (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; address; key; new ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let address := M.alloc (| address |) in
          let key := M.alloc (| key |) in
          let new := M.alloc (| new |) in
          M.read (|
            let~ had_value :=
              M.copy (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  "is_zero",
                                  []
                                |),
                                [ new ]
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "hashbrown::map::HashMap")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "alloy_primitives::bits::address::Address";
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        []
                                    ];
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [];
                                  Ty.path "foldhash::seed::fast::RandomState";
                                  Ty.path "hashbrown::raw::alloc::inner::Global"
                                ],
                              "remove",
                              [
                                Ty.tuple
                                  [
                                    Ty.path "alloy_primitives::bits::address::Address";
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ]
                              ]
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "revm_context::journaled_state::JournaledState",
                                "transient_storage"
                              |);
                              M.alloc (| Value.Tuple [ M.read (| address |); M.read (| key |) ] |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let~ previous_value :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ],
                                "unwrap_or_default",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "hashbrown::map::HashMap")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "alloy_primitives::bits::address::Address";
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ];
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          [];
                                        Ty.path "foldhash::seed::fast::RandomState";
                                        Ty.path "hashbrown::raw::alloc::inner::Global"
                                      ],
                                    "insert",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "revm_context::journaled_state::JournaledState",
                                      "transient_storage"
                                    |);
                                    Value.Tuple [ M.read (| address |); M.read (| key |) ];
                                    M.read (| new |)
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            [],
                                          [
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ],
                                          "ne",
                                          []
                                        |),
                                        [ previous_value; new ]
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  Value.StructTuple
                                    "core::option::Option::Some"
                                    [ M.read (| previous_value |) ]
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
                          ]
                        |)))
                  ]
                |)
              |) in
            M.match_operator (|
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := had_value in
                    let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let had_value := M.copy (| γ0_0 |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "revm_context::journaled_state::JournalEntry";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "push",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "revm_context::journaled_state::JournalEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ],
                                "unwrap",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "revm_context::journaled_state::JournalEntry";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    "last_mut",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::DerefMut",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.path
                                                  "revm_context::journaled_state::JournalEntry";
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref_mut",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "revm_context::journaled_state::JournaledState",
                                          "journal"
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            Value.StructRecord
                              "revm_context::journaled_state::JournalEntry::TransientStorageChange"
                              [
                                ("address", M.read (| address |));
                                ("key", M.read (| key |));
                                ("had_value", M.read (| had_value |))
                              ]
                          ]
                        |)
                      |) in
                    M.alloc (| Value.Tuple [] |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_tstore :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "tstore" (tstore DB).
    
    (*
        pub fn log(&mut self, log: Log) {
            self.logs.push(log);
        }
    *)
    Definition log (DB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self DB in
      match ε, τ, α with
      | [], [], [ self; log ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let log := M.alloc (| log |) in
          M.read (|
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::log::Log")
                          []
                          [ Ty.path "alloy_primitives::log::LogData" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "push",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::journaled_state::JournaledState",
                      "logs"
                    |);
                    M.read (| log |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom AssociatedFunction_log :
      forall (DB : Ty.t),
      M.IsAssociatedFunction (Self DB) "log" (log DB).
  End Impl_revm_context_journaled_state_JournaledState_DB.
  
  (*
  Enum JournalEntry
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "AccountWarmed";
          item := StructRecord [ ("address", Ty.path "alloy_primitives::bits::address::Address") ];
          discriminant := None;
        };
        {
          name := "AccountDestroyed";
          item :=
            StructRecord
              [
                ("address", Ty.path "alloy_primitives::bits::address::Address");
                ("target", Ty.path "alloy_primitives::bits::address::Address");
                ("was_destroyed", Ty.path "bool");
                ("had_balance",
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [])
              ];
          discriminant := None;
        };
        {
          name := "AccountTouched";
          item := StructRecord [ ("address", Ty.path "alloy_primitives::bits::address::Address") ];
          discriminant := None;
        };
        {
          name := "BalanceTransfer";
          item :=
            StructRecord
              [
                ("from", Ty.path "alloy_primitives::bits::address::Address");
                ("to", Ty.path "alloy_primitives::bits::address::Address");
                ("balance",
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [])
              ];
          discriminant := None;
        };
        {
          name := "NonceChange";
          item := StructRecord [ ("address", Ty.path "alloy_primitives::bits::address::Address") ];
          discriminant := None;
        };
        {
          name := "AccountCreated";
          item := StructRecord [ ("address", Ty.path "alloy_primitives::bits::address::Address") ];
          discriminant := None;
        };
        {
          name := "StorageChanged";
          item :=
            StructRecord
              [
                ("address", Ty.path "alloy_primitives::bits::address::Address");
                ("key",
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    []);
                ("had_value",
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [])
              ];
          discriminant := None;
        };
        {
          name := "StorageWarmed";
          item :=
            StructRecord
              [
                ("address", Ty.path "alloy_primitives::bits::address::Address");
                ("key",
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [])
              ];
          discriminant := None;
        };
        {
          name := "TransientStorageChange";
          item :=
            StructRecord
              [
                ("address", Ty.path "alloy_primitives::bits::address::Address");
                ("key",
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    []);
                ("had_value",
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [])
              ];
          discriminant := None;
        };
        {
          name := "CodeChange";
          item := StructRecord [ ("address", Ty.path "alloy_primitives::bits::address::Address") ];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_fmt_Debug_for_revm_context_journaled_state_JournalEntry.
    Definition Self : Ty.t := Ty.path "revm_context::journaled_state::JournalEntry".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountWarmed",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "AccountWarmed" |);
                          M.read (| Value.String "address" |);
                          __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                        "address"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                        "target"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                        "was_destroyed"
                      |) in
                    let γ1_3 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                        "had_balance"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    let __self_3 := M.alloc (| γ1_3 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field4_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "AccountDestroyed" |);
                          M.read (| Value.String "address" |);
                          M.read (| __self_0 |);
                          M.read (| Value.String "target" |);
                          M.read (| __self_1 |);
                          M.read (| Value.String "was_destroyed" |);
                          M.read (| __self_2 |);
                          M.read (| Value.String "had_balance" |);
                          __self_3
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountTouched",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "AccountTouched" |);
                          M.read (| Value.String "address" |);
                          __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                        "from"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                        "to"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                        "balance"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "BalanceTransfer" |);
                          M.read (| Value.String "from" |);
                          M.read (| __self_0 |);
                          M.read (| Value.String "to" |);
                          M.read (| __self_1 |);
                          M.read (| Value.String "balance" |);
                          __self_2
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::NonceChange",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "NonceChange" |);
                          M.read (| Value.String "address" |);
                          __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountCreated",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "AccountCreated" |);
                          M.read (| Value.String "address" |);
                          __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageChanged",
                        "address"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageChanged",
                        "key"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageChanged",
                        "had_value"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "StorageChanged" |);
                          M.read (| Value.String "address" |);
                          M.read (| __self_0 |);
                          M.read (| Value.String "key" |);
                          M.read (| __self_1 |);
                          M.read (| Value.String "had_value" |);
                          __self_2
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageWarmed",
                        "address"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageWarmed",
                        "key"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field2_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "StorageWarmed" |);
                          M.read (| Value.String "address" |);
                          M.read (| __self_0 |);
                          M.read (| Value.String "key" |);
                          __self_1
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                        "address"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                        "key"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                        "had_value"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "TransientStorageChange" |);
                          M.read (| Value.String "address" |);
                          M.read (| __self_0 |);
                          M.read (| Value.String "key" |);
                          M.read (| __self_1 |);
                          M.read (| Value.String "had_value" |);
                          __self_2
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::CodeChange",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "CodeChange" |);
                          M.read (| Value.String "address" |);
                          __self_0
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_context_journaled_state_JournalEntry.
  
  Module Impl_core_clone_Clone_for_revm_context_journaled_state_JournalEntry.
    Definition Self : Ty.t := Ty.path "revm_context::journaled_state::JournalEntry".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountWarmed",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructRecord
                        "revm_context::journaled_state::JournalEntry::AccountWarmed"
                        [
                          ("address",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bits::address::Address",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                        "address"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                        "target"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                        "was_destroyed"
                      |) in
                    let γ1_3 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                        "had_balance"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    let __self_3 := M.alloc (| γ1_3 |) in
                    M.alloc (|
                      Value.StructRecord
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed"
                        [
                          ("address",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bits::address::Address",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |));
                          ("target",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bits::address::Address",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |));
                          ("was_destroyed",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "bool",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_2 |) ]
                            |));
                          ("had_balance",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_3 |) ]
                            |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountTouched",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructRecord
                        "revm_context::journaled_state::JournalEntry::AccountTouched"
                        [
                          ("address",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bits::address::Address",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                        "from"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                        "to"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                        "balance"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      Value.StructRecord
                        "revm_context::journaled_state::JournalEntry::BalanceTransfer"
                        [
                          ("from",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bits::address::Address",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |));
                          ("to",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bits::address::Address",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |));
                          ("balance",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_2 |) ]
                            |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::NonceChange",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructRecord
                        "revm_context::journaled_state::JournalEntry::NonceChange"
                        [
                          ("address",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bits::address::Address",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountCreated",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructRecord
                        "revm_context::journaled_state::JournalEntry::AccountCreated"
                        [
                          ("address",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bits::address::Address",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageChanged",
                        "address"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageChanged",
                        "key"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageChanged",
                        "had_value"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      Value.StructRecord
                        "revm_context::journaled_state::JournalEntry::StorageChanged"
                        [
                          ("address",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bits::address::Address",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |));
                          ("key",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |));
                          ("had_value",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_2 |) ]
                            |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageWarmed",
                        "address"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageWarmed",
                        "key"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      Value.StructRecord
                        "revm_context::journaled_state::JournalEntry::StorageWarmed"
                        [
                          ("address",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bits::address::Address",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |));
                          ("key",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                        "address"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                        "key"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                        "had_value"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      Value.StructRecord
                        "revm_context::journaled_state::JournalEntry::TransientStorageChange"
                        [
                          ("address",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bits::address::Address",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |));
                          ("key",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |));
                          ("had_value",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "ruint::Uint")
                                  [
                                    Value.Integer IntegerKind.Usize 256;
                                    Value.Integer IntegerKind.Usize 4
                                  ]
                                  [],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_2 |) ]
                            |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::CodeChange",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructRecord
                        "revm_context::journaled_state::JournalEntry::CodeChange"
                        [
                          ("address",
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "alloy_primitives::bits::address::Address",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |))
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_revm_context_journaled_state_JournalEntry.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_context_journaled_state_JournalEntry.
    Definition Self : Ty.t := Ty.path "revm_context::journaled_state::JournalEntry".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_context_journaled_state_JournalEntry.
  
  Module Impl_core_cmp_PartialEq_for_revm_context_journaled_state_JournalEntry.
    Definition Self : Ty.t := Ty.path "revm_context::journaled_state::JournalEntry".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "revm_context::journaled_state::JournalEntry" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ __arg1_discr :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "revm_context::journaled_state::JournalEntry" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              LogicalOp.and (|
                BinOp.eq (| M.read (| __self_discr |), M.read (| __arg1_discr |) |),
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::AccountWarmed",
                                "address"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::AccountWarmed",
                                "address"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "alloy_primitives::bits::address::Address" ],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "alloy_primitives::bits::address::Address" ]
                                  ],
                                  "eq",
                                  []
                                |),
                                [ __self_0; __arg1_0 ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                                "address"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                                "target"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                                "was_destroyed"
                              |) in
                            let γ2_3 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                                "had_balance"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let __self_1 := M.alloc (| γ2_1 |) in
                            let __self_2 := M.alloc (| γ2_2 |) in
                            let __self_3 := M.alloc (| γ2_3 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                                "address"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                                "target"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                                "was_destroyed"
                              |) in
                            let γ2_3 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                                "had_balance"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            let __arg1_1 := M.alloc (| γ2_1 |) in
                            let __arg1_2 := M.alloc (| γ2_2 |) in
                            let __arg1_3 := M.alloc (| γ2_3 |) in
                            M.alloc (|
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "alloy_primitives::bits::address::Address" ],
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "alloy_primitives::bits::address::Address" ]
                                        ],
                                        "eq",
                                        []
                                      |),
                                      [ __self_0; __arg1_0 ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "alloy_primitives::bits::address::Address" ],
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "alloy_primitives::bits::address::Address" ]
                                          ],
                                          "eq",
                                          []
                                        |),
                                        [ __self_1; __arg1_1 ]
                                      |)))
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply (Ty.path "&") [] [ Ty.path "bool" ],
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "bool" ] ],
                                        "eq",
                                        []
                                      |),
                                      [ __self_2; __arg1_2 ]
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ]
                                      ],
                                      "eq",
                                      []
                                    |),
                                    [ __self_3; __arg1_3 ]
                                  |)))
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::AccountTouched",
                                "address"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::AccountTouched",
                                "address"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "alloy_primitives::bits::address::Address" ],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "alloy_primitives::bits::address::Address" ]
                                  ],
                                  "eq",
                                  []
                                |),
                                [ __self_0; __arg1_0 ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                                "from"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                                "to"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                                "balance"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let __self_1 := M.alloc (| γ2_1 |) in
                            let __self_2 := M.alloc (| γ2_2 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                                "from"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                                "to"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                                "balance"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            let __arg1_1 := M.alloc (| γ2_1 |) in
                            let __arg1_2 := M.alloc (| γ2_2 |) in
                            M.alloc (|
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "alloy_primitives::bits::address::Address" ],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "alloy_primitives::bits::address::Address" ]
                                      ],
                                      "eq",
                                      []
                                    |),
                                    [ __self_0; __arg1_0 ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "alloy_primitives::bits::address::Address" ],
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "alloy_primitives::bits::address::Address" ]
                                        ],
                                        "eq",
                                        []
                                      |),
                                      [ __self_1; __arg1_1 ]
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ]
                                      ],
                                      "eq",
                                      []
                                    |),
                                    [ __self_2; __arg1_2 ]
                                  |)))
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::NonceChange",
                                "address"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::NonceChange",
                                "address"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "alloy_primitives::bits::address::Address" ],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "alloy_primitives::bits::address::Address" ]
                                  ],
                                  "eq",
                                  []
                                |),
                                [ __self_0; __arg1_0 ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::AccountCreated",
                                "address"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::AccountCreated",
                                "address"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "alloy_primitives::bits::address::Address" ],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "alloy_primitives::bits::address::Address" ]
                                  ],
                                  "eq",
                                  []
                                |),
                                [ __self_0; __arg1_0 ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::StorageChanged",
                                "address"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::StorageChanged",
                                "key"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::StorageChanged",
                                "had_value"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let __self_1 := M.alloc (| γ2_1 |) in
                            let __self_2 := M.alloc (| γ2_2 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::StorageChanged",
                                "address"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::StorageChanged",
                                "key"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::StorageChanged",
                                "had_value"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            let __arg1_1 := M.alloc (| γ2_1 |) in
                            let __arg1_2 := M.alloc (| γ2_2 |) in
                            M.alloc (|
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "alloy_primitives::bits::address::Address" ],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "alloy_primitives::bits::address::Address" ]
                                      ],
                                      "eq",
                                      []
                                    |),
                                    [ __self_0; __arg1_0 ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                []
                                            ]
                                        ],
                                        "eq",
                                        []
                                      |),
                                      [ __self_1; __arg1_1 ]
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ]
                                      ],
                                      "eq",
                                      []
                                    |),
                                    [ __self_2; __arg1_2 ]
                                  |)))
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::StorageWarmed",
                                "address"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::StorageWarmed",
                                "key"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let __self_1 := M.alloc (| γ2_1 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::StorageWarmed",
                                "address"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::StorageWarmed",
                                "key"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            let __arg1_1 := M.alloc (| γ2_1 |) in
                            M.alloc (|
                              LogicalOp.and (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "alloy_primitives::bits::address::Address" ],
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "alloy_primitives::bits::address::Address" ]
                                    ],
                                    "eq",
                                    []
                                  |),
                                  [ __self_0; __arg1_0 ]
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ]
                                      ],
                                      "eq",
                                      []
                                    |),
                                    [ __self_1; __arg1_1 ]
                                  |)))
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                                "address"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                                "key"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                                "had_value"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let __self_1 := M.alloc (| γ2_1 |) in
                            let __self_2 := M.alloc (| γ2_2 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                                "address"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                                "key"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                                "had_value"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            let __arg1_1 := M.alloc (| γ2_1 |) in
                            let __arg1_2 := M.alloc (| γ2_2 |) in
                            M.alloc (|
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "alloy_primitives::bits::address::Address" ],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "alloy_primitives::bits::address::Address" ]
                                      ],
                                      "eq",
                                      []
                                    |),
                                    [ __self_0; __arg1_0 ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "ruint::Uint")
                                                [
                                                  Value.Integer IntegerKind.Usize 256;
                                                  Value.Integer IntegerKind.Usize 4
                                                ]
                                                []
                                            ]
                                        ],
                                        "eq",
                                        []
                                      |),
                                      [ __self_1; __arg1_1 ]
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "ruint::Uint")
                                            [
                                              Value.Integer IntegerKind.Usize 256;
                                              Value.Integer IntegerKind.Usize 4
                                            ]
                                            []
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "ruint::Uint")
                                              [
                                                Value.Integer IntegerKind.Usize 256;
                                                Value.Integer IntegerKind.Usize 4
                                              ]
                                              []
                                          ]
                                      ],
                                      "eq",
                                      []
                                    |),
                                    [ __self_2; __arg1_2 ]
                                  |)))
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "revm_context::journaled_state::JournalEntry::CodeChange",
                                "address"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "revm_context::journaled_state::JournalEntry::CodeChange",
                                "address"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "alloy_primitives::bits::address::Address" ],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "alloy_primitives::bits::address::Address" ]
                                  ],
                                  "eq",
                                  []
                                |),
                                [ __self_0; __arg1_0 ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::intrinsics::unreachable", [] |),
                                  []
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)))
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_revm_context_journaled_state_JournalEntry.
  
  Module Impl_core_cmp_Eq_for_revm_context_journaled_state_JournalEntry.
    Definition Self : Ty.t := Ty.path "revm_context::journaled_state::JournalEntry".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Value.DeclaredButUndefined,
                              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_context_journaled_state_JournalEntry.
  
  Module Impl_core_hash_Hash_for_revm_context_journaled_state_JournalEntry.
    Definition Self : Ty.t := Ty.path "revm_context::journaled_state::JournalEntry".
    
    (* Hash *)
    Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_discr :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "revm_context::journaled_state::JournalEntry" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let~ _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::hash::Hash", Ty.path "isize", [], "hash", [ __H ] |),
                  [ __self_discr; M.read (| state |) ]
                |)
              |) in
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountWarmed",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.path "alloy_primitives::bits::address::Address",
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_0 |); M.read (| state |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                        "address"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                        "target"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                        "was_destroyed"
                      |) in
                    let γ1_3 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountDestroyed",
                        "had_balance"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    let __self_3 := M.alloc (| γ1_3 |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "alloy_primitives::bits::address::Address",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "alloy_primitives::bits::address::Address",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_1 |); M.read (| state |) ]
                        |)
                      |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "bool",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_2 |); M.read (| state |) ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [],
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_3 |); M.read (| state |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountTouched",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.path "alloy_primitives::bits::address::Address",
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_0 |); M.read (| state |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                        "from"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                        "to"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::BalanceTransfer",
                        "balance"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "alloy_primitives::bits::address::Address",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "alloy_primitives::bits::address::Address",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_1 |); M.read (| state |) ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [],
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_2 |); M.read (| state |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::NonceChange",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.path "alloy_primitives::bits::address::Address",
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_0 |); M.read (| state |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::AccountCreated",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.path "alloy_primitives::bits::address::Address",
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_0 |); M.read (| state |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageChanged",
                        "address"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageChanged",
                        "key"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageChanged",
                        "had_value"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "alloy_primitives::bits::address::Address",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_1 |); M.read (| state |) ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [],
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_2 |); M.read (| state |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageWarmed",
                        "address"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::StorageWarmed",
                        "key"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "alloy_primitives::bits::address::Address",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [],
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_1 |); M.read (| state |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                        "address"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                        "key"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::TransientStorageChange",
                        "had_value"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "alloy_primitives::bits::address::Address",
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_0 |); M.read (| state |) ]
                        |)
                      |) in
                    let~ _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              [],
                            [],
                            "hash",
                            [ __H ]
                          |),
                          [ M.read (| __self_1 |); M.read (| state |) ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            [],
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_2 |); M.read (| state |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "revm_context::journaled_state::JournalEntry::CodeChange",
                        "address"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::hash::Hash",
                          Ty.path "alloy_primitives::bits::address::Address",
                          [],
                          "hash",
                          [ __H ]
                        |),
                        [ M.read (| __self_0 |); M.read (| state |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_revm_context_journaled_state_JournalEntry.
End journaled_state.
