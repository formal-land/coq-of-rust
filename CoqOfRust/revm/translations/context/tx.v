(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module tx.
  (* StructRecord
    {
      name := "TxEnv";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("tx_type",
            Ty.path "revm_context_interface::transaction::transaction_type::TransactionType");
          ("caller", Ty.path "alloy_primitives::bits::address::Address");
          ("gas_limit", Ty.path "u64");
          ("gas_price",
            Ty.apply
              (Ty.path "ruint::Uint")
              [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
              []);
          ("transact_to", Ty.path "alloy_primitives::common::TxKind");
          ("value",
            Ty.apply
              (Ty.path "ruint::Uint")
              [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
              []);
          ("data", Ty.path "alloy_primitives::bytes_::Bytes");
          ("nonce", Ty.path "u64");
          ("chain_id", Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ]);
          ("access_list", Ty.path "alloy_eip2930::AccessList");
          ("gas_priority_fee",
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [
                Ty.apply
                  (Ty.path "ruint::Uint")
                  [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                  []
              ]);
          ("blob_hashes",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply
                  (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  [];
                Ty.path "alloc::alloc::Global"
              ]);
          ("max_fee_per_blob_gas",
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [
                Ty.apply
                  (Ty.path "ruint::Uint")
                  [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                  []
              ]);
          ("authorization_list",
            Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList")
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "revm_context::tx::TxEnv"
            [
              ("tx_type",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path
                      "revm_context_interface::transaction::transaction_type::TransactionType",
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "tx_type"
                    |)
                  ]
                |));
              ("caller",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "alloy_primitives::bits::address::Address",
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "caller"
                    |)
                  ]
                |));
              ("gas_limit",
                M.call_closure (|
                  M.get_trait_method (| "core::clone::Clone", Ty.path "u64", [], "clone", [] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "gas_limit"
                    |)
                  ]
                |));
              ("gas_price",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "gas_price"
                    |)
                  ]
                |));
              ("transact_to",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "alloy_primitives::common::TxKind",
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "transact_to"
                    |)
                  ]
                |));
              ("value",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "ruint::Uint")
                      [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                      [],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "value"
                    |)
                  ]
                |));
              ("data",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "alloy_primitives::bytes_::Bytes",
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "data"
                    |)
                  ]
                |));
              ("nonce",
                M.call_closure (|
                  M.get_trait_method (| "core::clone::Clone", Ty.path "u64", [], "clone", [] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "nonce"
                    |)
                  ]
                |));
              ("chain_id",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "chain_id"
                    |)
                  ]
                |));
              ("access_list",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "alloy_eip2930::AccessList",
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "access_list"
                    |)
                  ]
                |));
              ("gas_priority_fee",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          []
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "gas_priority_fee"
                    |)
                  ]
                |));
              ("blob_hashes",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "blob_hashes"
                    |)
                  ]
                |));
              ("max_fee_per_blob_gas",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          []
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "max_fee_per_blob_gas"
                    |)
                  ]
                |));
              ("authorization_list",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList",
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "authorization_list"
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_revm_context_tx_TxEnv.
  
  Module Impl_core_fmt_Debug_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let~ names :=
              M.alloc (|
                M.alloc (|
                  Value.Array
                    [
                      M.read (| Value.String "tx_type" |);
                      M.read (| Value.String "caller" |);
                      M.read (| Value.String "gas_limit" |);
                      M.read (| Value.String "gas_price" |);
                      M.read (| Value.String "transact_to" |);
                      M.read (| Value.String "value" |);
                      M.read (| Value.String "data" |);
                      M.read (| Value.String "nonce" |);
                      M.read (| Value.String "chain_id" |);
                      M.read (| Value.String "access_list" |);
                      M.read (| Value.String "gas_priority_fee" |);
                      M.read (| Value.String "blob_hashes" |);
                      M.read (| Value.String "max_fee_per_blob_gas" |);
                      M.read (| Value.String "authorization_list" |)
                    ]
                |)
              |) in
            let~ values :=
              M.alloc (|
                M.alloc (|
                  Value.Array
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "tx_type"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "caller"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "gas_limit"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "gas_price"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "transact_to"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "value"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "data"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "nonce"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "chain_id"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "access_list"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "gas_priority_fee"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "blob_hashes"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "max_fee_per_blob_gas"
                      |);
                      M.alloc (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm_context::tx::TxEnv",
                          "authorization_list"
                        |)
                      |)
                    ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "TxEnv" |);
                  M.read (| names |);
                  M.read (| values |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_revm_context_tx_TxEnv.
  
  Module Impl_core_marker_StructuralPartialEq_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_revm_context_tx_TxEnv.
  
  Module Impl_core_cmp_PartialEq_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            LogicalOp.and (|
              LogicalOp.and (|
                LogicalOp.and (|
                  LogicalOp.and (|
                    LogicalOp.and (|
                      LogicalOp.and (|
                        LogicalOp.and (|
                          LogicalOp.and (|
                            LogicalOp.and (|
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path
                                          "revm_context_interface::transaction::transaction_type::TransactionType",
                                        [
                                          Ty.path
                                            "revm_context_interface::transaction::transaction_type::TransactionType"
                                        ],
                                        "eq",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "revm_context::tx::TxEnv",
                                          "tx_type"
                                        |);
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| other |),
                                          "revm_context::tx::TxEnv",
                                          "tx_type"
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          Ty.path "alloy_primitives::bits::address::Address",
                                          [ Ty.path "alloy_primitives::bits::address::Address" ],
                                          "eq",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "revm_context::tx::TxEnv",
                                            "caller"
                                          |);
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| other |),
                                            "revm_context::tx::TxEnv",
                                            "caller"
                                          |)
                                        ]
                                      |)))
                                  |),
                                  ltac:(M.monadic
                                    (BinOp.eq (|
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "revm_context::tx::TxEnv",
                                          "gas_limit"
                                        |)
                                      |),
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| other |),
                                          "revm_context::tx::TxEnv",
                                          "gas_limit"
                                        |)
                                      |)
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "ruint::Uint")
                                        [
                                          Value.Integer IntegerKind.Usize 256;
                                          Value.Integer IntegerKind.Usize 4
                                        ]
                                        [],
                                      [
                                        Ty.apply
                                          (Ty.path "ruint::Uint")
                                          [
                                            Value.Integer IntegerKind.Usize 256;
                                            Value.Integer IntegerKind.Usize 4
                                          ]
                                          []
                                      ],
                                      "eq",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "revm_context::tx::TxEnv",
                                        "gas_price"
                                      |);
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| other |),
                                        "revm_context::tx::TxEnv",
                                        "gas_price"
                                      |)
                                    ]
                                  |)))
                              |),
                              ltac:(M.monadic
                                (M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "alloy_primitives::common::TxKind",
                                    [ Ty.path "alloy_primitives::common::TxKind" ],
                                    "eq",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "revm_context::tx::TxEnv",
                                      "transact_to"
                                    |);
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| other |),
                                      "revm_context::tx::TxEnv",
                                      "transact_to"
                                    |)
                                  ]
                                |)))
                            |),
                            ltac:(M.monadic
                              (M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "ruint::Uint")
                                    [
                                      Value.Integer IntegerKind.Usize 256;
                                      Value.Integer IntegerKind.Usize 4
                                    ]
                                    [],
                                  [
                                    Ty.apply
                                      (Ty.path "ruint::Uint")
                                      [
                                        Value.Integer IntegerKind.Usize 256;
                                        Value.Integer IntegerKind.Usize 4
                                      ]
                                      []
                                  ],
                                  "eq",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "revm_context::tx::TxEnv",
                                    "value"
                                  |);
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| other |),
                                    "revm_context::tx::TxEnv",
                                    "value"
                                  |)
                                ]
                              |)))
                          |),
                          ltac:(M.monadic
                            (M.call_closure (|
                              M.get_trait_method (|
                                "core::cmp::PartialEq",
                                Ty.path "alloy_primitives::bytes_::Bytes",
                                [ Ty.path "alloy_primitives::bytes_::Bytes" ],
                                "eq",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "revm_context::tx::TxEnv",
                                  "data"
                                |);
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| other |),
                                  "revm_context::tx::TxEnv",
                                  "data"
                                |)
                              ]
                            |)))
                        |),
                        ltac:(M.monadic
                          (BinOp.eq (|
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "revm_context::tx::TxEnv",
                                "nonce"
                              |)
                            |),
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| other |),
                                "revm_context::tx::TxEnv",
                                "nonce"
                              |)
                            |)
                          |)))
                      |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::PartialEq",
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ] ],
                            "eq",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "revm_context::tx::TxEnv",
                              "chain_id"
                            |);
                            M.SubPointer.get_struct_record_field (|
                              M.read (| other |),
                              "revm_context::tx::TxEnv",
                              "chain_id"
                            |)
                          ]
                        |)))
                    |),
                    ltac:(M.monadic
                      (M.call_closure (|
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "alloy_eip2930::AccessList",
                          [ Ty.path "alloy_eip2930::AccessList" ],
                          "eq",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "revm_context::tx::TxEnv",
                            "access_list"
                          |);
                          M.SubPointer.get_struct_record_field (|
                            M.read (| other |),
                            "revm_context::tx::TxEnv",
                            "access_list"
                          |)
                        ]
                      |)))
                  |),
                  ltac:(M.monadic
                    (M.call_closure (|
                      M.get_trait_method (|
                        "core::cmp::PartialEq",
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "ruint::Uint")
                              [
                                Value.Integer IntegerKind.Usize 256;
                                Value.Integer IntegerKind.Usize 4
                              ]
                              []
                          ],
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "ruint::Uint")
                                [
                                  Value.Integer IntegerKind.Usize 256;
                                  Value.Integer IntegerKind.Usize 4
                                ]
                                []
                            ]
                        ],
                        "eq",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "revm_context::tx::TxEnv",
                          "gas_priority_fee"
                        |);
                        M.SubPointer.get_struct_record_field (|
                          M.read (| other |),
                          "revm_context::tx::TxEnv",
                          "gas_priority_fee"
                        |)
                      ]
                    |)))
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                      "eq",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "blob_hashes"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "revm_context::tx::TxEnv",
                        "blob_hashes"
                      |)
                    ]
                  |)))
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          []
                      ],
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "ruint::Uint")
                            [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4
                            ]
                            []
                        ]
                    ],
                    "eq",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "max_fee_per_blob_gas"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "revm_context::tx::TxEnv",
                      "max_fee_per_blob_gas"
                    |)
                  ]
                |)))
            |),
            ltac:(M.monadic
              (M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList",
                  [ Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList" ],
                  "eq",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "revm_context::tx::TxEnv",
                    "authorization_list"
                  |);
                  M.SubPointer.get_struct_record_field (|
                    M.read (| other |),
                    "revm_context::tx::TxEnv",
                    "authorization_list"
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_revm_context_tx_TxEnv.
  
  Module Impl_core_cmp_Eq_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Value.DeclaredButUndefined,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Value.DeclaredButUndefined,
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Value.DeclaredButUndefined,
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Value.DeclaredButUndefined,
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Value.DeclaredButUndefined,
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Value.DeclaredButUndefined,
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.match_operator (|
                                                                              Value.DeclaredButUndefined,
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.match_operator (|
                                                                                      Value.DeclaredButUndefined,
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (M.match_operator (|
                                                                                              Value.DeclaredButUndefined,
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (M.match_operator (|
                                                                                                      Value.DeclaredButUndefined,
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.alloc (|
                                                                                                              Value.Tuple
                                                                                                                []
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)))
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)))
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_revm_context_tx_TxEnv.
  
  Module Impl_core_default_Default_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*
        fn default() -> Self {
            Self {
                tx_type: TransactionType::Legacy,
                caller: Address::default(),
                gas_limit: 30_000_000,
                gas_price: U256::ZERO,
                transact_to: TxKind::Call(Address::default()),
                value: U256::ZERO,
                data: Bytes::default(),
                nonce: 0,
                chain_id: Some(1), // Mainnet chain ID is 1
                access_list: AccessList::default(),
                gas_priority_fee: Some(U256::ZERO),
                blob_hashes: Vec::new(),
                max_fee_per_blob_gas: Some(U256::ZERO),
                authorization_list: AuthorizationList::default(),
            }
        }
    *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "revm_context::tx::TxEnv"
            [
              ("tx_type",
                Value.StructTuple
                  "revm_context_interface::transaction::transaction_type::TransactionType::Legacy"
                  []);
              ("caller",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "alloy_primitives::bits::address::Address",
                    [],
                    "default",
                    []
                  |),
                  []
                |));
              ("gas_limit", Value.Integer IntegerKind.U64 30000000);
              ("gas_price", M.read (| M.get_constant (| "ruint::ZERO" |) |));
              ("transact_to",
                Value.StructTuple
                  "alloy_primitives::common::TxKind::Call"
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.path "alloy_primitives::bits::address::Address",
                        [],
                        "default",
                        []
                      |),
                      []
                    |)
                  ]);
              ("value", M.read (| M.get_constant (| "ruint::ZERO" |) |));
              ("data",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "alloy_primitives::bytes_::Bytes",
                    [],
                    "default",
                    []
                  |),
                  []
                |));
              ("nonce", Value.Integer IntegerKind.U64 0);
              ("chain_id",
                Value.StructTuple "core::option::Option::Some" [ Value.Integer IntegerKind.U64 1 ]);
              ("access_list",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "alloy_eip2930::AccessList",
                    [],
                    "default",
                    []
                  |),
                  []
                |));
              ("gas_priority_fee",
                Value.StructTuple
                  "core::option::Option::Some"
                  [ M.read (| M.get_constant (| "ruint::ZERO" |) |) ]);
              ("blob_hashes",
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    []
                  |),
                  []
                |));
              ("max_fee_per_blob_gas",
                Value.StructTuple
                  "core::option::Option::Some"
                  [ M.read (| M.get_constant (| "ruint::ZERO" |) |) ]);
              ("authorization_list",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList",
                    [],
                    "default",
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_revm_context_tx_TxEnv.
  
  Module Impl_revm_context_interface_transaction_common_CommonTxFields_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*
        fn caller(&self) -> Address {
            self.caller
        }
    *)
    Definition caller (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::tx::TxEnv",
              "caller"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn gas_limit(&self) -> u64 {
            self.gas_limit
        }
    *)
    Definition gas_limit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::tx::TxEnv",
              "gas_limit"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn value(&self) -> U256 {
            self.value
        }
    *)
    Definition value (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::tx::TxEnv",
              "value"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn input(&self) -> &Bytes {
            &self.data
        }
    *)
    Definition input (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.SubPointer.get_struct_record_field (|
            M.read (| self |),
            "revm_context::tx::TxEnv",
            "data"
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn nonce(&self) -> u64 {
            self.nonce
        }
    *)
    Definition nonce (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::tx::TxEnv",
              "nonce"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "revm_context_interface::transaction::common::CommonTxFields"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("caller", InstanceField.Method caller);
          ("gas_limit", InstanceField.Method gas_limit);
          ("value", InstanceField.Method value);
          ("input", InstanceField.Method input);
          ("nonce", InstanceField.Method nonce)
        ].
  End Impl_revm_context_interface_transaction_common_CommonTxFields_for_revm_context_tx_TxEnv.
  
  Module Impl_revm_context_interface_transaction_eip1559_Eip1559CommonTxFields_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*     type AccessList = AccessList; *)
    Definition _AccessList : Ty.t := Ty.path "alloy_eip2930::AccessList".
    
    (*
        fn chain_id(&self) -> u64 {
            self.chain_id.unwrap_or_default()
        }
    *)
    Definition chain_id (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
              "unwrap_or_default",
              []
            |),
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::tx::TxEnv",
                  "chain_id"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn max_fee_per_gas(&self) -> u128 {
            self.gas_price.to()
        }
    *)
    Definition max_fee_per_gas (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "ruint::Uint")
                [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                [],
              "to",
              [ Ty.path "u128" ]
            |),
            [
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "revm_context::tx::TxEnv",
                "gas_price"
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn max_priority_fee_per_gas(&self) -> u128 {
            self.gas_priority_fee.unwrap_or_default().to()
        }
    *)
    Definition max_priority_fee_per_gas (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "ruint::Uint")
                [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                [],
              "to",
              [ Ty.path "u128" ]
            |),
            [
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          []
                      ],
                    "unwrap_or_default",
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "gas_priority_fee"
                      |)
                    |)
                  ]
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn access_list(&self) -> &Self::AccessList {
            &self.access_list
        }
    *)
    Definition access_list (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.SubPointer.get_struct_record_field (|
            M.read (| self |),
            "revm_context::tx::TxEnv",
            "access_list"
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "revm_context_interface::transaction::eip1559::Eip1559CommonTxFields"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("AccessList", InstanceField.Ty _AccessList);
          ("chain_id", InstanceField.Method chain_id);
          ("max_fee_per_gas", InstanceField.Method max_fee_per_gas);
          ("max_priority_fee_per_gas", InstanceField.Method max_priority_fee_per_gas);
          ("access_list", InstanceField.Method access_list)
        ].
  End Impl_revm_context_interface_transaction_eip1559_Eip1559CommonTxFields_for_revm_context_tx_TxEnv.
  
  Module Impl_revm_context_interface_transaction_legacy_LegacyTx_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*
        fn kind(&self) -> TxKind {
            self.transact_to
        }
    *)
    Definition kind (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::tx::TxEnv",
              "transact_to"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn chain_id(&self) -> Option<u64> {
            self.chain_id
        }
    *)
    Definition chain_id (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::tx::TxEnv",
              "chain_id"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn gas_price(&self) -> u128 {
            self.gas_price.try_into().unwrap_or(u128::MAX)
        }
    *)
    Definition gas_price (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.path "u128";
                  Ty.apply (Ty.path "ruint::from::FromUintError") [] [ Ty.path "u128" ]
                ],
              "unwrap_or",
              []
            |),
            [
              M.call_closure (|
                M.get_trait_method (|
                  "core::convert::TryInto",
                  Ty.apply
                    (Ty.path "ruint::Uint")
                    [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                    [],
                  [ Ty.path "u128" ],
                  "try_into",
                  []
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "revm_context::tx::TxEnv",
                      "gas_price"
                    |)
                  |)
                ]
              |);
              M.read (| M.get_constant (| "core::num::MAX" |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "revm_context_interface::transaction::legacy::LegacyTx"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("kind", InstanceField.Method kind);
          ("chain_id", InstanceField.Method chain_id);
          ("gas_price", InstanceField.Method gas_price)
        ].
  End Impl_revm_context_interface_transaction_legacy_LegacyTx_for_revm_context_tx_TxEnv.
  
  Module Impl_revm_context_interface_transaction_eip2930_Eip2930Tx_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*     type AccessList = AccessList; *)
    Definition _AccessList : Ty.t := Ty.path "alloy_eip2930::AccessList".
    
    (*
        fn access_list(&self) -> &Self::AccessList {
            &self.access_list
        }
    *)
    Definition access_list (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.SubPointer.get_struct_record_field (|
            M.read (| self |),
            "revm_context::tx::TxEnv",
            "access_list"
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn chain_id(&self) -> u64 {
            self.chain_id.unwrap_or_default()
        }
    *)
    Definition chain_id (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
              "unwrap_or_default",
              []
            |),
            [
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "revm_context::tx::TxEnv",
                  "chain_id"
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn gas_price(&self) -> u128 {
            self.gas_price.to()
        }
    *)
    Definition gas_price (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "ruint::Uint")
                [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                [],
              "to",
              [ Ty.path "u128" ]
            |),
            [
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "revm_context::tx::TxEnv",
                "gas_price"
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn kind(&self) -> TxKind {
            self.transact_to
        }
    *)
    Definition kind (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::tx::TxEnv",
              "transact_to"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "revm_context_interface::transaction::eip2930::Eip2930Tx"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("AccessList", InstanceField.Ty _AccessList);
          ("access_list", InstanceField.Method access_list);
          ("chain_id", InstanceField.Method chain_id);
          ("gas_price", InstanceField.Method gas_price);
          ("kind", InstanceField.Method kind)
        ].
  End Impl_revm_context_interface_transaction_eip2930_Eip2930Tx_for_revm_context_tx_TxEnv.
  
  Module Impl_revm_context_interface_transaction_eip1559_Eip1559Tx_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*
        fn kind(&self) -> TxKind {
            self.transact_to
        }
    *)
    Definition kind (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::tx::TxEnv",
              "transact_to"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "revm_context_interface::transaction::eip1559::Eip1559Tx"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("kind", InstanceField.Method kind) ].
  End Impl_revm_context_interface_transaction_eip1559_Eip1559Tx_for_revm_context_tx_TxEnv.
  
  Module Impl_revm_context_interface_transaction_eip4844_Eip4844Tx_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*
        fn destination(&self) -> Address {
            match self.transact_to {
                TxKind::Call(addr) => addr,
                TxKind::Create => panic!("Create transaction are not allowed in Eip4844"),
            }
        }
    *)
    Definition destination (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "revm_context::tx::TxEnv",
                "transact_to"
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "alloy_primitives::common::TxKind::Call",
                        0
                      |) in
                    let addr := M.copy (| γ0_0 |) in
                    addr));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "alloy_primitives::common::TxKind::Create" |) in
                    M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          M.get_function (| "core::panicking::panic_fmt", [] |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                []
                              |),
                              [
                                M.alloc (|
                                  Value.Array
                                    [
                                      M.read (|
                                        Value.String "Create transaction are not allowed in Eip4844"
                                      |)
                                    ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn blob_versioned_hashes(&self) -> &[B256] {
            &self.blob_hashes
        }
    *)
    Definition blob_versioned_hashes (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_trait_method (|
              "core::ops::deref::Deref",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "alloy_primitives::bits::fixed::FixedBytes")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [];
                  Ty.path "alloc::alloc::Global"
                ],
              [],
              "deref",
              []
            |),
            [
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "revm_context::tx::TxEnv",
                "blob_hashes"
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn max_fee_per_blob_gas(&self) -> u128 {
            self.max_fee_per_blob_gas.unwrap_or_default().to()
        }
    *)
    Definition max_fee_per_blob_gas (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "ruint::Uint")
                [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                [],
              "to",
              [ Ty.path "u128" ]
            |),
            [
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "ruint::Uint")
                          [ Value.Integer IntegerKind.Usize 256; Value.Integer IntegerKind.Usize 4 ]
                          []
                      ],
                    "unwrap_or_default",
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "revm_context::tx::TxEnv",
                        "max_fee_per_blob_gas"
                      |)
                    |)
                  ]
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "revm_context_interface::transaction::eip4844::Eip4844Tx"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("destination", InstanceField.Method destination);
          ("blob_versioned_hashes", InstanceField.Method blob_versioned_hashes);
          ("max_fee_per_blob_gas", InstanceField.Method max_fee_per_blob_gas)
        ].
  End Impl_revm_context_interface_transaction_eip4844_Eip4844Tx_for_revm_context_tx_TxEnv.
  
  Module Impl_revm_context_interface_transaction_eip7702_Eip7702Tx_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*
        fn destination(&self) -> Address {
            match self.transact_to {
                TxKind::Call(addr) => addr,
                TxKind::Create => panic!("Create transaction are not allowed in Eip7702"),
            }
        }
    *)
    Definition destination (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "revm_context::tx::TxEnv",
                "transact_to"
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "alloy_primitives::common::TxKind::Call",
                        0
                      |) in
                    let addr := M.copy (| γ0_0 |) in
                    addr));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.is_struct_tuple (| γ, "alloy_primitives::common::TxKind::Create" |) in
                    M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          M.get_function (| "core::panicking::panic_fmt", [] |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                []
                              |),
                              [
                                M.alloc (|
                                  Value.Array
                                    [
                                      M.read (|
                                        Value.String "Create transaction are not allowed in Eip7702"
                                      |)
                                    ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn authorization_list_len(&self) -> usize {
            self.authorization_list.len()
        }
    *)
    Definition authorization_list_len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList",
              "len",
              []
            |),
            [
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "revm_context::tx::TxEnv",
                "authorization_list"
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn authorization_list_iter(&self) -> impl Iterator<Item = impl Authorization> {
            self.authorization_list.recovered_iter()
        }
    *)
    Definition authorization_list_iter (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "revm_specification::eip7702::authorization_list::AuthorizationList",
              "recovered_iter",
              []
            |),
            [
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "revm_context::tx::TxEnv",
                "authorization_list"
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "revm_context_interface::transaction::eip7702::Eip7702Tx"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("destination", InstanceField.Method destination);
          ("authorization_list_len", InstanceField.Method authorization_list_len);
          ("authorization_list_iter", InstanceField.Method authorization_list_iter)
        ].
  End Impl_revm_context_interface_transaction_eip7702_Eip7702Tx_for_revm_context_tx_TxEnv.
  
  Module Impl_revm_context_interface_transaction_Transaction_for_revm_context_tx_TxEnv.
    Definition Self : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*     type TransactionError = InvalidTransaction; *)
    Definition _TransactionError : Ty.t :=
      Ty.path "revm_context_interface::result::InvalidTransaction".
    
    (*     type TransactionType = TransactionType; *)
    Definition _TransactionType : Ty.t :=
      Ty.path "revm_context_interface::transaction::transaction_type::TransactionType".
    
    (*     type AccessList = <Self::Eip2930 as Eip2930Tx>::AccessList; *)
    Definition _AccessList : Ty.t := Ty.associated.
    
    (*     type Legacy = Self; *)
    Definition _Legacy : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*     type Eip1559 = Self; *)
    Definition _Eip1559 : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*     type Eip2930 = Self; *)
    Definition _Eip2930 : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*     type Eip4844 = Self; *)
    Definition _Eip4844 : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*     type Eip7702 = Self; *)
    Definition _Eip7702 : Ty.t := Ty.path "revm_context::tx::TxEnv".
    
    (*
        fn tx_type(&self) -> Self::TransactionType {
            self.tx_type
        }
    *)
    Definition tx_type (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "revm_context::tx::TxEnv",
              "tx_type"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn legacy(&self) -> &Self::Legacy {
            self
        }
    *)
    Definition legacy (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| self |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn eip2930(&self) -> &Self::Eip2930 {
            self
        }
    *)
    Definition eip2930 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| self |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn eip1559(&self) -> &Self::Eip1559 {
            self
        }
    *)
    Definition eip1559 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| self |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn eip4844(&self) -> &Self::Eip4844 {
            self
        }
    *)
    Definition eip4844 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| self |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn eip7702(&self) -> &Self::Eip7702 {
            self
        }
    *)
    Definition eip7702 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| self |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "revm_context_interface::transaction::Transaction"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("TransactionError", InstanceField.Ty _TransactionError);
          ("TransactionType", InstanceField.Ty _TransactionType);
          ("AccessList", InstanceField.Ty _AccessList);
          ("Legacy", InstanceField.Ty _Legacy);
          ("Eip1559", InstanceField.Ty _Eip1559);
          ("Eip2930", InstanceField.Ty _Eip2930);
          ("Eip4844", InstanceField.Ty _Eip4844);
          ("Eip7702", InstanceField.Ty _Eip7702);
          ("tx_type", InstanceField.Method tx_type);
          ("legacy", InstanceField.Method legacy);
          ("eip2930", InstanceField.Method eip2930);
          ("eip1559", InstanceField.Method eip1559);
          ("eip4844", InstanceField.Method eip4844);
          ("eip7702", InstanceField.Method eip7702)
        ].
  End Impl_revm_context_interface_transaction_Transaction_for_revm_context_tx_TxEnv.
End tx.
