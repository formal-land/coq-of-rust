(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module add.
  Module Impl_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        pub fn abs_diff(self, other: Self) -> Self {
            if self < other {
                other.wrapping_sub(self)
            } else {
                self.wrapping_sub(other)
            }
        }
    *)
    Definition abs_diff
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                              [],
                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                              "lt",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, self |);
                              M.borrow (| Pointer.Kind.Ref, other |)
                            ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          "wrapping_sub",
                          [],
                          []
                        |),
                        [ M.read (| other |); M.read (| self |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          "wrapping_sub",
                          [],
                          []
                        |),
                        [ M.read (| self |); M.read (| other |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_abs_diff :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "abs_diff" (abs_diff BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque abs_diff.
    
    (*
        pub const fn checked_add(self, rhs: Self) -> Option<Self> {
            match self.overflowing_add(rhs) {
                (value, false) => Some(value),
                _ => None,
            }
        }
    *)
    Definition checked_add
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_add",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let value := M.copy (| γ0_0 |) in
                    let _ := is_constant_or_break_match (| M.read (| γ0_1 |), Value.Bool false |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                        [ M.read (| value |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::option::Option::None"
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                        []
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_checked_add :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "checked_add" (checked_add BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque checked_add.
    
    (*
        pub const fn checked_neg(self) -> Option<Self> {
            match self.overflowing_neg() {
                (value, false) => Some(value),
                _ => None,
            }
        }
    *)
    Definition checked_neg
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_neg",
                    [],
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let value := M.copy (| γ0_0 |) in
                    let _ := is_constant_or_break_match (| M.read (| γ0_1 |), Value.Bool false |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                        [ M.read (| value |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::option::Option::None"
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                        []
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_checked_neg :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "checked_neg" (checked_neg BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque checked_neg.
    
    (*
        pub const fn checked_sub(self, rhs: Self) -> Option<Self> {
            match self.overflowing_sub(rhs) {
                (value, false) => Some(value),
                _ => None,
            }
        }
    *)
    Definition checked_sub
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_sub",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let value := M.copy (| γ0_0 |) in
                    let _ := is_constant_or_break_match (| M.read (| γ0_1 |), Value.Bool false |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                        [ M.read (| value |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::option::Option::None"
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                        []
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_checked_sub :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "checked_sub" (checked_sub BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque checked_sub.
    
    (*
        pub const fn overflowing_add(mut self, rhs: Self) -> (Self, bool) {
            // TODO: Replace with `u64::carrying_add` once stable.
            #[inline]
            const fn u64_carrying_add(lhs: u64, rhs: u64, carry: bool) -> (u64, bool) {
                let (a, b) = lhs.overflowing_add(rhs);
                let (c, d) = a.overflowing_add(carry as u64);
                (c, b || d)
            }
    
            if BITS == 0 {
                return (Self::ZERO, false);
            }
            let mut carry = false;
            let mut i = 0;
            while i < LIMBS {
                (self.limbs[i], carry) = u64_carrying_add(self.limbs[i], rhs.limbs[i], carry);
                i += 1;
            }
            let overflow = carry || self.limbs[LIMBS - 1] > Self::MASK;
            self.limbs[LIMBS - 1] &= Self::MASK;
            (self, overflow)
        }
    *)
    Definition overflowing_add
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.catch_return
            (Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [ BITS; Value.Integer IntegerKind.Usize 0 ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.Tuple
                                    [
                                      M.read (|
                                        get_associated_constant (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "ZERO",
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                        |)
                                      |);
                                      Value.Bool false
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ carry : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
                  M.alloc (| Value.Bool false |) in
                let~ i : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                  M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.loop (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.lt,
                                      [ M.read (| i |); LIMBS ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [ Ty.path "u64"; Ty.path "bool" ],
                                      M.get_associated_function (|
                                        Self,
                                        "u64_carrying_add.overflowing_add",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              self,
                                              "ruint::Uint",
                                              "limbs"
                                            |),
                                            M.read (| i |)
                                          |)
                                        |);
                                        M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              rhs,
                                              "ruint::Uint",
                                              "limbs"
                                            |),
                                            M.read (| i |)
                                          |)
                                        |);
                                        M.read (| carry |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let lhs := M.copy (| γ0_0 |) in
                                        let lhs := M.copy (| γ0_1 |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.write (|
                                              M.SubPointer.get_array_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  self,
                                                  "ruint::Uint",
                                                  "limbs"
                                                |),
                                                M.read (| i |)
                                              |),
                                              M.read (| lhs |)
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (| M.write (| carry, M.read (| lhs |) |) |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  let β := i in
                                  M.write (|
                                    β,
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                    |)
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                let~ overflow : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
                  M.alloc (|
                    LogicalOp.or (|
                      M.read (| carry |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.path "bool",
                          BinOp.gt,
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "ruint::Uint",
                                  "limbs"
                                |),
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.sub,
                                  [ LIMBS; Value.Integer IntegerKind.Usize 1 ]
                                |)
                              |)
                            |);
                            M.read (|
                              get_associated_constant (|
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                "MASK",
                                Ty.path "u64"
                              |)
                            |)
                          ]
                        |)))
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (|
                    let β :=
                      M.SubPointer.get_array_field (|
                        M.SubPointer.get_struct_record_field (| self, "ruint::Uint", "limbs" |),
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [ LIMBS; Value.Integer IntegerKind.Usize 1 ]
                        |)
                      |) in
                    M.write (|
                      β,
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.bit_and,
                        [
                          M.read (| β |);
                          M.read (|
                            get_associated_constant (|
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                              "MASK",
                              Ty.path "u64"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |) in
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| overflow |) ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_overflowing_add :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "overflowing_add" (overflowing_add BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque overflowing_add.
    
    (*
        pub const fn overflowing_neg(self) -> (Self, bool) {
            Self::ZERO.overflowing_sub(self)
        }
    *)
    Definition overflowing_neg
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "overflowing_sub",
              [],
              []
            |),
            [
              M.read (|
                get_associated_constant (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "ZERO",
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                |)
              |);
              M.read (| self |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_overflowing_neg :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "overflowing_neg" (overflowing_neg BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque overflowing_neg.
    
    (*
        pub const fn overflowing_sub(mut self, rhs: Self) -> (Self, bool) {
            // TODO: Replace with `u64::borrowing_sub` once stable.
            #[inline]
            const fn u64_borrowing_sub(lhs: u64, rhs: u64, borrow: bool) -> (u64, bool) {
                let (a, b) = lhs.overflowing_sub(rhs);
                let (c, d) = a.overflowing_sub(borrow as u64);
                (c, b || d)
            }
    
            if BITS == 0 {
                return (Self::ZERO, false);
            }
            let mut borrow = false;
            let mut i = 0;
            while i < LIMBS {
                (self.limbs[i], borrow) = u64_borrowing_sub(self.limbs[i], rhs.limbs[i], borrow);
                i += 1;
            }
            let overflow = borrow || self.limbs[LIMBS - 1] > Self::MASK;
            self.limbs[LIMBS - 1] &= Self::MASK;
            (self, overflow)
        }
    *)
    Definition overflowing_sub
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.catch_return
            (Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [ BITS; Value.Integer IntegerKind.Usize 0 ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.Tuple
                                    [
                                      M.read (|
                                        get_associated_constant (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "ZERO",
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                        |)
                                      |);
                                      Value.Bool false
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ borrow : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
                  M.alloc (| Value.Bool false |) in
                let~ i : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                  M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.loop (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.lt,
                                      [ M.read (| i |); LIMBS ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.tuple [ Ty.path "u64"; Ty.path "bool" ],
                                      M.get_associated_function (|
                                        Self,
                                        "u64_borrowing_sub.overflowing_sub",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              self,
                                              "ruint::Uint",
                                              "limbs"
                                            |),
                                            M.read (| i |)
                                          |)
                                        |);
                                        M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              rhs,
                                              "ruint::Uint",
                                              "limbs"
                                            |),
                                            M.read (| i |)
                                          |)
                                        |);
                                        M.read (| borrow |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let lhs := M.copy (| γ0_0 |) in
                                        let lhs := M.copy (| γ0_1 |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.write (|
                                              M.SubPointer.get_array_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  self,
                                                  "ruint::Uint",
                                                  "limbs"
                                                |),
                                                M.read (| i |)
                                              |),
                                              M.read (| lhs |)
                                            |)
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (| M.write (| borrow, M.read (| lhs |) |) |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  let β := i in
                                  M.write (|
                                    β,
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                    |)
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                let~ overflow : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
                  M.alloc (|
                    LogicalOp.or (|
                      M.read (| borrow |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.path "bool",
                          BinOp.gt,
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "ruint::Uint",
                                  "limbs"
                                |),
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.sub,
                                  [ LIMBS; Value.Integer IntegerKind.Usize 1 ]
                                |)
                              |)
                            |);
                            M.read (|
                              get_associated_constant (|
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                "MASK",
                                Ty.path "u64"
                              |)
                            |)
                          ]
                        |)))
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (|
                    let β :=
                      M.SubPointer.get_array_field (|
                        M.SubPointer.get_struct_record_field (| self, "ruint::Uint", "limbs" |),
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [ LIMBS; Value.Integer IntegerKind.Usize 1 ]
                        |)
                      |) in
                    M.write (|
                      β,
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.bit_and,
                        [
                          M.read (| β |);
                          M.read (|
                            get_associated_constant (|
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                              "MASK",
                              Ty.path "u64"
                            |)
                          |)
                        ]
                      |)
                    |)
                  |) in
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| overflow |) ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_overflowing_sub :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "overflowing_sub" (overflowing_sub BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque overflowing_sub.
    
    (*
        pub const fn saturating_add(self, rhs: Self) -> Self {
            match self.overflowing_add(rhs) {
                (value, false) => value,
                _ => Self::MAX,
            }
        }
    *)
    Definition saturating_add
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_add",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let value := M.copy (| γ0_0 |) in
                    let _ := is_constant_or_break_match (| M.read (| γ0_1 |), Value.Bool false |) in
                    value));
                fun γ =>
                  ltac:(M.monadic
                    (get_associated_constant (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      "MAX",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_saturating_add :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "saturating_add" (saturating_add BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque saturating_add.
    
    (*
        pub const fn saturating_sub(self, rhs: Self) -> Self {
            match self.overflowing_sub(rhs) {
                (value, false) => value,
                _ => Self::ZERO,
            }
        }
    *)
    Definition saturating_sub
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_sub",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let value := M.copy (| γ0_0 |) in
                    let _ := is_constant_or_break_match (| M.read (| γ0_1 |), Value.Bool false |) in
                    value));
                fun γ =>
                  ltac:(M.monadic
                    (get_associated_constant (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      "ZERO",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_saturating_sub :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "saturating_sub" (saturating_sub BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque saturating_sub.
    
    (*
        pub const fn wrapping_add(self, rhs: Self) -> Self {
            self.overflowing_add(rhs).0
        }
    *)
    Definition wrapping_add
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.SubPointer.get_tuple_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_add",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              0
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_wrapping_add :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "wrapping_add" (wrapping_add BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque wrapping_add.
    
    (*
        pub const fn wrapping_neg(self) -> Self {
            self.overflowing_neg().0
        }
    *)
    Definition wrapping_neg
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.SubPointer.get_tuple_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_neg",
                    [],
                    []
                  |),
                  [ M.read (| self |) ]
                |)
              |),
              0
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_wrapping_neg :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "wrapping_neg" (wrapping_neg BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque wrapping_neg.
    
    (*
        pub const fn wrapping_sub(self, rhs: Self) -> Self {
            self.overflowing_sub(rhs).0
        }
    *)
    Definition wrapping_sub
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.SubPointer.get_tuple_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_sub",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              0
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_wrapping_sub :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "wrapping_sub" (wrapping_sub BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque wrapping_sub.
  End Impl_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_arith_Neg_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*     type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn neg(self) -> Self::Output {
            self.wrapping_neg()
        }
    *)
    Definition neg
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_neg",
              [],
              []
            |),
            [ M.read (| self |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::arith::Neg"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("neg", InstanceField.Method (neg BITS LIMBS))
        ].
  End Impl_core_ops_arith_Neg_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_arith_Neg_for_ref__ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ].
    
    (*     type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn neg(self) -> Self::Output {
            self.wrapping_neg()
        }
    *)
    Definition neg
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_neg",
              [],
              []
            |),
            [ M.read (| M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::arith::Neg"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("neg", InstanceField.Method (neg BITS LIMBS))
        ].
  End Impl_core_ops_arith_Neg_for_ref__ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_iter_traits_accum_Sum_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn sum<I>(iter: I) -> Self
        where
            I: Iterator<Item = Self>,
        {
            iter.fold(Self::ZERO, Self::wrapping_add)
        }
    *)
    Definition sum
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [ _ as I ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              I,
              [],
              [],
              "fold",
              [],
              [
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                Ty.function
                  [
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                  ]
                  (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [])
              ]
            |),
            [
              M.read (| iter |);
              M.read (|
                get_associated_constant (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "ZERO",
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                |)
              |);
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "wrapping_add",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::iter::traits::accum::Sum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("sum", InstanceField.Method (sum BITS LIMBS)) ].
  End Impl_core_iter_traits_accum_Sum_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_iter_traits_accum_Sum_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn sum<I>(iter: I) -> Self
        where
            I: Iterator<Item = &'a Self>,
        {
            iter.copied().fold(Self::ZERO, Self::wrapping_add)
        }
    *)
    Definition sum
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [ _ as I ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply (Ty.path "core::iter::adapters::copied::Copied") [] [ I ],
              [],
              [],
              "fold",
              [],
              [
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                Ty.function
                  [
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                  ]
                  (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [])
              ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::iter::adapters::copied::Copied") [] [ I ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  I,
                  [],
                  [],
                  "copied",
                  [],
                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                |),
                [ M.read (| iter |) ]
              |);
              M.read (|
                get_associated_constant (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "ZERO",
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                |)
              |);
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "wrapping_add",
                [],
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::iter::traits::accum::Sum"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("sum", InstanceField.Method (sum BITS LIMBS)) ].
  End Impl_core_iter_traits_accum_Sum_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
End add.
