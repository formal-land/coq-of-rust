(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module algorithms.
  Module div.
    Module knuth.
      (*
      pub fn div_nxm_normalized(numerator: &mut [u64], divisor: &[u64]) {
          debug_assert!(divisor.len() >= 2);
          debug_assert!(numerator.len() >= divisor.len());
          debug_assert!( *divisor.last().unwrap() >= (1 << 63));
      
          let n = divisor.len();
          let m = numerator.len() - n - 1;
      
          // Compute the divisor double limb and reciprocal
          let d = u128::join(divisor[n - 1], divisor[n - 2]);
          let v = reciprocal_2(d);
      
          // Compute the quotient one limb at a time.
          for j in (0..=m).rev() {
              // Fetch the first three limbs of the numerator.
              let n21 = u128::join(numerator[j + n], numerator[j + n - 1]);
              let n0 = numerator[j + n - 2];
              debug_assert!(n21 <= d);
      
              // Overflow case
              if unlikely(n21 == d) {
                  let q = u64::MAX;
                  let _carry = submul_nx1(&mut numerator[j..j + n], divisor, q);
                  numerator[j + n] = q;
                  continue;
              }
      
              // Calculate 3x2 approximate quotient word.
              // By using 3x2 limbs we get a quotient that is very likely correct
              // and at most one too large. In the process we also get the first
              // two remainder limbs.
              let (mut q, r) = div_3x2(n21, n0, d, v);
      
              // Subtract the quotient times the divisor from the remainder.
              // We already have the highest two limbs, so we can reduce the
              // computation. We still need to carry propagate into these limbs.
              let borrow = submul_nx1(&mut numerator[j..j + n - 2], &divisor[..n - 2], q);
              let (r, borrow) = r.overflowing_sub(u128::from(borrow));
              numerator[j + n - 2] = r.low();
              numerator[j + n - 1] = r.high();
      
              // If we have a carry then the quotient was one too large.
              // We correct by decrementing the quotient and adding one divisor back.
              if unlikely(borrow) {
                  q = q.wrapping_sub(1);
                  let carry = adc_n(&mut numerator[j..j + n], &divisor[..n], 0);
                  // Expect carry because we flip sign back to positive.
                  debug_assert_eq!(carry, 1);
              }
      
              // Store quotient in the unused bits of numerator
              numerator[j + n] = q;
          }
      }
      *)
      Definition div_nxm_normalized (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ numerator; divisor ] =>
          ltac:(M.monadic
            (let numerator := M.alloc (| numerator |) in
            let divisor := M.alloc (| divisor |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| divisor |) |)
                                                  |)
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 2
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: divisor.len() >= 2" |) ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| numerator |) |)
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| divisor |) |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [
                                          mk_str (|
                                            "assertion failed: numerator.len() >= divisor.len()"
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.read (|
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "u64" ]
                                                        ],
                                                      "unwrap",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "u64" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u64" ],
                                                          "last",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| divisor |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.shl,
                                                [
                                                  Value.Integer IntegerKind.U64 1;
                                                  Value.Integer IntegerKind.I32 63
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [
                                          mk_str (|
                                            "assertion failed: *divisor.last().unwrap() >= (1 << 63)"
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ n : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| divisor |) |) |) ]
                  |)
                |) in
              let~ m : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| numerator |) |) |)
                            ]
                          |);
                          M.read (| n |)
                        ]
                      |);
                      Value.Integer IntegerKind.Usize 1
                    ]
                  |)
                |) in
              let~ d : Ty.apply (Ty.path "*") [] [ Ty.path "u128" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_trait_method (|
                      "ruint::algorithms::DoubleWord",
                      Ty.path "u128",
                      [],
                      [ Ty.path "u64" ],
                      "join",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| divisor |) |),
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [ M.read (| n |); Value.Integer IntegerKind.Usize 1 ]
                          |)
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| divisor |) |),
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [ M.read (| n |); Value.Integer IntegerKind.Usize 2 ]
                          |)
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ v : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_function (|
                      "ruint::algorithms::div::reciprocal::reciprocal_2_mg10",
                      [],
                      []
                    |),
                    [ M.read (| d |) ]
                  |)
                |) in
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::rev::Rev")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::ops::range::RangeInclusive")
                            []
                            [ Ty.path "usize" ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::ops::range::RangeInclusive")
                              []
                              [ Ty.path "usize" ]
                          ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::ops::range::RangeInclusive")
                                []
                                [ Ty.path "usize" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::ops::range::RangeInclusive")
                              []
                              [ Ty.path "usize" ],
                            [],
                            [],
                            "rev",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::range::RangeInclusive")
                                []
                                [ Ty.path "usize" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeInclusive")
                                  []
                                  [ Ty.path "usize" ],
                                "new",
                                [],
                                []
                              |),
                              [ Value.Integer IntegerKind.Usize 0; M.read (| m |) ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::rev::Rev")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeInclusive")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let j := M.copy (| γ0_0 |) in
                                      let~ n21 : Ty.apply (Ty.path "*") [] [ Ty.path "u128" ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "u128",
                                            M.get_trait_method (|
                                              "ruint::algorithms::DoubleWord",
                                              Ty.path "u128",
                                              [],
                                              [ Ty.path "u64" ],
                                              "join",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| numerator |) |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [ M.read (| j |); M.read (| n |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| numerator |) |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.sub,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [ M.read (| j |); M.read (| n |) ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ n0 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                        M.copy (|
                                          M.SubPointer.get_array_field (|
                                            M.deref (| M.read (| numerator |) |),
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.sub,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [ M.read (| j |); M.read (| n |) ]
                                                |);
                                                Value.Integer IntegerKind.Usize 2
                                              ]
                                            |)
                                          |)
                                        |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                let~ _ :
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                  M.match_operator (|
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.le,
                                                                    [
                                                                      M.read (| n21 |);
                                                                      M.read (| d |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::panic",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  mk_str (|
                                                                    "assertion failed: n21 <= d"
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_function (|
                                                          "core::convert::identity",
                                                          [],
                                                          [ Ty.path "bool" ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.eq,
                                                            [ M.read (| n21 |); M.read (| d |) ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      let~ q :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.path "u64" ] :=
                                                        M.copy (|
                                                          get_associated_constant (|
                                                            Ty.path "u64",
                                                            "MAX",
                                                            Ty.path "u64"
                                                          |)
                                                        |) in
                                                      let~ _carry :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.path "u64" ] :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            Ty.path "u64",
                                                            M.get_function (|
                                                              "ruint::algorithms::mul::submul_nx1",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [ Ty.path "u64" ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::IndexMut",
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [ Ty.path "u64" ],
                                                                          [],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::ops::range::Range")
                                                                              []
                                                                              [ Ty.path "usize" ]
                                                                          ],
                                                                          "index_mut",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.read (| numerator |)
                                                                            |)
                                                                          |);
                                                                          Value.StructRecord
                                                                            "core::ops::range::Range"
                                                                            [
                                                                              ("start",
                                                                                M.read (| j |));
                                                                              ("end_",
                                                                                M.call_closure (|
                                                                                  Ty.path "usize",
                                                                                  BinOp.Wrap.add,
                                                                                  [
                                                                                    M.read (| j |);
                                                                                    M.read (| n |)
                                                                                  ]
                                                                                |))
                                                                            ]
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| divisor |) |)
                                                              |);
                                                              M.read (| q |)
                                                            ]
                                                          |)
                                                        |) in
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.write (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (| M.read (| numerator |) |),
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.add,
                                                                [ M.read (| j |); M.read (| n |) ]
                                                              |)
                                                            |),
                                                            M.read (| q |)
                                                          |)
                                                        |) in
                                                      M.continue (||)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [ Ty.path "u64"; Ty.path "u128" ],
                                            M.get_function (|
                                              "ruint::algorithms::div::small::div_3x2_mg10",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (| n21 |);
                                              M.read (| n0 |);
                                              M.read (| d |);
                                              M.read (| v |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let q := M.copy (| γ0_0 |) in
                                              let r := M.copy (| γ0_1 |) in
                                              let~ borrow :
                                                  Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "u64",
                                                    M.get_function (|
                                                      "ruint::algorithms::mul::submul_nx1",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&mut")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ Ty.path "u64" ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::index::IndexMut",
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u64" ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::ops::range::Range")
                                                                      []
                                                                      [ Ty.path "usize" ]
                                                                  ],
                                                                  "index_mut",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.read (| numerator |)
                                                                    |)
                                                                  |);
                                                                  Value.StructRecord
                                                                    "core::ops::range::Range"
                                                                    [
                                                                      ("start", M.read (| j |));
                                                                      ("end_",
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.sub,
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              BinOp.Wrap.add,
                                                                              [
                                                                                M.read (| j |);
                                                                                M.read (| n |)
                                                                              ]
                                                                            |);
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              2
                                                                          ]
                                                                        |))
                                                                    ]
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ Ty.path "u64" ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::index::Index",
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u64" ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::ops::range::RangeTo")
                                                                      []
                                                                      [ Ty.path "usize" ]
                                                                  ],
                                                                  "index",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| divisor |)
                                                                    |)
                                                                  |);
                                                                  Value.StructRecord
                                                                    "core::ops::range::RangeTo"
                                                                    [
                                                                      ("end_",
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.sub,
                                                                          [
                                                                            M.read (| n |);
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              2
                                                                          ]
                                                                        |))
                                                                    ]
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| q |)
                                                    ]
                                                  |)
                                                |) in
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.tuple [ Ty.path "u128"; Ty.path "bool" ],
                                                    M.get_associated_function (|
                                                      Ty.path "u128",
                                                      "overflowing_sub",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| r |);
                                                      M.call_closure (|
                                                        Ty.path "u128",
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          Ty.path "u128",
                                                          [],
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| borrow |) ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let r := M.copy (| γ0_0 |) in
                                                      let borrow := M.copy (| γ0_1 |) in
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.write (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (| M.read (| numerator |) |),
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.sub,
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.add,
                                                                    [ M.read (| j |); M.read (| n |)
                                                                    ]
                                                                  |);
                                                                  Value.Integer IntegerKind.Usize 2
                                                                ]
                                                              |)
                                                            |),
                                                            M.call_closure (|
                                                              Ty.path "u64",
                                                              M.get_trait_method (|
                                                                "ruint::algorithms::DoubleWord",
                                                                Ty.path "u128",
                                                                [],
                                                                [ Ty.path "u64" ],
                                                                "low",
                                                                [],
                                                                []
                                                              |),
                                                              [ M.read (| r |) ]
                                                            |)
                                                          |)
                                                        |) in
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.write (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (| M.read (| numerator |) |),
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.sub,
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.add,
                                                                    [ M.read (| j |); M.read (| n |)
                                                                    ]
                                                                  |);
                                                                  Value.Integer IntegerKind.Usize 1
                                                                ]
                                                              |)
                                                            |),
                                                            M.call_closure (|
                                                              Ty.path "u64",
                                                              M.get_trait_method (|
                                                                "ruint::algorithms::DoubleWord",
                                                                Ty.path "u128",
                                                                [],
                                                                [ Ty.path "u64" ],
                                                                "high",
                                                                [],
                                                                []
                                                              |),
                                                              [ M.read (| r |) ]
                                                            |)
                                                          |)
                                                        |) in
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.match_operator (|
                                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        M.get_function (|
                                                                          "core::convert::identity",
                                                                          [],
                                                                          [ Ty.path "bool" ]
                                                                        |),
                                                                        [ M.read (| borrow |) ]
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                let~ _ :
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.tuple [] ] :=
                                                                  M.alloc (|
                                                                    M.write (|
                                                                      q,
                                                                      M.call_closure (|
                                                                        Ty.path "u64",
                                                                        M.get_associated_function (|
                                                                          Ty.path "u64",
                                                                          "wrapping_sub",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (| q |);
                                                                          Value.Integer
                                                                            IntegerKind.U64
                                                                            1
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |) in
                                                                let~ carry :
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.path "u64" ] :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      Ty.path "u64",
                                                                      M.get_function (|
                                                                        "ruint::algorithms::add::adc_n",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&mut")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64"
                                                                                        ]
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::index::IndexMut",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "u64"
                                                                                      ],
                                                                                    [],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::ops::range::Range")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                    ],
                                                                                    "index_mut",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          numerator
                                                                                        |)
                                                                                      |)
                                                                                    |);
                                                                                    Value.StructRecord
                                                                                      "core::ops::range::Range"
                                                                                      [
                                                                                        ("start",
                                                                                          M.read (|
                                                                                            j
                                                                                          |));
                                                                                        ("end_",
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "usize",
                                                                                            BinOp.Wrap.add,
                                                                                            [
                                                                                              M.read (|
                                                                                                j
                                                                                              |);
                                                                                              M.read (|
                                                                                                n
                                                                                              |)
                                                                                            ]
                                                                                          |))
                                                                                      ]
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64"
                                                                                        ]
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::index::Index",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "u64"
                                                                                      ],
                                                                                    [],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::ops::range::RangeTo")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                    ],
                                                                                    "index",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          divisor
                                                                                        |)
                                                                                      |)
                                                                                    |);
                                                                                    Value.StructRecord
                                                                                      "core::ops::range::RangeTo"
                                                                                      [
                                                                                        ("end_",
                                                                                          M.read (|
                                                                                            n
                                                                                          |))
                                                                                      ]
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.U64
                                                                          0
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let~ _ :
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.tuple [] ] :=
                                                                  M.match_operator (|
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.tuple [] ],
                                                                    M.alloc (| Value.Tuple [] |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.use
                                                                              (M.alloc (|
                                                                                Value.Bool true
                                                                              |)) in
                                                                          let _ :=
                                                                            is_constant_or_break_match (|
                                                                              M.read (| γ |),
                                                                              Value.Bool true
                                                                            |) in
                                                                          let~ _ :
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.tuple [] ] :=
                                                                            M.match_operator (|
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.tuple [] ],
                                                                              M.alloc (|
                                                                                Value.Tuple
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      carry
                                                                                    |);
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.alloc (|
                                                                                        Value.Integer
                                                                                          IntegerKind.U64
                                                                                          1
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ0_0 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        0
                                                                                      |) in
                                                                                    let γ0_1 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        1
                                                                                      |) in
                                                                                    let left_val :=
                                                                                      M.copy (|
                                                                                        γ0_0
                                                                                      |) in
                                                                                    let right_val :=
                                                                                      M.copy (|
                                                                                        γ0_1
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "*")
                                                                                        []
                                                                                        [
                                                                                          Ty.tuple
                                                                                            []
                                                                                        ],
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  UnOp.not (|
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "bool",
                                                                                                      BinOp.eq,
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          M.deref (|
                                                                                                            M.read (|
                                                                                                              left_val
                                                                                                            |)
                                                                                                          |)
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          M.deref (|
                                                                                                            M.read (|
                                                                                                              right_val
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)) in
                                                                                            let _ :=
                                                                                              is_constant_or_break_match (|
                                                                                                M.read (|
                                                                                                  γ
                                                                                                |),
                                                                                                Value.Bool
                                                                                                  true
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              M.never_to_any (|
                                                                                                M.read (|
                                                                                                  let~
                                                                                                        kind :
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "*")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::panicking::AssertKind"
                                                                                                        ] :=
                                                                                                    M.alloc (|
                                                                                                      Value.StructTuple
                                                                                                        "core::panicking::AssertKind::Eq"
                                                                                                        []
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "never",
                                                                                                      M.get_function (|
                                                                                                        "core::panicking::assert_failed",
                                                                                                        [],
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "u64";
                                                                                                          Ty.path
                                                                                                            "u64"
                                                                                                        ]
                                                                                                      |),
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          kind
                                                                                                        |);
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.deref (|
                                                                                                                M.read (|
                                                                                                                  left_val
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |);
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.deref (|
                                                                                                                M.read (|
                                                                                                                  right_val
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |);
                                                                                                        Value.StructTuple
                                                                                                          "core::option::Option::None"
                                                                                                          []
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (M.alloc (|
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.alloc (|
                                                          M.write (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (| M.read (| numerator |) |),
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.add,
                                                                [ M.read (| j |); M.read (| n |) ]
                                                              |)
                                                            |),
                                                            M.read (| q |)
                                                          |)
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |)))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_div_nxm_normalized :
        M.IsFunction.C "ruint::algorithms::div::knuth::div_nxm_normalized" div_nxm_normalized.
      Admitted.
      Global Typeclasses Opaque div_nxm_normalized.
      
      (*
      pub fn div_nxm(numerator: &mut [u64], divisor: &mut [u64]) {
          debug_assert!(divisor.len() >= 3);
          debug_assert!(numerator.len() >= divisor.len());
          debug_assert!( *divisor.last().unwrap() >= 1);
      
          let n = divisor.len();
          let m = numerator.len() - n;
      
          // Compute normalized divisor double-word and reciprocal.
          // TODO: Delegate to div_nxm_normalized if normalized.
          let (d, shift) = {
              let d = u128::join(divisor[n - 1], divisor[n - 2]);
              let shift = d.high().leading_zeros();
              (
                  if shift == 0 {
                      d
                  } else {
                      (d << shift) | u128::from(divisor[n - 3] >> (64 - shift))
                  },
                  shift,
              )
          };
          debug_assert!(d >= 1 << 127);
          let v = reciprocal_2(d);
      
          // Compute the quotient one limb at a time.
          let mut q_high = 0;
          for j in (0..=m).rev() {
              // Fetch the first three limbs of the shifted numerator starting at `j + n`.
              let (n21, n0) = {
                  let n2 = numerator.get(j + n).copied().unwrap_or_default();
                  let n21 = u128::join(n2, numerator[j + n - 1]);
                  let n0 = numerator[j + n - 2];
                  if shift == 0 {
                      (n21, n0)
                  } else {
                      (
                          (n21 << shift) | u128::from(n0 >> (64 - shift)),
                          (n0 << shift) | (numerator[j + n - 3] >> (64 - shift)),
                      )
                  }
              };
              debug_assert!(n21 <= d);
      
              // Compute the quotient
              let q = if likely(n21 < d) {
                  // Calculate 3x2 approximate quotient word.
                  // By using 3x2 limbs we get a quotient that is very likely correct
                  // and at most one too large. In the process we also get the first
                  // two remainder limbs.
                  let (mut q, r) = div_3x2(n21, n0, d, v);
      
                  if q != 0 {
                      // Subtract the quotient times the divisor from the remainder.
                      // We already have the highest 128 bit, so we can reduce the
                      // computation. We still need to carry propagate into these limbs.
                      let borrow = if shift == 0 {
                          let borrow = submul_nx1(&mut numerator[j..j + n - 2], &divisor[..n - 2], q);
                          let (r, borrow) = r.overflowing_sub(u128::from(borrow));
                          numerator[j + n - 2] = r.low();
                          numerator[j + n - 1] = r.high();
                          borrow
                      } else {
                          // OPT: Can we re-use `r` here somehow? The problem is we can not just
                          // shift the `r` or `borrow` because we need to accurately reproduce
                          // the remainder and carry in the middle of a limb.
                          let borrow = submul_nx1(&mut numerator[j..j + n], divisor, q);
                          let n2 = numerator.get(j + n).copied().unwrap_or_default();
                          borrow != n2
                      };
      
                      // If we have a carry then the quotient was one too large.
                      // We correct by decrementing the quotient and adding one divisor back.
                      if unlikely(borrow) {
                          q = q.wrapping_sub(1);
                          let carry = adc_n(&mut numerator[j..j + n], &divisor[..n], 0);
                          // Expect carry because we flip sign back to positive.
                          debug_assert_eq!(carry, 1);
                      }
                  }
                  q
              } else {
                  // Overflow case
                  let q = u64::MAX;
                  let _carry = submul_nx1(&mut numerator[j..j + n], divisor, q);
                  q
              };
      
              // Store the quotient in the processed bits of numerator plus `q_high`.
              if j + n < numerator.len() {
                  numerator[j + n] = q;
              } else {
                  q_high = q;
              }
          }
      
          // Copy remainder to `divisor` and `quotient` to numerator.
          divisor.copy_from_slice(&numerator[..n]);
          numerator.copy_within(n.., 0);
          numerator[m] = q_high;
          numerator[m + 1..].fill(0);
      }
      *)
      Definition div_nxm (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ numerator; divisor ] =>
          ltac:(M.monadic
            (let numerator := M.alloc (| numerator |) in
            let divisor := M.alloc (| divisor |) in
            M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| divisor |) |)
                                                  |)
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 3
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: divisor.len() >= 3" |) ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| numerator |) |)
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| divisor |) |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [
                                          mk_str (|
                                            "assertion failed: numerator.len() >= divisor.len()"
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.read (|
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "u64" ]
                                                        ],
                                                      "unwrap",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "u64" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u64" ],
                                                          "last",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| divisor |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              Value.Integer IntegerKind.U64 1
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [
                                          mk_str (|
                                            "assertion failed: *divisor.last().unwrap() >= 1"
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ n : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| divisor |) |) |) ]
                  |)
                |) in
              let~ m : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| numerator |) |) |) ]
                      |);
                      M.read (| n |)
                    ]
                  |)
                |) in
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                let~ d : Ty.apply (Ty.path "*") [] [ Ty.path "u128" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "u128",
                      M.get_trait_method (|
                        "ruint::algorithms::DoubleWord",
                        Ty.path "u128",
                        [],
                        [ Ty.path "u64" ],
                        "join",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| divisor |) |),
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.sub,
                              [ M.read (| n |); Value.Integer IntegerKind.Usize 1 ]
                            |)
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| divisor |) |),
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.sub,
                              [ M.read (| n |); Value.Integer IntegerKind.Usize 2 ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ shift : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "u32",
                      M.get_associated_function (| Ty.path "u64", "leading_zeros", [], [] |),
                      [
                        M.call_closure (|
                          Ty.path "u64",
                          M.get_trait_method (|
                            "ruint::algorithms::DoubleWord",
                            Ty.path "u128",
                            [],
                            [ Ty.path "u64" ],
                            "high",
                            [],
                            []
                          |),
                          [ M.read (| d |) ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.Tuple
                    [
                      M.read (|
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.path "u128" ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [ M.read (| shift |); Value.Integer IntegerKind.U32 0 ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                d));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u128",
                                    BinOp.Wrap.bit_or,
                                    [
                                      M.call_closure (|
                                        Ty.path "u128",
                                        BinOp.Wrap.shl,
                                        [ M.read (| d |); M.read (| shift |) ]
                                      |);
                                      M.call_closure (|
                                        Ty.path "u128",
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          Ty.path "u128",
                                          [],
                                          [ Ty.path "u64" ],
                                          "from",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.path "u64",
                                            BinOp.Wrap.shr,
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.deref (| M.read (| divisor |) |),
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.sub,
                                                    [
                                                      M.read (| n |);
                                                      Value.Integer IntegerKind.Usize 3
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.call_closure (|
                                                Ty.path "u32",
                                                BinOp.Wrap.sub,
                                                [
                                                  Value.Integer IntegerKind.U32 64;
                                                  M.read (| shift |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)))
                          ]
                        |)
                      |);
                      M.read (| shift |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let d := M.copy (| γ0_0 |) in
                      let shift := M.copy (| γ0_1 |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.ge,
                                                    [
                                                      M.read (| d |);
                                                      M.call_closure (|
                                                        Ty.path "u128",
                                                        BinOp.Wrap.shl,
                                                        [
                                                          Value.Integer IntegerKind.U128 1;
                                                          Value.Integer IntegerKind.I32 127
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::panic",
                                                  [],
                                                  []
                                                |),
                                                [ mk_str (| "assertion failed: d >= 1 << 127" |) ]
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ v : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u64",
                            M.get_function (|
                              "ruint::algorithms::div::reciprocal::reciprocal_2_mg10",
                              [],
                              []
                            |),
                            [ M.read (| d |) ]
                          |)
                        |) in
                      let~ q_high : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                        M.alloc (| Value.Integer IntegerKind.U64 0 |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.use
                          (M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::RangeInclusive")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::rev::Rev")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeInclusive")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::rev::Rev")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::RangeInclusive")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeInclusive")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "rev",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::ops::range::RangeInclusive")
                                          []
                                          [ Ty.path "usize" ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeInclusive")
                                            []
                                            [ Ty.path "usize" ],
                                          "new",
                                          [],
                                          []
                                        |),
                                        [ Value.Integer IntegerKind.Usize 0; M.read (| m |) ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "usize" ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::rev::Rev")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::RangeInclusive")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let j := M.copy (| γ0_0 |) in
                                                M.match_operator (|
                                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                  let~ n2 :
                                                      Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "u64",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.path "u64" ],
                                                          "unwrap_or_default",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ Ty.path "u64" ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "u64" ]
                                                                ],
                                                              "copied",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "u64" ]
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u64" ],
                                                                  "get",
                                                                  [],
                                                                  [ Ty.path "usize" ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| numerator |)
                                                                    |)
                                                                  |);
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.add,
                                                                    [ M.read (| j |); M.read (| n |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  let~ n21 :
                                                      Ty.apply
                                                        (Ty.path "*")
                                                        []
                                                        [ Ty.path "u128" ] :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.path "u128",
                                                        M.get_trait_method (|
                                                          "ruint::algorithms::DoubleWord",
                                                          Ty.path "u128",
                                                          [],
                                                          [ Ty.path "u64" ],
                                                          "join",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (| n2 |);
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (| M.read (| numerator |) |),
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.sub,
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.add,
                                                                    [ M.read (| j |); M.read (| n |)
                                                                    ]
                                                                  |);
                                                                  Value.Integer IntegerKind.Usize 1
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  let~ n0 :
                                                      Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                                    M.copy (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| numerator |) |),
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.add,
                                                              [ M.read (| j |); M.read (| n |) ]
                                                            |);
                                                            Value.Integer IntegerKind.Usize 2
                                                          ]
                                                        |)
                                                      |)
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "*")
                                                      []
                                                      [ Ty.tuple [ Ty.path "u128"; Ty.path "u64" ]
                                                      ],
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (| shift |);
                                                                    Value.Integer IntegerKind.U32 0
                                                                  ]
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.alloc (|
                                                            Value.Tuple
                                                              [ M.read (| n21 |); M.read (| n0 |) ]
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (|
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "u128",
                                                                  BinOp.Wrap.bit_or,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "u128",
                                                                      BinOp.Wrap.shl,
                                                                      [
                                                                        M.read (| n21 |);
                                                                        M.read (| shift |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      Ty.path "u128",
                                                                      M.get_trait_method (|
                                                                        "core::convert::From",
                                                                        Ty.path "u128",
                                                                        [],
                                                                        [ Ty.path "u64" ],
                                                                        "from",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.path "u64",
                                                                          BinOp.Wrap.shr,
                                                                          [
                                                                            M.read (| n0 |);
                                                                            M.call_closure (|
                                                                              Ty.path "u32",
                                                                              BinOp.Wrap.sub,
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.U32
                                                                                  64;
                                                                                M.read (| shift |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "u64",
                                                                  BinOp.Wrap.bit_or,
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path "u64",
                                                                      BinOp.Wrap.shl,
                                                                      [
                                                                        M.read (| n0 |);
                                                                        M.read (| shift |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      Ty.path "u64",
                                                                      BinOp.Wrap.shr,
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.deref (|
                                                                              M.read (| numerator |)
                                                                            |),
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              BinOp.Wrap.sub,
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.path "usize",
                                                                                  BinOp.Wrap.add,
                                                                                  [
                                                                                    M.read (| j |);
                                                                                    M.read (| n |)
                                                                                  ]
                                                                                |);
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  3
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.call_closure (|
                                                                          Ty.path "u32",
                                                                          BinOp.Wrap.sub,
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.U32
                                                                              64;
                                                                            M.read (| shift |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)))
                                                    ]
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let n21 := M.copy (| γ0_0 |) in
                                                        let n0 := M.copy (| γ0_1 |) in
                                                        let~ _ :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ] :=
                                                          M.match_operator (|
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.tuple [] ],
                                                            M.alloc (| Value.Tuple [] |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        Value.Bool true
                                                                      |)) in
                                                                  let _ :=
                                                                    is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  let~ _ :
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [ Ty.tuple [] ] :=
                                                                    M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [ Ty.tuple [] ],
                                                                      M.alloc (| Value.Tuple [] |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ :=
                                                                              M.use
                                                                                (M.alloc (|
                                                                                  UnOp.not (|
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "bool",
                                                                                      BinOp.le,
                                                                                      [
                                                                                        M.read (|
                                                                                          n21
                                                                                        |);
                                                                                        M.read (|
                                                                                          d
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)) in
                                                                            let _ :=
                                                                              is_constant_or_break_match (|
                                                                                M.read (| γ |),
                                                                                Value.Bool true
                                                                              |) in
                                                                            M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.call_closure (|
                                                                                  Ty.path "never",
                                                                                  M.get_function (|
                                                                                    "core::panicking::panic",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    mk_str (|
                                                                                      "assertion failed: n21 <= d"
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |) in
                                                        let~ q :
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [ Ty.path "u64" ] :=
                                                          M.copy (|
                                                            M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.path "u64" ],
                                                              M.alloc (| Value.Tuple [] |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.use
                                                                        (M.alloc (|
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            M.get_function (|
                                                                              "core::convert::identity",
                                                                              [],
                                                                              [ Ty.path "bool" ]
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.path "bool",
                                                                                BinOp.lt,
                                                                                [
                                                                                  M.read (| n21 |);
                                                                                  M.read (| d |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)) in
                                                                    let _ :=
                                                                      is_constant_or_break_match (|
                                                                        M.read (| γ |),
                                                                        Value.Bool true
                                                                      |) in
                                                                    M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [ Ty.path "u64" ],
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path "u64";
                                                                              Ty.path "u128"
                                                                            ],
                                                                          M.get_function (|
                                                                            "ruint::algorithms::div::small::div_3x2_mg10",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (| n21 |);
                                                                            M.read (| n0 |);
                                                                            M.read (| d |);
                                                                            M.read (| v |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ0_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let q :=
                                                                              M.copy (| γ0_0 |) in
                                                                            let r :=
                                                                              M.copy (| γ0_1 |) in
                                                                            let~ _ :
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ] :=
                                                                              M.match_operator (|
                                                                                Ty.apply
                                                                                  (Ty.path "*")
                                                                                  []
                                                                                  [ Ty.tuple [] ],
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ :=
                                                                                        M.use
                                                                                          (M.alloc (|
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "bool",
                                                                                              BinOp.ne,
                                                                                              [
                                                                                                M.read (|
                                                                                                  q
                                                                                                |);
                                                                                                Value.Integer
                                                                                                  IntegerKind.U64
                                                                                                  0
                                                                                              ]
                                                                                            |)
                                                                                          |)) in
                                                                                      let _ :=
                                                                                        is_constant_or_break_match (|
                                                                                          M.read (|
                                                                                            γ
                                                                                          |),
                                                                                          Value.Bool
                                                                                            true
                                                                                        |) in
                                                                                      let~ borrow :
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "*")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "bool"
                                                                                            ] :=
                                                                                        M.copy (|
                                                                                          M.match_operator (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "*")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "bool"
                                                                                              ],
                                                                                            M.alloc (|
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        γ :=
                                                                                                    M.use
                                                                                                      (M.alloc (|
                                                                                                        M.call_closure (|
                                                                                                          Ty.path
                                                                                                            "bool",
                                                                                                          BinOp.eq,
                                                                                                          [
                                                                                                            M.read (|
                                                                                                              shift
                                                                                                            |);
                                                                                                            Value.Integer
                                                                                                              IntegerKind.U32
                                                                                                              0
                                                                                                          ]
                                                                                                        |)
                                                                                                      |)) in
                                                                                                  let
                                                                                                        _ :=
                                                                                                    is_constant_or_break_match (|
                                                                                                      M.read (|
                                                                                                        γ
                                                                                                      |),
                                                                                                      Value.Bool
                                                                                                        true
                                                                                                    |) in
                                                                                                  let~
                                                                                                        borrow :
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "*")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "u64"
                                                                                                        ] :=
                                                                                                    M.alloc (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.path
                                                                                                          "u64",
                                                                                                        M.get_function (|
                                                                                                          "ruint::algorithms::mul::submul_nx1",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.MutRef,
                                                                                                            M.deref (|
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.MutRef,
                                                                                                                M.deref (|
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&mut")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "slice")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "u64"
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::index::IndexMut",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "slice")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "u64"
                                                                                                                        ],
                                                                                                                      [],
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::ops::range::Range")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "usize"
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                      "index_mut",
                                                                                                                      [],
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.MutRef,
                                                                                                                        M.deref (|
                                                                                                                          M.read (|
                                                                                                                            numerator
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |);
                                                                                                                      Value.StructRecord
                                                                                                                        "core::ops::range::Range"
                                                                                                                        [
                                                                                                                          ("start",
                                                                                                                            M.read (|
                                                                                                                              j
                                                                                                                            |));
                                                                                                                          ("end_",
                                                                                                                            M.call_closure (|
                                                                                                                              Ty.path
                                                                                                                                "usize",
                                                                                                                              BinOp.Wrap.sub,
                                                                                                                              [
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.path
                                                                                                                                    "usize",
                                                                                                                                  BinOp.Wrap.add,
                                                                                                                                  [
                                                                                                                                    M.read (|
                                                                                                                                      j
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      n
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |);
                                                                                                                                Value.Integer
                                                                                                                                  IntegerKind.Usize
                                                                                                                                  2
                                                                                                                              ]
                                                                                                                            |))
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |);
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                M.deref (|
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "slice")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "u64"
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::index::Index",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "slice")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "u64"
                                                                                                                        ],
                                                                                                                      [],
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::ops::range::RangeTo")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "usize"
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                      "index",
                                                                                                                      [],
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.Ref,
                                                                                                                        M.deref (|
                                                                                                                          M.read (|
                                                                                                                            divisor
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |);
                                                                                                                      Value.StructRecord
                                                                                                                        "core::ops::range::RangeTo"
                                                                                                                        [
                                                                                                                          ("end_",
                                                                                                                            M.call_closure (|
                                                                                                                              Ty.path
                                                                                                                                "usize",
                                                                                                                              BinOp.Wrap.sub,
                                                                                                                              [
                                                                                                                                M.read (|
                                                                                                                                  n
                                                                                                                                |);
                                                                                                                                Value.Integer
                                                                                                                                  IntegerKind.Usize
                                                                                                                                  2
                                                                                                                              ]
                                                                                                                            |))
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |);
                                                                                                          M.read (|
                                                                                                            q
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |) in
                                                                                                  M.match_operator (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "*")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "bool"
                                                                                                      ],
                                                                                                    M.alloc (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "u128";
                                                                                                            Ty.path
                                                                                                              "bool"
                                                                                                          ],
                                                                                                        M.get_associated_function (|
                                                                                                          Ty.path
                                                                                                            "u128",
                                                                                                          "overflowing_sub",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            r
                                                                                                          |);
                                                                                                          M.call_closure (|
                                                                                                            Ty.path
                                                                                                              "u128",
                                                                                                            M.get_trait_method (|
                                                                                                              "core::convert::From",
                                                                                                              Ty.path
                                                                                                                "u128",
                                                                                                              [],
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "u64"
                                                                                                              ],
                                                                                                              "from",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                borrow
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                γ0_0 :=
                                                                                                            M.SubPointer.get_tuple_field (|
                                                                                                              γ,
                                                                                                              0
                                                                                                            |) in
                                                                                                          let
                                                                                                                γ0_1 :=
                                                                                                            M.SubPointer.get_tuple_field (|
                                                                                                              γ,
                                                                                                              1
                                                                                                            |) in
                                                                                                          let
                                                                                                                r :=
                                                                                                            M.copy (|
                                                                                                              γ0_0
                                                                                                            |) in
                                                                                                          let
                                                                                                                borrow :=
                                                                                                            M.copy (|
                                                                                                              γ0_1
                                                                                                            |) in
                                                                                                          let~
                                                                                                                _ :
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "*")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.tuple
                                                                                                                    []
                                                                                                                ] :=
                                                                                                            M.alloc (|
                                                                                                              M.write (|
                                                                                                                M.SubPointer.get_array_field (|
                                                                                                                  M.deref (|
                                                                                                                    M.read (|
                                                                                                                      numerator
                                                                                                                    |)
                                                                                                                  |),
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.path
                                                                                                                      "usize",
                                                                                                                    BinOp.Wrap.sub,
                                                                                                                    [
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.path
                                                                                                                          "usize",
                                                                                                                        BinOp.Wrap.add,
                                                                                                                        [
                                                                                                                          M.read (|
                                                                                                                            j
                                                                                                                          |);
                                                                                                                          M.read (|
                                                                                                                            n
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |);
                                                                                                                      Value.Integer
                                                                                                                        IntegerKind.Usize
                                                                                                                        2
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |),
                                                                                                                M.call_closure (|
                                                                                                                  Ty.path
                                                                                                                    "u64",
                                                                                                                  M.get_trait_method (|
                                                                                                                    "ruint::algorithms::DoubleWord",
                                                                                                                    Ty.path
                                                                                                                      "u128",
                                                                                                                    [],
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                    "low",
                                                                                                                    [],
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      r
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |)
                                                                                                            |) in
                                                                                                          let~
                                                                                                                _ :
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "*")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.tuple
                                                                                                                    []
                                                                                                                ] :=
                                                                                                            M.alloc (|
                                                                                                              M.write (|
                                                                                                                M.SubPointer.get_array_field (|
                                                                                                                  M.deref (|
                                                                                                                    M.read (|
                                                                                                                      numerator
                                                                                                                    |)
                                                                                                                  |),
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.path
                                                                                                                      "usize",
                                                                                                                    BinOp.Wrap.sub,
                                                                                                                    [
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.path
                                                                                                                          "usize",
                                                                                                                        BinOp.Wrap.add,
                                                                                                                        [
                                                                                                                          M.read (|
                                                                                                                            j
                                                                                                                          |);
                                                                                                                          M.read (|
                                                                                                                            n
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |);
                                                                                                                      Value.Integer
                                                                                                                        IntegerKind.Usize
                                                                                                                        1
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |),
                                                                                                                M.call_closure (|
                                                                                                                  Ty.path
                                                                                                                    "u64",
                                                                                                                  M.get_trait_method (|
                                                                                                                    "ruint::algorithms::DoubleWord",
                                                                                                                    Ty.path
                                                                                                                      "u128",
                                                                                                                    [],
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                    "high",
                                                                                                                    [],
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      r
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |)
                                                                                                            |) in
                                                                                                          borrow))
                                                                                                    ]
                                                                                                  |)));
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let~
                                                                                                        borrow :
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "*")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "u64"
                                                                                                        ] :=
                                                                                                    M.alloc (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.path
                                                                                                          "u64",
                                                                                                        M.get_function (|
                                                                                                          "ruint::algorithms::mul::submul_nx1",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.MutRef,
                                                                                                            M.deref (|
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.MutRef,
                                                                                                                M.deref (|
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&mut")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "slice")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "u64"
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::index::IndexMut",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "slice")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "u64"
                                                                                                                        ],
                                                                                                                      [],
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::ops::range::Range")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "usize"
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                      "index_mut",
                                                                                                                      [],
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.MutRef,
                                                                                                                        M.deref (|
                                                                                                                          M.read (|
                                                                                                                            numerator
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |);
                                                                                                                      Value.StructRecord
                                                                                                                        "core::ops::range::Range"
                                                                                                                        [
                                                                                                                          ("start",
                                                                                                                            M.read (|
                                                                                                                              j
                                                                                                                            |));
                                                                                                                          ("end_",
                                                                                                                            M.call_closure (|
                                                                                                                              Ty.path
                                                                                                                                "usize",
                                                                                                                              BinOp.Wrap.add,
                                                                                                                              [
                                                                                                                                M.read (|
                                                                                                                                  j
                                                                                                                                |);
                                                                                                                                M.read (|
                                                                                                                                  n
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |))
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |);
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                divisor
                                                                                                              |)
                                                                                                            |)
                                                                                                          |);
                                                                                                          M.read (|
                                                                                                            q
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |) in
                                                                                                  let~
                                                                                                        n2 :
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "*")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "u64"
                                                                                                        ] :=
                                                                                                    M.alloc (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.path
                                                                                                          "u64",
                                                                                                        M.get_associated_function (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::option::Option")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "u64"
                                                                                                            ],
                                                                                                          "unwrap_or_default",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::option::Option")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "u64"
                                                                                                              ],
                                                                                                            M.get_associated_function (|
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "core::option::Option")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ]
                                                                                                                ],
                                                                                                              "copied",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.call_closure (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "core::option::Option")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "u64"
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                M.get_associated_function (|
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "slice")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                  "get",
                                                                                                                  [],
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "usize"
                                                                                                                  ]
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        numerator
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |);
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.path
                                                                                                                      "usize",
                                                                                                                    BinOp.Wrap.add,
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        j
                                                                                                                      |);
                                                                                                                      M.read (|
                                                                                                                        n
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "bool",
                                                                                                      BinOp.ne,
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          borrow
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          n2
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)))
                                                                                            ]
                                                                                          |)
                                                                                        |) in
                                                                                      M.match_operator (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "*")
                                                                                          []
                                                                                          [
                                                                                            Ty.tuple
                                                                                              []
                                                                                          ],
                                                                                        M.alloc (|
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ :=
                                                                                                M.use
                                                                                                  (M.alloc (|
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "bool",
                                                                                                      M.get_function (|
                                                                                                        "core::convert::identity",
                                                                                                        [],
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "bool"
                                                                                                        ]
                                                                                                      |),
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          borrow
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)) in
                                                                                              let
                                                                                                    _ :=
                                                                                                is_constant_or_break_match (|
                                                                                                  M.read (|
                                                                                                    γ
                                                                                                  |),
                                                                                                  Value.Bool
                                                                                                    true
                                                                                                |) in
                                                                                              let~
                                                                                                    _ :
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "*")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        []
                                                                                                    ] :=
                                                                                                M.alloc (|
                                                                                                  M.write (|
                                                                                                    q,
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "u64",
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.path
                                                                                                          "u64",
                                                                                                        "wrapping_sub",
                                                                                                        [],
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          q
                                                                                                        |);
                                                                                                        Value.Integer
                                                                                                          IntegerKind.U64
                                                                                                          1
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |) in
                                                                                              let~
                                                                                                    carry :
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "*")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u64"
                                                                                                    ] :=
                                                                                                M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "u64",
                                                                                                    M.get_function (|
                                                                                                      "ruint::algorithms::add::adc_n",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.MutRef,
                                                                                                        M.deref (|
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.MutRef,
                                                                                                            M.deref (|
                                                                                                              M.call_closure (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&mut")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "slice")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "u64"
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::ops::index::IndexMut",
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "slice")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                  [],
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "core::ops::range::Range")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "usize"
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                  "index_mut",
                                                                                                                  [],
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.MutRef,
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        numerator
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |);
                                                                                                                  Value.StructRecord
                                                                                                                    "core::ops::range::Range"
                                                                                                                    [
                                                                                                                      ("start",
                                                                                                                        M.read (|
                                                                                                                          j
                                                                                                                        |));
                                                                                                                      ("end_",
                                                                                                                        M.call_closure (|
                                                                                                                          Ty.path
                                                                                                                            "usize",
                                                                                                                          BinOp.Wrap.add,
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              j
                                                                                                                            |);
                                                                                                                            M.read (|
                                                                                                                              n
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |))
                                                                                                                    ]
                                                                                                                ]
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      |);
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.deref (|
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.call_closure (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "slice")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "u64"
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::ops::index::Index",
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "slice")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                  [],
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "core::ops::range::RangeTo")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "usize"
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                  "index",
                                                                                                                  [],
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        divisor
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |);
                                                                                                                  Value.StructRecord
                                                                                                                    "core::ops::range::RangeTo"
                                                                                                                    [
                                                                                                                      ("end_",
                                                                                                                        M.read (|
                                                                                                                          n
                                                                                                                        |))
                                                                                                                    ]
                                                                                                                ]
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      |);
                                                                                                      Value.Integer
                                                                                                        IntegerKind.U64
                                                                                                        0
                                                                                                    ]
                                                                                                  |)
                                                                                                |) in
                                                                                              let~
                                                                                                    _ :
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "*")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        []
                                                                                                    ] :=
                                                                                                M.match_operator (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "*")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        []
                                                                                                    ],
                                                                                                  M.alloc (|
                                                                                                    Value.Tuple
                                                                                                      []
                                                                                                  |),
                                                                                                  [
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (let
                                                                                                              γ :=
                                                                                                          M.use
                                                                                                            (M.alloc (|
                                                                                                              Value.Bool
                                                                                                                true
                                                                                                            |)) in
                                                                                                        let
                                                                                                              _ :=
                                                                                                          is_constant_or_break_match (|
                                                                                                            M.read (|
                                                                                                              γ
                                                                                                            |),
                                                                                                            Value.Bool
                                                                                                              true
                                                                                                          |) in
                                                                                                        let~
                                                                                                              _ :
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "*")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.tuple
                                                                                                                  []
                                                                                                              ] :=
                                                                                                          M.match_operator (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "*")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.tuple
                                                                                                                  []
                                                                                                              ],
                                                                                                            M.alloc (|
                                                                                                              Value.Tuple
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    carry
                                                                                                                  |);
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.alloc (|
                                                                                                                      Value.Integer
                                                                                                                        IntegerKind.U64
                                                                                                                        1
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                ]
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        γ0_0 :=
                                                                                                                    M.SubPointer.get_tuple_field (|
                                                                                                                      γ,
                                                                                                                      0
                                                                                                                    |) in
                                                                                                                  let
                                                                                                                        γ0_1 :=
                                                                                                                    M.SubPointer.get_tuple_field (|
                                                                                                                      γ,
                                                                                                                      1
                                                                                                                    |) in
                                                                                                                  let
                                                                                                                        left_val :=
                                                                                                                    M.copy (|
                                                                                                                      γ0_0
                                                                                                                    |) in
                                                                                                                  let
                                                                                                                        right_val :=
                                                                                                                    M.copy (|
                                                                                                                      γ0_1
                                                                                                                    |) in
                                                                                                                  M.match_operator (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "*")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.tuple
                                                                                                                          []
                                                                                                                      ],
                                                                                                                    M.alloc (|
                                                                                                                      Value.Tuple
                                                                                                                        []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                γ :=
                                                                                                                            M.use
                                                                                                                              (M.alloc (|
                                                                                                                                UnOp.not (|
                                                                                                                                  M.call_closure (|
                                                                                                                                    Ty.path
                                                                                                                                      "bool",
                                                                                                                                    BinOp.eq,
                                                                                                                                    [
                                                                                                                                      M.read (|
                                                                                                                                        M.deref (|
                                                                                                                                          M.read (|
                                                                                                                                            left_val
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      |);
                                                                                                                                      M.read (|
                                                                                                                                        M.deref (|
                                                                                                                                          M.read (|
                                                                                                                                            right_val
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)) in
                                                                                                                          let
                                                                                                                                _ :=
                                                                                                                            is_constant_or_break_match (|
                                                                                                                              M.read (|
                                                                                                                                γ
                                                                                                                              |),
                                                                                                                              Value.Bool
                                                                                                                                true
                                                                                                                            |) in
                                                                                                                          M.alloc (|
                                                                                                                            M.never_to_any (|
                                                                                                                              M.read (|
                                                                                                                                let~
                                                                                                                                      kind :
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "*")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.path
                                                                                                                                          "core::panicking::AssertKind"
                                                                                                                                      ] :=
                                                                                                                                  M.alloc (|
                                                                                                                                    Value.StructTuple
                                                                                                                                      "core::panicking::AssertKind::Eq"
                                                                                                                                      []
                                                                                                                                  |) in
                                                                                                                                M.alloc (|
                                                                                                                                  M.call_closure (|
                                                                                                                                    Ty.path
                                                                                                                                      "never",
                                                                                                                                    M.get_function (|
                                                                                                                                      "core::panicking::assert_failed",
                                                                                                                                      [],
                                                                                                                                      [
                                                                                                                                        Ty.path
                                                                                                                                          "u64";
                                                                                                                                        Ty.path
                                                                                                                                          "u64"
                                                                                                                                      ]
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      M.read (|
                                                                                                                                        kind
                                                                                                                                      |);
                                                                                                                                      M.borrow (|
                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                        M.deref (|
                                                                                                                                          M.borrow (|
                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                            M.deref (|
                                                                                                                                              M.read (|
                                                                                                                                                left_val
                                                                                                                                              |)
                                                                                                                                            |)
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      |);
                                                                                                                                      M.borrow (|
                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                        M.deref (|
                                                                                                                                          M.borrow (|
                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                            M.deref (|
                                                                                                                                              M.read (|
                                                                                                                                                right_val
                                                                                                                                              |)
                                                                                                                                            |)
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      |);
                                                                                                                                      Value.StructTuple
                                                                                                                                        "core::option::Option::None"
                                                                                                                                        []
                                                                                                                                    ]
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |)));
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (M.alloc (|
                                                                                                                            Value.Tuple
                                                                                                                              []
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)))
                                                                                                            ]
                                                                                                          |) in
                                                                                                        M.alloc (|
                                                                                                          Value.Tuple
                                                                                                            []
                                                                                                        |)));
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (M.alloc (|
                                                                                                          Value.Tuple
                                                                                                            []
                                                                                                        |)))
                                                                                                  ]
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                Value.Tuple
                                                                                                  []
                                                                                              |)));
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (M.alloc (|
                                                                                                Value.Tuple
                                                                                                  []
                                                                                              |)))
                                                                                        ]
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            q))
                                                                      ]
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let~ q :
                                                                        Ty.apply
                                                                          (Ty.path "*")
                                                                          []
                                                                          [ Ty.path "u64" ] :=
                                                                      M.copy (|
                                                                        get_associated_constant (|
                                                                          Ty.path "u64",
                                                                          "MAX",
                                                                          Ty.path "u64"
                                                                        |)
                                                                      |) in
                                                                    let~ _carry :
                                                                        Ty.apply
                                                                          (Ty.path "*")
                                                                          []
                                                                          [ Ty.path "u64" ] :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.path "u64",
                                                                          M.get_function (|
                                                                            "ruint::algorithms::mul::submul_nx1",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&mut")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "slice")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "u64"
                                                                                            ]
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::index::IndexMut",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "u64"
                                                                                          ],
                                                                                        [],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::ops::range::Range")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ]
                                                                                        ],
                                                                                        "index_mut",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              numerator
                                                                                            |)
                                                                                          |)
                                                                                        |);
                                                                                        Value.StructRecord
                                                                                          "core::ops::range::Range"
                                                                                          [
                                                                                            ("start",
                                                                                              M.read (|
                                                                                                j
                                                                                              |));
                                                                                            ("end_",
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "usize",
                                                                                                BinOp.Wrap.add,
                                                                                                [
                                                                                                  M.read (|
                                                                                                    j
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    n
                                                                                                  |)
                                                                                                ]
                                                                                              |))
                                                                                          ]
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (| divisor |)
                                                                              |)
                                                                            |);
                                                                            M.read (| q |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    q))
                                                              ]
                                                            |)
                                                          |) in
                                                        M.match_operator (|
                                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        BinOp.lt,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.add,
                                                                            [
                                                                              M.read (| j |);
                                                                              M.read (| n |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                []
                                                                                [ Ty.path "u64" ],
                                                                              "len",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    numerator
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                let~ _ :
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.tuple [] ] :=
                                                                  M.alloc (|
                                                                    M.write (|
                                                                      M.SubPointer.get_array_field (|
                                                                        M.deref (|
                                                                          M.read (| numerator |)
                                                                        |),
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.add,
                                                                          [
                                                                            M.read (| j |);
                                                                            M.read (| n |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      M.read (| q |)
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let~ _ :
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [ Ty.tuple [] ] :=
                                                                  M.alloc (|
                                                                    M.write (|
                                                                      q_high,
                                                                      M.read (| q |)
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                              "copy_from_slice",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.read (| divisor |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ] ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeTo")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| numerator |) |)
                                          |);
                                          Value.StructRecord
                                            "core::ops::range::RangeTo"
                                            [ ("end_", M.read (| n |)) ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                              "copy_within",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeFrom")
                                  []
                                  [ Ty.path "usize" ]
                              ]
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.read (| numerator |) |)
                              |);
                              Value.StructRecord
                                "core::ops::range::RangeFrom"
                                [ ("start", M.read (| n |)) ];
                              Value.Integer IntegerKind.Usize 0
                            ]
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.write (|
                            M.SubPointer.get_array_field (|
                              M.deref (| M.read (| numerator |) |),
                              M.read (| m |)
                            |),
                            M.read (| q_high |)
                          |)
                        |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                              "fill",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ] ],
                                    M.get_trait_method (|
                                      "core::ops::index::IndexMut",
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::RangeFrom")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                      "index_mut",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| numerator |) |)
                                      |);
                                      Value.StructRecord
                                        "core::ops::range::RangeFrom"
                                        [
                                          ("start",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [ M.read (| m |); Value.Integer IntegerKind.Usize 1 ]
                                            |))
                                        ]
                                    ]
                                  |)
                                |)
                              |);
                              Value.Integer IntegerKind.U64 0
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_div_nxm :
        M.IsFunction.C "ruint::algorithms::div::knuth::div_nxm" div_nxm.
      Admitted.
      Global Typeclasses Opaque div_nxm.
    End knuth.
  End div.
End algorithms.
