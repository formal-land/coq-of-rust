(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module algorithms.
  Module div.
    Module reciprocal.
      (*
      pub fn reciprocal_ref(d: u64) -> u64 {
          debug_assert!(d >= (1 << 63));
          let r = u128::MAX / u128::from(d);
          debug_assert!(r >= (1 << 64));
          debug_assert!(r < (1 << 65));
          r as u64
      }
      *)
      Definition reciprocal_ref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ d ] =>
          ltac:(M.monadic
            (let d := M.alloc (| d |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          BinOp.ge (|
                                            M.read (| d |),
                                            BinOp.Wrap.shl (|
                                              Value.Integer IntegerKind.U64 1,
                                              Value.Integer IntegerKind.I32 63
                                            |)
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [
                                          M.read (|
                                            Value.String "assertion failed: d >= (1 << 63)"
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ r : Ty.path "u128" :=
                M.alloc (|
                  BinOp.Wrap.div (|
                    M.read (| M.get_constant "core::num::MAX" |),
                    M.call_closure (|
                      Ty.path "u128",
                      M.get_trait_method (|
                        "core::convert::From",
                        Ty.path "u128",
                        [],
                        [ Ty.path "u64" ],
                        "from",
                        [],
                        []
                      |),
                      [ M.read (| d |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          BinOp.ge (|
                                            M.read (| r |),
                                            BinOp.Wrap.shl (|
                                              Value.Integer IntegerKind.U128 1,
                                              Value.Integer IntegerKind.I32 64
                                            |)
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [
                                          M.read (|
                                            Value.String "assertion failed: r >= (1 << 64)"
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          BinOp.lt (|
                                            M.read (| r |),
                                            BinOp.Wrap.shl (|
                                              Value.Integer IntegerKind.U128 1,
                                              Value.Integer IntegerKind.I32 65
                                            |)
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [
                                          M.read (|
                                            Value.String "assertion failed: r < (1 << 65)"
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (| M.cast (Ty.path "u64") (M.read (| r |)) |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_reciprocal_ref :
        M.IsFunction.Trait "ruint::algorithms::div::reciprocal::reciprocal_ref" reciprocal_ref.
      Admitted.
      Global Typeclasses Opaque reciprocal_ref.
      
      (*
      pub fn reciprocal_mg10(d: u64) -> u64 {
          const ZERO: Wrapping<u64> = Wrapping(0);
          const ONE: Wrapping<u64> = Wrapping(1);
      
          // Lookup table for $\floor{\frac{2^{19} -3 ⋅ 2^8}{d_9 - 256}}$
          static TABLE: [u16; 256] = [
              2045, 2037, 2029, 2021, 2013, 2005, 1998, 1990, 1983, 1975, 1968, 1960, 1953, 1946, 1938,
              1931, 1924, 1917, 1910, 1903, 1896, 1889, 1883, 1876, 1869, 1863, 1856, 1849, 1843, 1836,
              1830, 1824, 1817, 1811, 1805, 1799, 1792, 1786, 1780, 1774, 1768, 1762, 1756, 1750, 1745,
              1739, 1733, 1727, 1722, 1716, 1710, 1705, 1699, 1694, 1688, 1683, 1677, 1672, 1667, 1661,
              1656, 1651, 1646, 1641, 1636, 1630, 1625, 1620, 1615, 1610, 1605, 1600, 1596, 1591, 1586,
              1581, 1576, 1572, 1567, 1562, 1558, 1553, 1548, 1544, 1539, 1535, 1530, 1526, 1521, 1517,
              1513, 1508, 1504, 1500, 1495, 1491, 1487, 1483, 1478, 1474, 1470, 1466, 1462, 1458, 1454,
              1450, 1446, 1442, 1438, 1434, 1430, 1426, 1422, 1418, 1414, 1411, 1407, 1403, 1399, 1396,
              1392, 1388, 1384, 1381, 1377, 1374, 1370, 1366, 1363, 1359, 1356, 1352, 1349, 1345, 1342,
              1338, 1335, 1332, 1328, 1325, 1322, 1318, 1315, 1312, 1308, 1305, 1302, 1299, 1295, 1292,
              1289, 1286, 1283, 1280, 1276, 1273, 1270, 1267, 1264, 1261, 1258, 1255, 1252, 1249, 1246,
              1243, 1240, 1237, 1234, 1231, 1228, 1226, 1223, 1220, 1217, 1214, 1211, 1209, 1206, 1203,
              1200, 1197, 1195, 1192, 1189, 1187, 1184, 1181, 1179, 1176, 1173, 1171, 1168, 1165, 1163,
              1160, 1158, 1155, 1153, 1150, 1148, 1145, 1143, 1140, 1138, 1135, 1133, 1130, 1128, 1125,
              1123, 1121, 1118, 1116, 1113, 1111, 1109, 1106, 1104, 1102, 1099, 1097, 1095, 1092, 1090,
              1088, 1086, 1083, 1081, 1079, 1077, 1074, 1072, 1070, 1068, 1066, 1064, 1061, 1059, 1057,
              1055, 1053, 1051, 1049, 1047, 1044, 1042, 1040, 1038, 1036, 1034, 1032, 1030, 1028, 1026,
              1024,
          ];
      
          debug_assert!(d >= (1 << 63));
          let d = Wrapping(d);
      
          let d0 = d & ONE;
          let d9 = d >> 55;
          let d40 = ONE + (d >> 24);
          let d63 = (d + ONE) >> 1;
          // let v0 = Wrapping(TABLE[(d9.0 - 256) as usize] as u64);
          let v0 = Wrapping( *unsafe { TABLE.get_unchecked((d9.0 - 256) as usize) } as u64);
          let v1 = (v0 << 11) - ((v0 * v0 * d40) >> 40) - ONE;
          let v2 = (v1 << 13) + ((v1 * ((ONE << 60) - v1 * d40)) >> 47);
          let e = ((v2 >> 1) & (ZERO - d0)) - v2 * d63;
          let v3 = (mul_hi(v2, e) >> 1) + (v2 << 31);
          let v4 = v3 - muladd_hi(v3, d, d) - d;
      
          v4.0
      }
      *)
      Definition reciprocal_mg10 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ d ] =>
          ltac:(M.monadic
            (let d := M.alloc (| d |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          BinOp.ge (|
                                            M.read (| d |),
                                            BinOp.Wrap.shl (|
                                              Value.Integer IntegerKind.U64 1,
                                              Value.Integer IntegerKind.I32 63
                                            |)
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [
                                          M.read (|
                                            Value.String "assertion failed: d >= (1 << 63)"
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ d : Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  Value.StructTuple "core::num::wrapping::Wrapping" [ M.read (| d |) ]
                |) in
              let~ d0 : Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                    M.get_trait_method (|
                      "core::ops::bit::BitAnd",
                      Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                      [],
                      [ Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] ],
                      "bitand",
                      [],
                      []
                    |),
                    [
                      M.read (| d |);
                      M.read (|
                        M.get_constant "ruint::algorithms::div::reciprocal::reciprocal_mg10::ONE"
                      |)
                    ]
                  |)
                |) in
              let~ d9 : Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                      [],
                      [ Ty.path "usize" ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| d |); Value.Integer IntegerKind.Usize 55 ]
                  |)
                |) in
              let~ d40 : Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                      [],
                      [ Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.get_constant "ruint::algorithms::div::reciprocal::reciprocal_mg10::ONE"
                      |);
                      M.call_closure (|
                        Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                        M.get_trait_method (|
                          "core::ops::bit::Shr",
                          Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.path "usize" ],
                          "shr",
                          [],
                          []
                        |),
                        [ M.read (| d |); Value.Integer IntegerKind.Usize 24 ]
                      |)
                    ]
                  |)
                |) in
              let~ d63 : Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                      [],
                      [ Ty.path "usize" ],
                      "shr",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ]
                          ],
                          "add",
                          [],
                          []
                        |),
                        [
                          M.read (| d |);
                          M.read (|
                            M.get_constant
                              "ruint::algorithms::div::reciprocal::reciprocal_mg10::ONE"
                          |)
                        ]
                      |);
                      Value.Integer IntegerKind.Usize 1
                    ]
                  |)
                |) in
              let~ v0 : Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  Value.StructTuple
                    "core::num::wrapping::Wrapping"
                    [
                      M.cast
                        (Ty.path "u64")
                        (M.read (|
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.path "u16" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ],
                                "get_unchecked",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.read (|
                                      M.get_constant
                                        "ruint::algorithms::div::reciprocal::reciprocal_mg10::TABLE"
                                    |)
                                  |)
                                |);
                                M.cast
                                  (Ty.path "usize")
                                  (BinOp.Wrap.sub (|
                                    M.read (|
                                      M.SubPointer.get_struct_tuple_field (|
                                        d9,
                                        "core::num::wrapping::Wrapping",
                                        0
                                      |)
                                    |),
                                    Value.Integer IntegerKind.U64 256
                                  |))
                              ]
                            |)
                          |)
                        |))
                    ]
                |) in
              let~ v1 : Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                    M.get_trait_method (|
                      "core::ops::arith::Sub",
                      Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                      [],
                      [ Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] ],
                      "sub",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                        M.get_trait_method (|
                          "core::ops::arith::Sub",
                          Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ]
                          ],
                          "sub",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                            M.get_trait_method (|
                              "core::ops::bit::Shl",
                              Ty.apply
                                (Ty.path "core::num::wrapping::Wrapping")
                                []
                                [ Ty.path "u64" ],
                              [],
                              [ Ty.path "usize" ],
                              "shl",
                              [],
                              []
                            |),
                            [ M.read (| v0 |); Value.Integer IntegerKind.Usize 11 ]
                          |);
                          M.call_closure (|
                            Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                            M.get_trait_method (|
                              "core::ops::bit::Shr",
                              Ty.apply
                                (Ty.path "core::num::wrapping::Wrapping")
                                []
                                [ Ty.path "u64" ],
                              [],
                              [ Ty.path "usize" ],
                              "shr",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::num::wrapping::Wrapping")
                                  []
                                  [ Ty.path "u64" ],
                                M.get_trait_method (|
                                  "core::ops::arith::Mul",
                                  Ty.apply
                                    (Ty.path "core::num::wrapping::Wrapping")
                                    []
                                    [ Ty.path "u64" ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::num::wrapping::Wrapping")
                                      []
                                      [ Ty.path "u64" ]
                                  ],
                                  "mul",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::num::wrapping::Wrapping")
                                      []
                                      [ Ty.path "u64" ],
                                    M.get_trait_method (|
                                      "core::ops::arith::Mul",
                                      Ty.apply
                                        (Ty.path "core::num::wrapping::Wrapping")
                                        []
                                        [ Ty.path "u64" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::num::wrapping::Wrapping")
                                          []
                                          [ Ty.path "u64" ]
                                      ],
                                      "mul",
                                      [],
                                      []
                                    |),
                                    [ M.read (| v0 |); M.read (| v0 |) ]
                                  |);
                                  M.read (| d40 |)
                                ]
                              |);
                              Value.Integer IntegerKind.Usize 40
                            ]
                          |)
                        ]
                      |);
                      M.read (|
                        M.get_constant "ruint::algorithms::div::reciprocal::reciprocal_mg10::ONE"
                      |)
                    ]
                  |)
                |) in
              let~ v2 : Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                      [],
                      [ Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                        M.get_trait_method (|
                          "core::ops::bit::Shl",
                          Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.path "usize" ],
                          "shl",
                          [],
                          []
                        |),
                        [ M.read (| v1 |); Value.Integer IntegerKind.Usize 13 ]
                      |);
                      M.call_closure (|
                        Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                        M.get_trait_method (|
                          "core::ops::bit::Shr",
                          Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.path "usize" ],
                          "shr",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                            M.get_trait_method (|
                              "core::ops::arith::Mul",
                              Ty.apply
                                (Ty.path "core::num::wrapping::Wrapping")
                                []
                                [ Ty.path "u64" ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::num::wrapping::Wrapping")
                                  []
                                  [ Ty.path "u64" ]
                              ],
                              "mul",
                              [],
                              []
                            |),
                            [
                              M.read (| v1 |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::num::wrapping::Wrapping")
                                  []
                                  [ Ty.path "u64" ],
                                M.get_trait_method (|
                                  "core::ops::arith::Sub",
                                  Ty.apply
                                    (Ty.path "core::num::wrapping::Wrapping")
                                    []
                                    [ Ty.path "u64" ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::num::wrapping::Wrapping")
                                      []
                                      [ Ty.path "u64" ]
                                  ],
                                  "sub",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::num::wrapping::Wrapping")
                                      []
                                      [ Ty.path "u64" ],
                                    M.get_trait_method (|
                                      "core::ops::bit::Shl",
                                      Ty.apply
                                        (Ty.path "core::num::wrapping::Wrapping")
                                        []
                                        [ Ty.path "u64" ],
                                      [],
                                      [ Ty.path "usize" ],
                                      "shl",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.get_constant
                                          "ruint::algorithms::div::reciprocal::reciprocal_mg10::ONE"
                                      |);
                                      Value.Integer IntegerKind.Usize 60
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::num::wrapping::Wrapping")
                                      []
                                      [ Ty.path "u64" ],
                                    M.get_trait_method (|
                                      "core::ops::arith::Mul",
                                      Ty.apply
                                        (Ty.path "core::num::wrapping::Wrapping")
                                        []
                                        [ Ty.path "u64" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::num::wrapping::Wrapping")
                                          []
                                          [ Ty.path "u64" ]
                                      ],
                                      "mul",
                                      [],
                                      []
                                    |),
                                    [ M.read (| v1 |); M.read (| d40 |) ]
                                  |)
                                ]
                              |)
                            ]
                          |);
                          Value.Integer IntegerKind.Usize 47
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ e : Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                    M.get_trait_method (|
                      "core::ops::arith::Sub",
                      Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                      [],
                      [ Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] ],
                      "sub",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                        M.get_trait_method (|
                          "core::ops::bit::BitAnd",
                          Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ]
                          ],
                          "bitand",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                            M.get_trait_method (|
                              "core::ops::bit::Shr",
                              Ty.apply
                                (Ty.path "core::num::wrapping::Wrapping")
                                []
                                [ Ty.path "u64" ],
                              [],
                              [ Ty.path "usize" ],
                              "shr",
                              [],
                              []
                            |),
                            [ M.read (| v2 |); Value.Integer IntegerKind.Usize 1 ]
                          |);
                          M.call_closure (|
                            Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                            M.get_trait_method (|
                              "core::ops::arith::Sub",
                              Ty.apply
                                (Ty.path "core::num::wrapping::Wrapping")
                                []
                                [ Ty.path "u64" ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::num::wrapping::Wrapping")
                                  []
                                  [ Ty.path "u64" ]
                              ],
                              "sub",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.get_constant
                                  "ruint::algorithms::div::reciprocal::reciprocal_mg10::ZERO"
                              |);
                              M.read (| d0 |)
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ]
                          ],
                          "mul",
                          [],
                          []
                        |),
                        [ M.read (| v2 |); M.read (| d63 |) ]
                      |)
                    ]
                  |)
                |) in
              let~ v3 : Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                    M.get_trait_method (|
                      "core::ops::arith::Add",
                      Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                      [],
                      [ Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] ],
                      "add",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                        M.get_trait_method (|
                          "core::ops::bit::Shr",
                          Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.path "usize" ],
                          "shr",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                            M.get_function (|
                              "ruint::algorithms::div::reciprocal::mul_hi",
                              [],
                              []
                            |),
                            [ M.read (| v2 |); M.read (| e |) ]
                          |);
                          Value.Integer IntegerKind.Usize 1
                        ]
                      |);
                      M.call_closure (|
                        Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                        M.get_trait_method (|
                          "core::ops::bit::Shl",
                          Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.path "usize" ],
                          "shl",
                          [],
                          []
                        |),
                        [ M.read (| v2 |); Value.Integer IntegerKind.Usize 31 ]
                      |)
                    ]
                  |)
                |) in
              let~ v4 : Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                    M.get_trait_method (|
                      "core::ops::arith::Sub",
                      Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                      [],
                      [ Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ] ],
                      "sub",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                        M.get_trait_method (|
                          "core::ops::arith::Sub",
                          Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ]
                          ],
                          "sub",
                          [],
                          []
                        |),
                        [
                          M.read (| v3 |);
                          M.call_closure (|
                            Ty.apply (Ty.path "core::num::wrapping::Wrapping") [] [ Ty.path "u64" ],
                            M.get_function (|
                              "ruint::algorithms::div::reciprocal::muladd_hi",
                              [],
                              []
                            |),
                            [ M.read (| v3 |); M.read (| d |); M.read (| d |) ]
                          |)
                        ]
                      |);
                      M.read (| d |)
                    ]
                  |)
                |) in
              M.SubPointer.get_struct_tuple_field (| v4, "core::num::wrapping::Wrapping", 0 |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_reciprocal_mg10 :
        M.IsFunction.Trait "ruint::algorithms::div::reciprocal::reciprocal_mg10" reciprocal_mg10.
      Admitted.
      Global Typeclasses Opaque reciprocal_mg10.
      
      Module reciprocal_mg10.
        Definition value_ZERO : Value.t :=
          M.run_constant
            ltac:(M.monadic
              (M.alloc (|
                Value.StructTuple
                  "core::num::wrapping::Wrapping"
                  [ Value.Integer IntegerKind.U64 0 ]
              |))).
        
        Axiom Constant_value_ZERO :
          (M.get_constant "ruint::algorithms::div::reciprocal::reciprocal_mg10::ZERO") = value_ZERO.
        Global Hint Rewrite Constant_value_ZERO : constant_rewrites.
        
        Definition value_ONE : Value.t :=
          M.run_constant
            ltac:(M.monadic
              (M.alloc (|
                Value.StructTuple
                  "core::num::wrapping::Wrapping"
                  [ Value.Integer IntegerKind.U64 1 ]
              |))).
        
        Axiom Constant_value_ONE :
          (M.get_constant "ruint::algorithms::div::reciprocal::reciprocal_mg10::ONE") = value_ONE.
        Global Hint Rewrite Constant_value_ONE : constant_rewrites.
        
        Definition value_TABLE : Value.t :=
          M.run_constant
            ltac:(M.monadic
              (M.alloc (|
                M.alloc (|
                  Value.Array
                    [
                      Value.Integer IntegerKind.U16 2045;
                      Value.Integer IntegerKind.U16 2037;
                      Value.Integer IntegerKind.U16 2029;
                      Value.Integer IntegerKind.U16 2021;
                      Value.Integer IntegerKind.U16 2013;
                      Value.Integer IntegerKind.U16 2005;
                      Value.Integer IntegerKind.U16 1998;
                      Value.Integer IntegerKind.U16 1990;
                      Value.Integer IntegerKind.U16 1983;
                      Value.Integer IntegerKind.U16 1975;
                      Value.Integer IntegerKind.U16 1968;
                      Value.Integer IntegerKind.U16 1960;
                      Value.Integer IntegerKind.U16 1953;
                      Value.Integer IntegerKind.U16 1946;
                      Value.Integer IntegerKind.U16 1938;
                      Value.Integer IntegerKind.U16 1931;
                      Value.Integer IntegerKind.U16 1924;
                      Value.Integer IntegerKind.U16 1917;
                      Value.Integer IntegerKind.U16 1910;
                      Value.Integer IntegerKind.U16 1903;
                      Value.Integer IntegerKind.U16 1896;
                      Value.Integer IntegerKind.U16 1889;
                      Value.Integer IntegerKind.U16 1883;
                      Value.Integer IntegerKind.U16 1876;
                      Value.Integer IntegerKind.U16 1869;
                      Value.Integer IntegerKind.U16 1863;
                      Value.Integer IntegerKind.U16 1856;
                      Value.Integer IntegerKind.U16 1849;
                      Value.Integer IntegerKind.U16 1843;
                      Value.Integer IntegerKind.U16 1836;
                      Value.Integer IntegerKind.U16 1830;
                      Value.Integer IntegerKind.U16 1824;
                      Value.Integer IntegerKind.U16 1817;
                      Value.Integer IntegerKind.U16 1811;
                      Value.Integer IntegerKind.U16 1805;
                      Value.Integer IntegerKind.U16 1799;
                      Value.Integer IntegerKind.U16 1792;
                      Value.Integer IntegerKind.U16 1786;
                      Value.Integer IntegerKind.U16 1780;
                      Value.Integer IntegerKind.U16 1774;
                      Value.Integer IntegerKind.U16 1768;
                      Value.Integer IntegerKind.U16 1762;
                      Value.Integer IntegerKind.U16 1756;
                      Value.Integer IntegerKind.U16 1750;
                      Value.Integer IntegerKind.U16 1745;
                      Value.Integer IntegerKind.U16 1739;
                      Value.Integer IntegerKind.U16 1733;
                      Value.Integer IntegerKind.U16 1727;
                      Value.Integer IntegerKind.U16 1722;
                      Value.Integer IntegerKind.U16 1716;
                      Value.Integer IntegerKind.U16 1710;
                      Value.Integer IntegerKind.U16 1705;
                      Value.Integer IntegerKind.U16 1699;
                      Value.Integer IntegerKind.U16 1694;
                      Value.Integer IntegerKind.U16 1688;
                      Value.Integer IntegerKind.U16 1683;
                      Value.Integer IntegerKind.U16 1677;
                      Value.Integer IntegerKind.U16 1672;
                      Value.Integer IntegerKind.U16 1667;
                      Value.Integer IntegerKind.U16 1661;
                      Value.Integer IntegerKind.U16 1656;
                      Value.Integer IntegerKind.U16 1651;
                      Value.Integer IntegerKind.U16 1646;
                      Value.Integer IntegerKind.U16 1641;
                      Value.Integer IntegerKind.U16 1636;
                      Value.Integer IntegerKind.U16 1630;
                      Value.Integer IntegerKind.U16 1625;
                      Value.Integer IntegerKind.U16 1620;
                      Value.Integer IntegerKind.U16 1615;
                      Value.Integer IntegerKind.U16 1610;
                      Value.Integer IntegerKind.U16 1605;
                      Value.Integer IntegerKind.U16 1600;
                      Value.Integer IntegerKind.U16 1596;
                      Value.Integer IntegerKind.U16 1591;
                      Value.Integer IntegerKind.U16 1586;
                      Value.Integer IntegerKind.U16 1581;
                      Value.Integer IntegerKind.U16 1576;
                      Value.Integer IntegerKind.U16 1572;
                      Value.Integer IntegerKind.U16 1567;
                      Value.Integer IntegerKind.U16 1562;
                      Value.Integer IntegerKind.U16 1558;
                      Value.Integer IntegerKind.U16 1553;
                      Value.Integer IntegerKind.U16 1548;
                      Value.Integer IntegerKind.U16 1544;
                      Value.Integer IntegerKind.U16 1539;
                      Value.Integer IntegerKind.U16 1535;
                      Value.Integer IntegerKind.U16 1530;
                      Value.Integer IntegerKind.U16 1526;
                      Value.Integer IntegerKind.U16 1521;
                      Value.Integer IntegerKind.U16 1517;
                      Value.Integer IntegerKind.U16 1513;
                      Value.Integer IntegerKind.U16 1508;
                      Value.Integer IntegerKind.U16 1504;
                      Value.Integer IntegerKind.U16 1500;
                      Value.Integer IntegerKind.U16 1495;
                      Value.Integer IntegerKind.U16 1491;
                      Value.Integer IntegerKind.U16 1487;
                      Value.Integer IntegerKind.U16 1483;
                      Value.Integer IntegerKind.U16 1478;
                      Value.Integer IntegerKind.U16 1474;
                      Value.Integer IntegerKind.U16 1470;
                      Value.Integer IntegerKind.U16 1466;
                      Value.Integer IntegerKind.U16 1462;
                      Value.Integer IntegerKind.U16 1458;
                      Value.Integer IntegerKind.U16 1454;
                      Value.Integer IntegerKind.U16 1450;
                      Value.Integer IntegerKind.U16 1446;
                      Value.Integer IntegerKind.U16 1442;
                      Value.Integer IntegerKind.U16 1438;
                      Value.Integer IntegerKind.U16 1434;
                      Value.Integer IntegerKind.U16 1430;
                      Value.Integer IntegerKind.U16 1426;
                      Value.Integer IntegerKind.U16 1422;
                      Value.Integer IntegerKind.U16 1418;
                      Value.Integer IntegerKind.U16 1414;
                      Value.Integer IntegerKind.U16 1411;
                      Value.Integer IntegerKind.U16 1407;
                      Value.Integer IntegerKind.U16 1403;
                      Value.Integer IntegerKind.U16 1399;
                      Value.Integer IntegerKind.U16 1396;
                      Value.Integer IntegerKind.U16 1392;
                      Value.Integer IntegerKind.U16 1388;
                      Value.Integer IntegerKind.U16 1384;
                      Value.Integer IntegerKind.U16 1381;
                      Value.Integer IntegerKind.U16 1377;
                      Value.Integer IntegerKind.U16 1374;
                      Value.Integer IntegerKind.U16 1370;
                      Value.Integer IntegerKind.U16 1366;
                      Value.Integer IntegerKind.U16 1363;
                      Value.Integer IntegerKind.U16 1359;
                      Value.Integer IntegerKind.U16 1356;
                      Value.Integer IntegerKind.U16 1352;
                      Value.Integer IntegerKind.U16 1349;
                      Value.Integer IntegerKind.U16 1345;
                      Value.Integer IntegerKind.U16 1342;
                      Value.Integer IntegerKind.U16 1338;
                      Value.Integer IntegerKind.U16 1335;
                      Value.Integer IntegerKind.U16 1332;
                      Value.Integer IntegerKind.U16 1328;
                      Value.Integer IntegerKind.U16 1325;
                      Value.Integer IntegerKind.U16 1322;
                      Value.Integer IntegerKind.U16 1318;
                      Value.Integer IntegerKind.U16 1315;
                      Value.Integer IntegerKind.U16 1312;
                      Value.Integer IntegerKind.U16 1308;
                      Value.Integer IntegerKind.U16 1305;
                      Value.Integer IntegerKind.U16 1302;
                      Value.Integer IntegerKind.U16 1299;
                      Value.Integer IntegerKind.U16 1295;
                      Value.Integer IntegerKind.U16 1292;
                      Value.Integer IntegerKind.U16 1289;
                      Value.Integer IntegerKind.U16 1286;
                      Value.Integer IntegerKind.U16 1283;
                      Value.Integer IntegerKind.U16 1280;
                      Value.Integer IntegerKind.U16 1276;
                      Value.Integer IntegerKind.U16 1273;
                      Value.Integer IntegerKind.U16 1270;
                      Value.Integer IntegerKind.U16 1267;
                      Value.Integer IntegerKind.U16 1264;
                      Value.Integer IntegerKind.U16 1261;
                      Value.Integer IntegerKind.U16 1258;
                      Value.Integer IntegerKind.U16 1255;
                      Value.Integer IntegerKind.U16 1252;
                      Value.Integer IntegerKind.U16 1249;
                      Value.Integer IntegerKind.U16 1246;
                      Value.Integer IntegerKind.U16 1243;
                      Value.Integer IntegerKind.U16 1240;
                      Value.Integer IntegerKind.U16 1237;
                      Value.Integer IntegerKind.U16 1234;
                      Value.Integer IntegerKind.U16 1231;
                      Value.Integer IntegerKind.U16 1228;
                      Value.Integer IntegerKind.U16 1226;
                      Value.Integer IntegerKind.U16 1223;
                      Value.Integer IntegerKind.U16 1220;
                      Value.Integer IntegerKind.U16 1217;
                      Value.Integer IntegerKind.U16 1214;
                      Value.Integer IntegerKind.U16 1211;
                      Value.Integer IntegerKind.U16 1209;
                      Value.Integer IntegerKind.U16 1206;
                      Value.Integer IntegerKind.U16 1203;
                      Value.Integer IntegerKind.U16 1200;
                      Value.Integer IntegerKind.U16 1197;
                      Value.Integer IntegerKind.U16 1195;
                      Value.Integer IntegerKind.U16 1192;
                      Value.Integer IntegerKind.U16 1189;
                      Value.Integer IntegerKind.U16 1187;
                      Value.Integer IntegerKind.U16 1184;
                      Value.Integer IntegerKind.U16 1181;
                      Value.Integer IntegerKind.U16 1179;
                      Value.Integer IntegerKind.U16 1176;
                      Value.Integer IntegerKind.U16 1173;
                      Value.Integer IntegerKind.U16 1171;
                      Value.Integer IntegerKind.U16 1168;
                      Value.Integer IntegerKind.U16 1165;
                      Value.Integer IntegerKind.U16 1163;
                      Value.Integer IntegerKind.U16 1160;
                      Value.Integer IntegerKind.U16 1158;
                      Value.Integer IntegerKind.U16 1155;
                      Value.Integer IntegerKind.U16 1153;
                      Value.Integer IntegerKind.U16 1150;
                      Value.Integer IntegerKind.U16 1148;
                      Value.Integer IntegerKind.U16 1145;
                      Value.Integer IntegerKind.U16 1143;
                      Value.Integer IntegerKind.U16 1140;
                      Value.Integer IntegerKind.U16 1138;
                      Value.Integer IntegerKind.U16 1135;
                      Value.Integer IntegerKind.U16 1133;
                      Value.Integer IntegerKind.U16 1130;
                      Value.Integer IntegerKind.U16 1128;
                      Value.Integer IntegerKind.U16 1125;
                      Value.Integer IntegerKind.U16 1123;
                      Value.Integer IntegerKind.U16 1121;
                      Value.Integer IntegerKind.U16 1118;
                      Value.Integer IntegerKind.U16 1116;
                      Value.Integer IntegerKind.U16 1113;
                      Value.Integer IntegerKind.U16 1111;
                      Value.Integer IntegerKind.U16 1109;
                      Value.Integer IntegerKind.U16 1106;
                      Value.Integer IntegerKind.U16 1104;
                      Value.Integer IntegerKind.U16 1102;
                      Value.Integer IntegerKind.U16 1099;
                      Value.Integer IntegerKind.U16 1097;
                      Value.Integer IntegerKind.U16 1095;
                      Value.Integer IntegerKind.U16 1092;
                      Value.Integer IntegerKind.U16 1090;
                      Value.Integer IntegerKind.U16 1088;
                      Value.Integer IntegerKind.U16 1086;
                      Value.Integer IntegerKind.U16 1083;
                      Value.Integer IntegerKind.U16 1081;
                      Value.Integer IntegerKind.U16 1079;
                      Value.Integer IntegerKind.U16 1077;
                      Value.Integer IntegerKind.U16 1074;
                      Value.Integer IntegerKind.U16 1072;
                      Value.Integer IntegerKind.U16 1070;
                      Value.Integer IntegerKind.U16 1068;
                      Value.Integer IntegerKind.U16 1066;
                      Value.Integer IntegerKind.U16 1064;
                      Value.Integer IntegerKind.U16 1061;
                      Value.Integer IntegerKind.U16 1059;
                      Value.Integer IntegerKind.U16 1057;
                      Value.Integer IntegerKind.U16 1055;
                      Value.Integer IntegerKind.U16 1053;
                      Value.Integer IntegerKind.U16 1051;
                      Value.Integer IntegerKind.U16 1049;
                      Value.Integer IntegerKind.U16 1047;
                      Value.Integer IntegerKind.U16 1044;
                      Value.Integer IntegerKind.U16 1042;
                      Value.Integer IntegerKind.U16 1040;
                      Value.Integer IntegerKind.U16 1038;
                      Value.Integer IntegerKind.U16 1036;
                      Value.Integer IntegerKind.U16 1034;
                      Value.Integer IntegerKind.U16 1032;
                      Value.Integer IntegerKind.U16 1030;
                      Value.Integer IntegerKind.U16 1028;
                      Value.Integer IntegerKind.U16 1026;
                      Value.Integer IntegerKind.U16 1024
                    ]
                |)
              |))).
        
        Axiom Constant_value_TABLE :
          (M.get_constant "ruint::algorithms::div::reciprocal::reciprocal_mg10::TABLE") =
            value_TABLE.
        Global Hint Rewrite Constant_value_TABLE : constant_rewrites.
      End reciprocal_mg10.
      
      (*
      pub fn reciprocal_2_mg10(d: u128) -> u64 {
          debug_assert!(d >= (1 << 127));
          let d1 = (d >> 64) as u64;
          let d0 = d as u64;
      
          let mut v = reciprocal(d1);
          let mut p = d1.wrapping_mul(v).wrapping_add(d0);
          // OPT: This is checking the carry flag
          if p < d0 {
              v = v.wrapping_sub(1);
              if p >= d1 {
                  v = v.wrapping_sub(1);
                  p = p.wrapping_sub(d1);
              }
              p = p.wrapping_sub(d1);
          }
          let t = u128::from(v) * u128::from(d0);
          let t1 = (t >> 64) as u64;
          let t0 = t as u64;
      
          let p = p.wrapping_add(t1);
          // OPT: This is checking the carry flag
          if p < t1 {
              v = v.wrapping_sub(1);
              if (u128::from(p) << 64) | u128::from(t0) >= d {
                  v = v.wrapping_sub(1);
              }
          }
          v
      }
      *)
      Definition reciprocal_2_mg10 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ d ] =>
          ltac:(M.monadic
            (let d := M.alloc (| d |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          BinOp.ge (|
                                            M.read (| d |),
                                            BinOp.Wrap.shl (|
                                              Value.Integer IntegerKind.U128 1,
                                              Value.Integer IntegerKind.I32 127
                                            |)
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [
                                          M.read (|
                                            Value.String "assertion failed: d >= (1 << 127)"
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ d1 : Ty.path "u64" :=
                M.alloc (|
                  M.cast
                    (Ty.path "u64")
                    (BinOp.Wrap.shr (| M.read (| d |), Value.Integer IntegerKind.I32 64 |))
                |) in
              let~ d0 : Ty.path "u64" := M.alloc (| M.cast (Ty.path "u64") (M.read (| d |)) |) in
              let~ v : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_function (|
                      "ruint::algorithms::div::reciprocal::reciprocal_mg10",
                      [],
                      []
                    |),
                    [ M.read (| d1 |) ]
                  |)
                |) in
              let~ p : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "wrapping_add", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_associated_function (| Ty.path "u64", "wrapping_mul", [], [] |),
                        [ M.read (| d1 |); M.read (| v |) ]
                      |);
                      M.read (| d0 |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use (M.alloc (| BinOp.lt (| M.read (| p |), M.read (| d0 |) |) |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.write (|
                              v,
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_associated_function (|
                                  Ty.path "u64",
                                  "wrapping_sub",
                                  [],
                                  []
                                |),
                                [ M.read (| v |); Value.Integer IntegerKind.U64 1 ]
                              |)
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.ge (| M.read (| p |), M.read (| d1 |) |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (|
                                      M.write (|
                                        v,
                                        M.call_closure (|
                                          Ty.path "u64",
                                          M.get_associated_function (|
                                            Ty.path "u64",
                                            "wrapping_sub",
                                            [],
                                            []
                                          |),
                                          [ M.read (| v |); Value.Integer IntegerKind.U64 1 ]
                                        |)
                                      |)
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (|
                                      M.write (|
                                        p,
                                        M.call_closure (|
                                          Ty.path "u64",
                                          M.get_associated_function (|
                                            Ty.path "u64",
                                            "wrapping_sub",
                                            [],
                                            []
                                          |),
                                          [ M.read (| p |); M.read (| d1 |) ]
                                        |)
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.write (|
                              p,
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_associated_function (|
                                  Ty.path "u64",
                                  "wrapping_sub",
                                  [],
                                  []
                                |),
                                [ M.read (| p |); M.read (| d1 |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ t : Ty.path "u128" :=
                M.alloc (|
                  BinOp.Wrap.mul (|
                    M.call_closure (|
                      Ty.path "u128",
                      M.get_trait_method (|
                        "core::convert::From",
                        Ty.path "u128",
                        [],
                        [ Ty.path "u64" ],
                        "from",
                        [],
                        []
                      |),
                      [ M.read (| v |) ]
                    |),
                    M.call_closure (|
                      Ty.path "u128",
                      M.get_trait_method (|
                        "core::convert::From",
                        Ty.path "u128",
                        [],
                        [ Ty.path "u64" ],
                        "from",
                        [],
                        []
                      |),
                      [ M.read (| d0 |) ]
                    |)
                  |)
                |) in
              let~ t1 : Ty.path "u64" :=
                M.alloc (|
                  M.cast
                    (Ty.path "u64")
                    (BinOp.Wrap.shr (| M.read (| t |), Value.Integer IntegerKind.I32 64 |))
                |) in
              let~ t0 : Ty.path "u64" := M.alloc (| M.cast (Ty.path "u64") (M.read (| t |)) |) in
              let~ p : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "wrapping_add", [], [] |),
                    [ M.read (| p |); M.read (| t1 |) ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use (M.alloc (| BinOp.lt (| M.read (| p |), M.read (| t1 |) |) |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.write (|
                              v,
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_associated_function (|
                                  Ty.path "u64",
                                  "wrapping_sub",
                                  [],
                                  []
                                |),
                                [ M.read (| v |); Value.Integer IntegerKind.U64 1 ]
                              |)
                            |)
                          |) in
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      BinOp.ge (|
                                        BinOp.bit_or
                                          (BinOp.Wrap.shl (|
                                            M.call_closure (|
                                              Ty.path "u128",
                                              M.get_trait_method (|
                                                "core::convert::From",
                                                Ty.path "u128",
                                                [],
                                                [ Ty.path "u64" ],
                                                "from",
                                                [],
                                                []
                                              |),
                                              [ M.read (| p |) ]
                                            |),
                                            Value.Integer IntegerKind.I32 64
                                          |))
                                          (M.call_closure (|
                                            Ty.path "u128",
                                            M.get_trait_method (|
                                              "core::convert::From",
                                              Ty.path "u128",
                                              [],
                                              [ Ty.path "u64" ],
                                              "from",
                                              [],
                                              []
                                            |),
                                            [ M.read (| t0 |) ]
                                          |)),
                                        M.read (| d |)
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    M.write (|
                                      v,
                                      M.call_closure (|
                                        Ty.path "u64",
                                        M.get_associated_function (|
                                          Ty.path "u64",
                                          "wrapping_sub",
                                          [],
                                          []
                                        |),
                                        [ M.read (| v |); Value.Integer IntegerKind.U64 1 ]
                                      |)
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              v
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_reciprocal_2_mg10 :
        M.IsFunction.Trait
          "ruint::algorithms::div::reciprocal::reciprocal_2_mg10"
          reciprocal_2_mg10.
      Admitted.
      Global Typeclasses Opaque reciprocal_2_mg10.
      
      (*
      fn mul_hi(a: Wrapping<u64>, b: Wrapping<u64>) -> Wrapping<u64> {
          let a = u128::from(a.0);
          let b = u128::from(b.0);
          let r = a * b;
          Wrapping((r >> 64) as u64)
      }
      *)
      Definition mul_hi (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ a; b ] =>
          ltac:(M.monadic
            (let a := M.alloc (| a |) in
            let b := M.alloc (| b |) in
            M.read (|
              let~ a : Ty.path "u128" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.path "u128",
                      [],
                      [ Ty.path "u64" ],
                      "from",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_tuple_field (|
                          a,
                          "core::num::wrapping::Wrapping",
                          0
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ b : Ty.path "u128" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.path "u128",
                      [],
                      [ Ty.path "u64" ],
                      "from",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_tuple_field (|
                          b,
                          "core::num::wrapping::Wrapping",
                          0
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ r : Ty.path "u128" :=
                M.alloc (| BinOp.Wrap.mul (| M.read (| a |), M.read (| b |) |) |) in
              M.alloc (|
                Value.StructTuple
                  "core::num::wrapping::Wrapping"
                  [
                    M.cast
                      (Ty.path "u64")
                      (BinOp.Wrap.shr (| M.read (| r |), Value.Integer IntegerKind.I32 64 |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_mul_hi :
        M.IsFunction.Trait "ruint::algorithms::div::reciprocal::mul_hi" mul_hi.
      Admitted.
      Global Typeclasses Opaque mul_hi.
      
      (*
      fn muladd_hi(a: Wrapping<u64>, b: Wrapping<u64>, c: Wrapping<u64>) -> Wrapping<u64> {
          let a = u128::from(a.0);
          let b = u128::from(b.0);
          let c = u128::from(c.0);
          let r = a * b + c;
          Wrapping((r >> 64) as u64)
      }
      *)
      Definition muladd_hi (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ a; b; c ] =>
          ltac:(M.monadic
            (let a := M.alloc (| a |) in
            let b := M.alloc (| b |) in
            let c := M.alloc (| c |) in
            M.read (|
              let~ a : Ty.path "u128" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.path "u128",
                      [],
                      [ Ty.path "u64" ],
                      "from",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_tuple_field (|
                          a,
                          "core::num::wrapping::Wrapping",
                          0
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ b : Ty.path "u128" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.path "u128",
                      [],
                      [ Ty.path "u64" ],
                      "from",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_tuple_field (|
                          b,
                          "core::num::wrapping::Wrapping",
                          0
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ c : Ty.path "u128" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.path "u128",
                      [],
                      [ Ty.path "u64" ],
                      "from",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_tuple_field (|
                          c,
                          "core::num::wrapping::Wrapping",
                          0
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ r : Ty.path "u128" :=
                M.alloc (|
                  BinOp.Wrap.add (|
                    BinOp.Wrap.mul (| M.read (| a |), M.read (| b |) |),
                    M.read (| c |)
                  |)
                |) in
              M.alloc (|
                Value.StructTuple
                  "core::num::wrapping::Wrapping"
                  [
                    M.cast
                      (Ty.path "u64")
                      (BinOp.Wrap.shr (| M.read (| r |), Value.Integer IntegerKind.I32 64 |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_muladd_hi :
        M.IsFunction.Trait "ruint::algorithms::div::reciprocal::muladd_hi" muladd_hi.
      Admitted.
      Global Typeclasses Opaque muladd_hi.
    End reciprocal.
  End div.
End algorithms.
