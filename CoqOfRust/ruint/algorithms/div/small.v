(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module algorithms.
  Module div.
    Module small.
      (*
      pub fn div_nx1_normalized(u: &mut [u64], d: u64) -> u64 {
          // OPT: Version with in-place shifting of `u`
          debug_assert!(d >= (1 << 63));
      
          let v = reciprocal(d);
          let mut r: u64 = 0;
          for u in u.iter_mut().rev() {
              let n = u128::join(r, *u);
              let (q, r0) = div_2x1(n, d, v);
              *u = q;
              r = r0;
          }
          r
      }
      *)
      Definition div_nx1_normalized (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ u; d ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            let d := M.alloc (| d |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.read (| d |);
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.shl,
                                                [
                                                  Value.Integer IntegerKind.U64 1;
                                                  Value.Integer IntegerKind.I32 63
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: d >= (1 << 63)" |) ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ v : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_function (|
                      "ruint::algorithms::div::reciprocal::reciprocal_mg10",
                      [],
                      []
                    |),
                    [ M.read (| d |) ]
                  |)
                |) in
              let~ r : Ty.path "u64" := M.alloc (| Value.Integer IntegerKind.U64 0 |) in
              let~ _ : Ty.tuple [] :=
                M.use
                  (M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ] ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ]
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ],
                              [],
                              [],
                              "rev",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.path "u64" ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                  "iter_mut",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| u |) |) |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            Ty.tuple [],
                            ltac:(M.monadic
                              (let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ] ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::rev::Rev")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [ Ty.path "u64" ]
                                          ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let u := M.copy (| γ0_0 |) in
                                        let~ n : Ty.path "u128" :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "u128",
                                              M.get_trait_method (|
                                                "ruint::algorithms::DoubleWord",
                                                Ty.path "u128",
                                                [],
                                                [ Ty.path "u64" ],
                                                "join",
                                                [],
                                                []
                                              |),
                                              [
                                                M.read (| r |);
                                                M.read (| M.deref (| M.read (| u |) |) |)
                                              ]
                                            |)
                                          |) in
                                        M.match_operator (|
                                          None,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [ Ty.path "u64"; Ty.path "u64" ],
                                              M.get_function (|
                                                "ruint::algorithms::div::small::div_2x1_mg10",
                                                [],
                                                []
                                              |),
                                              [ M.read (| n |); M.read (| d |); M.read (| v |) ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let q := M.copy (| γ0_0 |) in
                                                let r0 := M.copy (| γ0_1 |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.write (|
                                                      M.deref (| M.read (| u |) |),
                                                      M.read (| q |)
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (| M.write (| r, M.read (| r0 |) |) |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              r
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_div_nx1_normalized :
        M.IsFunction.C "ruint::algorithms::div::small::div_nx1_normalized" div_nx1_normalized.
      Admitted.
      Global Typeclasses Opaque div_nx1_normalized.
      
      (*
      pub fn div_nx1(limbs: &mut [u64], divisor: u64) -> u64 {
          debug_assert!(divisor != 0);
          debug_assert!(!limbs.is_empty());
          debug_assert!( *limbs.last().unwrap() != 0);
      
          // Normalize and compute reciprocal
          let shift = divisor.leading_zeros();
          if shift == 0 {
              return div_nx1_normalized(limbs, divisor);
          }
          let divisor = divisor << shift;
          let reciprocal = reciprocal(divisor);
      
          let last = unsafe { limbs.get_unchecked(limbs.len() - 1) };
          let mut remainder = last >> (64 - shift);
          for i in (1..limbs.len()).rev() {
              // Shift limbs
              let upper = unsafe { limbs.get_unchecked(i) };
              let lower = unsafe { limbs.get_unchecked(i - 1) };
              let u = (upper << shift) | (lower >> (64 - shift));
      
              // Compute quotient
              let n = u128::join(remainder, u);
              let (q, r) = div_2x1(n, divisor, reciprocal);
      
              // Store quotient
              *unsafe { limbs.get_unchecked_mut(i) } = q;
              remainder = r;
          }
          // Compute last quotient
          let first = unsafe { limbs.get_unchecked_mut(0) };
          let n = u128::join(remainder, *first << shift);
          let (q, remainder) = div_2x1(n, divisor, reciprocal);
          *first = q;
      
          // Un-normalize remainder
          remainder >> shift
      }
      *)
      Definition div_nx1 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ limbs; divisor ] =>
          ltac:(M.monadic
            (let limbs := M.alloc (| limbs |) in
            let divisor := M.alloc (| divisor |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.ne,
                                                [
                                                  M.read (| divisor |);
                                                  Value.Integer IntegerKind.U64 0
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (| "core::panicking::panic", [], [] |),
                                            [ mk_str (| "assertion failed: divisor != 0" |) ]
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.not (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                    "is_empty",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| limbs |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (| "core::panicking::panic", [], [] |),
                                            [ mk_str (| "assertion failed: !limbs.is_empty()" |) ]
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.ne,
                                                [
                                                  M.read (|
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "u64" ]
                                                            ],
                                                          "unwrap",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "u64" ]
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [ Ty.path "u64" ],
                                                              "last",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| limbs |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  Value.Integer IntegerKind.U64 0
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (| "core::panicking::panic", [], [] |),
                                            [
                                              mk_str (|
                                                "assertion failed: *limbs.last().unwrap() != 0"
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ shift : Ty.path "u32" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u32",
                        M.get_associated_function (| Ty.path "u64", "leading_zeros", [], [] |),
                        [ M.read (| divisor |) ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.eq,
                                    [ M.read (| shift |); Value.Integer IntegerKind.U32 0 ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.path "u64",
                                      M.get_function (|
                                        "ruint::algorithms::div::small::div_nx1_normalized",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| limbs |) |)
                                        |);
                                        M.read (| divisor |)
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ divisor : Ty.path "u64" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.shl,
                        [ M.read (| divisor |); M.read (| shift |) ]
                      |)
                    |) in
                  let~ reciprocal : Ty.path "u64" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_function (|
                          "ruint::algorithms::div::reciprocal::reciprocal_mg10",
                          [],
                          []
                        |),
                        [ M.read (| divisor |) ]
                      |)
                    |) in
                  let~ last : Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                          "get_unchecked",
                          [],
                          [ Ty.path "usize" ]
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| limbs |) |) |);
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                  "len",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| limbs |) |) |)
                                ]
                              |);
                              Value.Integer IntegerKind.Usize 1
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let~ remainder : Ty.path "u64" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_trait_method (|
                          "core::ops::bit::Shr",
                          Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.path "u32" ],
                          "shr",
                          [],
                          []
                        |),
                        [
                          M.read (| last |);
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.sub,
                            [ Value.Integer IntegerKind.U32 64; M.read (| shift |) ]
                          |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.use
                      (M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  [],
                                  [],
                                  "rev",
                                  [],
                                  []
                                |),
                                [
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer IntegerKind.Usize 1);
                                      ("end_",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| limbs |) |)
                                            |)
                                          ]
                                        |))
                                    ]
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Some (Ty.tuple []),
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::rev::Rev")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ]
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| γ0_0 |) in
                                            let~ upper :
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                    "get_unchecked",
                                                    [],
                                                    [ Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| limbs |) |)
                                                    |);
                                                    M.read (| i |)
                                                  ]
                                                |)
                                              |) in
                                            let~ lower :
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                    "get_unchecked",
                                                    [],
                                                    [ Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| limbs |) |)
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.sub,
                                                      [
                                                        M.read (| i |);
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ u : Ty.path "u64" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "u64",
                                                  BinOp.Wrap.bit_or,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u64",
                                                      M.get_trait_method (|
                                                        "core::ops::bit::Shl",
                                                        Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                                        [],
                                                        [ Ty.path "u32" ],
                                                        "shl",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.read (| upper |); M.read (| shift |) ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "u64",
                                                      M.get_trait_method (|
                                                        "core::ops::bit::Shr",
                                                        Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                                        [],
                                                        [ Ty.path "u32" ],
                                                        "shr",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (| lower |);
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            Value.Integer IntegerKind.U32 64;
                                                            M.read (| shift |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ n : Ty.path "u128" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "u128",
                                                  M.get_trait_method (|
                                                    "ruint::algorithms::DoubleWord",
                                                    Ty.path "u128",
                                                    [],
                                                    [ Ty.path "u64" ],
                                                    "join",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| remainder |); M.read (| u |) ]
                                                |)
                                              |) in
                                            M.match_operator (|
                                              None,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [ Ty.path "u64"; Ty.path "u64" ],
                                                  M.get_function (|
                                                    "ruint::algorithms::div::small::div_2x1_mg10",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (| n |);
                                                    M.read (| divisor |);
                                                    M.read (| reciprocal |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let q := M.copy (| γ0_0 |) in
                                                    let r := M.copy (| γ0_1 |) in
                                                    let~ _ : Ty.tuple [] :=
                                                      M.alloc (|
                                                        M.write (|
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [ Ty.path "u64" ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [ Ty.path "u64" ],
                                                                "get_unchecked_mut",
                                                                [],
                                                                [ Ty.path "usize" ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (| M.read (| limbs |) |)
                                                                |);
                                                                M.read (| i |)
                                                              ]
                                                            |)
                                                          |),
                                                          M.read (| q |)
                                                        |)
                                                      |) in
                                                    let~ _ : Ty.tuple [] :=
                                                      M.alloc (|
                                                        M.write (| remainder, M.read (| r |) |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  let~ first : Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ] :=
                    M.alloc (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                              "get_unchecked_mut",
                              [],
                              [ Ty.path "usize" ]
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| limbs |) |) |);
                              Value.Integer IntegerKind.Usize 0
                            ]
                          |)
                        |)
                      |)
                    |) in
                  let~ n : Ty.path "u128" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u128",
                        M.get_trait_method (|
                          "ruint::algorithms::DoubleWord",
                          Ty.path "u128",
                          [],
                          [ Ty.path "u64" ],
                          "join",
                          [],
                          []
                        |),
                        [
                          M.read (| remainder |);
                          M.call_closure (|
                            Ty.path "u64",
                            BinOp.Wrap.shl,
                            [ M.read (| M.deref (| M.read (| first |) |) |); M.read (| shift |) ]
                          |)
                        ]
                      |)
                    |) in
                  M.match_operator (|
                    None,
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [ Ty.path "u64"; Ty.path "u64" ],
                        M.get_function (| "ruint::algorithms::div::small::div_2x1_mg10", [], [] |),
                        [ M.read (| n |); M.read (| divisor |); M.read (| reciprocal |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let q := M.copy (| γ0_0 |) in
                          let remainder := M.copy (| γ0_1 |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.write (| M.deref (| M.read (| first |) |), M.read (| q |) |)
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "u64",
                              BinOp.Wrap.shr,
                              [ M.read (| remainder |); M.read (| shift |) ]
                            |)
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_div_nx1 :
        M.IsFunction.C "ruint::algorithms::div::small::div_nx1" div_nx1.
      Admitted.
      Global Typeclasses Opaque div_nx1.
      
      (*
      pub fn div_nx2_normalized(u: &mut [u64], d: u128) -> u128 {
          // OPT: Version with in-place shifting of `u`
          debug_assert!(d >= (1 << 127));
      
          let v = reciprocal_2(d);
          let mut remainder: u128 = 0;
          for u in u.iter_mut().rev() {
              let (q, r) = div_3x2(remainder, *u, d, v);
              *u = q;
              remainder = r;
          }
          remainder
      }
      *)
      Definition div_nx2_normalized (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ u; d ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            let d := M.alloc (| d |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.read (| d |);
                                              M.call_closure (|
                                                Ty.path "u128",
                                                BinOp.Wrap.shl,
                                                [
                                                  Value.Integer IntegerKind.U128 1;
                                                  Value.Integer IntegerKind.I32 127
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: d >= (1 << 127)" |) ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ v : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_function (|
                      "ruint::algorithms::div::reciprocal::reciprocal_2_mg10",
                      [],
                      []
                    |),
                    [ M.read (| d |) ]
                  |)
                |) in
              let~ remainder : Ty.path "u128" := M.alloc (| Value.Integer IntegerKind.U128 0 |) in
              let~ _ : Ty.tuple [] :=
                M.use
                  (M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ] ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ]
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ],
                              [],
                              [],
                              "rev",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.path "u64" ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                  "iter_mut",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| u |) |) |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            Ty.tuple [],
                            ltac:(M.monadic
                              (let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ] ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::rev::Rev")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [ Ty.path "u64" ]
                                          ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let u := M.copy (| γ0_0 |) in
                                        M.match_operator (|
                                          None,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [ Ty.path "u64"; Ty.path "u128" ],
                                              M.get_function (|
                                                "ruint::algorithms::div::small::div_3x2_mg10",
                                                [],
                                                []
                                              |),
                                              [
                                                M.read (| remainder |);
                                                M.read (| M.deref (| M.read (| u |) |) |);
                                                M.read (| d |);
                                                M.read (| v |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let q := M.copy (| γ0_0 |) in
                                                let r := M.copy (| γ0_1 |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.write (|
                                                      M.deref (| M.read (| u |) |),
                                                      M.read (| q |)
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.alloc (|
                                                    M.write (| remainder, M.read (| r |) |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              remainder
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_div_nx2_normalized :
        M.IsFunction.C "ruint::algorithms::div::small::div_nx2_normalized" div_nx2_normalized.
      Admitted.
      Global Typeclasses Opaque div_nx2_normalized.
      
      (*
      pub fn div_nx2(limbs: &mut [u64], divisor: u128) -> u128 {
          debug_assert!(divisor >= 1 << 64);
          debug_assert!(!limbs.is_empty());
          debug_assert!( *limbs.last().unwrap() != 0);
      
          // Normalize and compute reciprocal
          let shift = divisor.high().leading_zeros();
          if shift == 0 {
              return div_nx2_normalized(limbs, divisor);
          }
          let divisor = divisor << shift;
          let reciprocal = reciprocal_2(divisor);
      
          let last = unsafe { limbs.get_unchecked(limbs.len() - 1) };
          let mut remainder: u128 = u128::from(last >> (64 - shift));
          for i in (1..limbs.len()).rev() {
              // Shift limbs
              let upper = unsafe { limbs.get_unchecked(i) };
              let lower = unsafe { limbs.get_unchecked(i - 1) };
              let u = (upper << shift) | (lower >> (64 - shift));
      
              // Compute quotient
              let (q, r) = div_3x2(remainder, u, divisor, reciprocal);
      
              // Store quotient
              *unsafe { limbs.get_unchecked_mut(i) } = q;
              remainder = r;
          }
          // Compute last quotient
          let first = unsafe { limbs.get_unchecked_mut(0) };
          let (q, remainder) = div_3x2(remainder, *first << shift, divisor, reciprocal);
          *first = q;
      
          // Un-normalize remainder
          remainder >> shift
      }
      *)
      Definition div_nx2 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ limbs; divisor ] =>
          ltac:(M.monadic
            (let limbs := M.alloc (| limbs |) in
            let divisor := M.alloc (| divisor |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.ge,
                                                [
                                                  M.read (| divisor |);
                                                  M.call_closure (|
                                                    Ty.path "u128",
                                                    BinOp.Wrap.shl,
                                                    [
                                                      Value.Integer IntegerKind.U128 1;
                                                      Value.Integer IntegerKind.I32 64
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (| "core::panicking::panic", [], [] |),
                                            [ mk_str (| "assertion failed: divisor >= 1 << 64" |) ]
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.not (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                    "is_empty",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| limbs |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (| "core::panicking::panic", [], [] |),
                                            [ mk_str (| "assertion failed: !limbs.is_empty()" |) ]
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.ne,
                                                [
                                                  M.read (|
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "u64" ]
                                                            ],
                                                          "unwrap",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "u64" ]
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [ Ty.path "u64" ],
                                                              "last",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| limbs |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  Value.Integer IntegerKind.U64 0
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (| "core::panicking::panic", [], [] |),
                                            [
                                              mk_str (|
                                                "assertion failed: *limbs.last().unwrap() != 0"
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ shift : Ty.path "u32" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u32",
                        M.get_associated_function (| Ty.path "u64", "leading_zeros", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "u64",
                            M.get_trait_method (|
                              "ruint::algorithms::DoubleWord",
                              Ty.path "u128",
                              [],
                              [ Ty.path "u64" ],
                              "high",
                              [],
                              []
                            |),
                            [ M.read (| divisor |) ]
                          |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.eq,
                                    [ M.read (| shift |); Value.Integer IntegerKind.U32 0 ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.path "u128",
                                      M.get_function (|
                                        "ruint::algorithms::div::small::div_nx2_normalized",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| limbs |) |)
                                        |);
                                        M.read (| divisor |)
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ divisor : Ty.path "u128" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u128",
                        BinOp.Wrap.shl,
                        [ M.read (| divisor |); M.read (| shift |) ]
                      |)
                    |) in
                  let~ reciprocal : Ty.path "u64" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_function (|
                          "ruint::algorithms::div::reciprocal::reciprocal_2_mg10",
                          [],
                          []
                        |),
                        [ M.read (| divisor |) ]
                      |)
                    |) in
                  let~ last : Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                          "get_unchecked",
                          [],
                          [ Ty.path "usize" ]
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| limbs |) |) |);
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                  "len",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| limbs |) |) |)
                                ]
                              |);
                              Value.Integer IntegerKind.Usize 1
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let~ remainder : Ty.path "u128" :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "u128",
                        M.get_trait_method (|
                          "core::convert::From",
                          Ty.path "u128",
                          [],
                          [ Ty.path "u64" ],
                          "from",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "u64",
                            M.get_trait_method (|
                              "core::ops::bit::Shr",
                              Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                              [],
                              [ Ty.path "u32" ],
                              "shr",
                              [],
                              []
                            |),
                            [
                              M.read (| last |);
                              M.call_closure (|
                                Ty.path "u32",
                                BinOp.Wrap.sub,
                                [ Value.Integer IntegerKind.U32 64; M.read (| shift |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.use
                      (M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  [],
                                  [],
                                  "rev",
                                  [],
                                  []
                                |),
                                [
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer IntegerKind.Usize 1);
                                      ("end_",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| limbs |) |)
                                            |)
                                          ]
                                        |))
                                    ]
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Some (Ty.tuple []),
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::rev::Rev")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ]
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| γ0_0 |) in
                                            let~ upper :
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                    "get_unchecked",
                                                    [],
                                                    [ Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| limbs |) |)
                                                    |);
                                                    M.read (| i |)
                                                  ]
                                                |)
                                              |) in
                                            let~ lower :
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                    "get_unchecked",
                                                    [],
                                                    [ Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| limbs |) |)
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.sub,
                                                      [
                                                        M.read (| i |);
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let~ u : Ty.path "u64" :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "u64",
                                                  BinOp.Wrap.bit_or,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u64",
                                                      M.get_trait_method (|
                                                        "core::ops::bit::Shl",
                                                        Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                                        [],
                                                        [ Ty.path "u32" ],
                                                        "shl",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.read (| upper |); M.read (| shift |) ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "u64",
                                                      M.get_trait_method (|
                                                        "core::ops::bit::Shr",
                                                        Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                                        [],
                                                        [ Ty.path "u32" ],
                                                        "shr",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (| lower |);
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            Value.Integer IntegerKind.U32 64;
                                                            M.read (| shift |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.match_operator (|
                                              None,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [ Ty.path "u64"; Ty.path "u128" ],
                                                  M.get_function (|
                                                    "ruint::algorithms::div::small::div_3x2_mg10",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (| remainder |);
                                                    M.read (| u |);
                                                    M.read (| divisor |);
                                                    M.read (| reciprocal |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let q := M.copy (| γ0_0 |) in
                                                    let r := M.copy (| γ0_1 |) in
                                                    let~ _ : Ty.tuple [] :=
                                                      M.alloc (|
                                                        M.write (|
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [ Ty.path "u64" ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [ Ty.path "u64" ],
                                                                "get_unchecked_mut",
                                                                [],
                                                                [ Ty.path "usize" ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (| M.read (| limbs |) |)
                                                                |);
                                                                M.read (| i |)
                                                              ]
                                                            |)
                                                          |),
                                                          M.read (| q |)
                                                        |)
                                                      |) in
                                                    let~ _ : Ty.tuple [] :=
                                                      M.alloc (|
                                                        M.write (| remainder, M.read (| r |) |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  let~ first : Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ] :=
                    M.alloc (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                              "get_unchecked_mut",
                              [],
                              [ Ty.path "usize" ]
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| limbs |) |) |);
                              Value.Integer IntegerKind.Usize 0
                            ]
                          |)
                        |)
                      |)
                    |) in
                  M.match_operator (|
                    None,
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [ Ty.path "u64"; Ty.path "u128" ],
                        M.get_function (| "ruint::algorithms::div::small::div_3x2_mg10", [], [] |),
                        [
                          M.read (| remainder |);
                          M.call_closure (|
                            Ty.path "u64",
                            BinOp.Wrap.shl,
                            [ M.read (| M.deref (| M.read (| first |) |) |); M.read (| shift |) ]
                          |);
                          M.read (| divisor |);
                          M.read (| reciprocal |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let q := M.copy (| γ0_0 |) in
                          let remainder := M.copy (| γ0_1 |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.write (| M.deref (| M.read (| first |) |), M.read (| q |) |)
                            |) in
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "u128",
                              BinOp.Wrap.shr,
                              [ M.read (| remainder |); M.read (| shift |) ]
                            |)
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_div_nx2 :
        M.IsFunction.C "ruint::algorithms::div::small::div_nx2" div_nx2.
      Admitted.
      Global Typeclasses Opaque div_nx2.
      
      (*
      pub fn div_2x1_ref(u: u128, d: u64) -> (u64, u64) {
          debug_assert!(d >= (1 << 63));
          debug_assert!((u >> 64) < u128::from(d));
          let d = u128::from(d);
          let q = (u / d) as u64;
          let r = (u % d) as u64;
          (q, r)
      }
      *)
      Definition div_2x1_ref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ u; d ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            let d := M.alloc (| d |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.read (| d |);
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.shl,
                                                [
                                                  Value.Integer IntegerKind.U64 1;
                                                  Value.Integer IntegerKind.I32 63
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: d >= (1 << 63)" |) ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.lt,
                                            [
                                              M.call_closure (|
                                                Ty.path "u128",
                                                BinOp.Wrap.shr,
                                                [ M.read (| u |); Value.Integer IntegerKind.I32 64 ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "u128",
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  Ty.path "u128",
                                                  [],
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| d |) ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: (u >> 64) < u128::from(d)" |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ d : Ty.path "u128" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.path "u128",
                      [],
                      [ Ty.path "u64" ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| d |) ]
                  |)
                |) in
              let~ q : Ty.path "u64" :=
                M.alloc (|
                  M.cast
                    (Ty.path "u64")
                    (M.call_closure (|
                      Ty.path "u128",
                      BinOp.Wrap.div,
                      [ M.read (| u |); M.read (| d |) ]
                    |))
                |) in
              let~ r : Ty.path "u64" :=
                M.alloc (|
                  M.cast
                    (Ty.path "u64")
                    (M.call_closure (|
                      Ty.path "u128",
                      BinOp.Wrap.rem,
                      [ M.read (| u |); M.read (| d |) ]
                    |))
                |) in
              M.alloc (| Value.Tuple [ M.read (| q |); M.read (| r |) ] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_div_2x1_ref :
        M.IsFunction.C "ruint::algorithms::div::small::div_2x1_ref" div_2x1_ref.
      Admitted.
      Global Typeclasses Opaque div_2x1_ref.
      
      (*
      pub fn div_2x1_mg10(u: u128, d: u64, v: u64) -> (u64, u64) {
          debug_assert!(d >= (1 << 63));
          debug_assert!((u >> 64) < u128::from(d));
          debug_assert_eq!(v, reciprocal(d));
      
          let q = u + (u >> 64) * u128::from(v);
          let q0 = q as u64;
          let q1 = ((q >> 64) as u64).wrapping_add(1);
          let r = (u as u64).wrapping_sub(q1.wrapping_mul(d));
          let (q1, r) = if r > q0 {
              (q1.wrapping_sub(1), r.wrapping_add(d))
          } else {
              (q1, r)
          };
          let (q1, r) = if unlikely(r >= d) {
              (q1.wrapping_add(1), r.wrapping_sub(d))
          } else {
              (q1, r)
          };
          (q1, r)
      }
      *)
      Definition div_2x1_mg10 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ u; d; v ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            let d := M.alloc (| d |) in
            let v := M.alloc (| v |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.read (| d |);
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.shl,
                                                [
                                                  Value.Integer IntegerKind.U64 1;
                                                  Value.Integer IntegerKind.I32 63
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: d >= (1 << 63)" |) ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.lt,
                                            [
                                              M.call_closure (|
                                                Ty.path "u128",
                                                BinOp.Wrap.shr,
                                                [ M.read (| u |); Value.Integer IntegerKind.I32 64 ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "u128",
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  Ty.path "u128",
                                                  [],
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| d |) ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: (u >> 64) < u128::from(d)" |)
                                        ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (|
                              Value.Tuple
                                [
                                  M.borrow (| Pointer.Kind.Ref, v |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "u64",
                                        M.get_function (|
                                          "ruint::algorithms::div::reciprocal::reciprocal_mg10",
                                          [],
                                          []
                                        |),
                                        [ M.read (| d |) ]
                                      |)
                                    |)
                                  |)
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val := M.copy (| γ0_0 |) in
                                  let right_val := M.copy (| γ0_1 |) in
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.eq,
                                                    [
                                                      M.read (|
                                                        M.deref (| M.read (| left_val |) |)
                                                      |);
                                                      M.read (|
                                                        M.deref (| M.read (| right_val |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "u64"; Ty.path "u64" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ q : Ty.path "u128" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    BinOp.Wrap.add,
                    [
                      M.read (| u |);
                      M.call_closure (|
                        Ty.path "u128",
                        BinOp.Wrap.mul,
                        [
                          M.call_closure (|
                            Ty.path "u128",
                            BinOp.Wrap.shr,
                            [ M.read (| u |); Value.Integer IntegerKind.I32 64 ]
                          |);
                          M.call_closure (|
                            Ty.path "u128",
                            M.get_trait_method (|
                              "core::convert::From",
                              Ty.path "u128",
                              [],
                              [ Ty.path "u64" ],
                              "from",
                              [],
                              []
                            |),
                            [ M.read (| v |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ q0 : Ty.path "u64" := M.alloc (| M.cast (Ty.path "u64") (M.read (| q |)) |) in
              let~ q1 : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "wrapping_add", [], [] |),
                    [
                      M.cast
                        (Ty.path "u64")
                        (M.call_closure (|
                          Ty.path "u128",
                          BinOp.Wrap.shr,
                          [ M.read (| q |); Value.Integer IntegerKind.I32 64 ]
                        |));
                      Value.Integer IntegerKind.U64 1
                    ]
                  |)
                |) in
              let~ r : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "wrapping_sub", [], [] |),
                    [
                      M.cast (Ty.path "u64") (M.read (| u |));
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_associated_function (| Ty.path "u64", "wrapping_mul", [], [] |),
                        [ M.read (| q1 |); M.read (| d |) ]
                      |)
                    ]
                  |)
                |) in
              M.match_operator (|
                None,
                M.match_operator (|
                  Some (Ty.tuple [ Ty.path "u64"; Ty.path "u64" ]),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.gt,
                                [ M.read (| r |); M.read (| q0 |) ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.Tuple
                            [
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_associated_function (|
                                  Ty.path "u64",
                                  "wrapping_sub",
                                  [],
                                  []
                                |),
                                [ M.read (| q1 |); Value.Integer IntegerKind.U64 1 ]
                              |);
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_associated_function (|
                                  Ty.path "u64",
                                  "wrapping_add",
                                  [],
                                  []
                                |),
                                [ M.read (| r |); M.read (| d |) ]
                              |)
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (| Value.Tuple [ M.read (| q1 |); M.read (| r |) ] |)))
                  ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let q1 := M.copy (| γ0_0 |) in
                      let r := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        None,
                        M.match_operator (|
                          Some (Ty.tuple [ Ty.path "u64"; Ty.path "u64" ]),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_function (|
                                          "core::convert::identity",
                                          [],
                                          [ Ty.path "bool" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [ M.read (| r |); M.read (| d |) ]
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  Value.Tuple
                                    [
                                      M.call_closure (|
                                        Ty.path "u64",
                                        M.get_associated_function (|
                                          Ty.path "u64",
                                          "wrapping_add",
                                          [],
                                          []
                                        |),
                                        [ M.read (| q1 |); Value.Integer IntegerKind.U64 1 ]
                                      |);
                                      M.call_closure (|
                                        Ty.path "u64",
                                        M.get_associated_function (|
                                          Ty.path "u64",
                                          "wrapping_sub",
                                          [],
                                          []
                                        |),
                                        [ M.read (| r |); M.read (| d |) ]
                                      |)
                                    ]
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (| Value.Tuple [ M.read (| q1 |); M.read (| r |) ] |)))
                          ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let q1 := M.copy (| γ0_0 |) in
                              let r := M.copy (| γ0_1 |) in
                              M.alloc (| Value.Tuple [ M.read (| q1 |); M.read (| r |) ] |)))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_div_2x1_mg10 :
        M.IsFunction.C "ruint::algorithms::div::small::div_2x1_mg10" div_2x1_mg10.
      Admitted.
      Global Typeclasses Opaque div_2x1_mg10.
      
      (*
      pub fn div_3x2_ref(n21: u128, n0: u64, d: u128) -> u64 {
          debug_assert!(d >= (1 << 127));
          debug_assert!(n21 < d);
      
          let n2 = (n21 >> 64) as u64;
          let n1 = n21 as u64;
          let d1 = (d >> 64) as u64;
          let d0 = d as u64;
      
          if unlikely(n2 == d1) {
              // From [n2 n1] < [d1 d0] and n2 = d1 it follows that n[1] < d[0].
              debug_assert!(n1 < d0);
              // We start by subtracting 2^64 times the divisor, resulting in a
              // negative remainder. Depending on the result, we need to add back
              // in one or two times the divisor to make the remainder positive.
              // (It can not be more since the divisor is > 2^127 and the negated
              // remainder is < 2^128.)
              let neg_remainder = u128::from(d0).wrapping_sub((u128::from(n1) << 64) | u128::from(n0));
              if neg_remainder > d {
                  0xffff_ffff_ffff_fffe_u64
              } else {
                  0xffff_ffff_ffff_ffff_u64
              }
          } else {
              // Compute quotient and remainder
              let (mut q, mut r) = div_2x1_ref(n21, d1);
      
              let t1 = u128::from(q) * u128::from(d0);
              let t2 = (u128::from(n0) << 64) | u128::from(r);
              if t1 > t2 {
                  q -= 1;
                  r = r.wrapping_add(d1);
                  let overflow = r < d1;
                  if !overflow {
                      let t1 = u128::from(q) * u128::from(d0);
                      let t2 = (u128::from(n0) << 64) | u128::from(r);
                      if t1 > t2 {
                          q -= 1;
                          // UNUSED: r += d[1];
                      }
                  }
              }
              q
          }
      }
      *)
      Definition div_3x2_ref (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ n21; n0; d ] =>
          ltac:(M.monadic
            (let n21 := M.alloc (| n21 |) in
            let n0 := M.alloc (| n0 |) in
            let d := M.alloc (| d |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.read (| d |);
                                              M.call_closure (|
                                                Ty.path "u128",
                                                BinOp.Wrap.shl,
                                                [
                                                  Value.Integer IntegerKind.U128 1;
                                                  Value.Integer IntegerKind.I32 127
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: d >= (1 << 127)" |) ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.lt,
                                            [ M.read (| n21 |); M.read (| d |) ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: n21 < d" |) ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ n2 : Ty.path "u64" :=
                M.alloc (|
                  M.cast
                    (Ty.path "u64")
                    (M.call_closure (|
                      Ty.path "u128",
                      BinOp.Wrap.shr,
                      [ M.read (| n21 |); Value.Integer IntegerKind.I32 64 ]
                    |))
                |) in
              let~ n1 : Ty.path "u64" := M.alloc (| M.cast (Ty.path "u64") (M.read (| n21 |)) |) in
              let~ d1 : Ty.path "u64" :=
                M.alloc (|
                  M.cast
                    (Ty.path "u64")
                    (M.call_closure (|
                      Ty.path "u128",
                      BinOp.Wrap.shr,
                      [ M.read (| d |); Value.Integer IntegerKind.I32 64 ]
                    |))
                |) in
              let~ d0 : Ty.path "u64" := M.alloc (| M.cast (Ty.path "u64") (M.read (| d |)) |) in
              M.match_operator (|
                Some (Ty.path "u64"),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_function (|
                                "core::convert::identity",
                                [],
                                [ Ty.path "bool" ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [ M.read (| n2 |); M.read (| d1 |) ]
                                |)
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.lt,
                                                    [ M.read (| n1 |); M.read (| d0 |) ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::panic",
                                                  [],
                                                  []
                                                |),
                                                [ mk_str (| "assertion failed: n1 < d0" |) ]
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      let~ neg_remainder : Ty.path "u128" :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u128",
                            M.get_associated_function (| Ty.path "u128", "wrapping_sub", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "u128",
                                M.get_trait_method (|
                                  "core::convert::From",
                                  Ty.path "u128",
                                  [],
                                  [ Ty.path "u64" ],
                                  "from",
                                  [],
                                  []
                                |),
                                [ M.read (| d0 |) ]
                              |);
                              M.call_closure (|
                                Ty.path "u128",
                                BinOp.Wrap.bit_or,
                                [
                                  M.call_closure (|
                                    Ty.path "u128",
                                    BinOp.Wrap.shl,
                                    [
                                      M.call_closure (|
                                        Ty.path "u128",
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          Ty.path "u128",
                                          [],
                                          [ Ty.path "u64" ],
                                          "from",
                                          [],
                                          []
                                        |),
                                        [ M.read (| n1 |) ]
                                      |);
                                      Value.Integer IntegerKind.I32 64
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "u128",
                                    M.get_trait_method (|
                                      "core::convert::From",
                                      Ty.path "u128",
                                      [],
                                      [ Ty.path "u64" ],
                                      "from",
                                      [],
                                      []
                                    |),
                                    [ M.read (| n0 |) ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        Some (Ty.path "u64"),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.gt,
                                      [ M.read (| neg_remainder |); M.read (| d |) ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (| Value.Integer IntegerKind.U64 18446744073709551614 |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (| Value.Integer IntegerKind.U64 18446744073709551615 |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        None,
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [ Ty.path "u64"; Ty.path "u64" ],
                            M.get_function (|
                              "ruint::algorithms::div::small::div_2x1_ref",
                              [],
                              []
                            |),
                            [ M.read (| n21 |); M.read (| d1 |) ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let q := M.copy (| γ0_0 |) in
                              let r := M.copy (| γ0_1 |) in
                              let~ t1 : Ty.path "u128" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u128",
                                    BinOp.Wrap.mul,
                                    [
                                      M.call_closure (|
                                        Ty.path "u128",
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          Ty.path "u128",
                                          [],
                                          [ Ty.path "u64" ],
                                          "from",
                                          [],
                                          []
                                        |),
                                        [ M.read (| q |) ]
                                      |);
                                      M.call_closure (|
                                        Ty.path "u128",
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          Ty.path "u128",
                                          [],
                                          [ Ty.path "u64" ],
                                          "from",
                                          [],
                                          []
                                        |),
                                        [ M.read (| d0 |) ]
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ t2 : Ty.path "u128" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u128",
                                    BinOp.Wrap.bit_or,
                                    [
                                      M.call_closure (|
                                        Ty.path "u128",
                                        BinOp.Wrap.shl,
                                        [
                                          M.call_closure (|
                                            Ty.path "u128",
                                            M.get_trait_method (|
                                              "core::convert::From",
                                              Ty.path "u128",
                                              [],
                                              [ Ty.path "u64" ],
                                              "from",
                                              [],
                                              []
                                            |),
                                            [ M.read (| n0 |) ]
                                          |);
                                          Value.Integer IntegerKind.I32 64
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.path "u128",
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          Ty.path "u128",
                                          [],
                                          [ Ty.path "u64" ],
                                          "from",
                                          [],
                                          []
                                        |),
                                        [ M.read (| r |) ]
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.gt,
                                                [ M.read (| t1 |); M.read (| t2 |) ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            let β := q in
                                            M.write (|
                                              β,
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.sub,
                                                [ M.read (| β |); Value.Integer IntegerKind.U64 1 ]
                                              |)
                                            |)
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.write (|
                                              r,
                                              M.call_closure (|
                                                Ty.path "u64",
                                                M.get_associated_function (|
                                                  Ty.path "u64",
                                                  "wrapping_add",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| r |); M.read (| d1 |) ]
                                              |)
                                            |)
                                          |) in
                                        let~ overflow : Ty.path "bool" :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.lt,
                                              [ M.read (| r |); M.read (| d1 |) ]
                                            |)
                                          |) in
                                        M.match_operator (|
                                          Some (Ty.tuple []),
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      UnOp.not (| M.read (| overflow |) |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                let~ t1 : Ty.path "u128" :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.path "u128",
                                                      BinOp.Wrap.mul,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u128",
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            Ty.path "u128",
                                                            [],
                                                            [ Ty.path "u64" ],
                                                            "from",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.read (| q |) ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "u128",
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            Ty.path "u128",
                                                            [],
                                                            [ Ty.path "u64" ],
                                                            "from",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.read (| d0 |) ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let~ t2 : Ty.path "u128" :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      Ty.path "u128",
                                                      BinOp.Wrap.bit_or,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u128",
                                                          BinOp.Wrap.shl,
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "u128",
                                                              M.get_trait_method (|
                                                                "core::convert::From",
                                                                Ty.path "u128",
                                                                [],
                                                                [ Ty.path "u64" ],
                                                                "from",
                                                                [],
                                                                []
                                                              |),
                                                              [ M.read (| n0 |) ]
                                                            |);
                                                            Value.Integer IntegerKind.I32 64
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "u128",
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            Ty.path "u128",
                                                            [],
                                                            [ Ty.path "u64" ],
                                                            "from",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.read (| r |) ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.match_operator (|
                                                  Some (Ty.tuple []),
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.gt,
                                                                [ M.read (| t1 |); M.read (| t2 |) ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        let~ _ : Ty.tuple [] :=
                                                          M.alloc (|
                                                            let β := q in
                                                            M.write (|
                                                              β,
                                                              M.call_closure (|
                                                                Ty.path "u64",
                                                                BinOp.Wrap.sub,
                                                                [
                                                                  M.read (| β |);
                                                                  Value.Integer IntegerKind.U64 1
                                                                ]
                                                              |)
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              q))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_div_3x2_ref :
        M.IsFunction.C "ruint::algorithms::div::small::div_3x2_ref" div_3x2_ref.
      Admitted.
      Global Typeclasses Opaque div_3x2_ref.
      
      (*
      pub fn div_3x2_mg10(u21: u128, u0: u64, d: u128, v: u64) -> (u64, u128) {
          debug_assert!(d >= (1 << 127));
          debug_assert!(u21 < d);
          debug_assert_eq!(v, reciprocal_2(d));
      
          let q = u128::mul(u21.high(), v) + u21;
          let r1 = u21.low().wrapping_sub(q.high().wrapping_mul(d.high()));
          let t = u128::mul(d.low(), q.high());
          let mut r = u128::join(r1, u0).wrapping_sub(t).wrapping_sub(d);
          let mut q1 = q.high().wrapping_add(1);
          if r.high() >= q.low() {
              q1 = q1.wrapping_sub(1);
              r = r.wrapping_add(d);
          }
          if unlikely(r >= d) {
              q1 = q1.wrapping_add(1);
              r = r.wrapping_sub(d);
          }
          (q1, r)
      }
      *)
      Definition div_3x2_mg10 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ u21; u0; d; v ] =>
          ltac:(M.monadic
            (let u21 := M.alloc (| u21 |) in
            let u0 := M.alloc (| u0 |) in
            let d := M.alloc (| d |) in
            let v := M.alloc (| v |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.read (| d |);
                                              M.call_closure (|
                                                Ty.path "u128",
                                                BinOp.Wrap.shl,
                                                [
                                                  Value.Integer IntegerKind.U128 1;
                                                  Value.Integer IntegerKind.I32 127
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: d >= (1 << 127)" |) ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.lt,
                                            [ M.read (| u21 |); M.read (| d |) ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic", [], [] |),
                                        [ mk_str (| "assertion failed: u21 < d" |) ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (|
                              Value.Tuple
                                [
                                  M.borrow (| Pointer.Kind.Ref, v |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "u64",
                                        M.get_function (|
                                          "ruint::algorithms::div::reciprocal::reciprocal_2_mg10",
                                          [],
                                          []
                                        |),
                                        [ M.read (| d |) ]
                                      |)
                                    |)
                                  |)
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val := M.copy (| γ0_0 |) in
                                  let right_val := M.copy (| γ0_1 |) in
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.eq,
                                                    [
                                                      M.read (|
                                                        M.deref (| M.read (| left_val |) |)
                                                      |);
                                                      M.read (|
                                                        M.deref (| M.read (| right_val |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "u64"; Ty.path "u64" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)))
                            ]
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ q : Ty.path "u128" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    BinOp.Wrap.add,
                    [
                      M.call_closure (|
                        Ty.path "u128",
                        M.get_trait_method (|
                          "ruint::algorithms::DoubleWord",
                          Ty.path "u128",
                          [],
                          [ Ty.path "u64" ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "u64",
                            M.get_trait_method (|
                              "ruint::algorithms::DoubleWord",
                              Ty.path "u128",
                              [],
                              [ Ty.path "u64" ],
                              "high",
                              [],
                              []
                            |),
                            [ M.read (| u21 |) ]
                          |);
                          M.read (| v |)
                        ]
                      |);
                      M.read (| u21 |)
                    ]
                  |)
                |) in
              let~ r1 : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "wrapping_sub", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_trait_method (|
                          "ruint::algorithms::DoubleWord",
                          Ty.path "u128",
                          [],
                          [ Ty.path "u64" ],
                          "low",
                          [],
                          []
                        |),
                        [ M.read (| u21 |) ]
                      |);
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_associated_function (| Ty.path "u64", "wrapping_mul", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "u64",
                            M.get_trait_method (|
                              "ruint::algorithms::DoubleWord",
                              Ty.path "u128",
                              [],
                              [ Ty.path "u64" ],
                              "high",
                              [],
                              []
                            |),
                            [ M.read (| q |) ]
                          |);
                          M.call_closure (|
                            Ty.path "u64",
                            M.get_trait_method (|
                              "ruint::algorithms::DoubleWord",
                              Ty.path "u128",
                              [],
                              [ Ty.path "u64" ],
                              "high",
                              [],
                              []
                            |),
                            [ M.read (| d |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ t : Ty.path "u128" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_trait_method (|
                      "ruint::algorithms::DoubleWord",
                      Ty.path "u128",
                      [],
                      [ Ty.path "u64" ],
                      "mul",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_trait_method (|
                          "ruint::algorithms::DoubleWord",
                          Ty.path "u128",
                          [],
                          [ Ty.path "u64" ],
                          "low",
                          [],
                          []
                        |),
                        [ M.read (| d |) ]
                      |);
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_trait_method (|
                          "ruint::algorithms::DoubleWord",
                          Ty.path "u128",
                          [],
                          [ Ty.path "u64" ],
                          "high",
                          [],
                          []
                        |),
                        [ M.read (| q |) ]
                      |)
                    ]
                  |)
                |) in
              let~ r : Ty.path "u128" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_associated_function (| Ty.path "u128", "wrapping_sub", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "u128",
                        M.get_associated_function (| Ty.path "u128", "wrapping_sub", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "u128",
                            M.get_trait_method (|
                              "ruint::algorithms::DoubleWord",
                              Ty.path "u128",
                              [],
                              [ Ty.path "u64" ],
                              "join",
                              [],
                              []
                            |),
                            [ M.read (| r1 |); M.read (| u0 |) ]
                          |);
                          M.read (| t |)
                        ]
                      |);
                      M.read (| d |)
                    ]
                  |)
                |) in
              let~ q1 : Ty.path "u64" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "wrapping_add", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_trait_method (|
                          "ruint::algorithms::DoubleWord",
                          Ty.path "u128",
                          [],
                          [ Ty.path "u64" ],
                          "high",
                          [],
                          []
                        |),
                        [ M.read (| q |) ]
                      |);
                      Value.Integer IntegerKind.U64 1
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ge,
                                [
                                  M.call_closure (|
                                    Ty.path "u64",
                                    M.get_trait_method (|
                                      "ruint::algorithms::DoubleWord",
                                      Ty.path "u128",
                                      [],
                                      [ Ty.path "u64" ],
                                      "high",
                                      [],
                                      []
                                    |),
                                    [ M.read (| r |) ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "u64",
                                    M.get_trait_method (|
                                      "ruint::algorithms::DoubleWord",
                                      Ty.path "u128",
                                      [],
                                      [ Ty.path "u64" ],
                                      "low",
                                      [],
                                      []
                                    |),
                                    [ M.read (| q |) ]
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.write (|
                              q1,
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_associated_function (|
                                  Ty.path "u64",
                                  "wrapping_sub",
                                  [],
                                  []
                                |),
                                [ M.read (| q1 |); Value.Integer IntegerKind.U64 1 ]
                              |)
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.write (|
                              r,
                              M.call_closure (|
                                Ty.path "u128",
                                M.get_associated_function (|
                                  Ty.path "u128",
                                  "wrapping_add",
                                  [],
                                  []
                                |),
                                [ M.read (| r |); M.read (| d |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_function (|
                                  "core::convert::identity",
                                  [],
                                  [ Ty.path "bool" ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ge,
                                    [ M.read (| r |); M.read (| d |) ]
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.write (|
                              q1,
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_associated_function (|
                                  Ty.path "u64",
                                  "wrapping_add",
                                  [],
                                  []
                                |),
                                [ M.read (| q1 |); Value.Integer IntegerKind.U64 1 ]
                              |)
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.write (|
                              r,
                              M.call_closure (|
                                Ty.path "u128",
                                M.get_associated_function (|
                                  Ty.path "u128",
                                  "wrapping_sub",
                                  [],
                                  []
                                |),
                                [ M.read (| r |); M.read (| d |) ]
                              |)
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (| Value.Tuple [ M.read (| q1 |); M.read (| r |) ] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_div_3x2_mg10 :
        M.IsFunction.C "ruint::algorithms::div::small::div_3x2_mg10" div_3x2_mg10.
      Admitted.
      Global Typeclasses Opaque div_3x2_mg10.
    End small.
  End div.
End algorithms.
