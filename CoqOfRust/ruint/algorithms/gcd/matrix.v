(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module algorithms.
  Module gcd.
    Module matrix.
      (* StructTuple
        {
          name := "Matrix";
          const_params := [];
          ty_params := [];
          fields := [ Ty.path "u64"; Ty.path "u64"; Ty.path "u64"; Ty.path "u64"; Ty.path "bool" ];
        } *)
      
      Module Impl_core_clone_Clone_for_ruint_algorithms_gcd_matrix_Matrix.
        Definition Self : Ty.t := Ty.path "ruint::algorithms::gcd::matrix::Matrix".
        
        (* Clone *)
        Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ],
                  Value.DeclaredButUndefined,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ],
                          Value.DeclaredButUndefined,
                          [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
                        |)))
                  ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_ruint_algorithms_gcd_matrix_Matrix.
      
      Module Impl_core_marker_Copy_for_ruint_algorithms_gcd_matrix_Matrix.
        Definition Self : Ty.t := Ty.path "ruint::algorithms::gcd::matrix::Matrix".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::Copy"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_Copy_for_ruint_algorithms_gcd_matrix_Matrix.
      
      Module Impl_core_marker_StructuralPartialEq_for_ruint_algorithms_gcd_matrix_Matrix.
        Definition Self : Ty.t := Ty.path "ruint::algorithms::gcd::matrix::Matrix".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_ruint_algorithms_gcd_matrix_Matrix.
      
      Module Impl_core_cmp_PartialEq_ruint_algorithms_gcd_matrix_Matrix_for_ruint_algorithms_gcd_matrix_Matrix.
        Definition Self : Ty.t := Ty.path "ruint::algorithms::gcd::matrix::Matrix".
        
        (* PartialEq *)
        Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let other := M.alloc (| other |) in
              LogicalOp.and (|
                LogicalOp.and (|
                  LogicalOp.and (|
                    LogicalOp.and (|
                      M.call_closure (|
                        Ty.path "bool",
                        BinOp.eq,
                        [
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              M.deref (| M.read (| self |) |),
                              "ruint::algorithms::gcd::matrix::Matrix",
                              0
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              M.deref (| M.read (| other |) |),
                              "ruint::algorithms::gcd::matrix::Matrix",
                              0
                            |)
                          |)
                        ]
                      |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.path "bool",
                          BinOp.eq,
                          [
                            M.read (|
                              M.SubPointer.get_struct_tuple_field (|
                                M.deref (| M.read (| self |) |),
                                "ruint::algorithms::gcd::matrix::Matrix",
                                1
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_tuple_field (|
                                M.deref (| M.read (| other |) |),
                                "ruint::algorithms::gcd::matrix::Matrix",
                                1
                              |)
                            |)
                          ]
                        |)))
                    |),
                    ltac:(M.monadic
                      (M.call_closure (|
                        Ty.path "bool",
                        BinOp.eq,
                        [
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              M.deref (| M.read (| self |) |),
                              "ruint::algorithms::gcd::matrix::Matrix",
                              2
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              M.deref (| M.read (| other |) |),
                              "ruint::algorithms::gcd::matrix::Matrix",
                              2
                            |)
                          |)
                        ]
                      |)))
                  |),
                  ltac:(M.monadic
                    (M.call_closure (|
                      Ty.path "bool",
                      BinOp.eq,
                      [
                        M.read (|
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "ruint::algorithms::gcd::matrix::Matrix",
                            3
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| other |) |),
                            "ruint::algorithms::gcd::matrix::Matrix",
                            3
                          |)
                        |)
                      ]
                    |)))
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    Ty.path "bool",
                    BinOp.eq,
                    [
                      M.read (|
                        M.SubPointer.get_struct_tuple_field (|
                          M.deref (| M.read (| self |) |),
                          "ruint::algorithms::gcd::matrix::Matrix",
                          4
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_tuple_field (|
                          M.deref (| M.read (| other |) |),
                          "ruint::algorithms::gcd::matrix::Matrix",
                          4
                        |)
                      |)
                    ]
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ]
            Self
            (* Instance *) [ ("eq", InstanceField.Method eq) ].
      End Impl_core_cmp_PartialEq_ruint_algorithms_gcd_matrix_Matrix_for_ruint_algorithms_gcd_matrix_Matrix.
      
      Module Impl_core_cmp_Eq_for_ruint_algorithms_gcd_matrix_Matrix.
        Definition Self : Ty.t := Ty.path "ruint::algorithms::gcd::matrix::Matrix".
        
        (* Eq *)
        Definition assert_receiver_is_total_eq
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (|
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  Value.DeclaredButUndefined,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          Value.DeclaredButUndefined,
                          [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                        |)))
                  ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
      End Impl_core_cmp_Eq_for_ruint_algorithms_gcd_matrix_Matrix.
      
      Module Impl_core_fmt_Debug_for_ruint_algorithms_gcd_matrix_Matrix.
        Definition Self : Ty.t := Ty.path "ruint::algorithms::gcd::matrix::Matrix".
        
        (* Debug *)
        Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_tuple_field5_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Matrix" |) |) |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "ruint::algorithms::gcd::matrix::Matrix",
                            0
                          |)
                        |)
                      |)
                    |));
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "ruint::algorithms::gcd::matrix::Matrix",
                            1
                          |)
                        |)
                      |)
                    |));
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "ruint::algorithms::gcd::matrix::Matrix",
                            2
                          |)
                        |)
                      |)
                    |));
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "ruint::algorithms::gcd::matrix::Matrix",
                            3
                          |)
                        |)
                      |)
                    |));
                  (* Unsize *)
                  M.pointer_coercion
                    (M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_tuple_field (|
                                M.deref (| M.read (| self |) |),
                                "ruint::algorithms::gcd::matrix::Matrix",
                                4
                              |)
                            |)
                          |)
                        |)
                      |)
                    |))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_ruint_algorithms_gcd_matrix_Matrix.
      
      Module Impl_ruint_algorithms_gcd_matrix_Matrix.
        Definition Self : Ty.t := Ty.path "ruint::algorithms::gcd::matrix::Matrix".
        
        (*     pub const IDENTITY: Self = Self(1, 0, 0, 1, true); *)
        (* Ty.path "ruint::algorithms::gcd::matrix::Matrix" *)
        Definition value_IDENTITY (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          ltac:(M.monadic
            (M.alloc (|
              Value.StructTuple
                "ruint::algorithms::gcd::matrix::Matrix"
                [
                  Value.Integer IntegerKind.U64 1;
                  Value.Integer IntegerKind.U64 0;
                  Value.Integer IntegerKind.U64 0;
                  Value.Integer IntegerKind.U64 1;
                  Value.Bool true
                ]
            |))).
        
        Global Instance AssociatedConstant_value_IDENTITY :
          M.IsAssociatedFunction.C Self "IDENTITY" value_IDENTITY.
        Admitted.
        Global Typeclasses Opaque value_IDENTITY.
        
        (*
            pub const fn compose(self, other: Self) -> Self {
                Self(
                    self.0 * other.0 + self.1 * other.2,
                    self.0 * other.1 + self.1 * other.3,
                    self.2 * other.0 + self.3 * other.2,
                    self.2 * other.1 + self.3 * other.3,
                    self.4 ^ !other.4,
                )
            }
        *)
        Definition compose (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let other := M.alloc (| other |) in
              Value.StructTuple
                "ruint::algorithms::gcd::matrix::Matrix"
                [
                  M.call_closure (|
                    Ty.path "u64",
                    BinOp.Wrap.add,
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.mul,
                        [
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              self,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              0
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              other,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              0
                            |)
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.mul,
                        [
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              self,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              1
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              other,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              2
                            |)
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "u64",
                    BinOp.Wrap.add,
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.mul,
                        [
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              self,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              0
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              other,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              1
                            |)
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.mul,
                        [
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              self,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              1
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              other,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              3
                            |)
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "u64",
                    BinOp.Wrap.add,
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.mul,
                        [
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              self,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              2
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              other,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              0
                            |)
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.mul,
                        [
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              self,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              3
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              other,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              2
                            |)
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "u64",
                    BinOp.Wrap.add,
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.mul,
                        [
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              self,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              2
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              other,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              1
                            |)
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.mul,
                        [
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              self,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              3
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              other,
                              "ruint::algorithms::gcd::matrix::Matrix",
                              3
                            |)
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "bool",
                    BinOp.Wrap.bit_xor,
                    [
                      M.read (|
                        M.SubPointer.get_struct_tuple_field (|
                          self,
                          "ruint::algorithms::gcd::matrix::Matrix",
                          4
                        |)
                      |);
                      UnOp.not (|
                        M.read (|
                          M.SubPointer.get_struct_tuple_field (|
                            other,
                            "ruint::algorithms::gcd::matrix::Matrix",
                            4
                          |)
                        |)
                      |)
                    ]
                  |)
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_compose :
          M.IsAssociatedFunction.C Self "compose" compose.
        Admitted.
        Global Typeclasses Opaque compose.
        
        (*
            pub fn apply<const BITS: usize, const LIMBS: usize>(
                &self,
                a: &mut Uint<BITS, LIMBS>,
                b: &mut Uint<BITS, LIMBS>,
            ) {
                if BITS == 0 {
                    return;
                }
                // OPT: We can avoid the temporary if we implement a dedicated matrix
                // multiplication.
                let (c, d) = if self.4 {
                    (
                        Uint::from(self.0) * *a - Uint::from(self.1) * *b,
                        Uint::from(self.3) * *b - Uint::from(self.2) * *a,
                    )
                } else {
                    (
                        Uint::from(self.1) * *b - Uint::from(self.0) * *a,
                        Uint::from(self.2) * *a - Uint::from(self.3) * *b,
                    )
                };
                *a = c;
                *b = d;
            }
        *)
        Definition apply (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [ BITS; LIMBS ], [], [ self; a; b ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let a := M.alloc (| a |) in
              let b := M.alloc (| b |) in
              M.catch_return (Ty.tuple []) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [ BITS; Value.Integer IntegerKind.Usize 0 ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (| M.read (| M.return_ (| Value.Tuple [] |) |) |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                              ]
                          ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.SubPointer.get_struct_tuple_field (|
                                    M.deref (| M.read (| self |) |),
                                    "ruint::algorithms::gcd::matrix::Matrix",
                                    4
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                Value.Tuple
                                  [
                                    M.call_closure (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      M.get_trait_method (|
                                        "core::ops::arith::Sub",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        [],
                                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                        "sub",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          M.get_trait_method (|
                                            "core::ops::arith::Mul",
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            [],
                                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                            "mul",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                "from",
                                                [],
                                                [ Ty.path "u64" ]
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "ruint::algorithms::gcd::matrix::Matrix",
                                                    0
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.read (| M.deref (| M.read (| a |) |) |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          M.get_trait_method (|
                                            "core::ops::arith::Mul",
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            [],
                                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                            "mul",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                "from",
                                                [],
                                                [ Ty.path "u64" ]
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "ruint::algorithms::gcd::matrix::Matrix",
                                                    1
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.read (| M.deref (| M.read (| b |) |) |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      M.get_trait_method (|
                                        "core::ops::arith::Sub",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        [],
                                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                        "sub",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          M.get_trait_method (|
                                            "core::ops::arith::Mul",
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            [],
                                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                            "mul",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                "from",
                                                [],
                                                [ Ty.path "u64" ]
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "ruint::algorithms::gcd::matrix::Matrix",
                                                    3
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.read (| M.deref (| M.read (| b |) |) |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          M.get_trait_method (|
                                            "core::ops::arith::Mul",
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            [],
                                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                            "mul",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                "from",
                                                [],
                                                [ Ty.path "u64" ]
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "ruint::algorithms::gcd::matrix::Matrix",
                                                    2
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.read (| M.deref (| M.read (| a |) |) |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                Value.Tuple
                                  [
                                    M.call_closure (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      M.get_trait_method (|
                                        "core::ops::arith::Sub",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        [],
                                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                        "sub",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          M.get_trait_method (|
                                            "core::ops::arith::Mul",
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            [],
                                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                            "mul",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                "from",
                                                [],
                                                [ Ty.path "u64" ]
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "ruint::algorithms::gcd::matrix::Matrix",
                                                    1
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.read (| M.deref (| M.read (| b |) |) |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          M.get_trait_method (|
                                            "core::ops::arith::Mul",
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            [],
                                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                            "mul",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                "from",
                                                [],
                                                [ Ty.path "u64" ]
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "ruint::algorithms::gcd::matrix::Matrix",
                                                    0
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.read (| M.deref (| M.read (| a |) |) |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      M.get_trait_method (|
                                        "core::ops::arith::Sub",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        [],
                                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                        "sub",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          M.get_trait_method (|
                                            "core::ops::arith::Mul",
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            [],
                                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                            "mul",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                "from",
                                                [],
                                                [ Ty.path "u64" ]
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "ruint::algorithms::gcd::matrix::Matrix",
                                                    2
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.read (| M.deref (| M.read (| a |) |) |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          M.get_trait_method (|
                                            "core::ops::arith::Mul",
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            [],
                                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                            "mul",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                "from",
                                                [],
                                                [ Ty.path "u64" ]
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "ruint::algorithms::gcd::matrix::Matrix",
                                                    3
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.read (| M.deref (| M.read (| b |) |) |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                              |)))
                        ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let c := M.copy (| γ0_0 |) in
                            let d := M.copy (| γ0_1 |) in
                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.alloc (|
                                M.write (| M.deref (| M.read (| a |) |), M.read (| c |) |)
                              |) in
                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.alloc (|
                                M.write (| M.deref (| M.read (| b |) |), M.read (| d |) |)
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                      ]
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_apply : M.IsAssociatedFunction.C Self "apply" apply.
        Admitted.
        Global Typeclasses Opaque apply.
        
        (*
            pub const fn apply_u128(&self, a: u128, b: u128) -> (u128, u128) {
                // Intermediate values can overflow but the final result will fit, so we
                // compute mod 2^128.
                if self.4 {
                    (
                        (self.0 as u128)
                            .wrapping_mul(a)
                            .wrapping_sub((self.1 as u128).wrapping_mul(b)),
                        (self.3 as u128)
                            .wrapping_mul(b)
                            .wrapping_sub((self.2 as u128).wrapping_mul(a)),
                    )
                } else {
                    (
                        (self.1 as u128)
                            .wrapping_mul(b)
                            .wrapping_sub((self.0 as u128).wrapping_mul(a)),
                        (self.2 as u128)
                            .wrapping_mul(a)
                            .wrapping_sub((self.3 as u128).wrapping_mul(b)),
                    )
                }
            }
        *)
        Definition apply_u128 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; a; b ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let a := M.alloc (| a |) in
              let b := M.alloc (| b |) in
              M.read (|
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [ Ty.path "u128"; Ty.path "u128" ] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.SubPointer.get_struct_tuple_field (|
                              M.deref (| M.read (| self |) |),
                              "ruint::algorithms::gcd::matrix::Matrix",
                              4
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.Tuple
                            [
                              M.call_closure (|
                                Ty.path "u128",
                                M.get_associated_function (|
                                  Ty.path "u128",
                                  "wrapping_sub",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "u128",
                                    M.get_associated_function (|
                                      Ty.path "u128",
                                      "wrapping_mul",
                                      [],
                                      []
                                    |),
                                    [
                                      M.cast
                                        (Ty.path "u128")
                                        (M.read (|
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.deref (| M.read (| self |) |),
                                            "ruint::algorithms::gcd::matrix::Matrix",
                                            0
                                          |)
                                        |));
                                      M.read (| a |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "u128",
                                    M.get_associated_function (|
                                      Ty.path "u128",
                                      "wrapping_mul",
                                      [],
                                      []
                                    |),
                                    [
                                      M.cast
                                        (Ty.path "u128")
                                        (M.read (|
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.deref (| M.read (| self |) |),
                                            "ruint::algorithms::gcd::matrix::Matrix",
                                            1
                                          |)
                                        |));
                                      M.read (| b |)
                                    ]
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.path "u128",
                                M.get_associated_function (|
                                  Ty.path "u128",
                                  "wrapping_sub",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "u128",
                                    M.get_associated_function (|
                                      Ty.path "u128",
                                      "wrapping_mul",
                                      [],
                                      []
                                    |),
                                    [
                                      M.cast
                                        (Ty.path "u128")
                                        (M.read (|
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.deref (| M.read (| self |) |),
                                            "ruint::algorithms::gcd::matrix::Matrix",
                                            3
                                          |)
                                        |));
                                      M.read (| b |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "u128",
                                    M.get_associated_function (|
                                      Ty.path "u128",
                                      "wrapping_mul",
                                      [],
                                      []
                                    |),
                                    [
                                      M.cast
                                        (Ty.path "u128")
                                        (M.read (|
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.deref (| M.read (| self |) |),
                                            "ruint::algorithms::gcd::matrix::Matrix",
                                            2
                                          |)
                                        |));
                                      M.read (| a |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.Tuple
                            [
                              M.call_closure (|
                                Ty.path "u128",
                                M.get_associated_function (|
                                  Ty.path "u128",
                                  "wrapping_sub",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "u128",
                                    M.get_associated_function (|
                                      Ty.path "u128",
                                      "wrapping_mul",
                                      [],
                                      []
                                    |),
                                    [
                                      M.cast
                                        (Ty.path "u128")
                                        (M.read (|
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.deref (| M.read (| self |) |),
                                            "ruint::algorithms::gcd::matrix::Matrix",
                                            1
                                          |)
                                        |));
                                      M.read (| b |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "u128",
                                    M.get_associated_function (|
                                      Ty.path "u128",
                                      "wrapping_mul",
                                      [],
                                      []
                                    |),
                                    [
                                      M.cast
                                        (Ty.path "u128")
                                        (M.read (|
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.deref (| M.read (| self |) |),
                                            "ruint::algorithms::gcd::matrix::Matrix",
                                            0
                                          |)
                                        |));
                                      M.read (| a |)
                                    ]
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.path "u128",
                                M.get_associated_function (|
                                  Ty.path "u128",
                                  "wrapping_sub",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "u128",
                                    M.get_associated_function (|
                                      Ty.path "u128",
                                      "wrapping_mul",
                                      [],
                                      []
                                    |),
                                    [
                                      M.cast
                                        (Ty.path "u128")
                                        (M.read (|
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.deref (| M.read (| self |) |),
                                            "ruint::algorithms::gcd::matrix::Matrix",
                                            2
                                          |)
                                        |));
                                      M.read (| a |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.path "u128",
                                    M.get_associated_function (|
                                      Ty.path "u128",
                                      "wrapping_mul",
                                      [],
                                      []
                                    |),
                                    [
                                      M.cast
                                        (Ty.path "u128")
                                        (M.read (|
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.deref (| M.read (| self |) |),
                                            "ruint::algorithms::gcd::matrix::Matrix",
                                            3
                                          |)
                                        |));
                                      M.read (| b |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                        |)))
                  ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_apply_u128 :
          M.IsAssociatedFunction.C Self "apply_u128" apply_u128.
        Admitted.
        Global Typeclasses Opaque apply_u128.
        
        (*
            pub fn from<const BITS: usize, const LIMBS: usize>(
                a: Uint<BITS, LIMBS>,
                b: Uint<BITS, LIMBS>,
            ) -> Self {
                assert!(a >= b);
        
                // Grab the first 128 bits.
                let s = a.bit_len();
                if s <= 64 {
                    Self::from_u64(a.try_into().unwrap(), b.try_into().unwrap())
                } else if s <= 128 {
                    Self::from_u128_prefix(a.try_into().unwrap(), b.try_into().unwrap())
                } else {
                    let a = a >> (s - 128);
                    let b = b >> (s - 128);
                    Self::from_u128_prefix(a.try_into().unwrap(), b.try_into().unwrap())
                }
            }
        *)
        Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [ BITS; LIMBS ], [], [ a; b ] =>
            ltac:(M.monadic
              (let a := M.alloc (| a |) in
              let b := M.alloc (| b |) in
              M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      [],
                                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                      "ge",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, a |);
                                      M.borrow (| Pointer.Kind.Ref, b |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic", [], [] |),
                                [ mk_str (| "assertion failed: a >= b" |) ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ s : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "bit_len",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, a |) ]
                    |)
                  |) in
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.le,
                                [ M.read (| s |); Value.Integer IntegerKind.Usize 64 ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                            M.get_associated_function (|
                              Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                              "from_u64",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "u64";
                                      Ty.apply
                                        (Ty.path "ruint::from::FromUintError")
                                        []
                                        [ Ty.path "u64" ]
                                    ],
                                  "unwrap",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "u64";
                                        Ty.apply
                                          (Ty.path "ruint::from::FromUintError")
                                          []
                                          [ Ty.path "u64" ]
                                      ],
                                    M.get_trait_method (|
                                      "core::convert::TryInto",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      [],
                                      [ Ty.path "u64" ],
                                      "try_into",
                                      [],
                                      []
                                    |),
                                    [ M.read (| a |) ]
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "u64";
                                      Ty.apply
                                        (Ty.path "ruint::from::FromUintError")
                                        []
                                        [ Ty.path "u64" ]
                                    ],
                                  "unwrap",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "u64";
                                        Ty.apply
                                          (Ty.path "ruint::from::FromUintError")
                                          []
                                          [ Ty.path "u64" ]
                                      ],
                                    M.get_trait_method (|
                                      "core::convert::TryInto",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      [],
                                      [ Ty.path "u64" ],
                                      "try_into",
                                      [],
                                      []
                                    |),
                                    [ M.read (| b |) ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.le,
                                        [ M.read (| s |); Value.Integer IntegerKind.Usize 128 ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                    M.get_associated_function (|
                                      Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                      "from_u128_prefix",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "u128",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "u128";
                                              Ty.apply
                                                (Ty.path "ruint::from::FromUintError")
                                                []
                                                [ Ty.path "u128" ]
                                            ],
                                          "unwrap",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "u128";
                                                Ty.apply
                                                  (Ty.path "ruint::from::FromUintError")
                                                  []
                                                  [ Ty.path "u128" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::convert::TryInto",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.path "u128" ],
                                              "try_into",
                                              [],
                                              []
                                            |),
                                            [ M.read (| a |) ]
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.path "u128",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "u128";
                                              Ty.apply
                                                (Ty.path "ruint::from::FromUintError")
                                                []
                                                [ Ty.path "u128" ]
                                            ],
                                          "unwrap",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "u128";
                                                Ty.apply
                                                  (Ty.path "ruint::from::FromUintError")
                                                  []
                                                  [ Ty.path "u128" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::convert::TryInto",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.path "u128" ],
                                              "try_into",
                                              [],
                                              []
                                            |),
                                            [ M.read (| b |) ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let~ a :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      M.get_trait_method (|
                                        "core::ops::bit::Shr",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        [],
                                        [ Ty.path "usize" ],
                                        "shr",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (| a |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.sub,
                                          [ M.read (| s |); Value.Integer IntegerKind.Usize 128 ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                let~ b :
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] :=
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      M.get_trait_method (|
                                        "core::ops::bit::Shr",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        [],
                                        [ Ty.path "usize" ],
                                        "shr",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (| b |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.sub,
                                          [ M.read (| s |); Value.Integer IntegerKind.Usize 128 ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                    M.get_associated_function (|
                                      Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                      "from_u128_prefix",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path "u128",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "u128";
                                              Ty.apply
                                                (Ty.path "ruint::from::FromUintError")
                                                []
                                                [ Ty.path "u128" ]
                                            ],
                                          "unwrap",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "u128";
                                                Ty.apply
                                                  (Ty.path "ruint::from::FromUintError")
                                                  []
                                                  [ Ty.path "u128" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::convert::TryInto",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.path "u128" ],
                                              "try_into",
                                              [],
                                              []
                                            |),
                                            [ M.read (| a |) ]
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.path "u128",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "u128";
                                              Ty.apply
                                                (Ty.path "ruint::from::FromUintError")
                                                []
                                                [ Ty.path "u128" ]
                                            ],
                                          "unwrap",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "u128";
                                                Ty.apply
                                                  (Ty.path "ruint::from::FromUintError")
                                                  []
                                                  [ Ty.path "u128" ]
                                              ],
                                            M.get_trait_method (|
                                              "core::convert::TryInto",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.path "u128" ],
                                              "try_into",
                                              [],
                                              []
                                            |),
                                            [ M.read (| b |) ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_from : M.IsAssociatedFunction.C Self "from" from.
        Admitted.
        Global Typeclasses Opaque from.
        
        (*
            pub fn from_u64(mut r0: u64, mut r1: u64) -> Self {
                debug_assert!(r0 >= r1);
                if r1 == 0_u64 {
                    return Matrix::IDENTITY;
                }
                let mut q00 = 1_u64;
                let mut q01 = 0_u64;
                let mut q10 = 0_u64;
                let mut q11 = 1_u64;
                loop {
                    // Loop is unrolled once to avoid swapping variables and tracking parity.
                    let q = r0 / r1;
                    r0 -= q * r1;
                    q00 += q * q10;
                    q01 += q * q11;
                    if r0 == 0_u64 {
                        return Matrix(q10, q11, q00, q01, false);
                    }
                    let q = r1 / r0;
                    r1 -= q * r0;
                    q10 += q * q00;
                    q11 += q * q01;
                    if r1 == 0_u64 {
                        return Matrix(q00, q01, q10, q11, true);
                    }
                }
            }
        *)
        Definition from_u64 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ r0; r1 ] =>
            ltac:(M.monadic
              (let r0 := M.alloc (| r0 |) in
              let r1 := M.alloc (| r1 |) in
              M.catch_return (Ty.path "ruint::algorithms::gcd::matrix::Matrix") (|
                ltac:(M.monadic
                  (M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.ge,
                                                  [ M.read (| r0 |); M.read (| r1 |) ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (| "core::panicking::panic", [], [] |),
                                              [ mk_str (| "assertion failed: r0 >= r1" |) ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [ M.read (| r1 |); Value.Integer IntegerKind.U64 0 ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.read (|
                                        get_associated_constant (|
                                          Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                          "IDENTITY",
                                          Ty.path "ruint::algorithms::gcd::matrix::Matrix"
                                        |)
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ q00 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (| Value.Integer IntegerKind.U64 1 |) in
                    let~ q01 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (| Value.Integer IntegerKind.U64 0 |) in
                    let~ q10 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (| Value.Integer IntegerKind.U64 0 |) in
                    let~ q11 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (| Value.Integer IntegerKind.U64 1 |) in
                    M.alloc (|
                      M.never_to_any (|
                        M.read (|
                          M.loop (|
                            Ty.apply (Ty.path "*") [] [ Ty.path "never" ],
                            ltac:(M.monadic
                              (let~ q : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u64",
                                    BinOp.Wrap.div,
                                    [ M.read (| r0 |); M.read (| r1 |) ]
                                  |)
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  let β := r0 in
                                  M.write (|
                                    β,
                                    M.call_closure (|
                                      Ty.path "u64",
                                      BinOp.Wrap.sub,
                                      [
                                        M.read (| β |);
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.mul,
                                          [ M.read (| q |); M.read (| r1 |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  let β := q00 in
                                  M.write (|
                                    β,
                                    M.call_closure (|
                                      Ty.path "u64",
                                      BinOp.Wrap.add,
                                      [
                                        M.read (| β |);
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.mul,
                                          [ M.read (| q |); M.read (| q10 |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  let β := q01 in
                                  M.write (|
                                    β,
                                    M.call_closure (|
                                      Ty.path "u64",
                                      BinOp.Wrap.add,
                                      [
                                        M.read (| β |);
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.mul,
                                          [ M.read (| q |); M.read (| q11 |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.eq,
                                                [ M.read (| r0 |); Value.Integer IntegerKind.U64 0 ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                Value.StructTuple
                                                  "ruint::algorithms::gcd::matrix::Matrix"
                                                  [
                                                    M.read (| q10 |);
                                                    M.read (| q11 |);
                                                    M.read (| q00 |);
                                                    M.read (| q01 |);
                                                    Value.Bool false
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ q : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u64",
                                    BinOp.Wrap.div,
                                    [ M.read (| r1 |); M.read (| r0 |) ]
                                  |)
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  let β := r1 in
                                  M.write (|
                                    β,
                                    M.call_closure (|
                                      Ty.path "u64",
                                      BinOp.Wrap.sub,
                                      [
                                        M.read (| β |);
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.mul,
                                          [ M.read (| q |); M.read (| r0 |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  let β := q10 in
                                  M.write (|
                                    β,
                                    M.call_closure (|
                                      Ty.path "u64",
                                      BinOp.Wrap.add,
                                      [
                                        M.read (| β |);
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.mul,
                                          [ M.read (| q |); M.read (| q00 |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  let β := q11 in
                                  M.write (|
                                    β,
                                    M.call_closure (|
                                      Ty.path "u64",
                                      BinOp.Wrap.add,
                                      [
                                        M.read (| β |);
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.mul,
                                          [ M.read (| q |); M.read (| q01 |) ]
                                        |)
                                      ]
                                    |)
                                  |)
                                |) in
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.eq,
                                              [ M.read (| r1 |); Value.Integer IntegerKind.U64 0 ]
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              Value.StructTuple
                                                "ruint::algorithms::gcd::matrix::Matrix"
                                                [
                                                  M.read (| q00 |);
                                                  M.read (| q01 |);
                                                  M.read (| q10 |);
                                                  M.read (| q11 |);
                                                  Value.Bool true
                                                ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)))
                          |)
                        |)
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_from_u64 :
          M.IsAssociatedFunction.C Self "from_u64" from_u64.
        Admitted.
        Global Typeclasses Opaque from_u64.
        
        (*
            pub fn from_u64_prefix(a0: u64, mut a1: u64) -> Self {
                const LIMIT: u64 = 1_u64 << 32;
                debug_assert!(a0 >= 1_u64 << 63);
                debug_assert!(a0 >= a1);
        
                // Here we do something original: The cofactors undergo identical
                // operations which makes them a candidate for SIMD instructions.
                // They also never exceed 32 bit, so we can SWAR them in a single u64.
                let mut k0 = 1_u64 << 32; // u0 = 1, v0 = 0
                let mut k1 = 1_u64; // u1 = 0, v1 = 1
                let mut even = true;
                if a1 < LIMIT {
                    return Matrix::IDENTITY;
                }
        
                // Compute a2
                let q = a0 / a1;
                // dbg!(q);
                let mut a2 = a0 - q * a1;
                let mut k2 = k0 + q * k1;
                if a2 < LIMIT {
                    let u2 = k2 >> 32;
                    let v2 = k2 % LIMIT;
        
                    // Test i + 1 (odd)
                    if a2 >= v2 && a1 - a2 >= u2 {
                        return Matrix(0, 1, u2, v2, false);
                    } else {
                        return Matrix::IDENTITY;
                    }
                }
        
                // Compute a3
                let q = a1 / a2;
                // dbg!(q);
                let mut a3 = a1 - q * a2;
                let mut k3 = k1 + q * k2;
        
                // Loop until a3 < LIMIT, maintaining the last three values
                // of a and the last four values of k.
                while a3 >= LIMIT {
                    a1 = a2;
                    a2 = a3;
                    a3 = a1;
                    k0 = k1;
                    k1 = k2;
                    k2 = k3;
                    k3 = k1;
                    debug_assert!(a2 < a3);
                    debug_assert!(a2 > 0);
                    let q = a3 / a2;
                    // dbg!(q);
                    a3 -= q * a2;
                    k3 += q * k2;
                    if a3 < LIMIT {
                        even = false;
                        break;
                    }
                    a1 = a2;
                    a2 = a3;
                    a3 = a1;
                    k0 = k1;
                    k1 = k2;
                    k2 = k3;
                    k3 = k1;
                    debug_assert!(a2 < a3);
                    debug_assert!(a2 > 0);
                    let q = a3 / a2;
                    // dbg!(q);
                    a3 -= q * a2;
                    k3 += q * k2;
                }
                // Unpack k into cofactors u and v
                let u0 = k0 >> 32;
                let u1 = k1 >> 32;
                let u2 = k2 >> 32;
                let u3 = k3 >> 32;
                let v0 = k0 % LIMIT;
                let v1 = k1 % LIMIT;
                let v2 = k2 % LIMIT;
                let v3 = k3 % LIMIT;
                debug_assert!(a2 >= LIMIT);
                debug_assert!(a3 < LIMIT);
        
                // Use Jebelean's exact condition to determine which outputs are correct.
                // Statistically, i + 2 should be correct about two-thirds of the time.
                if even {
                    // Test i + 1 (odd)
                    debug_assert!(a2 >= v2);
                    if a1 - a2 >= u2 + u1 {
                        // Test i + 2 (even)
                        if a3 >= u3 && a2 - a3 >= v3 + v2 {
                            // Correct value is i + 2
                            Matrix(u2, v2, u3, v3, true)
                        } else {
                            // Correct value is i + 1
                            Matrix(u1, v1, u2, v2, false)
                        }
                    } else {
                        // Correct value is i
                        Matrix(u0, v0, u1, v1, true)
                    }
                } else {
                    // Test i + 1 (even)
                    debug_assert!(a2 >= u2);
                    if a1 - a2 >= v2 + v1 {
                        // Test i + 2 (odd)
                        if a3 >= v3 && a2 - a3 >= u3 + u2 {
                            // Correct value is i + 2
                            Matrix(u2, v2, u3, v3, false)
                        } else {
                            // Correct value is i + 1
                            Matrix(u1, v1, u2, v2, true)
                        }
                    } else {
                        // Correct value is i
                        Matrix(u0, v0, u1, v1, false)
                    }
                }
            }
        *)
        Definition from_u64_prefix (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ a0; a1 ] =>
            ltac:(M.monadic
              (let a0 := M.alloc (| a0 |) in
              let a1 := M.alloc (| a1 |) in
              M.catch_return (Ty.path "ruint::algorithms::gcd::matrix::Matrix") (|
                ltac:(M.monadic
                  (M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.ge,
                                                  [
                                                    M.read (| a0 |);
                                                    M.call_closure (|
                                                      Ty.path "u64",
                                                      BinOp.Wrap.shl,
                                                      [
                                                        Value.Integer IntegerKind.U64 1;
                                                        Value.Integer IntegerKind.I32 63
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (| "core::panicking::panic", [], [] |),
                                              [ mk_str (| "assertion failed: a0 >= 1_u64 << 63" |) ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.ge,
                                                  [ M.read (| a0 |); M.read (| a1 |) ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (| "core::panicking::panic", [], [] |),
                                              [ mk_str (| "assertion failed: a0 >= a1" |) ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ k0 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.shl,
                          [ Value.Integer IntegerKind.U64 1; Value.Integer IntegerKind.I32 32 ]
                        |)
                      |) in
                    let~ k1 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (| Value.Integer IntegerKind.U64 1 |) in
                    let~ even : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
                      M.alloc (| Value.Bool true |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.lt,
                                      [
                                        M.read (| a1 |);
                                        M.read (|
                                          get_constant (|
                                            "ruint::algorithms::gcd::matrix::from_u64_prefix::LIMIT",
                                            Ty.path "u64"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.read (|
                                        get_associated_constant (|
                                          Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                          "IDENTITY",
                                          Ty.path "ruint::algorithms::gcd::matrix::Matrix"
                                        |)
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ q : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.div,
                          [ M.read (| a0 |); M.read (| a1 |) ]
                        |)
                      |) in
                    let~ a2 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.sub,
                          [
                            M.read (| a0 |);
                            M.call_closure (|
                              Ty.path "u64",
                              BinOp.Wrap.mul,
                              [ M.read (| q |); M.read (| a1 |) ]
                            |)
                          ]
                        |)
                      |) in
                    let~ k2 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.add,
                          [
                            M.read (| k0 |);
                            M.call_closure (|
                              Ty.path "u64",
                              BinOp.Wrap.mul,
                              [ M.read (| q |); M.read (| k1 |) ]
                            |)
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.lt,
                                      [
                                        M.read (| a2 |);
                                        M.read (|
                                          get_constant (|
                                            "ruint::algorithms::gcd::matrix::from_u64_prefix::LIMIT",
                                            Ty.path "u64"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ u2 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u64",
                                    BinOp.Wrap.shr,
                                    [ M.read (| k2 |); Value.Integer IntegerKind.I32 32 ]
                                  |)
                                |) in
                              let~ v2 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "u64",
                                    BinOp.Wrap.rem,
                                    [
                                      M.read (| k2 |);
                                      M.read (|
                                        get_constant (|
                                          "ruint::algorithms::gcd::matrix::from_u64_prefix::LIMIT",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            LogicalOp.and (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.ge,
                                                [ M.read (| a2 |); M.read (| v2 |) ]
                                              |),
                                              ltac:(M.monadic
                                                (M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.ge,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u64",
                                                      BinOp.Wrap.sub,
                                                      [ M.read (| a1 |); M.read (| a2 |) ]
                                                    |);
                                                    M.read (| u2 |)
                                                  ]
                                                |)))
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              Value.StructTuple
                                                "ruint::algorithms::gcd::matrix::Matrix"
                                                [
                                                  Value.Integer IntegerKind.U64 0;
                                                  Value.Integer IntegerKind.U64 1;
                                                  M.read (| u2 |);
                                                  M.read (| v2 |);
                                                  Value.Bool false
                                                ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.read (|
                                                get_associated_constant (|
                                                  Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                                  "IDENTITY",
                                                  Ty.path "ruint::algorithms::gcd::matrix::Matrix"
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)))
                                ]
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ q : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.div,
                          [ M.read (| a1 |); M.read (| a2 |) ]
                        |)
                      |) in
                    let~ a3 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.sub,
                          [
                            M.read (| a1 |);
                            M.call_closure (|
                              Ty.path "u64",
                              BinOp.Wrap.mul,
                              [ M.read (| q |); M.read (| a2 |) ]
                            |)
                          ]
                        |)
                      |) in
                    let~ k3 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.add,
                          [
                            M.read (| k1 |);
                            M.call_closure (|
                              Ty.path "u64",
                              BinOp.Wrap.mul,
                              [ M.read (| q |); M.read (| k2 |) ]
                            |)
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ge,
                                          [
                                            M.read (| a3 |);
                                            M.read (|
                                              get_constant (|
                                                "ruint::algorithms::gcd::matrix::from_u64_prefix::LIMIT",
                                                Ty.path "u64"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| a1, M.read (| a2 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| a2, M.read (| a3 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| a3, M.read (| a1 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| k0, M.read (| k1 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| k1, M.read (| k2 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| k2, M.read (| k3 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| k3, M.read (| k1 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.lt,
                                                                [ M.read (| a2 |); M.read (| a3 |) ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::panic",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              mk_str (|
                                                                "assertion failed: a2 < a3"
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.gt,
                                                                [
                                                                  M.read (| a2 |);
                                                                  Value.Integer IntegerKind.U64 0
                                                                ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::panic",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              mk_str (|
                                                                "assertion failed: a2 > 0"
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  let~ q : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "u64",
                                        BinOp.Wrap.div,
                                        [ M.read (| a3 |); M.read (| a2 |) ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      let β := a3 in
                                      M.write (|
                                        β,
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.sub,
                                          [
                                            M.read (| β |);
                                            M.call_closure (|
                                              Ty.path "u64",
                                              BinOp.Wrap.mul,
                                              [ M.read (| q |); M.read (| a2 |) ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      let β := k3 in
                                      M.write (|
                                        β,
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.add,
                                          [
                                            M.read (| β |);
                                            M.call_closure (|
                                              Ty.path "u64",
                                              BinOp.Wrap.mul,
                                              [ M.read (| q |); M.read (| k2 |) ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.lt,
                                                    [
                                                      M.read (| a3 |);
                                                      M.read (|
                                                        get_constant (|
                                                          "ruint::algorithms::gcd::matrix::from_u64_prefix::LIMIT",
                                                          Ty.path "u64"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.read (|
                                                  let~ _ :
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                    M.alloc (|
                                                      M.write (| even, Value.Bool false |)
                                                    |) in
                                                  M.break (||)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| a1, M.read (| a2 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| a2, M.read (| a3 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| a3, M.read (| a1 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| k0, M.read (| k1 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| k1, M.read (| k2 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| k2, M.read (| k3 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (| M.write (| k3, M.read (| k1 |) |) |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.lt,
                                                                [ M.read (| a2 |); M.read (| a3 |) ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::panic",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              mk_str (|
                                                                "assertion failed: a2 < a3"
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.gt,
                                                                [
                                                                  M.read (| a2 |);
                                                                  Value.Integer IntegerKind.U64 0
                                                                ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::panic",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              mk_str (|
                                                                "assertion failed: a2 > 0"
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)));
                                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  let~ q : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "u64",
                                        BinOp.Wrap.div,
                                        [ M.read (| a3 |); M.read (| a2 |) ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      let β := a3 in
                                      M.write (|
                                        β,
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.sub,
                                          [
                                            M.read (| β |);
                                            M.call_closure (|
                                              Ty.path "u64",
                                              BinOp.Wrap.mul,
                                              [ M.read (| q |); M.read (| a2 |) ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      let β := k3 in
                                      M.write (|
                                        β,
                                        M.call_closure (|
                                          Ty.path "u64",
                                          BinOp.Wrap.add,
                                          [
                                            M.read (| β |);
                                            M.call_closure (|
                                              Ty.path "u64",
                                              BinOp.Wrap.mul,
                                              [ M.read (| q |); M.read (| k2 |) ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      |) in
                    let~ u0 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.shr,
                          [ M.read (| k0 |); Value.Integer IntegerKind.I32 32 ]
                        |)
                      |) in
                    let~ u1 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.shr,
                          [ M.read (| k1 |); Value.Integer IntegerKind.I32 32 ]
                        |)
                      |) in
                    let~ u2 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.shr,
                          [ M.read (| k2 |); Value.Integer IntegerKind.I32 32 ]
                        |)
                      |) in
                    let~ u3 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.shr,
                          [ M.read (| k3 |); Value.Integer IntegerKind.I32 32 ]
                        |)
                      |) in
                    let~ v0 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.rem,
                          [
                            M.read (| k0 |);
                            M.read (|
                              get_constant (|
                                "ruint::algorithms::gcd::matrix::from_u64_prefix::LIMIT",
                                Ty.path "u64"
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ v1 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.rem,
                          [
                            M.read (| k1 |);
                            M.read (|
                              get_constant (|
                                "ruint::algorithms::gcd::matrix::from_u64_prefix::LIMIT",
                                Ty.path "u64"
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ v2 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.rem,
                          [
                            M.read (| k2 |);
                            M.read (|
                              get_constant (|
                                "ruint::algorithms::gcd::matrix::from_u64_prefix::LIMIT",
                                Ty.path "u64"
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ v3 : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.rem,
                          [
                            M.read (| k3 |);
                            M.read (|
                              get_constant (|
                                "ruint::algorithms::gcd::matrix::from_u64_prefix::LIMIT",
                                Ty.path "u64"
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.ge,
                                                  [
                                                    M.read (| a2 |);
                                                    M.read (|
                                                      get_constant (|
                                                        "ruint::algorithms::gcd::matrix::from_u64_prefix::LIMIT",
                                                        Ty.path "u64"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (| "core::panicking::panic", [], [] |),
                                              [ mk_str (| "assertion failed: a2 >= LIMIT" |) ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.lt,
                                                  [
                                                    M.read (| a3 |);
                                                    M.read (|
                                                      get_constant (|
                                                        "ruint::algorithms::gcd::matrix::from_u64_prefix::LIMIT",
                                                        Ty.path "u64"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (| "core::panicking::panic", [], [] |),
                                              [ mk_str (| "assertion failed: a3 < LIMIT" |) ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "*")
                        []
                        [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use even in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.ge,
                                                          [ M.read (| a2 |); M.read (| v2 |) ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::panic",
                                                        [],
                                                        []
                                                      |),
                                                      [ mk_str (| "assertion failed: a2 >= v2" |) ]
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ],
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.sub,
                                                [ M.read (| a1 |); M.read (| a2 |) ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.add,
                                                [ M.read (| u2 |); M.read (| u1 |) ]
                                              |)
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  LogicalOp.and (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.ge,
                                                      [ M.read (| a3 |); M.read (| u3 |) ]
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.ge,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "u64",
                                                            BinOp.Wrap.sub,
                                                            [ M.read (| a2 |); M.read (| a3 |) ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.path "u64",
                                                            BinOp.Wrap.add,
                                                            [ M.read (| v3 |); M.read (| v2 |) ]
                                                          |)
                                                        ]
                                                      |)))
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.alloc (|
                                              Value.StructTuple
                                                "ruint::algorithms::gcd::matrix::Matrix"
                                                [
                                                  M.read (| u2 |);
                                                  M.read (| v2 |);
                                                  M.read (| u3 |);
                                                  M.read (| v3 |);
                                                  Value.Bool true
                                                ]
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              Value.StructTuple
                                                "ruint::algorithms::gcd::matrix::Matrix"
                                                [
                                                  M.read (| u1 |);
                                                  M.read (| v1 |);
                                                  M.read (| u2 |);
                                                  M.read (| v2 |);
                                                  Value.Bool false
                                                ]
                                            |)))
                                      ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      Value.StructTuple
                                        "ruint::algorithms::gcd::matrix::Matrix"
                                        [
                                          M.read (| u0 |);
                                          M.read (| v0 |);
                                          M.read (| u1 |);
                                          M.read (| v1 |);
                                          Value.Bool true
                                        ]
                                    |)))
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.match_operator (|
                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.ge,
                                                          [ M.read (| a2 |); M.read (| u2 |) ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::panic",
                                                        [],
                                                        []
                                                      |),
                                                      [ mk_str (| "assertion failed: a2 >= u2" |) ]
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ],
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.sub,
                                                [ M.read (| a1 |); M.read (| a2 |) ]
                                              |);
                                              M.call_closure (|
                                                Ty.path "u64",
                                                BinOp.Wrap.add,
                                                [ M.read (| v2 |); M.read (| v1 |) ]
                                              |)
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ],
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  LogicalOp.and (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.ge,
                                                      [ M.read (| a3 |); M.read (| v3 |) ]
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.ge,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "u64",
                                                            BinOp.Wrap.sub,
                                                            [ M.read (| a2 |); M.read (| a3 |) ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.path "u64",
                                                            BinOp.Wrap.add,
                                                            [ M.read (| u3 |); M.read (| u2 |) ]
                                                          |)
                                                        ]
                                                      |)))
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.alloc (|
                                              Value.StructTuple
                                                "ruint::algorithms::gcd::matrix::Matrix"
                                                [
                                                  M.read (| u2 |);
                                                  M.read (| v2 |);
                                                  M.read (| u3 |);
                                                  M.read (| v3 |);
                                                  Value.Bool false
                                                ]
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              Value.StructTuple
                                                "ruint::algorithms::gcd::matrix::Matrix"
                                                [
                                                  M.read (| u1 |);
                                                  M.read (| v1 |);
                                                  M.read (| u2 |);
                                                  M.read (| v2 |);
                                                  Value.Bool true
                                                ]
                                            |)))
                                      ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.alloc (|
                                      Value.StructTuple
                                        "ruint::algorithms::gcd::matrix::Matrix"
                                        [
                                          M.read (| u0 |);
                                          M.read (| v0 |);
                                          M.read (| u1 |);
                                          M.read (| v1 |);
                                          Value.Bool false
                                        ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_from_u64_prefix :
          M.IsAssociatedFunction.C Self "from_u64_prefix" from_u64_prefix.
        Admitted.
        Global Typeclasses Opaque from_u64_prefix.
        
        (*
            pub fn from_u128_prefix(r0: u128, r1: u128) -> Self {
                debug_assert!(r0 >= r1);
                let s = r0.leading_zeros();
                let r0s = r0 << s;
                let r1s = r1 << s;
                let q = Self::from_u64_prefix((r0s >> 64) as u64, (r1s >> 64) as u64);
                if q == Matrix::IDENTITY {
                    return q;
                }
                // We can return q here and have a perfectly valid single-word Lehmer GCD.
                q
                // OPT: Fix the below method to get double-word Lehmer GCD.
        
                // Recompute r0 and r1 and take the high bits.
                // TODO: Is it safe to do this based on just the u128 prefix?
                // let (r0, r1) = q.apply_u128(r0, r1);
                // let s = r0.leading_zeros();
                // let r0s = r0 << s;
                // let r1s = r1 << s;
                // let qn = Self::from_u64_prefix((r0s >> 64) as u64, (r1s >> 64) as
                // u64);
        
                // // Multiply matrices qn * q
                // qn.compose(q)
            }
        *)
        Definition from_u128_prefix (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ r0; r1 ] =>
            ltac:(M.monadic
              (let r0 := M.alloc (| r0 |) in
              let r1 := M.alloc (| r1 |) in
              M.catch_return (Ty.path "ruint::algorithms::gcd::matrix::Matrix") (|
                ltac:(M.monadic
                  (M.read (|
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.ge,
                                                  [ M.read (| r0 |); M.read (| r1 |) ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (| "core::panicking::panic", [], [] |),
                                              [ mk_str (| "assertion failed: r0 >= r1" |) ]
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let~ s : Ty.apply (Ty.path "*") [] [ Ty.path "u32" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_associated_function (| Ty.path "u128", "leading_zeros", [], [] |),
                          [ M.read (| r0 |) ]
                        |)
                      |) in
                    let~ r0s : Ty.apply (Ty.path "*") [] [ Ty.path "u128" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u128",
                          BinOp.Wrap.shl,
                          [ M.read (| r0 |); M.read (| s |) ]
                        |)
                      |) in
                    let~ r1s : Ty.apply (Ty.path "*") [] [ Ty.path "u128" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u128",
                          BinOp.Wrap.shl,
                          [ M.read (| r1 |); M.read (| s |) ]
                        |)
                      |) in
                    let~ q :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                          M.get_associated_function (|
                            Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                            "from_u64_prefix",
                            [],
                            []
                          |),
                          [
                            M.cast
                              (Ty.path "u64")
                              (M.call_closure (|
                                Ty.path "u128",
                                BinOp.Wrap.shr,
                                [ M.read (| r0s |); Value.Integer IntegerKind.I32 64 ]
                              |));
                            M.cast
                              (Ty.path "u64")
                              (M.call_closure (|
                                Ty.path "u128",
                                BinOp.Wrap.shr,
                                [ M.read (| r1s |); Value.Integer IntegerKind.I32 64 ]
                              |))
                          ]
                        |)
                      |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                        [],
                                        [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ],
                                        "eq",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, q |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                            "IDENTITY",
                                            Ty.path "ruint::algorithms::gcd::matrix::Matrix"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (| M.read (| M.return_ (| M.read (| q |) |) |) |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    q
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_from_u128_prefix :
          M.IsAssociatedFunction.C Self "from_u128_prefix" from_u128_prefix.
        Admitted.
        Global Typeclasses Opaque from_u128_prefix.
      End Impl_ruint_algorithms_gcd_matrix_Matrix.
    End matrix.
  End gcd.
End algorithms.
