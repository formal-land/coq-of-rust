(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module algorithms.
  Module gcd.
    (*
    pub fn gcd<const BITS: usize, const LIMBS: usize>(
        mut a: Uint<BITS, LIMBS>,
        mut b: Uint<BITS, LIMBS>,
    ) -> Uint<BITS, LIMBS> {
        if b > a {
            swap(&mut a, &mut b);
        }
        while b != Uint::ZERO {
            debug_assert!(a >= b);
            let m = LehmerMatrix::from(a, b);
            if m == LehmerMatrix::IDENTITY {
                // Lehmer step failed to find a factor, which happens when
                // the factor is very large. We do a regular Euclidean step, which
                // will make a lot of progress since `q` will be large.
                a %= b;
                swap(&mut a, &mut b);
            } else {
                m.apply(&mut a, &mut b);
            }
        }
        a
    }
    *)
    Definition gcd (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ BITS; LIMBS ], [], [ a; b ] =>
        ltac:(M.monadic
          (let a := M.alloc (| a |) in
          let b := M.alloc (| b |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_trait_method (|
                                "core::cmp::PartialOrd",
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                [],
                                [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                "gt",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, b |);
                                M.borrow (| Pointer.Kind.Ref, a |)
                              ]
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_function (|
                              "core::mem::swap",
                              [],
                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.borrow (| Pointer.Kind.MutRef, a |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.borrow (| Pointer.Kind.MutRef, b |) |)
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.loop (|
                Ty.tuple [],
                ltac:(M.monadic
                  (M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    [],
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                    "ne",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, b |);
                                    M.borrow (| Pointer.Kind.Ref, M.get_constant "ruint::ZERO" |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Some (Ty.tuple []),
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.apply
                                                            (Ty.path "ruint::Uint")
                                                            [ BITS; LIMBS ]
                                                            [],
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "ruint::Uint")
                                                              [ BITS; LIMBS ]
                                                              []
                                                          ],
                                                          "ge",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (| Pointer.Kind.Ref, a |);
                                                          M.borrow (| Pointer.Kind.Ref, b |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::panic",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        Value.String "assertion failed: a >= b"
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          let~ m : Ty.path "ruint::algorithms::gcd::matrix::Matrix" :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                M.get_associated_function (|
                                  Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                  "from",
                                  [ BITS; LIMBS ],
                                  []
                                |),
                                [ M.read (| a |); M.read (| b |) ]
                              |)
                            |) in
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_trait_method (|
                                            "core::cmp::PartialEq",
                                            Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                            [],
                                            [ Ty.path "ruint::algorithms::gcd::matrix::Matrix" ],
                                            "eq",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.Ref, m |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.get_constant
                                                "ruint::algorithms::gcd::matrix::IDENTITY"
                                            |)
                                          ]
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_trait_method (|
                                          "core::ops::arith::RemAssign",
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          [],
                                          [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                          "rem_assign",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.MutRef, a |); M.read (| b |) ]
                                      |)
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_function (|
                                          "core::mem::swap",
                                          [],
                                          [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, a |) |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, b |) |)
                                          |)
                                        ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_associated_function (|
                                          Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                          "apply",
                                          [ BITS; LIMBS ],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, m |);
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, a |) |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, b |) |)
                                          |)
                                        ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| Value.Tuple [] |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |) in
            a
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_gcd : M.IsFunction.Trait "ruint::algorithms::gcd::gcd" gcd.
    Admitted.
    Global Typeclasses Opaque gcd.
    
    (*
    pub fn gcd_extended<const BITS: usize, const LIMBS: usize>(
        mut a: Uint<BITS, LIMBS>,
        mut b: Uint<BITS, LIMBS>,
    ) -> (
        Uint<BITS, LIMBS>,
        Uint<BITS, LIMBS>,
        Uint<BITS, LIMBS>,
        bool,
    ) {
        if BITS == 0 {
            return (Uint::ZERO, Uint::ZERO, Uint::ZERO, false);
        }
        let swapped = a < b;
        if swapped {
            swap(&mut a, &mut b);
        }
    
        // Initialize state matrix to identity.
        let mut s0 = Uint::from(1);
        let mut s1 = Uint::ZERO;
        let mut t0 = Uint::ZERO;
        let mut t1 = Uint::from(1);
        let mut even = true;
        while b != Uint::ZERO {
            debug_assert!(a >= b);
            let m = LehmerMatrix::from(a, b);
            if m == LehmerMatrix::IDENTITY {
                // Lehmer step failed to find a factor, which happens when
                // the factor is very large. We do a regular Euclidean step, which
                // will make a lot of progress since `q` will be large.
                let q = a / b;
                a -= q * b;
                swap(&mut a, &mut b);
                s0 -= q * s1;
                swap(&mut s0, &mut s1);
                t0 -= q * t1;
                swap(&mut t0, &mut t1);
                even = !even;
            } else {
                m.apply(&mut a, &mut b);
                m.apply(&mut s0, &mut s1);
                m.apply(&mut t0, &mut t1);
                even ^= !m.4;
            }
        }
        // TODO: Compute using absolute value instead of patching sign.
        if even {
            // t negative
            t0 = Uint::ZERO - t0;
        } else {
            // s negative
            s0 = Uint::ZERO - s0;
        }
        if swapped {
            swap(&mut s0, &mut t0);
            even = !even;
        }
        (a, s0, t0, even)
    }
    *)
    Definition gcd_extended (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ BITS; LIMBS ], [], [ a; b ] =>
        ltac:(M.monadic
          (let a := M.alloc (| a |) in
          let b := M.alloc (| b |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (|
                                  M.read (|
                                    M.get_constant "ruint::algorithms::gcd::gcd_extended::BITS"
                                  |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.Tuple
                                    [
                                      M.read (| M.get_constant "ruint::ZERO" |);
                                      M.read (| M.get_constant "ruint::ZERO" |);
                                      M.read (| M.get_constant "ruint::ZERO" |);
                                      Value.Bool false
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ swapped : Ty.path "bool" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "bool",
                      M.get_trait_method (|
                        "core::cmp::PartialOrd",
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        [],
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                        "lt",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, a |); M.borrow (| Pointer.Kind.Ref, b |) ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use swapped in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::mem::swap",
                                  [],
                                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, a |) |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, b |) |)
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ s0 : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "from",
                        [],
                        [ Ty.path "i32" ]
                      |),
                      [ Value.Integer IntegerKind.I32 1 ]
                    |)
                  |) in
                let~ s1 : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.copy (| M.get_constant "ruint::ZERO" |) in
                let~ t0 : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.copy (| M.get_constant "ruint::ZERO" |) in
                let~ t1 : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "from",
                        [],
                        [ Ty.path "i32" ]
                      |),
                      [ Value.Integer IntegerKind.I32 1 ]
                    |)
                  |) in
                let~ even : Ty.path "bool" := M.alloc (| Value.Bool true |) in
                let~ _ : Ty.tuple [] :=
                  M.loop (|
                    Ty.tuple [],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        [],
                                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                        "ne",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, b |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.get_constant "ruint::ZERO"
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [ BITS; LIMBS ]
                                                                [],
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "ruint::Uint")
                                                                  [ BITS; LIMBS ]
                                                                  []
                                                              ],
                                                              "ge",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (| Pointer.Kind.Ref, a |);
                                                              M.borrow (| Pointer.Kind.Ref, b |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            Value.String "assertion failed: a >= b"
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ m : Ty.path "ruint::algorithms::gcd::matrix::Matrix" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                    M.get_associated_function (|
                                      Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                      "from",
                                      [ BITS; LIMBS ],
                                      []
                                    |),
                                    [ M.read (| a |); M.read (| b |) ]
                                  |)
                                |) in
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_trait_method (|
                                                "core::cmp::PartialEq",
                                                Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                                [],
                                                [ Ty.path "ruint::algorithms::gcd::matrix::Matrix"
                                                ],
                                                "eq",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (| Pointer.Kind.Ref, m |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.get_constant
                                                    "ruint::algorithms::gcd::matrix::IDENTITY"
                                                |)
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      let~ q :
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            M.get_trait_method (|
                                              "core::ops::arith::Div",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ],
                                              "div",
                                              [],
                                              []
                                            |),
                                            [ M.read (| a |); M.read (| b |) ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_trait_method (|
                                              "core::ops::arith::SubAssign",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ],
                                              "sub_assign",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, a |);
                                              M.call_closure (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    [],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [ BITS; LIMBS ]
                                                      []
                                                  ],
                                                  "mul",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| q |); M.read (| b |) ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "core::mem::swap",
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, a |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, b |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_trait_method (|
                                              "core::ops::arith::SubAssign",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ],
                                              "sub_assign",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, s0 |);
                                              M.call_closure (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    [],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [ BITS; LIMBS ]
                                                      []
                                                  ],
                                                  "mul",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| q |); M.read (| s1 |) ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "core::mem::swap",
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, s0 |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, s1 |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_trait_method (|
                                              "core::ops::arith::SubAssign",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ],
                                              "sub_assign",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, t0 |);
                                              M.call_closure (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    [],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [ BITS; LIMBS ]
                                                      []
                                                  ],
                                                  "mul",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| q |); M.read (| t1 |) ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "core::mem::swap",
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, t0 |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, t1 |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.write (| even, UnOp.not (| M.read (| even |) |) |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                              "apply",
                                              [ BITS; LIMBS ],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.Ref, m |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, a |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, b |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                              "apply",
                                              [ BITS; LIMBS ],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.Ref, m |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, s0 |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, s1 |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                              "apply",
                                              [ BITS; LIMBS ],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.Ref, m |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, t0 |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, t1 |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          let β := even in
                                          M.write (|
                                            β,
                                            BinOp.bit_xor
                                              (M.read (| β |))
                                              (UnOp.not (|
                                                M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    m,
                                                    "ruint::algorithms::gcd::matrix::Matrix",
                                                    4
                                                  |)
                                                |)
                                              |))
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use even in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.write (|
                                t0,
                                M.call_closure (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  M.get_trait_method (|
                                    "core::ops::arith::Sub",
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    [],
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                    "sub",
                                    [],
                                    []
                                  |),
                                  [ M.read (| M.get_constant "ruint::ZERO" |); M.read (| t0 |) ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.write (|
                                s0,
                                M.call_closure (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  M.get_trait_method (|
                                    "core::ops::arith::Sub",
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    [],
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                    "sub",
                                    [],
                                    []
                                  |),
                                  [ M.read (| M.get_constant "ruint::ZERO" |); M.read (| s0 |) ]
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use swapped in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::mem::swap",
                                  [],
                                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, s0 |) |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, t0 |) |)
                                  |)
                                ]
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (| M.write (| even, UnOp.not (| M.read (| even |) |) |) |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  Value.Tuple
                    [ M.read (| a |); M.read (| s0 |); M.read (| t0 |); M.read (| even |) ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_gcd_extended :
      M.IsFunction.Trait "ruint::algorithms::gcd::gcd_extended" gcd_extended.
    Admitted.
    Global Typeclasses Opaque gcd_extended.
    
    (*
    pub fn inv_mod<const BITS: usize, const LIMBS: usize>(
        num: Uint<BITS, LIMBS>,
        modulus: Uint<BITS, LIMBS>,
    ) -> Option<Uint<BITS, LIMBS>> {
        if BITS == 0 || modulus == Uint::ZERO {
            return None;
        }
        let mut a = modulus;
        let mut b = num;
        if b >= a {
            b %= a;
        }
        if b == Uint::ZERO {
            return None;
        }
    
        let mut t0 = Uint::ZERO;
        let mut t1 = Uint::from(1);
        let mut even = true;
        while b != Uint::ZERO {
            debug_assert!(a >= b);
            let m = LehmerMatrix::from(a, b);
            if m == LehmerMatrix::IDENTITY {
                // Lehmer step failed to find a factor, which happens when
                // the factor is very large. We do a regular Euclidean step, which
                // will make a lot of progress since `q` will be large.
                let q = a / b;
                a -= q * b;
                swap(&mut a, &mut b);
                t0 -= q * t1;
                swap(&mut t0, &mut t1);
                even = !even;
            } else {
                m.apply(&mut a, &mut b);
                m.apply(&mut t0, &mut t1);
                even ^= !m.4;
            }
        }
        if a == Uint::from(1) {
            // When `even` t0 is negative and in twos-complement form
            Some(if even { modulus + t0 } else { t0 })
        } else {
            None
        }
    }
    *)
    Definition inv_mod (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ BITS; LIMBS ], [], [ num; modulus ] =>
        ltac:(M.monadic
          (let num := M.alloc (| num |) in
          let modulus := M.alloc (| modulus |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.or (|
                                  BinOp.eq (|
                                    M.read (|
                                      M.get_constant "ruint::algorithms::gcd::inv_mod::BITS"
                                    |),
                                    Value.Integer IntegerKind.Usize 0
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        [],
                                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                        "eq",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, modulus |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.get_constant "ruint::ZERO"
                                        |)
                                      ]
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ a : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.copy (| modulus |) in
                let~ b : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] := M.copy (| num |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    [],
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                    "ge",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, b |);
                                    M.borrow (| Pointer.Kind.Ref, a |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "core::ops::arith::RemAssign",
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  [],
                                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                  "rem_assign",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.MutRef, b |); M.read (| a |) ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    [],
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, b |);
                                    M.borrow (| Pointer.Kind.Ref, M.get_constant "ruint::ZERO" |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ t0 : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.copy (| M.get_constant "ruint::ZERO" |) in
                let~ t1 : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "from",
                        [],
                        [ Ty.path "i32" ]
                      |),
                      [ Value.Integer IntegerKind.I32 1 ]
                    |)
                  |) in
                let~ even : Ty.path "bool" := M.alloc (| Value.Bool true |) in
                let~ _ : Ty.tuple [] :=
                  M.loop (|
                    Ty.tuple [],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        [],
                                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                        "ne",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, b |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.get_constant "ruint::ZERO"
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.apply
                                                                (Ty.path "ruint::Uint")
                                                                [ BITS; LIMBS ]
                                                                [],
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "ruint::Uint")
                                                                  [ BITS; LIMBS ]
                                                                  []
                                                              ],
                                                              "ge",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (| Pointer.Kind.Ref, a |);
                                                              M.borrow (| Pointer.Kind.Ref, b |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            Value.String "assertion failed: a >= b"
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ m : Ty.path "ruint::algorithms::gcd::matrix::Matrix" :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                    M.get_associated_function (|
                                      Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                      "from",
                                      [ BITS; LIMBS ],
                                      []
                                    |),
                                    [ M.read (| a |); M.read (| b |) ]
                                  |)
                                |) in
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_trait_method (|
                                                "core::cmp::PartialEq",
                                                Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                                [],
                                                [ Ty.path "ruint::algorithms::gcd::matrix::Matrix"
                                                ],
                                                "eq",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (| Pointer.Kind.Ref, m |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.get_constant
                                                    "ruint::algorithms::gcd::matrix::IDENTITY"
                                                |)
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      let~ q :
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            M.get_trait_method (|
                                              "core::ops::arith::Div",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ],
                                              "div",
                                              [],
                                              []
                                            |),
                                            [ M.read (| a |); M.read (| b |) ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_trait_method (|
                                              "core::ops::arith::SubAssign",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ],
                                              "sub_assign",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, a |);
                                              M.call_closure (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    [],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [ BITS; LIMBS ]
                                                      []
                                                  ],
                                                  "mul",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| q |); M.read (| b |) ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "core::mem::swap",
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, a |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, b |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_trait_method (|
                                              "core::ops::arith::SubAssign",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ],
                                              "sub_assign",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, t0 |);
                                              M.call_closure (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    [],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [ BITS; LIMBS ]
                                                      []
                                                  ],
                                                  "mul",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| q |); M.read (| t1 |) ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "core::mem::swap",
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, t0 |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, t1 |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.write (| even, UnOp.not (| M.read (| even |) |) |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                              "apply",
                                              [ BITS; LIMBS ],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.Ref, m |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, a |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, b |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.path "ruint::algorithms::gcd::matrix::Matrix",
                                              "apply",
                                              [ BITS; LIMBS ],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.Ref, m |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, t0 |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.borrow (| Pointer.Kind.MutRef, t1 |) |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          let β := even in
                                          M.write (|
                                            β,
                                            BinOp.bit_xor
                                              (M.read (| β |))
                                              (UnOp.not (|
                                                M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    m,
                                                    "ruint::algorithms::gcd::matrix::Matrix",
                                                    4
                                                  |)
                                                |)
                                              |))
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                M.match_operator (|
                  Some
                    (Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]),
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  [],
                                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, a |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "from",
                                          [],
                                          [ Ty.path "i32" ]
                                        |),
                                        [ Value.Integer IntegerKind.I32 1 ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::option::Option::Some"
                            [
                              M.read (|
                                M.match_operator (|
                                  Some (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []),
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use even in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            M.get_trait_method (|
                                              "core::ops::arith::Add",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ],
                                              "add",
                                              [],
                                              []
                                            |),
                                            [ M.read (| modulus |); M.read (| t0 |) ]
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic t0)
                                  ]
                                |)
                              |)
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_inv_mod :
      M.IsFunction.Trait "ruint::algorithms::gcd::inv_mod" inv_mod.
    Admitted.
    Global Typeclasses Opaque inv_mod.
  End gcd.
End algorithms.
