(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module algorithms.
  (* Trait *)
  (* Empty module 'DoubleWord' *)
  
  Module Impl_ruint_algorithms_DoubleWord_u64_for_u128.
    Definition Self : Ty.t := Ty.path "u128".
    
    (*
        fn join(high: u64, low: u64) -> Self {
            (Self::from(high) << 64) | Self::from(low)
        }
    *)
    Definition join (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ high; low ] =>
        ltac:(M.monadic
          (let high := M.alloc (| high |) in
          let low := M.alloc (| low |) in
          BinOp.bit_or
            (BinOp.Wrap.shl (|
              M.call_closure (|
                Ty.path "u128",
                M.get_trait_method (|
                  "core::convert::From",
                  Ty.path "u128",
                  [],
                  [ Ty.path "u64" ],
                  "from",
                  [],
                  []
                |),
                [ M.read (| high |) ]
              |),
              Value.Integer IntegerKind.I32 64
            |))
            (M.call_closure (|
              Ty.path "u128",
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "u128",
                [],
                [ Ty.path "u64" ],
                "from",
                [],
                []
              |),
              [ M.read (| low |) ]
            |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn add(a: u64, b: u64) -> Self {
            Self::from(a) + Self::from(b)
        }
    *)
    Definition add (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ a; b ] =>
        ltac:(M.monadic
          (let a := M.alloc (| a |) in
          let b := M.alloc (| b |) in
          BinOp.Wrap.add (|
            M.call_closure (|
              Ty.path "u128",
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "u128",
                [],
                [ Ty.path "u64" ],
                "from",
                [],
                []
              |),
              [ M.read (| a |) ]
            |),
            M.call_closure (|
              Ty.path "u128",
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "u128",
                [],
                [ Ty.path "u64" ],
                "from",
                [],
                []
              |),
              [ M.read (| b |) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn mul(a: u64, b: u64) -> Self {
            Self::from(a) * Self::from(b)
        }
    *)
    Definition mul (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ a; b ] =>
        ltac:(M.monadic
          (let a := M.alloc (| a |) in
          let b := M.alloc (| b |) in
          BinOp.Wrap.mul (|
            M.call_closure (|
              Ty.path "u128",
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "u128",
                [],
                [ Ty.path "u64" ],
                "from",
                [],
                []
              |),
              [ M.read (| a |) ]
            |),
            M.call_closure (|
              Ty.path "u128",
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "u128",
                [],
                [ Ty.path "u64" ],
                "from",
                [],
                []
              |),
              [ M.read (| b |) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn muladd(a: u64, b: u64, c: u64) -> Self {
            Self::from(a) * Self::from(b) + Self::from(c)
        }
    *)
    Definition muladd (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ a; b; c ] =>
        ltac:(M.monadic
          (let a := M.alloc (| a |) in
          let b := M.alloc (| b |) in
          let c := M.alloc (| c |) in
          BinOp.Wrap.add (|
            BinOp.Wrap.mul (|
              M.call_closure (|
                Ty.path "u128",
                M.get_trait_method (|
                  "core::convert::From",
                  Ty.path "u128",
                  [],
                  [ Ty.path "u64" ],
                  "from",
                  [],
                  []
                |),
                [ M.read (| a |) ]
              |),
              M.call_closure (|
                Ty.path "u128",
                M.get_trait_method (|
                  "core::convert::From",
                  Ty.path "u128",
                  [],
                  [ Ty.path "u64" ],
                  "from",
                  [],
                  []
                |),
                [ M.read (| b |) ]
              |)
            |),
            M.call_closure (|
              Ty.path "u128",
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "u128",
                [],
                [ Ty.path "u64" ],
                "from",
                [],
                []
              |),
              [ M.read (| c |) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn muladd2(a: u64, b: u64, c: u64, d: u64) -> Self {
            Self::from(a) * Self::from(b) + Self::from(c) + Self::from(d)
        }
    *)
    Definition muladd2 (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ a; b; c; d ] =>
        ltac:(M.monadic
          (let a := M.alloc (| a |) in
          let b := M.alloc (| b |) in
          let c := M.alloc (| c |) in
          let d := M.alloc (| d |) in
          BinOp.Wrap.add (|
            BinOp.Wrap.add (|
              BinOp.Wrap.mul (|
                M.call_closure (|
                  Ty.path "u128",
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "u128",
                    [],
                    [ Ty.path "u64" ],
                    "from",
                    [],
                    []
                  |),
                  [ M.read (| a |) ]
                |),
                M.call_closure (|
                  Ty.path "u128",
                  M.get_trait_method (|
                    "core::convert::From",
                    Ty.path "u128",
                    [],
                    [ Ty.path "u64" ],
                    "from",
                    [],
                    []
                  |),
                  [ M.read (| b |) ]
                |)
              |),
              M.call_closure (|
                Ty.path "u128",
                M.get_trait_method (|
                  "core::convert::From",
                  Ty.path "u128",
                  [],
                  [ Ty.path "u64" ],
                  "from",
                  [],
                  []
                |),
                [ M.read (| c |) ]
              |)
            |),
            M.call_closure (|
              Ty.path "u128",
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "u128",
                [],
                [ Ty.path "u64" ],
                "from",
                [],
                []
              |),
              [ M.read (| d |) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn high(self) -> u64 {
            (self >> 64) as u64
        }
    *)
    Definition high (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.cast
            (Ty.path "u64")
            (BinOp.Wrap.shr (| M.read (| self |), Value.Integer IntegerKind.I32 64 |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn low(self) -> u64 {
            self as u64
        }
    *)
    Definition low (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.cast (Ty.path "u64") (M.read (| self |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn split(self) -> (u64, u64) {
            (self.low(), self.high())
        }
    *)
    Definition split (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple
            [
              M.call_closure (|
                Ty.path "u64",
                M.get_trait_method (|
                  "ruint::algorithms::DoubleWord",
                  Ty.path "u128",
                  [],
                  [ Ty.path "u64" ],
                  "low",
                  [],
                  []
                |),
                [ M.read (| self |) ]
              |);
              M.call_closure (|
                Ty.path "u64",
                M.get_trait_method (|
                  "ruint::algorithms::DoubleWord",
                  Ty.path "u128",
                  [],
                  [ Ty.path "u64" ],
                  "high",
                  [],
                  []
                |),
                [ M.read (| self |) ]
              |)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "ruint::algorithms::DoubleWord"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u64" ]
        Self
        (* Instance *)
        [
          ("join", InstanceField.Method join);
          ("add", InstanceField.Method add);
          ("mul", InstanceField.Method mul);
          ("muladd", InstanceField.Method muladd);
          ("muladd2", InstanceField.Method muladd2);
          ("high", InstanceField.Method high);
          ("low", InstanceField.Method low);
          ("split", InstanceField.Method split)
        ].
  End Impl_ruint_algorithms_DoubleWord_u64_for_u128.
  
  (*
  pub fn cmp(left: &[u64], right: &[u64]) -> Ordering {
      let l = core::cmp::min(left.len(), right.len());
  
      // Slice to the loop iteration range to enable bound check
      // elimination in the compiler
      let lhs = &left[..l];
      let rhs = &right[..l];
  
      for i in (0..l).rev() {
          match i8::from(lhs[i] > rhs[i]) - i8::from(lhs[i] < rhs[i]) {
              -1 => return Ordering::Less,
              0 => {}
              1 => return Ordering::Greater,
              _ => unsafe { core::hint::unreachable_unchecked() },
          }
  
          // Equivalent to:
          // match lhs[i].cmp(&rhs[i]) {
          //     Ordering::Equal => {}
          //     non_eq => return non_eq,
          // }
      }
  
      left.len().cmp(&right.len())
  }
  *)
  Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ _ as left; _ as right ] =>
      ltac:(M.monadic
        (let left := M.alloc (| left |) in
        let right := M.alloc (| right |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let~ l : Ty.path "usize" :=
                M.alloc (|
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "core::cmp::min", [], [ Ty.path "usize" ] |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| left |) |) |) ]
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| right |) |) |) ]
                      |)
                    ]
                  |)
                |) in
              let~ lhs :
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ] ] :=
                M.alloc (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ] ],
                        M.get_trait_method (|
                          "core::ops::index::Index",
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.apply (Ty.path "core::ops::range::RangeTo") [] [ Ty.path "usize" ] ],
                          "index",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| left |) |) |);
                          Value.StructRecord
                            "core::ops::range::RangeTo"
                            [ ("end_", M.read (| l |)) ]
                        ]
                      |)
                    |)
                  |)
                |) in
              let~ rhs :
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ] ] :=
                M.alloc (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ] ],
                        M.get_trait_method (|
                          "core::ops::index::Index",
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                          [],
                          [ Ty.apply (Ty.path "core::ops::range::RangeTo") [] [ Ty.path "usize" ] ],
                          "index",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| right |) |) |);
                          Value.StructRecord
                            "core::ops::range::RangeTo"
                            [ ("end_", M.read (| l |)) ]
                        ]
                      |)
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.use
                  (M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              [],
                              [],
                              "rev",
                              [],
                              []
                            |),
                            [
                              Value.StructRecord
                                "core::ops::range::Range"
                                [
                                  ("start", Value.Integer IntegerKind.Usize 0);
                                  ("end_", M.read (| l |))
                                ]
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            Ty.tuple [],
                            ltac:(M.monadic
                              (let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Some (Ty.tuple []),
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "usize" ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::rev::Rev")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ]
                                          ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let i := M.copy (| γ0_0 |) in
                                        M.match_operator (|
                                          Some (Ty.tuple []),
                                          M.alloc (|
                                            BinOp.Wrap.sub (|
                                              M.call_closure (|
                                                Ty.path "i8",
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  Ty.path "i8",
                                                  [],
                                                  [ Ty.path "bool" ],
                                                  "from",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  BinOp.gt (|
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| lhs |) |),
                                                        M.read (| i |)
                                                      |)
                                                    |),
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| rhs |) |),
                                                        M.read (| i |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |),
                                              M.call_closure (|
                                                Ty.path "i8",
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  Ty.path "i8",
                                                  [],
                                                  [ Ty.path "bool" ],
                                                  "from",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  BinOp.lt (|
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| lhs |) |),
                                                        M.read (| i |)
                                                      |)
                                                    |),
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| rhs |) |),
                                                        M.read (| i |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Integer IntegerKind.I8 (-1)
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        Value.StructTuple
                                                          "core::cmp::Ordering::Less"
                                                          []
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Integer IntegerKind.I8 0
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Integer IntegerKind.I8 1
                                                  |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        Value.StructTuple
                                                          "core::cmp::Ordering::Greater"
                                                          []
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (|
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::hint::unreachable_unchecked",
                                                        [],
                                                        []
                                                      |),
                                                      []
                                                    |)
                                                  |)
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (|
                M.call_closure (|
                  Ty.path "core::cmp::Ordering",
                  M.get_trait_method (| "core::cmp::Ord", Ty.path "usize", [], [], "cmp", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                            "len",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| left |) |) |) ]
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| right |) |) |) ]
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_cmp : M.IsFunction.C "ruint::algorithms::cmp" cmp.
  Admitted.
  Global Typeclasses Opaque cmp.
End algorithms.
