(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module algorithms.
  Module ops.
    (*
    pub fn adc(lhs: u64, rhs: u64, carry: u64) -> (u64, u64) {
        let result = u128::from(lhs) + u128::from(rhs) + u128::from(carry);
        result.split()
    }
    *)
    Definition adc (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ lhs; rhs; carry ] =>
        ltac:(M.monadic
          (let lhs := M.alloc (| Ty.path "u64", lhs |) in
          let rhs := M.alloc (| Ty.path "u64", rhs |) in
          let carry := M.alloc (| Ty.path "u64", carry |) in
          M.read (|
            let~ result : Ty.path "u128" :=
              M.call_closure (|
                Ty.path "u128",
                BinOp.Wrap.add,
                [
                  M.call_closure (|
                    Ty.path "u128",
                    BinOp.Wrap.add,
                    [
                      M.call_closure (|
                        Ty.path "u128",
                        M.get_trait_method (|
                          "core::convert::From",
                          Ty.path "u128",
                          [],
                          [ Ty.path "u64" ],
                          "from",
                          [],
                          []
                        |),
                        [ M.read (| lhs |) ]
                      |);
                      M.call_closure (|
                        Ty.path "u128",
                        M.get_trait_method (|
                          "core::convert::From",
                          Ty.path "u128",
                          [],
                          [ Ty.path "u64" ],
                          "from",
                          [],
                          []
                        |),
                        [ M.read (| rhs |) ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.path "u128",
                      [],
                      [ Ty.path "u64" ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| carry |) ]
                  |)
                ]
              |) in
            M.alloc (|
              Ty.tuple [ Ty.path "u64"; Ty.path "u64" ],
              M.call_closure (|
                Ty.tuple [ Ty.path "u64"; Ty.path "u64" ],
                M.get_trait_method (|
                  "ruint::algorithms::DoubleWord",
                  Ty.path "u128",
                  [],
                  [ Ty.path "u64" ],
                  "split",
                  [],
                  []
                |),
                [ M.read (| result |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_adc : M.IsFunction.C "ruint::algorithms::ops::adc" adc.
    Admitted.
    Global Typeclasses Opaque adc.
    
    (*
    pub fn sbb(lhs: u64, rhs: u64, borrow: u64) -> (u64, u64) {
        let result = u128::from(lhs)
            .wrapping_sub(u128::from(rhs))
            .wrapping_sub(u128::from(borrow));
        (result.low(), result.high().wrapping_neg())
    }
    *)
    Definition sbb (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ lhs; rhs; borrow ] =>
        ltac:(M.monadic
          (let lhs := M.alloc (| Ty.path "u64", lhs |) in
          let rhs := M.alloc (| Ty.path "u64", rhs |) in
          let borrow := M.alloc (| Ty.path "u64", borrow |) in
          M.read (|
            let~ result : Ty.path "u128" :=
              M.call_closure (|
                Ty.path "u128",
                M.get_associated_function (| Ty.path "u128", "wrapping_sub", [], [] |),
                [
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_associated_function (| Ty.path "u128", "wrapping_sub", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "u128",
                        M.get_trait_method (|
                          "core::convert::From",
                          Ty.path "u128",
                          [],
                          [ Ty.path "u64" ],
                          "from",
                          [],
                          []
                        |),
                        [ M.read (| lhs |) ]
                      |);
                      M.call_closure (|
                        Ty.path "u128",
                        M.get_trait_method (|
                          "core::convert::From",
                          Ty.path "u128",
                          [],
                          [ Ty.path "u64" ],
                          "from",
                          [],
                          []
                        |),
                        [ M.read (| rhs |) ]
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "u128",
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.path "u128",
                      [],
                      [ Ty.path "u64" ],
                      "from",
                      [],
                      []
                    |),
                    [ M.read (| borrow |) ]
                  |)
                ]
              |) in
            M.alloc (|
              Ty.tuple [ Ty.path "u64"; Ty.path "u64" ],
              Value.Tuple
                [
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_trait_method (|
                      "ruint::algorithms::DoubleWord",
                      Ty.path "u128",
                      [],
                      [ Ty.path "u64" ],
                      "low",
                      [],
                      []
                    |),
                    [ M.read (| result |) ]
                  |);
                  M.call_closure (|
                    Ty.path "u64",
                    M.get_associated_function (| Ty.path "u64", "wrapping_neg", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "u64",
                        M.get_trait_method (|
                          "ruint::algorithms::DoubleWord",
                          Ty.path "u128",
                          [],
                          [ Ty.path "u64" ],
                          "high",
                          [],
                          []
                        |),
                        [ M.read (| result |) ]
                      |)
                    ]
                  |)
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_sbb : M.IsFunction.C "ruint::algorithms::ops::sbb" sbb.
    Admitted.
    Global Typeclasses Opaque sbb.
  End ops.
End algorithms.
