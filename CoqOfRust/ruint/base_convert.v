(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module base_convert.
  (*
  Enum BaseConvertError
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "Overflow";
          item := StructTuple [];
        };
        {
          name := "InvalidBase";
          item := StructTuple [ Ty.path "u64" ];
        };
        {
          name := "InvalidDigit";
          item := StructTuple [ Ty.path "u64"; Ty.path "u64" ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_BaseConvertError_Overflow :
    M.IsDiscriminant "ruint::base_convert::BaseConvertError::Overflow" 0.
  Axiom IsDiscriminant_BaseConvertError_InvalidBase :
    M.IsDiscriminant "ruint::base_convert::BaseConvertError::InvalidBase" 1.
  Axiom IsDiscriminant_BaseConvertError_InvalidDigit :
    M.IsDiscriminant "ruint::base_convert::BaseConvertError::InvalidDigit" 2.
  
  Module Impl_core_clone_Clone_for_ruint_base_convert_BaseConvertError.
    Definition Self : Ty.t := Ty.path "ruint::base_convert::BaseConvertError".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              None,
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_ruint_base_convert_BaseConvertError.
  
  Module Impl_core_marker_Copy_for_ruint_base_convert_BaseConvertError.
    Definition Self : Ty.t := Ty.path "ruint::base_convert::BaseConvertError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_ruint_base_convert_BaseConvertError.
  
  Module Impl_core_fmt_Debug_for_ruint_base_convert_BaseConvertError.
    Definition Self : Ty.t := Ty.path "ruint::base_convert::BaseConvertError".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ]),
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "ruint::base_convert::BaseConvertError::Overflow"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Overflow" |) |) |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::base_convert::BaseConvertError::InvalidBase",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "InvalidBase" |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::base_convert::BaseConvertError::InvalidDigit",
                        0
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::base_convert::BaseConvertError::InvalidDigit",
                        1
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field2_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "InvalidDigit" |) |)
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_ruint_base_convert_BaseConvertError.
  
  Module Impl_core_marker_StructuralPartialEq_for_ruint_base_convert_BaseConvertError.
    Definition Self : Ty.t := Ty.path "ruint::base_convert::BaseConvertError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_ruint_base_convert_BaseConvertError.
  
  Module Impl_core_cmp_PartialEq_ruint_base_convert_BaseConvertError_for_ruint_base_convert_BaseConvertError.
    Definition Self : Ty.t := Ty.path "ruint::base_convert::BaseConvertError".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "ruint::base_convert::BaseConvertError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "ruint::base_convert::BaseConvertError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (|
              LogicalOp.and (|
                BinOp.eq (| M.read (| __self_discr |), M.read (| __arg1_discr |) |),
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      Some (Ty.path "bool"),
                      M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "ruint::base_convert::BaseConvertError::InvalidBase",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "ruint::base_convert::BaseConvertError::InvalidBase",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                  [],
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                  M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "ruint::base_convert::BaseConvertError::InvalidDigit",
                                0
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "ruint::base_convert::BaseConvertError::InvalidDigit",
                                1
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let __self_1 := M.alloc (| γ2_1 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "ruint::base_convert::BaseConvertError::InvalidDigit",
                                0
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "ruint::base_convert::BaseConvertError::InvalidDigit",
                                1
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            let __arg1_1 := M.alloc (| γ2_1 |) in
                            M.alloc (|
                              LogicalOp.and (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                    [],
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                    M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                  ]
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                      [],
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, __self_1 |);
                                      M.borrow (| Pointer.Kind.Ref, __arg1_1 |)
                                    ]
                                  |)))
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Bool true |)))
                      ]
                    |)
                  |)))
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "ruint::base_convert::BaseConvertError" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_ruint_base_convert_BaseConvertError_for_ruint_base_convert_BaseConvertError.
  
  Module Impl_core_cmp_Eq_for_ruint_base_convert_BaseConvertError.
    Definition Self : Ty.t := Ty.path "ruint::base_convert::BaseConvertError".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              None,
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_ruint_base_convert_BaseConvertError.
  
  Module Impl_core_error_Error_for_ruint_base_convert_BaseConvertError.
    Definition Self : Ty.t := Ty.path "ruint::base_convert::BaseConvertError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::error::Error"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_error_Error_for_ruint_base_convert_BaseConvertError.
  
  Module Impl_core_fmt_Display_for_ruint_base_convert_BaseConvertError.
    Definition Self : Ty.t := Ty.path "ruint::base_convert::BaseConvertError".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            match self {
                Self::Overflow => f.write_str("the value is too large to fit the target type"),
                Self::InvalidBase(base) => {
                    write!(f, "the requested number base {base} is less than two")
                }
                Self::InvalidDigit(digit, base) => {
                    write!(f, "digit {digit} is out of range for base {base}")
                }
            }
        }
    *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ]),
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "ruint::base_convert::BaseConvertError::Overflow"
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              mk_str (| "the value is too large to fit the target type" |)
                            |)
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::base_convert::BaseConvertError::InvalidBase",
                        0
                      |) in
                    let base := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 1
                              ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          mk_str (| "the requested number base " |);
                                          mk_str (| " is less than two" |)
                                        ]
                                    |)
                                  |)
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::rt::Argument",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [],
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, base |) |)
                                              |)
                                            ]
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::base_convert::BaseConvertError::InvalidDigit",
                        0
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::base_convert::BaseConvertError::InvalidDigit",
                        1
                      |) in
                    let digit := M.alloc (| γ1_0 |) in
                    let base := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 2
                              ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          mk_str (| "digit " |);
                                          mk_str (| " is out of range for base " |)
                                        ]
                                    |)
                                  |)
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::rt::Argument",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [],
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, digit |) |)
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            Ty.path "core::fmt::rt::Argument",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [],
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, base |) |)
                                              |)
                                            ]
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_ruint_base_convert_BaseConvertError.
  
  Module Impl_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        pub fn to_base_le(&self, base: u64) -> impl Iterator<Item = u64> {
            assert!(base > 1);
            SpigotLittle {
                base,
                limbs: self.limbs,
            }
        }
    *)
    Definition to_base_le
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; base ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let base := M.alloc (| base |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              BinOp.gt (| M.read (| base |), Value.Integer IntegerKind.U64 1 |)
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: base > 1" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              Value.StructRecord
                "ruint::base_convert::SpigotLittle"
                [
                  ("base", M.read (| base |));
                  ("limbs",
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "ruint::Uint",
                        "limbs"
                      |)
                    |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_to_base_le :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "to_base_le" (to_base_le BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque to_base_le.
    
    (*
        pub fn to_base_be(&self, base: u64) -> impl Iterator<Item = u64> {
            struct OwnedVecIterator {
                vec: alloc::vec::Vec<u64>,
            }
    
            impl Iterator for OwnedVecIterator {
                type Item = u64;
    
                #[inline]
                fn next(&mut self) -> Option<Self::Item> {
                    self.vec.pop()
                }
            }
    
            assert!(base > 1);
            OwnedVecIterator {
                vec: self.to_base_le(base).collect(),
            }
        }
    *)
    Definition to_base_be
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; base ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let base := M.alloc (| base |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              BinOp.gt (| M.read (| base |), Value.Integer IntegerKind.U64 1 |)
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [ mk_str (| "assertion failed: base > 1" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              Value.StructRecord
                "ruint::base_convert::to_base_be::OwnedVecIterator"
                [
                  ("vec",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.associated_unknown,
                        [],
                        [],
                        "collect",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "u64"; Ty.path "alloc::alloc::Global" ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_unknown,
                          M.get_associated_function (|
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                            "to_base_le",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                            M.read (| base |)
                          ]
                        |)
                      ]
                    |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_to_base_be :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "to_base_be" (to_base_be BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque to_base_be.
    
    (*
        pub fn from_base_le<I>(base: u64, digits: I) -> Result<Self, BaseConvertError>
        where
            I: IntoIterator<Item = u64>,
        {
            if base < 2 {
                return Err(BaseConvertError::InvalidBase(base));
            }
            if BITS == 0 {
                for digit in digits {
                    if digit >= base {
                        return Err(BaseConvertError::InvalidDigit(digit, base));
                    }
                    if digit != 0 {
                        return Err(BaseConvertError::Overflow);
                    }
                }
                return Ok(Self::ZERO);
            }
    
            let mut iter = digits.into_iter();
            let mut result = Self::ZERO;
            let mut power = Self::from(1);
            for digit in iter.by_ref() {
                if digit >= base {
                    return Err(BaseConvertError::InvalidDigit(digit, base));
                }
    
                // Add digit to result
                let overflow = addmul_nx1(&mut result.limbs, power.as_limbs(), digit);
                if overflow != 0 || result.limbs[LIMBS - 1] > Self::MASK {
                    return Err(BaseConvertError::Overflow);
                }
    
                // Update power
                let overflow = mul_nx1(&mut power.limbs, base);
                if overflow != 0 || power.limbs[LIMBS - 1] > Self::MASK {
                    // Following digits must be zero
                    break;
                }
            }
            for digit in iter {
                if digit >= base {
                    return Err(BaseConvertError::InvalidDigit(digit, base));
                }
                if digit != 0 {
                    return Err(BaseConvertError::Overflow);
                }
            }
            Ok(result)
        }
    *)
    Definition from_base_le
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [ _ as I ], [ base; digits ] =>
        ltac:(M.monadic
          (let base := M.alloc (| base |) in
          let digits := M.alloc (| digits |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.lt (| M.read (| base |), Value.Integer IntegerKind.U64 2 |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "ruint::base_convert::BaseConvertError::InvalidBase"
                                        [ M.read (| base |) ]
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (| BITS, Value.Integer IntegerKind.Usize 0 |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.use
                                    (M.match_operator (|
                                      Some (Ty.tuple []),
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "core::iter::traits::collect::IntoIterator"
                                            []
                                            []
                                            I
                                            "IntoIter",
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::IntoIterator",
                                            I,
                                            [],
                                            [],
                                            "into_iter",
                                            [],
                                            []
                                          |),
                                          [ M.read (| digits |) ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let iter := M.copy (| γ |) in
                                            M.loop (|
                                              Ty.tuple [],
                                              ltac:(M.monadic
                                                (let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Some (Ty.tuple []),
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "u64" ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.associated_in_trait
                                                            "core::iter::traits::collect::IntoIterator"
                                                            []
                                                            []
                                                            I
                                                            "IntoIter",
                                                          [],
                                                          [],
                                                          "next",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                iter
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let _ :=
                                                            M.is_struct_tuple (|
                                                              γ,
                                                              "core::option::Option::None"
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (| M.break (||) |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::option::Option::Some",
                                                              0
                                                            |) in
                                                          let digit := M.copy (| γ0_0 |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.match_operator (|
                                                              Some (Ty.tuple []),
                                                              M.alloc (| Value.Tuple [] |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.use
                                                                        (M.alloc (|
                                                                          BinOp.ge (|
                                                                            M.read (| digit |),
                                                                            M.read (| base |)
                                                                          |)
                                                                        |)) in
                                                                    let _ :=
                                                                      M.is_constant_or_break_match (|
                                                                        M.read (| γ |),
                                                                        Value.Bool true
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          M.return_ (|
                                                                            Value.StructTuple
                                                                              "core::result::Result::Err"
                                                                              [
                                                                                Value.StructTuple
                                                                                  "ruint::base_convert::BaseConvertError::InvalidDigit"
                                                                                  [
                                                                                    M.read (|
                                                                                      digit
                                                                                    |);
                                                                                    M.read (|
                                                                                      base
                                                                                    |)
                                                                                  ]
                                                                              ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.match_operator (|
                                                            Some (Ty.tuple []),
                                                            M.alloc (| Value.Tuple [] |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        BinOp.ne (|
                                                                          M.read (| digit |),
                                                                          Value.Integer
                                                                            IntegerKind.U64
                                                                            0
                                                                        |)
                                                                      |)) in
                                                                  let _ :=
                                                                    M.is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          Value.StructTuple
                                                                            "core::result::Result::Err"
                                                                            [
                                                                              Value.StructTuple
                                                                                "ruint::base_convert::BaseConvertError::Overflow"
                                                                                []
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |)))
                                                    ]
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                            |)))
                                      ]
                                    |)) in
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Ok"
                                    [
                                      M.read (|
                                        get_associated_constant (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "ZERO",
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                        |)
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ iter :
                    Ty.associated_in_trait
                      "core::iter::traits::collect::IntoIterator"
                      []
                      []
                      I
                      "IntoIter" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.associated_in_trait
                        "core::iter::traits::collect::IntoIterator"
                        []
                        []
                        I
                        "IntoIter",
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        I,
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [ M.read (| digits |) ]
                    |)
                  |) in
                let~ result : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.copy (|
                    get_associated_constant (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      "ZERO",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                    |)
                  |) in
                let~ power : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "from",
                        [],
                        [ Ty.path "i32" ]
                      |),
                      [ Value.Integer IntegerKind.I32 1 ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.use
                    (M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.associated_in_trait
                                "core::iter::traits::collect::IntoIterator"
                                []
                                []
                                I
                                "IntoIter"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.associated_in_trait
                                  "core::iter::traits::collect::IntoIterator"
                                  []
                                  []
                                  I
                                  "IntoIter"
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.associated_in_trait
                                    "core::iter::traits::collect::IntoIterator"
                                    []
                                    []
                                    I
                                    "IntoIter"
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.associated_in_trait
                                  "core::iter::traits::collect::IntoIterator"
                                  []
                                  []
                                  I
                                  "IntoIter",
                                [],
                                [],
                                "by_ref",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, iter |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "u64" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "core::iter::traits::collect::IntoIterator"
                                                []
                                                []
                                                I
                                                "IntoIter"
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let digit := M.copy (| γ0_0 |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Some (Ty.tuple []),
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          BinOp.ge (|
                                                            M.read (| digit |),
                                                            M.read (| base |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            Value.StructTuple
                                                              "core::result::Result::Err"
                                                              [
                                                                Value.StructTuple
                                                                  "ruint::base_convert::BaseConvertError::InvalidDigit"
                                                                  [
                                                                    M.read (| digit |);
                                                                    M.read (| base |)
                                                                  ]
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          let~ overflow : Ty.path "u64" :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "u64",
                                                M.get_function (|
                                                  "ruint::algorithms::mul::addmul_nx1",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.SubPointer.get_struct_record_field (|
                                                          result,
                                                          "ruint::Uint",
                                                          "limbs"
                                                        |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ LIMBS ]
                                                              [ Ty.path "u64" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "ruint::Uint")
                                                            [ BITS; LIMBS ]
                                                            [],
                                                          "as_limbs",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.borrow (| Pointer.Kind.Ref, power |) ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.read (| digit |)
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Some (Ty.tuple []),
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          LogicalOp.or (|
                                                            BinOp.ne (|
                                                              M.read (| overflow |),
                                                              Value.Integer IntegerKind.U64 0
                                                            |),
                                                            ltac:(M.monadic
                                                              (BinOp.gt (|
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      result,
                                                                      "ruint::Uint",
                                                                      "limbs"
                                                                    |),
                                                                    BinOp.Wrap.sub (|
                                                                      LIMBS,
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    |)
                                                                  |)
                                                                |),
                                                                M.read (|
                                                                  get_associated_constant (|
                                                                    Ty.apply
                                                                      (Ty.path "ruint::Uint")
                                                                      [ BITS; LIMBS ]
                                                                      [],
                                                                    "MASK",
                                                                    Ty.path "u64"
                                                                  |)
                                                                |)
                                                              |)))
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            Value.StructTuple
                                                              "core::result::Result::Err"
                                                              [
                                                                Value.StructTuple
                                                                  "ruint::base_convert::BaseConvertError::Overflow"
                                                                  []
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          let~ overflow : Ty.path "u64" :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "u64",
                                                M.get_function (|
                                                  "ruint::algorithms::mul::mul_nx1",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.SubPointer.get_struct_record_field (|
                                                          power,
                                                          "ruint::Uint",
                                                          "limbs"
                                                        |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.read (| base |)
                                                ]
                                              |)
                                            |) in
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        LogicalOp.or (|
                                                          BinOp.ne (|
                                                            M.read (| overflow |),
                                                            Value.Integer IntegerKind.U64 0
                                                          |),
                                                          ltac:(M.monadic
                                                            (BinOp.gt (|
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    power,
                                                                    "ruint::Uint",
                                                                    "limbs"
                                                                  |),
                                                                  BinOp.Wrap.sub (|
                                                                    LIMBS,
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  |)
                                                                |)
                                                              |),
                                                              M.read (|
                                                                get_associated_constant (|
                                                                  Ty.apply
                                                                    (Ty.path "ruint::Uint")
                                                                    [ BITS; LIMBS ]
                                                                    [],
                                                                  "MASK",
                                                                  Ty.path "u64"
                                                                |)
                                                              |)
                                                            |)))
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (| M.read (| M.break (||) |) |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let~ _ : Ty.tuple [] :=
                  M.use
                    (M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (|
                        M.call_closure (|
                          Ty.associated_in_trait
                            "core::iter::traits::collect::IntoIterator"
                            []
                            []
                            I
                            "IntoIter",
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.associated_in_trait
                              "core::iter::traits::collect::IntoIterator"
                              []
                              []
                              I
                              "IntoIter",
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| iter |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "u64" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.associated_in_trait
                                            "core::iter::traits::collect::IntoIterator"
                                            []
                                            []
                                            I
                                            "IntoIter",
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let digit := M.copy (| γ0_0 |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Some (Ty.tuple []),
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          BinOp.ge (|
                                                            M.read (| digit |),
                                                            M.read (| base |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            Value.StructTuple
                                                              "core::result::Result::Err"
                                                              [
                                                                Value.StructTuple
                                                                  "ruint::base_convert::BaseConvertError::InvalidDigit"
                                                                  [
                                                                    M.read (| digit |);
                                                                    M.read (| base |)
                                                                  ]
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        BinOp.ne (|
                                                          M.read (| digit |),
                                                          Value.Integer IntegerKind.U64 0
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          Value.StructTuple
                                                            "core::result::Result::Err"
                                                            [
                                                              Value.StructTuple
                                                                "ruint::base_convert::BaseConvertError::Overflow"
                                                                []
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| result |) ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_from_base_le :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "from_base_le" (from_base_le BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque from_base_le.
    
    (*
        pub fn from_base_be<I: IntoIterator<Item = u64>>(
            base: u64,
            digits: I,
        ) -> Result<Self, BaseConvertError> {
            // OPT: Special handling of bases that divide 2^64, and bases that are
            // powers of 2.
            // OPT: Same trick as with `to_base_le`, find the largest power of base
            // that fits `u64` and accumulate there first.
            if base < 2 {
                return Err(BaseConvertError::InvalidBase(base));
            }
    
            let mut result = Self::ZERO;
            for digit in digits {
                if digit >= base {
                    return Err(BaseConvertError::InvalidDigit(digit, base));
                }
                // Multiply by base.
                // OPT: keep track of non-zero limbs and mul the minimum.
                let mut carry: u128 = u128::from(digit);
                #[allow(clippy::cast_possible_truncation)]
                for limb in &mut result.limbs {
                    carry += u128::from( *limb) * u128::from(base);
                    *limb = carry as u64;
                    carry >>= 64;
                }
                if carry > 0 || (LIMBS != 0 && result.limbs[LIMBS - 1] > Self::MASK) {
                    return Err(BaseConvertError::Overflow);
                }
            }
    
            Ok(result)
        }
    *)
    Definition from_base_be
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [ _ as I ], [ base; digits ] =>
        ltac:(M.monadic
          (let base := M.alloc (| base |) in
          let digits := M.alloc (| digits |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.lt (| M.read (| base |), Value.Integer IntegerKind.U64 2 |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "ruint::base_convert::BaseConvertError::InvalidBase"
                                        [ M.read (| base |) ]
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ result : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.copy (|
                    get_associated_constant (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      "ZERO",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.use
                    (M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (|
                        M.call_closure (|
                          Ty.associated_in_trait
                            "core::iter::traits::collect::IntoIterator"
                            []
                            []
                            I
                            "IntoIter",
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            I,
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| digits |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "u64" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.associated_in_trait
                                            "core::iter::traits::collect::IntoIterator"
                                            []
                                            []
                                            I
                                            "IntoIter",
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let digit := M.copy (| γ0_0 |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Some (Ty.tuple []),
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          BinOp.ge (|
                                                            M.read (| digit |),
                                                            M.read (| base |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            Value.StructTuple
                                                              "core::result::Result::Err"
                                                              [
                                                                Value.StructTuple
                                                                  "ruint::base_convert::BaseConvertError::InvalidDigit"
                                                                  [
                                                                    M.read (| digit |);
                                                                    M.read (| base |)
                                                                  ]
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          let~ carry : Ty.path "u128" :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path "u128",
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  Ty.path "u128",
                                                  [],
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| digit |) ]
                                              |)
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.use
                                              (M.match_operator (|
                                                Some (Ty.tuple []),
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      []
                                                      [ Ty.path "u64" ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ LIMBS ]
                                                            [ Ty.path "u64" ]
                                                        ],
                                                      [],
                                                      [],
                                                      "into_iter",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.SubPointer.get_struct_record_field (|
                                                          result,
                                                          "ruint::Uint",
                                                          "limbs"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        Ty.tuple [],
                                                        ltac:(M.monadic
                                                          (let~ _ : Ty.tuple [] :=
                                                            M.match_operator (|
                                                              Some (Ty.tuple []),
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        []
                                                                        [ Ty.path "u64" ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      []
                                                                      [ Ty.path "u64" ],
                                                                    [],
                                                                    [],
                                                                    "next",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          iter
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.is_struct_tuple (|
                                                                        γ,
                                                                        "core::option::Option::None"
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let limb := M.copy (| γ0_0 |) in
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.alloc (|
                                                                        let β := carry in
                                                                        M.write (|
                                                                          β,
                                                                          BinOp.Wrap.add (|
                                                                            M.read (| β |),
                                                                            BinOp.Wrap.mul (|
                                                                              M.call_closure (|
                                                                                Ty.path "u128",
                                                                                M.get_trait_method (|
                                                                                  "core::convert::From",
                                                                                  Ty.path "u128",
                                                                                  [],
                                                                                  [ Ty.path "u64" ],
                                                                                  "from",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        limb
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |),
                                                                              M.call_closure (|
                                                                                Ty.path "u128",
                                                                                M.get_trait_method (|
                                                                                  "core::convert::From",
                                                                                  Ty.path "u128",
                                                                                  [],
                                                                                  [ Ty.path "u64" ],
                                                                                  "from",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [ M.read (| base |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |) in
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.alloc (|
                                                                        M.write (|
                                                                          M.deref (|
                                                                            M.read (| limb |)
                                                                          |),
                                                                          M.cast
                                                                            (Ty.path "u64")
                                                                            (M.read (| carry |))
                                                                        |)
                                                                      |) in
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.alloc (|
                                                                        let β := carry in
                                                                        M.write (|
                                                                          β,
                                                                          BinOp.Wrap.shr (|
                                                                            M.read (| β |),
                                                                            Value.Integer
                                                                              IntegerKind.I32
                                                                              64
                                                                          |)
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |)) in
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        LogicalOp.or (|
                                                          BinOp.gt (|
                                                            M.read (| carry |),
                                                            Value.Integer IntegerKind.U128 0
                                                          |),
                                                          ltac:(M.monadic
                                                            (LogicalOp.and (|
                                                              BinOp.ne (|
                                                                LIMBS,
                                                                Value.Integer IntegerKind.Usize 0
                                                              |),
                                                              ltac:(M.monadic
                                                                (BinOp.gt (|
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        result,
                                                                        "ruint::Uint",
                                                                        "limbs"
                                                                      |),
                                                                      BinOp.Wrap.sub (|
                                                                        LIMBS,
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      |)
                                                                    |)
                                                                  |),
                                                                  M.read (|
                                                                    get_associated_constant (|
                                                                      Ty.apply
                                                                        (Ty.path "ruint::Uint")
                                                                        [ BITS; LIMBS ]
                                                                        [],
                                                                      "MASK",
                                                                      Ty.path "u64"
                                                                    |)
                                                                  |)
                                                                |)))
                                                            |)))
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          Value.StructTuple
                                                            "core::result::Result::Err"
                                                            [
                                                              Value.StructTuple
                                                                "ruint::base_convert::BaseConvertError::Overflow"
                                                                []
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| result |) ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_from_base_be :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "from_base_be" (from_base_be BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque from_base_be.
  End Impl_ruint_Uint_BITS_LIMBS.
  
  (* StructRecord
    {
      name := "SpigotLittle";
      const_params := [ "LIMBS" ];
      ty_params := [];
      fields :=
        [ ("base", Ty.path "u64"); ("limbs", Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ])
        ];
    } *)
  
  Module Impl_core_iter_traits_iterator_Iterator_for_ruint_base_convert_SpigotLittle_LIMBS.
    Definition Self (LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::base_convert::SpigotLittle") [ LIMBS ] [].
    
    (*     type Item = u64; *)
    Definition _Item (LIMBS : Value.t) : Ty.t := Ty.path "u64".
    
    (*
        fn next(&mut self) -> Option<Self::Item> {
            // Knuth Algorithm S.
            let mut zero: u64 = 0_u64;
            let mut remainder = 0_u128;
            // OPT: If we keep track of leading zero limbs we can half iterations.
            for limb in self.limbs.iter_mut().rev() {
                zero |= *limb;
                remainder = (remainder << 64) | u128::from( *limb);
                *limb = (remainder / u128::from(self.base)) as u64;
                remainder %= u128::from(self.base);
            }
            if zero == 0 {
                None
            } else {
                Some(remainder as u64)
            }
        }
    *)
    Definition next (LIMBS : Value.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ zero : Ty.path "u64" := M.alloc (| Value.Integer IntegerKind.U64 0 |) in
            let~ remainder : Ty.path "u128" := M.alloc (| Value.Integer IntegerKind.U128 0 |) in
            let~ _ : Ty.tuple [] :=
              M.use
                (M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::rev::Rev")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ] ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ] ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ],
                            [],
                            [],
                            "rev",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                "iter_mut",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "ruint::base_convert::SpigotLittle",
                                    "limbs"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.tuple [],
                          ltac:(M.monadic
                            (let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ] ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::rev::Rev")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::IterMut")
                                            []
                                            [ Ty.path "u64" ]
                                        ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let limb := M.copy (| γ0_0 |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          let β := zero in
                                          M.write (|
                                            β,
                                            BinOp.bit_or
                                              (M.read (| β |))
                                              (M.read (| M.deref (| M.read (| limb |) |) |))
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.write (|
                                            remainder,
                                            BinOp.bit_or
                                              (BinOp.Wrap.shl (|
                                                M.read (| remainder |),
                                                Value.Integer IntegerKind.I32 64
                                              |))
                                              (M.call_closure (|
                                                Ty.path "u128",
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  Ty.path "u128",
                                                  [],
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| M.deref (| M.read (| limb |) |) |) ]
                                              |))
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.write (|
                                            M.deref (| M.read (| limb |) |),
                                            M.cast
                                              (Ty.path "u64")
                                              (BinOp.Wrap.div (|
                                                M.read (| remainder |),
                                                M.call_closure (|
                                                  Ty.path "u128",
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    Ty.path "u128",
                                                    [],
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| self |) |),
                                                        "ruint::base_convert::SpigotLittle",
                                                        "base"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |))
                                          |)
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          let β := remainder in
                                          M.write (|
                                            β,
                                            BinOp.Wrap.rem (|
                                              M.read (| β |),
                                              M.call_closure (|
                                                Ty.path "u128",
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  Ty.path "u128",
                                                  [],
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "ruint::base_convert::SpigotLittle",
                                                      "base"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            M.match_operator (|
              Some (Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ]),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          BinOp.eq (| M.read (| zero |), Value.Integer IntegerKind.U64 0 |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (| Value.StructTuple "core::option::Option::None" [] |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [ M.cast (Ty.path "u64") (M.read (| remainder |)) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (LIMBS : Value.t),
      M.IsTraitInstance
        "core::iter::traits::iterator::Iterator"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self LIMBS)
        (* Instance *)
        [ ("Item", InstanceField.Ty (_Item LIMBS)); ("next", InstanceField.Method (next LIMBS)) ].
  End Impl_core_iter_traits_iterator_Iterator_for_ruint_base_convert_SpigotLittle_LIMBS.
End base_convert.
