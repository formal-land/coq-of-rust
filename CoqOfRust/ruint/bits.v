(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module bits.
  Module Impl_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        pub const fn bit(&self, index: usize) -> bool {
            if index >= BITS {
                return false;
            }
            let (limbs, bits) = (index / 64, index % 64);
            self.limbs[limbs] & (1 << bits) != 0
        }
    *)
    Definition bit
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; index ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let index := M.alloc (| index |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.ge (|
                                  M.read (| index |),
                                  M.read (| M.get_constant "ruint::bits::BITS" |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (| M.read (| M.return_ (| Value.Bool false |) |) |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    Value.Tuple
                      [
                        BinOp.Wrap.div (| M.read (| index |), Value.Integer IntegerKind.Usize 64 |);
                        BinOp.Wrap.rem (| M.read (| index |), Value.Integer IntegerKind.Usize 64 |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let limbs := M.copy (| γ0_0 |) in
                        let bits := M.copy (| γ0_1 |) in
                        M.alloc (|
                          BinOp.ne (|
                            BinOp.bit_and
                              (M.read (|
                                M.SubPointer.get_array_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "ruint::Uint",
                                    "limbs"
                                  |),
                                  M.read (| limbs |)
                                |)
                              |))
                              (BinOp.Wrap.shl (|
                                Value.Integer IntegerKind.U64 1,
                                M.read (| bits |)
                              |)),
                            Value.Integer IntegerKind.U64 0
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_bit :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "bit" (bit BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque bit.
    
    (*
        pub fn set_bit(&mut self, index: usize, value: bool) {
            if index >= BITS {
                return;
            }
            let (limbs, bits) = (index / 64, index % 64);
            if value {
                self.limbs[limbs] |= 1 << bits;
            } else {
                self.limbs[limbs] &= !(1 << bits);
            }
        }
    *)
    Definition set_bit
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; index; value ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let index := M.alloc (| index |) in
          let value := M.alloc (| value |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.ge (|
                                  M.read (| index |),
                                  M.read (| M.get_constant "ruint::bits::BITS" |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (| M.read (| M.return_ (| Value.Tuple [] |) |) |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  None,
                  M.alloc (|
                    Value.Tuple
                      [
                        BinOp.Wrap.div (| M.read (| index |), Value.Integer IntegerKind.Usize 64 |);
                        BinOp.Wrap.rem (| M.read (| index |), Value.Integer IntegerKind.Usize 64 |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let limbs := M.copy (| γ0_0 |) in
                        let bits := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use value in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    let β :=
                                      M.SubPointer.get_array_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "ruint::Uint",
                                          "limbs"
                                        |),
                                        M.read (| limbs |)
                                      |) in
                                    M.write (|
                                      β,
                                      BinOp.bit_or
                                        (M.read (| β |))
                                        (BinOp.Wrap.shl (|
                                          Value.Integer IntegerKind.U64 1,
                                          M.read (| bits |)
                                        |))
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.alloc (|
                                    let β :=
                                      M.SubPointer.get_array_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "ruint::Uint",
                                          "limbs"
                                        |),
                                        M.read (| limbs |)
                                      |) in
                                    M.write (|
                                      β,
                                      BinOp.bit_and
                                        (M.read (| β |))
                                        (UnOp.not (|
                                          BinOp.Wrap.shl (|
                                            Value.Integer IntegerKind.U64 1,
                                            M.read (| bits |)
                                          |)
                                        |))
                                    |)
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_set_bit :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "set_bit" (set_bit BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque set_bit.
    
    (*
        pub const fn byte(&self, index: usize) -> u8 {
            #[cfg(target_endian = "little")]
            {
                self.as_le_slice()[index]
            }
    
            #[cfg(target_endian = "big")]
            #[allow(clippy::cast_possible_truncation)] // intentional
            {
                (self.limbs[index / 8] >> ((index % 8) * 8)) as u8
            }
        }
    *)
    Definition byte
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; index ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let index := M.alloc (| index |) in
          M.read (|
            M.SubPointer.get_array_field (|
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "as_le_slice",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |),
              M.read (| index |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_byte :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "byte" (byte BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque byte.
    
    (*
        pub fn reverse_bits(mut self) -> Self {
            self.limbs.reverse();
            for limb in &mut self.limbs {
                *limb = limb.reverse_bits();
            }
            if BITS % 64 != 0 {
                self >>= 64 - BITS % 64;
            }
            self
        }
    *)
    Definition reverse_bits
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                    "reverse",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (| self, "ruint::Uint", "limbs" |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.use
                (M.match_operator (|
                  Some (Ty.tuple []),
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (| self, "ruint::Uint", "limbs" |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.tuple [],
                          ltac:(M.monadic
                            (let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Some (Ty.tuple []),
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ] ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::IterMut")
                                        []
                                        [ Ty.path "u64" ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let limb := M.copy (| γ0_0 |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.alloc (|
                                          M.write (|
                                            M.deref (| M.read (| limb |) |),
                                            M.call_closure (|
                                              Ty.path "u64",
                                              M.get_associated_function (|
                                                Ty.path "u64",
                                                "reverse_bits",
                                                [],
                                                []
                                              |),
                                              [ M.read (| M.deref (| M.read (| limb |) |) |) ]
                                            |)
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.ne (|
                              BinOp.Wrap.rem (|
                                M.read (| M.get_constant "ruint::bits::BITS" |),
                                Value.Integer IntegerKind.Usize 64
                              |),
                              Value.Integer IntegerKind.Usize 0
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_trait_method (|
                              "core::ops::bit::ShrAssign",
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                              [],
                              [ Ty.path "usize" ],
                              "shr_assign",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, self |);
                              BinOp.Wrap.sub (|
                                Value.Integer IntegerKind.Usize 64,
                                BinOp.Wrap.rem (|
                                  M.read (| M.get_constant "ruint::bits::BITS" |),
                                  Value.Integer IntegerKind.Usize 64
                                |)
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            self
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_reverse_bits :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "reverse_bits" (reverse_bits BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque reverse_bits.
    
    (*
        pub fn leading_zeros(&self) -> usize {
            self.as_limbs()
                .iter()
                .rev()
                .position(|&limb| limb != 0)
                .map_or(BITS, |n| {
                    let fixed = Self::MASK.leading_zeros() as usize;
                    let skipped = n * 64;
                    let top = self.as_limbs()[LIMBS - n - 1].leading_zeros() as usize;
                    skipped + top - fixed
                })
        }
    *)
    Definition leading_zeros
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
              "map_or",
              [],
              [ Ty.path "usize"; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "usize") ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::rev::Rev")
                    []
                    [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ] ],
                  [],
                  [],
                  "position",
                  [],
                  [
                    Ty.function
                      [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ] ]
                      (Ty.path "bool")
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ] ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                          [],
                          [],
                          "rev",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "as_limbs",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Some
                                (Ty.function
                                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ] ]
                                  (Ty.path "bool")),
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    let limb := M.copy (| γ |) in
                                    BinOp.ne (|
                                      M.read (| limb |),
                                      Value.Integer IntegerKind.U64 0
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |);
              M.read (| M.get_constant "ruint::bits::BITS" |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Some (Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "usize")),
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let n := M.copy (| γ |) in
                                M.read (|
                                  let~ fixed : Ty.path "usize" :=
                                    M.alloc (|
                                      M.cast
                                        (Ty.path "usize")
                                        (M.call_closure (|
                                          Ty.path "u32",
                                          M.get_associated_function (|
                                            Ty.path "u64",
                                            "leading_zeros",
                                            [],
                                            []
                                          |),
                                          [ M.read (| M.get_constant "ruint::MASK" |) ]
                                        |))
                                    |) in
                                  let~ skipped : Ty.path "usize" :=
                                    M.alloc (|
                                      BinOp.Wrap.mul (|
                                        M.read (| n |),
                                        Value.Integer IntegerKind.Usize 64
                                      |)
                                    |) in
                                  let~ top : Ty.path "usize" :=
                                    M.alloc (|
                                      M.cast
                                        (Ty.path "usize")
                                        (M.call_closure (|
                                          Ty.path "u32",
                                          M.get_associated_function (|
                                            Ty.path "u64",
                                            "leading_zeros",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.SubPointer.get_array_field (|
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ LIMBS ]
                                                          [ Ty.path "u64" ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "ruint::Uint")
                                                        [ BITS; LIMBS ]
                                                        [],
                                                      "as_limbs",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| self |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                BinOp.Wrap.sub (|
                                                  BinOp.Wrap.sub (|
                                                    M.read (|
                                                      M.get_constant "ruint::bits::LIMBS"
                                                    |),
                                                    M.read (| n |)
                                                  |),
                                                  Value.Integer IntegerKind.Usize 1
                                                |)
                                              |)
                                            |)
                                          ]
                                        |))
                                    |) in
                                  M.alloc (|
                                    BinOp.Wrap.sub (|
                                      BinOp.Wrap.add (| M.read (| skipped |), M.read (| top |) |),
                                      M.read (| fixed |)
                                    |)
                                  |)
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_leading_zeros :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "leading_zeros" (leading_zeros BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque leading_zeros.
    
    (*
        pub fn leading_ones(&self) -> usize {
            (self.not()).leading_zeros()
        }
    *)
    Definition leading_ones
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "leading_zeros",
              [],
              []
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Not",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                      [],
                      [],
                      "not",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |)
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_leading_ones :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "leading_ones" (leading_ones BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque leading_ones.
    
    (*
        pub fn trailing_zeros(&self) -> usize {
            self.as_limbs()
                .iter()
                .position(|&limb| limb != 0)
                .map_or(BITS, |n| {
                    n * 64 + self.as_limbs()[n].trailing_zeros() as usize
                })
        }
    *)
    Definition trailing_zeros
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
              "map_or",
              [],
              [ Ty.path "usize"; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "usize") ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                  [],
                  [],
                  "position",
                  [],
                  [
                    Ty.function
                      [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ] ]
                      (Ty.path "bool")
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  "as_limbs",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Some
                                (Ty.function
                                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ] ]
                                  (Ty.path "bool")),
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    let limb := M.copy (| γ |) in
                                    BinOp.ne (|
                                      M.read (| limb |),
                                      Value.Integer IntegerKind.U64 0
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |);
              M.read (| M.get_constant "ruint::bits::BITS" |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Some (Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "usize")),
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let n := M.copy (| γ |) in
                                BinOp.Wrap.add (|
                                  BinOp.Wrap.mul (|
                                    M.read (| n |),
                                    Value.Integer IntegerKind.Usize 64
                                  |),
                                  M.cast
                                    (Ty.path "usize")
                                    (M.call_closure (|
                                      Ty.path "u32",
                                      M.get_associated_function (|
                                        Ty.path "u64",
                                        "trailing_zeros",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ LIMBS ]
                                                      [ Ty.path "u64" ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    [],
                                                  "as_limbs",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| self |) |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            M.read (| n |)
                                          |)
                                        |)
                                      ]
                                    |))
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trailing_zeros :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "trailing_zeros" (trailing_zeros BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque trailing_zeros.
    
    (*
        pub fn trailing_ones(&self) -> usize {
            self.as_limbs()
                .iter()
                .position(|&limb| limb != u64::MAX)
                .map_or(BITS, |n| {
                    n * 64 + self.as_limbs()[n].trailing_ones() as usize
                })
        }
    *)
    Definition trailing_ones
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
              "map_or",
              [],
              [ Ty.path "usize"; Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "usize") ]
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                  [],
                  [],
                  "position",
                  [],
                  [
                    Ty.function
                      [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ] ]
                      (Ty.path "bool")
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  "as_limbs",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Some
                                (Ty.function
                                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ] ]
                                  (Ty.path "bool")),
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.read (| γ |) in
                                    let limb := M.copy (| γ |) in
                                    BinOp.ne (|
                                      M.read (| limb |),
                                      M.read (| M.get_constant "core::num::MAX" |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |);
              M.read (| M.get_constant "ruint::bits::BITS" |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Some (Ty.function [ Ty.tuple [ Ty.path "usize" ] ] (Ty.path "usize")),
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let n := M.copy (| γ |) in
                                BinOp.Wrap.add (|
                                  BinOp.Wrap.mul (|
                                    M.read (| n |),
                                    Value.Integer IntegerKind.Usize 64
                                  |),
                                  M.cast
                                    (Ty.path "usize")
                                    (M.call_closure (|
                                      Ty.path "u32",
                                      M.get_associated_function (|
                                        Ty.path "u64",
                                        "trailing_ones",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ LIMBS ]
                                                      [ Ty.path "u64" ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    [],
                                                  "as_limbs",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| self |) |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            M.read (| n |)
                                          |)
                                        |)
                                      ]
                                    |))
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_trailing_ones :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "trailing_ones" (trailing_ones BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque trailing_ones.
    
    (*
        pub fn count_ones(&self) -> usize {
            self.as_limbs()
                .iter()
                .map(|limb| limb.count_ones() as usize)
                .sum()
        }
    *)
    Definition count_ones
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::map::Map")
                []
                [
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ];
                  Ty.function
                    [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ] ]
                    (Ty.path "usize")
                ],
              [],
              [],
              "sum",
              [],
              [ Ty.path "usize" ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ];
                    Ty.function
                      [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ] ]
                      (Ty.path "usize")
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                  [],
                  [],
                  "map",
                  [],
                  [
                    Ty.path "usize";
                    Ty.function
                      [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ] ]
                      (Ty.path "usize")
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                      "iter",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                              "as_limbs",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Some
                                (Ty.function
                                  [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ] ]
                                  (Ty.path "usize")),
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let limb := M.copy (| γ |) in
                                    M.cast
                                      (Ty.path "usize")
                                      (M.call_closure (|
                                        Ty.path "u32",
                                        M.get_associated_function (|
                                          Ty.path "u64",
                                          "count_ones",
                                          [],
                                          []
                                        |),
                                        [ M.read (| M.deref (| M.read (| limb |) |) |) ]
                                      |))))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_count_ones :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "count_ones" (count_ones BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque count_ones.
    
    (*
        pub fn count_zeros(&self) -> usize {
            BITS - self.count_ones()
        }
    *)
    Definition count_zeros
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          BinOp.Wrap.sub (|
            M.read (| M.get_constant "ruint::bits::BITS" |),
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "count_ones",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_count_zeros :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "count_zeros" (count_zeros BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque count_zeros.
    
    (*
        pub fn bit_len(&self) -> usize {
            BITS - self.leading_zeros()
        }
    *)
    Definition bit_len
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          BinOp.Wrap.sub (|
            M.read (| M.get_constant "ruint::bits::BITS" |),
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                "leading_zeros",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_bit_len :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "bit_len" (bit_len BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque bit_len.
    
    (*
        pub fn byte_len(&self) -> usize {
            (self.bit_len() + 7) / 8
        }
    *)
    Definition byte_len
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          BinOp.Wrap.div (|
            BinOp.Wrap.add (|
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "bit_len",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |),
              Value.Integer IntegerKind.Usize 7
            |),
            Value.Integer IntegerKind.Usize 8
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_byte_len :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "byte_len" (byte_len BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque byte_len.
    
    (*
        pub fn most_significant_bits(&self) -> (u64, usize) {
            let first_set_limb = self
                .as_limbs()
                .iter()
                .rposition(|&limb| limb != 0)
                .unwrap_or(0);
            if first_set_limb == 0 {
                (self.as_limbs().first().copied().unwrap_or(0), 0)
            } else {
                let hi = self.as_limbs()[first_set_limb];
                let lo = self.as_limbs()[first_set_limb - 1];
                let leading_zeros = hi.leading_zeros();
                let bits = if leading_zeros > 0 {
                    (hi << leading_zeros) | (lo >> (64 - leading_zeros))
                } else {
                    hi
                };
                let exponent = first_set_limb * 64 - leading_zeros as usize;
                (bits, exponent)
            }
        }
    *)
    Definition most_significant_bits
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ first_set_limb : Ty.path "usize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                    "unwrap_or",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                        [],
                        [],
                        "rposition",
                        [],
                        [
                          Ty.function
                            [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ] ]
                            (Ty.path "bool")
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u64" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        "as_limbs",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Some
                                      (Ty.function
                                        [ Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ] ]
                                        (Ty.path "bool")),
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ := M.read (| γ |) in
                                          let limb := M.copy (| γ |) in
                                          BinOp.ne (|
                                            M.read (| limb |),
                                            Value.Integer IntegerKind.U64 0
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |);
                    Value.Integer IntegerKind.Usize 0
                  ]
                |)
              |) in
            M.match_operator (|
              Some (Ty.tuple [ Ty.path "u64"; Ty.path "usize" ]),
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          BinOp.eq (|
                            M.read (| first_set_limb |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      Value.Tuple
                        [
                          M.call_closure (|
                            Ty.path "u64",
                            M.get_associated_function (|
                              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                              "unwrap_or",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ],
                                  "copied",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                      "first",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ LIMBS ]
                                                  [ Ty.path "u64" ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              "as_limbs",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| self |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              Value.Integer IntegerKind.U64 0
                            ]
                          |);
                          Value.Integer IntegerKind.Usize 0
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let~ hi : Ty.path "u64" :=
                      M.copy (|
                        M.SubPointer.get_array_field (|
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                "as_limbs",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |),
                          M.read (| first_set_limb |)
                        |)
                      |) in
                    let~ lo : Ty.path "u64" :=
                      M.copy (|
                        M.SubPointer.get_array_field (|
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                "as_limbs",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |),
                          BinOp.Wrap.sub (|
                            M.read (| first_set_limb |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |)
                      |) in
                    let~ leading_zeros : Ty.path "u32" :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_associated_function (| Ty.path "u64", "leading_zeros", [], [] |),
                          [ M.read (| hi |) ]
                        |)
                      |) in
                    let~ bits : Ty.path "u64" :=
                      M.copy (|
                        M.match_operator (|
                          Some (Ty.path "u64"),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      BinOp.gt (|
                                        M.read (| leading_zeros |),
                                        Value.Integer IntegerKind.U32 0
                                      |)
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  BinOp.bit_or
                                    (BinOp.Wrap.shl (|
                                      M.read (| hi |),
                                      M.read (| leading_zeros |)
                                    |))
                                    (BinOp.Wrap.shr (|
                                      M.read (| lo |),
                                      BinOp.Wrap.sub (|
                                        Value.Integer IntegerKind.U32 64,
                                        M.read (| leading_zeros |)
                                      |)
                                    |))
                                |)));
                            fun γ => ltac:(M.monadic hi)
                          ]
                        |)
                      |) in
                    let~ exponent : Ty.path "usize" :=
                      M.alloc (|
                        BinOp.Wrap.sub (|
                          BinOp.Wrap.mul (|
                            M.read (| first_set_limb |),
                            Value.Integer IntegerKind.Usize 64
                          |),
                          M.cast (Ty.path "usize") (M.read (| leading_zeros |))
                        |)
                      |) in
                    M.alloc (| Value.Tuple [ M.read (| bits |); M.read (| exponent |) ] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_most_significant_bits :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait
        (Self BITS LIMBS)
        "most_significant_bits"
        (most_significant_bits BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque most_significant_bits.
    
    (*
        pub fn checked_shl(self, rhs: usize) -> Option<Self> {
            match self.overflowing_shl(rhs) {
                (value, false) => Some(value),
                _ => None,
            }
        }
    *)
    Definition checked_shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]),
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_shl",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let value := M.copy (| γ0_0 |) in
                    let _ :=
                      M.is_constant_or_break_match (| M.read (| γ0_1 |), Value.Bool false |) in
                    M.alloc (|
                      Value.StructTuple "core::option::Option::Some" [ M.read (| value |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_checked_shl :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "checked_shl" (checked_shl BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque checked_shl.
    
    (*
        pub fn saturating_shl(self, rhs: usize) -> Self {
            match self.overflowing_shl(rhs) {
                (value, false) => value,
                _ => Self::MAX,
            }
        }
    *)
    Definition saturating_shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Some (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []),
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_shl",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let value := M.copy (| γ0_0 |) in
                    let _ :=
                      M.is_constant_or_break_match (| M.read (| γ0_1 |), Value.Bool false |) in
                    value));
                fun γ => ltac:(M.monadic (M.get_constant "ruint::MAX"))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_saturating_shl :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "saturating_shl" (saturating_shl BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque saturating_shl.
    
    (*
        pub fn overflowing_shl(mut self, rhs: usize) -> (Self, bool) {
            let (limbs, bits) = (rhs / 64, rhs % 64);
            if limbs >= LIMBS {
                return (Self::ZERO, self != Self::ZERO);
            }
            if bits == 0 {
                // Check for overflow
                let mut overflow = false;
                for i in (LIMBS - limbs)..LIMBS {
                    overflow |= self.limbs[i] != 0;
                }
                if self.limbs[LIMBS - limbs - 1] > Self::MASK {
                    overflow = true;
                }
    
                // Shift
                for i in (limbs..LIMBS).rev() {
                    assume!(i >= limbs && i - limbs < LIMBS);
                    self.limbs[i] = self.limbs[i - limbs];
                }
                self.limbs[..limbs].fill(0);
                self.limbs[LIMBS - 1] &= Self::MASK;
                return (self, overflow);
            }
    
            // Check for overflow
            let mut overflow = false;
            for i in (LIMBS - limbs)..LIMBS {
                overflow |= self.limbs[i] != 0;
            }
            if self.limbs[LIMBS - limbs - 1] >> (64 - bits) != 0 {
                overflow = true;
            }
            if self.limbs[LIMBS - limbs - 1] << bits > Self::MASK {
                overflow = true;
            }
    
            // Shift
            for i in (limbs + 1..LIMBS).rev() {
                assume!(i - limbs < LIMBS && i - limbs - 1 < LIMBS);
                self.limbs[i] = self.limbs[i - limbs] << bits;
                self.limbs[i] |= self.limbs[i - limbs - 1] >> (64 - bits);
            }
            self.limbs[limbs] = self.limbs[0] << bits;
            self.limbs[..limbs].fill(0);
            self.limbs[LIMBS - 1] &= Self::MASK;
            (self, overflow)
        }
    *)
    Definition overflowing_shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  None,
                  M.alloc (|
                    Value.Tuple
                      [
                        BinOp.Wrap.div (| M.read (| rhs |), Value.Integer IntegerKind.Usize 64 |);
                        BinOp.Wrap.rem (| M.read (| rhs |), Value.Integer IntegerKind.Usize 64 |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let limbs := M.copy (| γ0_0 |) in
                        let bits := M.copy (| γ0_1 |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.ge (|
                                          M.read (| limbs |),
                                          M.read (| M.get_constant "ruint::bits::LIMBS" |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.Tuple
                                            [
                                              M.read (| M.get_constant "ruint::ZERO" |);
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_trait_method (|
                                                  "core::cmp::PartialEq",
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    [],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [ BITS; LIMBS ]
                                                      []
                                                  ],
                                                  "ne",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (| Pointer.Kind.Ref, self |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.get_constant "ruint::ZERO"
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.eq (|
                                          M.read (| bits |),
                                          Value.Integer IntegerKind.Usize 0
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ overflow : Ty.path "bool" :=
                                          M.alloc (| Value.Bool false |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.use
                                            (M.match_operator (|
                                              Some (Ty.tuple []),
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::Range")
                                                      []
                                                      [ Ty.path "usize" ],
                                                    [],
                                                    [],
                                                    "into_iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    Value.StructRecord
                                                      "core::ops::range::Range"
                                                      [
                                                        ("start",
                                                          BinOp.Wrap.sub (|
                                                            M.read (|
                                                              M.get_constant "ruint::bits::LIMBS"
                                                            |),
                                                            M.read (| limbs |)
                                                          |));
                                                        ("end_",
                                                          M.read (|
                                                            M.get_constant "ruint::bits::LIMBS"
                                                          |))
                                                      ]
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      Ty.tuple [],
                                                      ltac:(M.monadic
                                                        (let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Some (Ty.tuple []),
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let i := M.copy (| γ0_0 |) in
                                                                  let~ _ : Ty.tuple [] :=
                                                                    M.alloc (|
                                                                      let β := overflow in
                                                                      M.write (|
                                                                        β,
                                                                        BinOp.bit_or
                                                                          (M.read (| β |))
                                                                          (BinOp.ne (|
                                                                            M.read (|
                                                                              M.SubPointer.get_array_field (|
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  self,
                                                                                  "ruint::Uint",
                                                                                  "limbs"
                                                                                |),
                                                                                M.read (| i |)
                                                                              |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.U64
                                                                              0
                                                                          |))
                                                                      |)
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |)) in
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        BinOp.gt (|
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                self,
                                                                "ruint::Uint",
                                                                "limbs"
                                                              |),
                                                              BinOp.Wrap.sub (|
                                                                BinOp.Wrap.sub (|
                                                                  M.read (|
                                                                    M.get_constant
                                                                      "ruint::bits::LIMBS"
                                                                  |),
                                                                  M.read (| limbs |)
                                                                |),
                                                                Value.Integer IntegerKind.Usize 1
                                                              |)
                                                            |)
                                                          |),
                                                          M.read (| M.get_constant "ruint::MASK" |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.alloc (|
                                                      M.write (| overflow, Value.Bool true |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.use
                                            (M.match_operator (|
                                              Some (Ty.tuple []),
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::rev::Rev")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::Range")
                                                        []
                                                        [ Ty.path "usize" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::rev::Rev")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ],
                                                    [],
                                                    [],
                                                    "into_iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::rev::Rev")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::ops::range::Range")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        [],
                                                        [],
                                                        "rev",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        Value.StructRecord
                                                          "core::ops::range::Range"
                                                          [
                                                            ("start", M.read (| limbs |));
                                                            ("end_",
                                                              M.read (|
                                                                M.get_constant "ruint::bits::LIMBS"
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      Ty.tuple [],
                                                      ltac:(M.monadic
                                                        (let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Some (Ty.tuple []),
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::rev::Rev")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::ops::range::Range")
                                                                        []
                                                                        [ Ty.path "usize" ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let i := M.copy (| γ0_0 |) in
                                                                  let~ _ : Ty.tuple [] :=
                                                                    M.match_operator (|
                                                                      Some (Ty.tuple []),
                                                                      M.alloc (| Value.Tuple [] |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ :=
                                                                              M.use
                                                                                (M.alloc (|
                                                                                  UnOp.not (|
                                                                                    LogicalOp.and (|
                                                                                      BinOp.ge (|
                                                                                        M.read (|
                                                                                          i
                                                                                        |),
                                                                                        M.read (|
                                                                                          limbs
                                                                                        |)
                                                                                      |),
                                                                                      ltac:(M.monadic
                                                                                        (BinOp.lt (|
                                                                                          BinOp.Wrap.sub (|
                                                                                            M.read (|
                                                                                              i
                                                                                            |),
                                                                                            M.read (|
                                                                                              limbs
                                                                                            |)
                                                                                          |),
                                                                                          M.read (|
                                                                                            M.get_constant
                                                                                              "ruint::bits::LIMBS"
                                                                                          |)
                                                                                        |)))
                                                                                    |)
                                                                                  |)
                                                                                |)) in
                                                                            let _ :=
                                                                              M.is_constant_or_break_match (|
                                                                                M.read (| γ |),
                                                                                Value.Bool true
                                                                              |) in
                                                                            M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  let~ _ :
                                                                                      Ty.tuple [] :=
                                                                                    M.match_operator (|
                                                                                      Some
                                                                                        (Ty.tuple
                                                                                          []),
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  Value.Bool
                                                                                                    true
                                                                                                |)) in
                                                                                            let _ :=
                                                                                              M.is_constant_or_break_match (|
                                                                                                M.read (|
                                                                                                  γ
                                                                                                |),
                                                                                                Value.Bool
                                                                                                  true
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              M.never_to_any (|
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "never",
                                                                                                  M.get_function (|
                                                                                                    "core::panicking::panic_fmt",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "core::fmt::Arguments",
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.path
                                                                                                          "core::fmt::Arguments",
                                                                                                        "new_v1",
                                                                                                        [
                                                                                                          Value.Integer
                                                                                                            IntegerKind.Usize
                                                                                                            1;
                                                                                                          Value.Integer
                                                                                                            IntegerKind.Usize
                                                                                                            0
                                                                                                        ],
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.alloc (|
                                                                                                                Value.Array
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      Value.String
                                                                                                                        "internal error: entered unreachable code: i >= limbs && i - limbs < LIMBS"
                                                                                                                    |)
                                                                                                                  ]
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |);
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.alloc (|
                                                                                                                M.call_closure (|
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "array")
                                                                                                                    [
                                                                                                                      Value.Integer
                                                                                                                        IntegerKind.Usize
                                                                                                                        0
                                                                                                                    ]
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "core::fmt::rt::Argument"
                                                                                                                    ],
                                                                                                                  M.get_associated_function (|
                                                                                                                    Ty.path
                                                                                                                      "core::fmt::rt::Argument",
                                                                                                                    "none",
                                                                                                                    [],
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  []
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (M.alloc (|
                                                                                              M.never_to_any (|
                                                                                                M.read (|
                                                                                                  let~
                                                                                                        _ :
                                                                                                      Ty.tuple
                                                                                                        [] :=
                                                                                                    M.alloc (|
                                                                                                      M.never_to_any (|
                                                                                                        M.call_closure (|
                                                                                                          Ty.path
                                                                                                            "never",
                                                                                                          M.get_function (|
                                                                                                            "core::hint::unreachable_unchecked",
                                                                                                            [],
                                                                                                            []
                                                                                                          |),
                                                                                                          []
                                                                                                        |)
                                                                                                      |)
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    Value.Tuple
                                                                                                      []
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            |)))
                                                                                      ]
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    Value.Tuple []
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  let~ _ : Ty.tuple [] :=
                                                                    M.alloc (|
                                                                      M.write (|
                                                                        M.SubPointer.get_array_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            self,
                                                                            "ruint::Uint",
                                                                            "limbs"
                                                                          |),
                                                                          M.read (| i |)
                                                                        |),
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              self,
                                                                              "ruint::Uint",
                                                                              "limbs"
                                                                            |),
                                                                            BinOp.Wrap.sub (|
                                                                              M.read (| i |),
                                                                              M.read (| limbs |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |)) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                "fill",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u64" ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::index::IndexMut",
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ LIMBS ]
                                                          [ Ty.path "u64" ],
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::RangeTo")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ],
                                                        "index_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            self,
                                                            "ruint::Uint",
                                                            "limbs"
                                                          |)
                                                        |);
                                                        Value.StructRecord
                                                          "core::ops::range::RangeTo"
                                                          [ ("end_", M.read (| limbs |)) ]
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                Value.Integer IntegerKind.U64 0
                                              ]
                                            |)
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            let β :=
                                              M.SubPointer.get_array_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  self,
                                                  "ruint::Uint",
                                                  "limbs"
                                                |),
                                                BinOp.Wrap.sub (|
                                                  M.read (| M.get_constant "ruint::bits::LIMBS" |),
                                                  Value.Integer IntegerKind.Usize 1
                                                |)
                                              |) in
                                            M.write (|
                                              β,
                                              BinOp.bit_and
                                                (M.read (| β |))
                                                (M.read (| M.get_constant "ruint::MASK" |))
                                            |)
                                          |) in
                                        M.return_ (|
                                          Value.Tuple [ M.read (| self |); M.read (| overflow |) ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ overflow : Ty.path "bool" := M.alloc (| Value.Bool false |) in
                        let~ _ : Ty.tuple [] :=
                          M.use
                            (M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "into_iter",
                                    [],
                                    []
                                  |),
                                  [
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start",
                                          BinOp.Wrap.sub (|
                                            M.read (| M.get_constant "ruint::bits::LIMBS" |),
                                            M.read (| limbs |)
                                          |));
                                        ("end_", M.read (| M.get_constant "ruint::bits::LIMBS" |))
                                      ]
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let iter := M.copy (| γ |) in
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "usize" ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (| M.read (| M.break (||) |) |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let i := M.copy (| γ0_0 |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.alloc (|
                                                      let β := overflow in
                                                      M.write (|
                                                        β,
                                                        BinOp.bit_or
                                                          (M.read (| β |))
                                                          (BinOp.ne (|
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  self,
                                                                  "ruint::Uint",
                                                                  "limbs"
                                                                |),
                                                                M.read (| i |)
                                                              |)
                                                            |),
                                                            Value.Integer IntegerKind.U64 0
                                                          |))
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                    |)))
                              ]
                            |)) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.ne (|
                                          BinOp.Wrap.shr (|
                                            M.read (|
                                              M.SubPointer.get_array_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  self,
                                                  "ruint::Uint",
                                                  "limbs"
                                                |),
                                                BinOp.Wrap.sub (|
                                                  BinOp.Wrap.sub (|
                                                    M.read (|
                                                      M.get_constant "ruint::bits::LIMBS"
                                                    |),
                                                    M.read (| limbs |)
                                                  |),
                                                  Value.Integer IntegerKind.Usize 1
                                                |)
                                              |)
                                            |),
                                            BinOp.Wrap.sub (|
                                              Value.Integer IntegerKind.Usize 64,
                                              M.read (| bits |)
                                            |)
                                          |),
                                          Value.Integer IntegerKind.U64 0
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (| M.write (| overflow, Value.Bool true |) |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.gt (|
                                          BinOp.Wrap.shl (|
                                            M.read (|
                                              M.SubPointer.get_array_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  self,
                                                  "ruint::Uint",
                                                  "limbs"
                                                |),
                                                BinOp.Wrap.sub (|
                                                  BinOp.Wrap.sub (|
                                                    M.read (|
                                                      M.get_constant "ruint::bits::LIMBS"
                                                    |),
                                                    M.read (| limbs |)
                                                  |),
                                                  Value.Integer IntegerKind.Usize 1
                                                |)
                                              |)
                                            |),
                                            M.read (| bits |)
                                          |),
                                          M.read (| M.get_constant "ruint::MASK" |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.alloc (| M.write (| overflow, Value.Bool true |) |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.use
                            (M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::rev::Rev")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::rev::Rev")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                    [],
                                    [],
                                    "into_iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::rev::Rev")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ],
                                        [],
                                        [],
                                        "rev",
                                        [],
                                        []
                                      |),
                                      [
                                        Value.StructRecord
                                          "core::ops::range::Range"
                                          [
                                            ("start",
                                              BinOp.Wrap.add (|
                                                M.read (| limbs |),
                                                Value.Integer IntegerKind.Usize 1
                                              |));
                                            ("end_",
                                              M.read (| M.get_constant "ruint::bits::LIMBS" |))
                                          ]
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let iter := M.copy (| γ |) in
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "usize" ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::rev::Rev")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::Range")
                                                        []
                                                        [ Ty.path "usize" ]
                                                    ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (| M.read (| M.break (||) |) |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let i := M.copy (| γ0_0 |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.match_operator (|
                                                      Some (Ty.tuple []),
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  UnOp.not (|
                                                                    LogicalOp.and (|
                                                                      BinOp.lt (|
                                                                        BinOp.Wrap.sub (|
                                                                          M.read (| i |),
                                                                          M.read (| limbs |)
                                                                        |),
                                                                        M.read (|
                                                                          M.get_constant
                                                                            "ruint::bits::LIMBS"
                                                                        |)
                                                                      |),
                                                                      ltac:(M.monadic
                                                                        (BinOp.lt (|
                                                                          BinOp.Wrap.sub (|
                                                                            BinOp.Wrap.sub (|
                                                                              M.read (| i |),
                                                                              M.read (| limbs |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          |),
                                                                          M.read (|
                                                                            M.get_constant
                                                                              "ruint::bits::LIMBS"
                                                                          |)
                                                                        |)))
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              M.is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  let~ _ : Ty.tuple [] :=
                                                                    M.match_operator (|
                                                                      Some (Ty.tuple []),
                                                                      M.alloc (| Value.Tuple [] |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ :=
                                                                              M.use
                                                                                (M.alloc (|
                                                                                  Value.Bool true
                                                                                |)) in
                                                                            let _ :=
                                                                              M.is_constant_or_break_match (|
                                                                                M.read (| γ |),
                                                                                Value.Bool true
                                                                              |) in
                                                                            M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.call_closure (|
                                                                                  Ty.path "never",
                                                                                  M.get_function (|
                                                                                    "core::panicking::panic_fmt",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "core::fmt::Arguments",
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::Arguments",
                                                                                        "new_v1",
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            1;
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            0
                                                                                        ],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                Value.Array
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      Value.String
                                                                                                        "internal error: entered unreachable code: i - limbs < LIMBS && i - limbs - 1 < LIMBS"
                                                                                                    |)
                                                                                                  ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "array")
                                                                                                    [
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        0
                                                                                                    ]
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "core::fmt::rt::Argument"
                                                                                                    ],
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.path
                                                                                                      "core::fmt::rt::Argument",
                                                                                                    "none",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  []
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  let~ _ :
                                                                                      Ty.tuple [] :=
                                                                                    M.alloc (|
                                                                                      M.never_to_any (|
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "never",
                                                                                          M.get_function (|
                                                                                            "core::hint::unreachable_unchecked",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          []
                                                                                        |)
                                                                                      |)
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    Value.Tuple []
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.alloc (|
                                                      M.write (|
                                                        M.SubPointer.get_array_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            self,
                                                            "ruint::Uint",
                                                            "limbs"
                                                          |),
                                                          M.read (| i |)
                                                        |),
                                                        BinOp.Wrap.shl (|
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                self,
                                                                "ruint::Uint",
                                                                "limbs"
                                                              |),
                                                              BinOp.Wrap.sub (|
                                                                M.read (| i |),
                                                                M.read (| limbs |)
                                                              |)
                                                            |)
                                                          |),
                                                          M.read (| bits |)
                                                        |)
                                                      |)
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.alloc (|
                                                      let β :=
                                                        M.SubPointer.get_array_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            self,
                                                            "ruint::Uint",
                                                            "limbs"
                                                          |),
                                                          M.read (| i |)
                                                        |) in
                                                      M.write (|
                                                        β,
                                                        BinOp.bit_or
                                                          (M.read (| β |))
                                                          (BinOp.Wrap.shr (|
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  self,
                                                                  "ruint::Uint",
                                                                  "limbs"
                                                                |),
                                                                BinOp.Wrap.sub (|
                                                                  BinOp.Wrap.sub (|
                                                                    M.read (| i |),
                                                                    M.read (| limbs |)
                                                                  |),
                                                                  Value.Integer IntegerKind.Usize 1
                                                                |)
                                                              |)
                                                            |),
                                                            BinOp.Wrap.sub (|
                                                              Value.Integer IntegerKind.Usize 64,
                                                              M.read (| bits |)
                                                            |)
                                                          |))
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                    |)))
                              ]
                            |)) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.write (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "ruint::Uint",
                                  "limbs"
                                |),
                                M.read (| limbs |)
                              |),
                              BinOp.Wrap.shl (|
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "ruint::Uint",
                                      "limbs"
                                    |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |),
                                M.read (| bits |)
                              |)
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                "fill",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ] ],
                                      M.get_trait_method (|
                                        "core::ops::index::IndexMut",
                                        Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeTo")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            self,
                                            "ruint::Uint",
                                            "limbs"
                                          |)
                                        |);
                                        Value.StructRecord
                                          "core::ops::range::RangeTo"
                                          [ ("end_", M.read (| limbs |)) ]
                                      ]
                                    |)
                                  |)
                                |);
                                Value.Integer IntegerKind.U64 0
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            let β :=
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "ruint::Uint",
                                  "limbs"
                                |),
                                BinOp.Wrap.sub (|
                                  M.read (| M.get_constant "ruint::bits::LIMBS" |),
                                  Value.Integer IntegerKind.Usize 1
                                |)
                              |) in
                            M.write (|
                              β,
                              BinOp.bit_and
                                (M.read (| β |))
                                (M.read (| M.get_constant "ruint::MASK" |))
                            |)
                          |) in
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| overflow |) ] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_overflowing_shl :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "overflowing_shl" (overflowing_shl BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque overflowing_shl.
    
    (*
        pub fn wrapping_shl(self, rhs: usize) -> Self {
            self.overflowing_shl(rhs).0
        }
    *)
    Definition wrapping_shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.SubPointer.get_tuple_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_shl",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              0
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_wrapping_shl :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "wrapping_shl" (wrapping_shl BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque wrapping_shl.
    
    (*
        pub fn checked_shr(self, rhs: usize) -> Option<Self> {
            match self.overflowing_shr(rhs) {
                (value, false) => Some(value),
                _ => None,
            }
        }
    *)
    Definition checked_shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]),
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_shr",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let value := M.copy (| γ0_0 |) in
                    let _ :=
                      M.is_constant_or_break_match (| M.read (| γ0_1 |), Value.Bool false |) in
                    M.alloc (|
                      Value.StructTuple "core::option::Option::Some" [ M.read (| value |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_checked_shr :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "checked_shr" (checked_shr BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque checked_shr.
    
    (*
        pub fn overflowing_shr(mut self, rhs: usize) -> (Self, bool) {
            let (limbs, bits) = (rhs / 64, rhs % 64);
            if limbs >= LIMBS {
                return (Self::ZERO, self != Self::ZERO);
            }
            if bits == 0 {
                // Check for overflow
                let mut overflow = false;
                for i in 0..limbs {
                    overflow |= self.limbs[i] != 0;
                }
    
                // Shift
                for i in 0..(LIMBS - limbs) {
                    self.limbs[i] = self.limbs[i + limbs];
                }
                self.limbs[LIMBS - limbs..].fill(0);
                return (self, overflow);
            }
    
            // Check for overflow
            let overflow = self.limbs[LIMBS - limbs - 1] >> (bits - 1) & 1 != 0;
    
            // Shift
            for i in 0..(LIMBS - limbs - 1) {
                assume!(i + limbs < LIMBS && i + limbs + 1 < LIMBS);
                self.limbs[i] = self.limbs[i + limbs] >> bits;
                self.limbs[i] |= self.limbs[i + limbs + 1] << (64 - bits);
            }
            self.limbs[LIMBS - limbs - 1] = self.limbs[LIMBS - 1] >> bits;
            self.limbs[LIMBS - limbs..].fill(0);
            (self, overflow)
        }
    *)
    Definition overflowing_shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  None,
                  M.alloc (|
                    Value.Tuple
                      [
                        BinOp.Wrap.div (| M.read (| rhs |), Value.Integer IntegerKind.Usize 64 |);
                        BinOp.Wrap.rem (| M.read (| rhs |), Value.Integer IntegerKind.Usize 64 |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let limbs := M.copy (| γ0_0 |) in
                        let bits := M.copy (| γ0_1 |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.ge (|
                                          M.read (| limbs |),
                                          M.read (| M.get_constant "ruint::bits::LIMBS" |)
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.Tuple
                                            [
                                              M.read (| M.get_constant "ruint::ZERO" |);
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_trait_method (|
                                                  "core::cmp::PartialEq",
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    [],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [ BITS; LIMBS ]
                                                      []
                                                  ],
                                                  "ne",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (| Pointer.Kind.Ref, self |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.get_constant "ruint::ZERO"
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.eq (|
                                          M.read (| bits |),
                                          Value.Integer IntegerKind.Usize 0
                                        |)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ overflow : Ty.path "bool" :=
                                          M.alloc (| Value.Bool false |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.use
                                            (M.match_operator (|
                                              Some (Ty.tuple []),
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::Range")
                                                      []
                                                      [ Ty.path "usize" ],
                                                    [],
                                                    [],
                                                    "into_iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    Value.StructRecord
                                                      "core::ops::range::Range"
                                                      [
                                                        ("start",
                                                          Value.Integer IntegerKind.Usize 0);
                                                        ("end_", M.read (| limbs |))
                                                      ]
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      Ty.tuple [],
                                                      ltac:(M.monadic
                                                        (let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Some (Ty.tuple []),
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let i := M.copy (| γ0_0 |) in
                                                                  let~ _ : Ty.tuple [] :=
                                                                    M.alloc (|
                                                                      let β := overflow in
                                                                      M.write (|
                                                                        β,
                                                                        BinOp.bit_or
                                                                          (M.read (| β |))
                                                                          (BinOp.ne (|
                                                                            M.read (|
                                                                              M.SubPointer.get_array_field (|
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  self,
                                                                                  "ruint::Uint",
                                                                                  "limbs"
                                                                                |),
                                                                                M.read (| i |)
                                                                              |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.U64
                                                                              0
                                                                          |))
                                                                      |)
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |)) in
                                        let~ _ : Ty.tuple [] :=
                                          M.use
                                            (M.match_operator (|
                                              Some (Ty.tuple []),
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::Range")
                                                      []
                                                      [ Ty.path "usize" ],
                                                    [],
                                                    [],
                                                    "into_iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    Value.StructRecord
                                                      "core::ops::range::Range"
                                                      [
                                                        ("start",
                                                          Value.Integer IntegerKind.Usize 0);
                                                        ("end_",
                                                          BinOp.Wrap.sub (|
                                                            M.read (|
                                                              M.get_constant "ruint::bits::LIMBS"
                                                            |),
                                                            M.read (| limbs |)
                                                          |))
                                                      ]
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      Ty.tuple [],
                                                      ltac:(M.monadic
                                                        (let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Some (Ty.tuple []),
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let i := M.copy (| γ0_0 |) in
                                                                  let~ _ : Ty.tuple [] :=
                                                                    M.alloc (|
                                                                      M.write (|
                                                                        M.SubPointer.get_array_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            self,
                                                                            "ruint::Uint",
                                                                            "limbs"
                                                                          |),
                                                                          M.read (| i |)
                                                                        |),
                                                                        M.read (|
                                                                          M.SubPointer.get_array_field (|
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              self,
                                                                              "ruint::Uint",
                                                                              "limbs"
                                                                            |),
                                                                            BinOp.Wrap.add (|
                                                                              M.read (| i |),
                                                                              M.read (| limbs |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |)) in
                                        let~ _ : Ty.tuple [] :=
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                                "fill",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u64" ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::index::IndexMut",
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ LIMBS ]
                                                          [ Ty.path "u64" ],
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::RangeFrom")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ],
                                                        "index_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.SubPointer.get_struct_record_field (|
                                                            self,
                                                            "ruint::Uint",
                                                            "limbs"
                                                          |)
                                                        |);
                                                        Value.StructRecord
                                                          "core::ops::range::RangeFrom"
                                                          [
                                                            ("start",
                                                              BinOp.Wrap.sub (|
                                                                M.read (|
                                                                  M.get_constant
                                                                    "ruint::bits::LIMBS"
                                                                |),
                                                                M.read (| limbs |)
                                                              |))
                                                          ]
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                Value.Integer IntegerKind.U64 0
                                              ]
                                            |)
                                          |) in
                                        M.return_ (|
                                          Value.Tuple [ M.read (| self |); M.read (| overflow |) ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ overflow : Ty.path "bool" :=
                          M.alloc (|
                            BinOp.ne (|
                              BinOp.bit_and
                                (BinOp.Wrap.shr (|
                                  M.read (|
                                    M.SubPointer.get_array_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        self,
                                        "ruint::Uint",
                                        "limbs"
                                      |),
                                      BinOp.Wrap.sub (|
                                        BinOp.Wrap.sub (|
                                          M.read (| M.get_constant "ruint::bits::LIMBS" |),
                                          M.read (| limbs |)
                                        |),
                                        Value.Integer IntegerKind.Usize 1
                                      |)
                                    |)
                                  |),
                                  BinOp.Wrap.sub (|
                                    M.read (| bits |),
                                    Value.Integer IntegerKind.Usize 1
                                  |)
                                |))
                                (Value.Integer IntegerKind.U64 1),
                              Value.Integer IntegerKind.U64 0
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.use
                            (M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "into_iter",
                                    [],
                                    []
                                  |),
                                  [
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start", Value.Integer IntegerKind.Usize 0);
                                        ("end_",
                                          BinOp.Wrap.sub (|
                                            BinOp.Wrap.sub (|
                                              M.read (| M.get_constant "ruint::bits::LIMBS" |),
                                              M.read (| limbs |)
                                            |),
                                            Value.Integer IntegerKind.Usize 1
                                          |))
                                      ]
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let iter := M.copy (| γ |) in
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Some (Ty.tuple []),
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "usize" ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (| M.read (| M.break (||) |) |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let i := M.copy (| γ0_0 |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.match_operator (|
                                                      Some (Ty.tuple []),
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  UnOp.not (|
                                                                    LogicalOp.and (|
                                                                      BinOp.lt (|
                                                                        BinOp.Wrap.add (|
                                                                          M.read (| i |),
                                                                          M.read (| limbs |)
                                                                        |),
                                                                        M.read (|
                                                                          M.get_constant
                                                                            "ruint::bits::LIMBS"
                                                                        |)
                                                                      |),
                                                                      ltac:(M.monadic
                                                                        (BinOp.lt (|
                                                                          BinOp.Wrap.add (|
                                                                            BinOp.Wrap.add (|
                                                                              M.read (| i |),
                                                                              M.read (| limbs |)
                                                                            |),
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          |),
                                                                          M.read (|
                                                                            M.get_constant
                                                                              "ruint::bits::LIMBS"
                                                                          |)
                                                                        |)))
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              M.is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  let~ _ : Ty.tuple [] :=
                                                                    M.match_operator (|
                                                                      Some (Ty.tuple []),
                                                                      M.alloc (| Value.Tuple [] |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ :=
                                                                              M.use
                                                                                (M.alloc (|
                                                                                  Value.Bool true
                                                                                |)) in
                                                                            let _ :=
                                                                              M.is_constant_or_break_match (|
                                                                                M.read (| γ |),
                                                                                Value.Bool true
                                                                              |) in
                                                                            M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.call_closure (|
                                                                                  Ty.path "never",
                                                                                  M.get_function (|
                                                                                    "core::panicking::panic_fmt",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "core::fmt::Arguments",
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "core::fmt::Arguments",
                                                                                        "new_v1",
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            1;
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            0
                                                                                        ],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                Value.Array
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      Value.String
                                                                                                        "internal error: entered unreachable code: i + limbs < LIMBS && i + limbs + 1 < LIMBS"
                                                                                                    |)
                                                                                                  ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "array")
                                                                                                    [
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        0
                                                                                                    ]
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "core::fmt::rt::Argument"
                                                                                                    ],
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.path
                                                                                                      "core::fmt::rt::Argument",
                                                                                                    "none",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  []
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  let~ _ :
                                                                                      Ty.tuple [] :=
                                                                                    M.alloc (|
                                                                                      M.never_to_any (|
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "never",
                                                                                          M.get_function (|
                                                                                            "core::hint::unreachable_unchecked",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          []
                                                                                        |)
                                                                                      |)
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    Value.Tuple []
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.alloc (|
                                                      M.write (|
                                                        M.SubPointer.get_array_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            self,
                                                            "ruint::Uint",
                                                            "limbs"
                                                          |),
                                                          M.read (| i |)
                                                        |),
                                                        BinOp.Wrap.shr (|
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                self,
                                                                "ruint::Uint",
                                                                "limbs"
                                                              |),
                                                              BinOp.Wrap.add (|
                                                                M.read (| i |),
                                                                M.read (| limbs |)
                                                              |)
                                                            |)
                                                          |),
                                                          M.read (| bits |)
                                                        |)
                                                      |)
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.alloc (|
                                                      let β :=
                                                        M.SubPointer.get_array_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            self,
                                                            "ruint::Uint",
                                                            "limbs"
                                                          |),
                                                          M.read (| i |)
                                                        |) in
                                                      M.write (|
                                                        β,
                                                        BinOp.bit_or
                                                          (M.read (| β |))
                                                          (BinOp.Wrap.shl (|
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  self,
                                                                  "ruint::Uint",
                                                                  "limbs"
                                                                |),
                                                                BinOp.Wrap.add (|
                                                                  BinOp.Wrap.add (|
                                                                    M.read (| i |),
                                                                    M.read (| limbs |)
                                                                  |),
                                                                  Value.Integer IntegerKind.Usize 1
                                                                |)
                                                              |)
                                                            |),
                                                            BinOp.Wrap.sub (|
                                                              Value.Integer IntegerKind.Usize 64,
                                                              M.read (| bits |)
                                                            |)
                                                          |))
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                    |)))
                              ]
                            |)) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.write (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "ruint::Uint",
                                  "limbs"
                                |),
                                BinOp.Wrap.sub (|
                                  BinOp.Wrap.sub (|
                                    M.read (| M.get_constant "ruint::bits::LIMBS" |),
                                    M.read (| limbs |)
                                  |),
                                  Value.Integer IntegerKind.Usize 1
                                |)
                              |),
                              BinOp.Wrap.shr (|
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "ruint::Uint",
                                      "limbs"
                                    |),
                                    BinOp.Wrap.sub (|
                                      M.read (| M.get_constant "ruint::bits::LIMBS" |),
                                      Value.Integer IntegerKind.Usize 1
                                    |)
                                  |)
                                |),
                                M.read (| bits |)
                              |)
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                "fill",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ] ],
                                      M.get_trait_method (|
                                        "core::ops::index::IndexMut",
                                        Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeFrom")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            self,
                                            "ruint::Uint",
                                            "limbs"
                                          |)
                                        |);
                                        Value.StructRecord
                                          "core::ops::range::RangeFrom"
                                          [
                                            ("start",
                                              BinOp.Wrap.sub (|
                                                M.read (| M.get_constant "ruint::bits::LIMBS" |),
                                                M.read (| limbs |)
                                              |))
                                          ]
                                      ]
                                    |)
                                  |)
                                |);
                                Value.Integer IntegerKind.U64 0
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| overflow |) ] |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_overflowing_shr :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "overflowing_shr" (overflowing_shr BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque overflowing_shr.
    
    (*
        pub fn wrapping_shr(self, rhs: usize) -> Self {
            self.overflowing_shr(rhs).0
        }
    *)
    Definition wrapping_shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.SubPointer.get_tuple_field (|
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_shr",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              0
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_wrapping_shr :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "wrapping_shr" (wrapping_shr BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque wrapping_shr.
    
    (*
        pub fn arithmetic_shr(self, rhs: usize) -> Self {
            if BITS == 0 {
                return Self::ZERO;
            }
            let sign = self.bit(BITS - 1);
            let mut r = self >> rhs;
            if sign {
                r |= Self::MAX << BITS.saturating_sub(rhs);
            }
            r
        }
    *)
    Definition arithmetic_shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (|
                                  M.read (| M.get_constant "ruint::bits::BITS" |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (| M.return_ (| M.read (| M.get_constant "ruint::ZERO" |) |) |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ sign : Ty.path "bool" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "bool",
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "bit",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, self |);
                        BinOp.Wrap.sub (|
                          M.read (| M.get_constant "ruint::bits::BITS" |),
                          Value.Integer IntegerKind.Usize 1
                        |)
                      ]
                    |)
                  |) in
                let~ r : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      M.get_trait_method (|
                        "core::ops::bit::Shr",
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        [],
                        [ Ty.path "usize" ],
                        "shr",
                        [],
                        []
                      |),
                      [ M.read (| self |); M.read (| rhs |) ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use sign in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "core::ops::bit::BitOrAssign",
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  [],
                                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                  "bitor_assign",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, r |);
                                  M.call_closure (|
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    M.get_trait_method (|
                                      "core::ops::bit::Shl",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      [],
                                      [ Ty.path "usize" ],
                                      "shl",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| M.get_constant "ruint::MAX" |);
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.path "usize",
                                          "saturating_sub",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (| M.get_constant "ruint::bits::BITS" |);
                                          M.read (| rhs |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                r
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_arithmetic_shr :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "arithmetic_shr" (arithmetic_shr BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque arithmetic_shr.
    
    (*
        pub fn rotate_left(self, rhs: usize) -> Self {
            if BITS == 0 {
                return Self::ZERO;
            }
            let rhs = rhs % BITS;
            self << rhs | self >> (BITS - rhs)
        }
    *)
    Definition rotate_left
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (|
                                  M.read (| M.get_constant "ruint::bits::BITS" |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (| M.return_ (| M.read (| M.get_constant "ruint::ZERO" |) |) |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ rhs : Ty.path "usize" :=
                  M.alloc (|
                    BinOp.Wrap.rem (|
                      M.read (| rhs |),
                      M.read (| M.get_constant "ruint::bits::BITS" |)
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::BitOr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                      "bitor",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        M.get_trait_method (|
                          "core::ops::bit::Shl",
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          [],
                          [ Ty.path "usize" ],
                          "shl",
                          [],
                          []
                        |),
                        [ M.read (| self |); M.read (| rhs |) ]
                      |);
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        M.get_trait_method (|
                          "core::ops::bit::Shr",
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          [],
                          [ Ty.path "usize" ],
                          "shr",
                          [],
                          []
                        |),
                        [
                          M.read (| self |);
                          BinOp.Wrap.sub (|
                            M.read (| M.get_constant "ruint::bits::BITS" |),
                            M.read (| rhs |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_rotate_left :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "rotate_left" (rotate_left BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque rotate_left.
    
    (*
        pub fn rotate_right(self, rhs: usize) -> Self {
            if BITS == 0 {
                return Self::ZERO;
            }
            let rhs = rhs % BITS;
            self.rotate_left(BITS - rhs)
        }
    *)
    Definition rotate_right
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (|
                                  M.read (| M.get_constant "ruint::bits::BITS" |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (| M.return_ (| M.read (| M.get_constant "ruint::ZERO" |) |) |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ rhs : Ty.path "usize" :=
                  M.alloc (|
                    BinOp.Wrap.rem (|
                      M.read (| rhs |),
                      M.read (| M.get_constant "ruint::bits::BITS" |)
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      "rotate_left",
                      [],
                      []
                    |),
                    [
                      M.read (| self |);
                      BinOp.Wrap.sub (|
                        M.read (| M.get_constant "ruint::bits::BITS" |),
                        M.read (| rhs |)
                      |)
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_rotate_right :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "rotate_right" (rotate_right BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque rotate_right.
  End Impl_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Not_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*     type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn not(mut self) -> Self::Output {
            if BITS == 0 {
                return Self::ZERO;
            }
            for limb in &mut self.limbs {
                *limb = u64::not( *limb);
            }
            self.limbs[LIMBS - 1] &= Self::MASK;
            self
        }
    *)
    Definition not
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (|
                                  M.read (| M.get_constant "ruint::bits::BITS" |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (| M.return_ (| M.read (| M.get_constant "ruint::ZERO" |) |) |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.use
                    (M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u64" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "ruint::Uint",
                                "limbs"
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "u64" ] ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::IterMut")
                                            []
                                            [ Ty.path "u64" ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let limb := M.copy (| γ0_0 |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.alloc (|
                                              M.write (|
                                                M.deref (| M.read (| limb |) |),
                                                M.call_closure (|
                                                  Ty.path "u64",
                                                  M.get_trait_method (|
                                                    "core::ops::bit::Not",
                                                    Ty.path "u64",
                                                    [],
                                                    [],
                                                    "not",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| M.deref (| M.read (| limb |) |) |) ]
                                                |)
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    let β :=
                      M.SubPointer.get_array_field (|
                        M.SubPointer.get_struct_record_field (| self, "ruint::Uint", "limbs" |),
                        BinOp.Wrap.sub (|
                          M.read (| M.get_constant "ruint::bits::LIMBS" |),
                          Value.Integer IntegerKind.Usize 1
                        |)
                      |) in
                    M.write (|
                      β,
                      BinOp.bit_and (M.read (| β |)) (M.read (| M.get_constant "ruint::MASK" |))
                    |)
                  |) in
                self
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Not"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("not", InstanceField.Method (not BITS LIMBS))
        ].
  End Impl_core_ops_bit_Not_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Not_for_ref__ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ].
    
    (*     type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn not(self) -> Self::Output {
            ( *self).not()
        }
    *)
    Definition not
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Not",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [],
              "not",
              [],
              []
            |),
            [ M.read (| M.deref (| M.read (| self |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Not"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("not", InstanceField.Method (not BITS LIMBS))
        ].
  End Impl_core_ops_bit_Not_for_ref__ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitOrAssign_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn_assign(&mut self, rhs: Uint<BITS, LIMBS>) {
                    self.$fn_assign(&rhs);
                }
    *)
    Definition bitor_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::bit::BitOrAssign",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    ],
                    "bitor_assign",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.borrow (| Pointer.Kind.Ref, rhs |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitOrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("bitor_assign", InstanceField.Method (bitor_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_BitOrAssign_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitOrAssign_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn_assign(&mut self, rhs: &Uint<BITS, LIMBS>) {
                    for i in 0..LIMBS {
                        u64::$fn_assign(&mut self.limbs[i], rhs.limbs[i]);
                    }
                }
    *)
    Definition bitor_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.use
              (M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_", M.read (| M.get_constant "ruint::bits::LIMBS" |))
                        ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.tuple [],
                        ltac:(M.monadic
                          (let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let i := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "core::ops::bit::BitOrAssign",
                                            Ty.path "u64",
                                            [],
                                            [ Ty.path "u64" ],
                                            "bitor_assign",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_array_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "ruint::Uint",
                                                      "limbs"
                                                    |),
                                                    M.read (| i |)
                                                  |)
                                                |)
                                              |)
                                            |);
                                            M.read (|
                                              M.SubPointer.get_array_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| rhs |) |),
                                                  "ruint::Uint",
                                                  "limbs"
                                                |),
                                                M.read (| i |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitOrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("bitor_assign", InstanceField.Method (bitor_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_BitOrAssign_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitOr_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn(mut self, rhs: Uint<BITS, LIMBS>) -> Self::Output {
                    self.$fn_assign(rhs);
                    self
                }
    *)
    Definition bitor
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::bit::BitOrAssign",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                    "bitor_assign",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, self |); M.read (| rhs |) ]
                |)
              |) in
            self
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitOr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("bitor", InstanceField.Method (bitor BITS LIMBS))
        ].
  End Impl_core_ops_bit_BitOr_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitOr_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn(mut self, rhs: &Uint<BITS, LIMBS>) -> Self::Output {
                    self.$fn_assign(rhs);
                    self
                }
    *)
    Definition bitor
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::bit::BitOrAssign",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    ],
                    "bitor_assign",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, self |); M.read (| rhs |) ]
                |)
              |) in
            self
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitOr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("bitor", InstanceField.Method (bitor BITS LIMBS))
        ].
  End Impl_core_ops_bit_BitOr_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitOr_ruint_Uint_BITS_LIMBS_for_ref__ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ].
    
    (*             type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn(self, mut rhs: Uint<BITS, LIMBS>) -> Self::Output {
                    rhs.$fn_assign(self);
                    rhs
                }
    *)
    Definition bitor
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::bit::BitOrAssign",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    ],
                    "bitor_assign",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, rhs |); M.read (| self |) ]
                |)
              |) in
            rhs
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitOr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("bitor", InstanceField.Method (bitor BITS LIMBS))
        ].
  End Impl_core_ops_bit_BitOr_ruint_Uint_BITS_LIMBS_for_ref__ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitOr_ref__ruint_Uint_BITS_LIMBS_for_ref__ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ].
    
    (*             type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn(self, rhs: &Uint<BITS, LIMBS>) -> Self::Output {
                    self.clone().$fn(rhs)
                }
    *)
    Definition bitor
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::BitOr",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ],
              "bitor",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |);
              M.read (| rhs |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitOr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("bitor", InstanceField.Method (bitor BITS LIMBS))
        ].
  End Impl_core_ops_bit_BitOr_ref__ruint_Uint_BITS_LIMBS_for_ref__ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitAndAssign_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn_assign(&mut self, rhs: Uint<BITS, LIMBS>) {
                    self.$fn_assign(&rhs);
                }
    *)
    Definition bitand_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::bit::BitAndAssign",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    ],
                    "bitand_assign",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.borrow (| Pointer.Kind.Ref, rhs |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitAndAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("bitand_assign", InstanceField.Method (bitand_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_BitAndAssign_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitAndAssign_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn_assign(&mut self, rhs: &Uint<BITS, LIMBS>) {
                    for i in 0..LIMBS {
                        u64::$fn_assign(&mut self.limbs[i], rhs.limbs[i]);
                    }
                }
    *)
    Definition bitand_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.use
              (M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_", M.read (| M.get_constant "ruint::bits::LIMBS" |))
                        ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.tuple [],
                        ltac:(M.monadic
                          (let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let i := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "core::ops::bit::BitAndAssign",
                                            Ty.path "u64",
                                            [],
                                            [ Ty.path "u64" ],
                                            "bitand_assign",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_array_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "ruint::Uint",
                                                      "limbs"
                                                    |),
                                                    M.read (| i |)
                                                  |)
                                                |)
                                              |)
                                            |);
                                            M.read (|
                                              M.SubPointer.get_array_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| rhs |) |),
                                                  "ruint::Uint",
                                                  "limbs"
                                                |),
                                                M.read (| i |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitAndAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("bitand_assign", InstanceField.Method (bitand_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_BitAndAssign_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitAnd_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn(mut self, rhs: Uint<BITS, LIMBS>) -> Self::Output {
                    self.$fn_assign(rhs);
                    self
                }
    *)
    Definition bitand
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::bit::BitAndAssign",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                    "bitand_assign",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, self |); M.read (| rhs |) ]
                |)
              |) in
            self
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitAnd"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("bitand", InstanceField.Method (bitand BITS LIMBS))
        ].
  End Impl_core_ops_bit_BitAnd_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitAnd_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn(mut self, rhs: &Uint<BITS, LIMBS>) -> Self::Output {
                    self.$fn_assign(rhs);
                    self
                }
    *)
    Definition bitand
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::bit::BitAndAssign",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    ],
                    "bitand_assign",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, self |); M.read (| rhs |) ]
                |)
              |) in
            self
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitAnd"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("bitand", InstanceField.Method (bitand BITS LIMBS))
        ].
  End Impl_core_ops_bit_BitAnd_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitAnd_ruint_Uint_BITS_LIMBS_for_ref__ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ].
    
    (*             type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn(self, mut rhs: Uint<BITS, LIMBS>) -> Self::Output {
                    rhs.$fn_assign(self);
                    rhs
                }
    *)
    Definition bitand
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::bit::BitAndAssign",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    ],
                    "bitand_assign",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, rhs |); M.read (| self |) ]
                |)
              |) in
            rhs
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitAnd"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("bitand", InstanceField.Method (bitand BITS LIMBS))
        ].
  End Impl_core_ops_bit_BitAnd_ruint_Uint_BITS_LIMBS_for_ref__ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitAnd_ref__ruint_Uint_BITS_LIMBS_for_ref__ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ].
    
    (*             type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn(self, rhs: &Uint<BITS, LIMBS>) -> Self::Output {
                    self.clone().$fn(rhs)
                }
    *)
    Definition bitand
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::BitAnd",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ],
              "bitand",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |);
              M.read (| rhs |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitAnd"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("bitand", InstanceField.Method (bitand BITS LIMBS))
        ].
  End Impl_core_ops_bit_BitAnd_ref__ruint_Uint_BITS_LIMBS_for_ref__ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitXorAssign_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn_assign(&mut self, rhs: Uint<BITS, LIMBS>) {
                    self.$fn_assign(&rhs);
                }
    *)
    Definition bitxor_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::bit::BitXorAssign",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    ],
                    "bitxor_assign",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.borrow (| Pointer.Kind.Ref, rhs |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitXorAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("bitxor_assign", InstanceField.Method (bitxor_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_BitXorAssign_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitXorAssign_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn_assign(&mut self, rhs: &Uint<BITS, LIMBS>) {
                    for i in 0..LIMBS {
                        u64::$fn_assign(&mut self.limbs[i], rhs.limbs[i]);
                    }
                }
    *)
    Definition bitxor_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.use
              (M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      Value.StructRecord
                        "core::ops::range::Range"
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_", M.read (| M.get_constant "ruint::bits::LIMBS" |))
                        ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.tuple [],
                        ltac:(M.monadic
                          (let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Some (Ty.tuple []),
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let i := M.copy (| γ0_0 |) in
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.tuple [],
                                          M.get_trait_method (|
                                            "core::ops::bit::BitXorAssign",
                                            Ty.path "u64",
                                            [],
                                            [ Ty.path "u64" ],
                                            "bitxor_assign",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.SubPointer.get_array_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "ruint::Uint",
                                                      "limbs"
                                                    |),
                                                    M.read (| i |)
                                                  |)
                                                |)
                                              |)
                                            |);
                                            M.read (|
                                              M.SubPointer.get_array_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| rhs |) |),
                                                  "ruint::Uint",
                                                  "limbs"
                                                |),
                                                M.read (| i |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitXorAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("bitxor_assign", InstanceField.Method (bitxor_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_BitXorAssign_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitXor_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn(mut self, rhs: Uint<BITS, LIMBS>) -> Self::Output {
                    self.$fn_assign(rhs);
                    self
                }
    *)
    Definition bitxor
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::bit::BitXorAssign",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                    "bitxor_assign",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, self |); M.read (| rhs |) ]
                |)
              |) in
            self
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitXor"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("bitxor", InstanceField.Method (bitxor BITS LIMBS))
        ].
  End Impl_core_ops_bit_BitXor_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitXor_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn(mut self, rhs: &Uint<BITS, LIMBS>) -> Self::Output {
                    self.$fn_assign(rhs);
                    self
                }
    *)
    Definition bitxor
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::bit::BitXorAssign",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    ],
                    "bitxor_assign",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, self |); M.read (| rhs |) ]
                |)
              |) in
            self
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitXor"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("bitxor", InstanceField.Method (bitxor BITS LIMBS))
        ].
  End Impl_core_ops_bit_BitXor_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitXor_ruint_Uint_BITS_LIMBS_for_ref__ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ].
    
    (*             type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn(self, mut rhs: Uint<BITS, LIMBS>) -> Self::Output {
                    rhs.$fn_assign(self);
                    rhs
                }
    *)
    Definition bitxor
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::bit::BitXorAssign",
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    [],
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    ],
                    "bitxor_assign",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, rhs |); M.read (| self |) ]
                |)
              |) in
            rhs
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitXor"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("bitxor", InstanceField.Method (bitxor BITS LIMBS))
        ].
  End Impl_core_ops_bit_BitXor_ruint_Uint_BITS_LIMBS_for_ref__ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_BitXor_ref__ruint_Uint_BITS_LIMBS_for_ref__ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ].
    
    (*             type Output = Uint<BITS, LIMBS>; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn $fn(self, rhs: &Uint<BITS, LIMBS>) -> Self::Output {
                    self.clone().$fn(rhs)
                }
    *)
    Definition bitxor
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::BitXor",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ],
              "bitxor",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |);
              M.read (| rhs |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::BitXor"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("bitxor", InstanceField.Method (bitxor BITS LIMBS))
        ].
  End Impl_core_ops_bit_BitXor_ref__ruint_Uint_BITS_LIMBS_for_ref__ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*     type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn shl(self, rhs: Self) -> Self::Output {
            // This check shortcuts, and prevents panics on the `[0]` later
            if BITS == 0 {
                return self;
            }
            // Rationale: if BITS is larger than 2**64 - 1, it means we're running
            // on a 128-bit platform with 2.3 exabytes of memory. In this case,
            // the code produces incorrect output.
            #[allow(clippy::cast_possible_truncation)]
            self.wrapping_shl(rhs.as_limbs()[0] as usize)
        }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (|
                                  M.read (| M.get_constant "ruint::bits::BITS" |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (| M.read (| M.return_ (| M.read (| self |) |) |) |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      "wrapping_shl",
                      [],
                      []
                    |),
                    [
                      M.read (| self |);
                      M.cast
                        (Ty.path "usize")
                        (M.read (|
                          M.SubPointer.get_array_field (|
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  "as_limbs",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                              |)
                            |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |))
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*     type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn shl(self, rhs: &Self) -> Self::Output {
            self << *rhs
        }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shl",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
              "shl",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*     type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn shr(self, rhs: Self) -> Self::Output {
            // This check shortcuts, and prevents panics on the `[0]` later
            if BITS == 0 {
                return self;
            }
            // Rationale: if BITS is larger than 2**64 - 1, it means we're running
            // on a 128-bit platform with 2.3 exabytes of memory. In this case,
            // the code produces incorrect output.
            #[allow(clippy::cast_possible_truncation)]
            self.wrapping_shr(rhs.as_limbs()[0] as usize)
        }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (|
                                  M.read (| M.get_constant "ruint::bits::BITS" |),
                                  Value.Integer IntegerKind.Usize 0
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (| M.read (| M.return_ (| M.read (| self |) |) |) |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      "wrapping_shr",
                      [],
                      []
                    |),
                    [
                      M.read (| self |);
                      M.cast
                        (Ty.path "usize")
                        (M.read (|
                          M.SubPointer.get_array_field (|
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  "as_limbs",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                              |)
                            |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |))
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*     type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn shr(self, rhs: &Self) -> Self::Output {
            self >> *rhs
        }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shr",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
              "shr",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn shl_assign(&mut self, rhs: Self) {
            *self = *self << rhs;
        }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn shl_assign(&mut self, rhs: &Self) {
            *self = *self << rhs;
        }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                      ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn shr_assign(&mut self, rhs: Self) {
            *self = *self >> rhs;
        }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn shr_assign(&mut self, rhs: &Self) {
            *self = *self >> rhs;
        }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                      ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_usize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: $u) -> Self::Output {
                    self.wrapping_shl(rhs as usize)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shl",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.use rhs |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "usize" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_usize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_usize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: $u) -> Self::Output {
                    self.wrapping_shr(rhs as usize)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shr",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.use rhs |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "usize" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_usize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_ref__usize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: &$u) -> Self::Output {
                    <Self>::shl(self, *rhs)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shl",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "usize" ],
              "shl",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_ref__usize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_ref__usize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: &$u) -> Self::Output {
                    <Self>::shr(self, *rhs)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shr",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "usize" ],
              "shr",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_ref__usize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_usize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "usize" ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "usize" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_usize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_usize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "usize" ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "usize" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_usize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_ref__usize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_ref__usize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_ref__usize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_ref__usize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_u8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: $u) -> Self::Output {
                    self.wrapping_shl(rhs as usize)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shl",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u8" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_u8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_u8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: $u) -> Self::Output {
                    self.wrapping_shr(rhs as usize)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shr",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u8" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_u8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_ref__u8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: &$u) -> Self::Output {
                    <Self>::shl(self, *rhs)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shl",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "u8" ],
              "shl",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_ref__u8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_ref__u8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: &$u) -> Self::Output {
                    <Self>::shr(self, *rhs)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shr",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "u8" ],
              "shr",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_ref__u8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_u8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "u8" ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u8" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_u8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_u8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "u8" ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u8" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_u8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_ref__u8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_ref__u8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_ref__u8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u8" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_ref__u8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_u16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: $u) -> Self::Output {
                    self.wrapping_shl(rhs as usize)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shl",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u16" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_u16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_u16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: $u) -> Self::Output {
                    self.wrapping_shr(rhs as usize)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shr",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u16" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_u16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_ref__u16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: &$u) -> Self::Output {
                    <Self>::shl(self, *rhs)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shl",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "u16" ],
              "shl",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_ref__u16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_ref__u16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: &$u) -> Self::Output {
                    <Self>::shr(self, *rhs)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shr",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "u16" ],
              "shr",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_ref__u16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_u16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "u16" ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u16" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_u16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_u16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "u16" ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u16" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_u16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_ref__u16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_ref__u16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_ref__u16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_ref__u16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_u32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: $u) -> Self::Output {
                    self.wrapping_shl(rhs as usize)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shl",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u32" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_u32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_u32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: $u) -> Self::Output {
                    self.wrapping_shr(rhs as usize)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shr",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u32" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_u32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_ref__u32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: &$u) -> Self::Output {
                    <Self>::shl(self, *rhs)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shl",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "u32" ],
              "shl",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_ref__u32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_ref__u32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: &$u) -> Self::Output {
                    <Self>::shr(self, *rhs)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shr",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "u32" ],
              "shr",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_ref__u32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_u32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "u32" ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u32" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_u32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_u32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "u32" ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u32" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_u32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_ref__u32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_ref__u32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_ref__u32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_ref__u32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_isize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: $u) -> Self::Output {
                    self.wrapping_shl(rhs as usize)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shl",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "isize" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_isize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_isize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: $u) -> Self::Output {
                    self.wrapping_shr(rhs as usize)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shr",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "isize" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_isize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_ref__isize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: &$u) -> Self::Output {
                    <Self>::shl(self, *rhs)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shl",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "isize" ],
              "shl",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "isize" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_ref__isize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_ref__isize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: &$u) -> Self::Output {
                    <Self>::shr(self, *rhs)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shr",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "isize" ],
              "shr",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "isize" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_ref__isize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_isize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "isize" ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "isize" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_isize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_isize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "isize" ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "isize" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_isize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_ref__isize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "isize" ] ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "isize" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_ref__isize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_ref__isize_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "isize" ] ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "isize" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_ref__isize_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_i8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: $u) -> Self::Output {
                    self.wrapping_shl(rhs as usize)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shl",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i8" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_i8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_i8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: $u) -> Self::Output {
                    self.wrapping_shr(rhs as usize)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shr",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i8" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_i8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_ref__i8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: &$u) -> Self::Output {
                    <Self>::shl(self, *rhs)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shl",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "i8" ],
              "shl",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i8" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_ref__i8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_ref__i8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: &$u) -> Self::Output {
                    <Self>::shr(self, *rhs)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shr",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "i8" ],
              "shr",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i8" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_ref__i8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_i8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "i8" ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i8" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_i8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_i8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "i8" ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i8" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_i8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_ref__i8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "i8" ] ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i8" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_ref__i8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_ref__i8_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "i8" ] ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i8" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_ref__i8_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_i16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: $u) -> Self::Output {
                    self.wrapping_shl(rhs as usize)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shl",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i16" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_i16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_i16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: $u) -> Self::Output {
                    self.wrapping_shr(rhs as usize)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shr",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i16" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_i16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_ref__i16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: &$u) -> Self::Output {
                    <Self>::shl(self, *rhs)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shl",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "i16" ],
              "shl",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i16" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_ref__i16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_ref__i16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: &$u) -> Self::Output {
                    <Self>::shr(self, *rhs)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shr",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "i16" ],
              "shr",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i16" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_ref__i16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_i16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "i16" ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i16" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_i16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_i16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "i16" ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i16" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_i16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_ref__i16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "i16" ] ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i16" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_ref__i16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_ref__i16_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "i16" ] ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i16" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_ref__i16_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_i32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: $u) -> Self::Output {
                    self.wrapping_shl(rhs as usize)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shl",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i32" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_i32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_i32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: $u) -> Self::Output {
                    self.wrapping_shr(rhs as usize)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shr",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i32" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_i32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_ref__i32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: &$u) -> Self::Output {
                    <Self>::shl(self, *rhs)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shl",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "i32" ],
              "shl",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i32" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_ref__i32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_ref__i32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: &$u) -> Self::Output {
                    <Self>::shr(self, *rhs)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shr",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "i32" ],
              "shr",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i32" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_ref__i32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_i32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "i32" ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i32" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_i32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_i32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "i32" ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i32" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_i32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_ref__i32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "i32" ] ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i32" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_ref__i32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_ref__i32_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "i32" ] ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i32" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_ref__i32_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_u64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: $u) -> Self::Output {
                    self.wrapping_shl(rhs as usize)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shl",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u64" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_u64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_u64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: $u) -> Self::Output {
                    self.wrapping_shr(rhs as usize)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shr",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u64" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_u64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_ref__u64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: &$u) -> Self::Output {
                    <Self>::shl(self, *rhs)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shl",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "u64" ],
              "shl",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_ref__u64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_ref__u64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: &$u) -> Self::Output {
                    <Self>::shr(self, *rhs)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shr",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "u64" ],
              "shr",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_ref__u64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_u64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "u64" ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u64" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_u64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_u64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "u64" ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u64" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_u64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_ref__u64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_ref__u64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_ref__u64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_ref__u64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_i64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: $u) -> Self::Output {
                    self.wrapping_shl(rhs as usize)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shl",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i64" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_i64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_i64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: $u) -> Self::Output {
                    self.wrapping_shr(rhs as usize)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              "wrapping_shr",
              [],
              []
            |),
            [ M.read (| self |); M.cast (Ty.path "usize") (M.read (| rhs |)) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i64" ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_i64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shl_ref__i64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl(self, rhs: &$u) -> Self::Output {
                    <Self>::shl(self, *rhs)
                }
    *)
    Definition shl
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shl",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "i64" ],
              "shl",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shl"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i64" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shl", InstanceField.Method (shl BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shl_ref__i64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_Shr_ref__i64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*             type Output = Self; *)
    Definition _Output (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr(self, rhs: &$u) -> Self::Output {
                    <Self>::shr(self, *rhs)
                }
    *)
    Definition shr
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_trait_method (|
              "core::ops::bit::Shr",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [ Ty.path "i64" ],
              "shr",
              [],
              []
            |),
            [ M.read (| self |); M.read (| M.deref (| M.read (| rhs |) |) |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::Shr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i64" ] ]
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Output", InstanceField.Ty (_Output BITS LIMBS));
          ("shr", InstanceField.Method (shr BITS LIMBS))
        ].
  End Impl_core_ops_bit_Shr_ref__i64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_i64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "i64" ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i64" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_i64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_i64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.path "i64" ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "i64" ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_i64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShlAssign_ref__i64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shl_assign(&mut self, rhs: $u) {
                    *self = *self << rhs;
                }
    *)
    Definition shl_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shl",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "i64" ] ],
                      "shl",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShlAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i64" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shl_assign", InstanceField.Method (shl_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShlAssign_ref__i64_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_ops_bit_ShrAssign_ref__i64_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
                fn shr_assign(&mut self, rhs: $u) {
                    *self = *self >> rhs;
                }
    *)
    Definition shr_assign
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.write (|
                  M.deref (| M.read (| self |) |),
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::ops::bit::Shr",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      [],
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "i64" ] ],
                      "shr",
                      [],
                      []
                    |),
                    [ M.read (| M.deref (| M.read (| self |) |) |); M.read (| rhs |) ]
                  |)
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::ops::bit::ShrAssign"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "&") [] [ Ty.path "i64" ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("shr_assign", InstanceField.Method (shr_assign BITS LIMBS)) ].
  End Impl_core_ops_bit_ShrAssign_ref__i64_for_ruint_Uint_BITS_LIMBS.
End bits.
