(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module bytes.
  Module Impl_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*     pub const BYTES: usize = (BITS + 7) / 8; *)
    (* Ty.path "usize" *)
    Definition value_BYTES (BITS LIMBS : Value.t) : Value.t :=
      let Self : Ty.t := Self BITS LIMBS in
      M.run
        ltac:(M.monadic
          (M.alloc (|
            BinOp.Wrap.div (|
              BinOp.Wrap.add (|
                M.read (| M.get_constant "ruint::bytes::BITS" |),
                Value.Integer IntegerKind.Usize 7
              |),
              Value.Integer IntegerKind.Usize 8
            |)
          |))).
    
    Global Instance AssociatedConstant_value_BYTES :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedConstant.Trait (Self BITS LIMBS) "value_BYTES" (value_BYTES BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque value_BYTES.
    
    (*
        pub const fn as_le_slice(&self) -> &[u8] {
            unsafe { slice::from_raw_parts(self.limbs.as_ptr().cast(), Self::BYTES) }
        }
    *)
    Definition as_le_slice
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_function (| "core::slice::raw::from_raw_parts", [], [ Ty.path "u8" ] |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "*const") [] [ Ty.path "u64" ],
                      "cast",
                      [],
                      [ Ty.path "u8" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "*const") [] [ Ty.path "u64" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                          "as_ptr",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "ruint::Uint",
                              "limbs"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.read (| M.get_constant "ruint::bytes::BYTES" |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_le_slice :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "as_le_slice" (as_le_slice BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque as_le_slice.
    
    (*
        pub unsafe fn as_le_slice_mut(&mut self) -> &mut [u8] {
            unsafe { slice::from_raw_parts_mut(self.limbs.as_mut_ptr().cast(), Self::BYTES) }
        }
    *)
    Definition as_le_slice_mut
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.MutRef,
            M.deref (|
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                        M.get_function (|
                          "core::slice::raw::from_raw_parts_mut",
                          [],
                          [ Ty.path "u8" ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "*mut") [] [ Ty.path "u64" ],
                              "cast",
                              [],
                              [ Ty.path "u8" ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "*mut") [] [ Ty.path "u64" ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ],
                                  "as_mut_ptr",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "ruint::Uint",
                                      "limbs"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |);
                          M.read (| M.get_constant "ruint::bytes::BYTES" |)
                        ]
                      |)
                    |)
                  |)
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_le_slice_mut :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "as_le_slice_mut" (as_le_slice_mut BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque as_le_slice_mut.
    
    (*
        pub fn as_le_bytes(&self) -> Cow<'_, [u8]> {
            // On little endian platforms this is a no-op.
            #[cfg(target_endian = "little")]
            return Cow::Borrowed(self.as_le_slice());
    
            // In others, reverse each limb and return a copy.
            #[cfg(target_endian = "big")]
            return Cow::Owned({
                let mut cpy = *self;
                for limb in &mut cpy.limbs {
                    *limb = limb.reverse_bits();
                }
                unsafe { slice::from_raw_parts(cpy.limbs.as_ptr().cast(), Self::BYTES).to_vec() }
            });
        }
    *)
    Definition as_le_bytes
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.never_to_any (|
                M.read (|
                  M.return_ (|
                    Value.StructTuple
                      "alloc::borrow::Cow::Borrowed"
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                "as_le_slice",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_le_bytes :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "as_le_bytes" (as_le_bytes BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque as_le_bytes.
    
    (*
        pub fn as_le_bytes_trimmed(&self) -> Cow<'_, [u8]> {
            match self.as_le_bytes() {
                Cow::Borrowed(slice) => Cow::Borrowed(crate::utils::trim_end_slice(slice, &0)),
                Cow::Owned(mut vec) => {
                    crate::utils::trim_end_vec(&mut vec, &0);
                    Cow::Owned(vec)
                }
            }
        }
    *)
    Definition as_le_bytes_trimmed
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.apply
                  (Ty.path "alloc::borrow::Cow")
                  []
                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ]),
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::borrow::Cow")
                    []
                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "as_le_bytes",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "alloc::borrow::Cow::Borrowed",
                        0
                      |) in
                    let slice := M.copy (| γ0_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "alloc::borrow::Cow::Borrowed"
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                M.get_function (|
                                  "ruint::utils::trim_end_slice",
                                  [],
                                  [ Ty.path "u8" ]
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| slice |) |) |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (| Value.Integer IntegerKind.U8 0 |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (| γ, "alloc::borrow::Cow::Owned", 0 |) in
                    let vec := M.copy (| γ0_0 |) in
                    let~ _ : Ty.tuple [] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_function (| "ruint::utils::trim_end_vec", [], [ Ty.path "u8" ] |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (| M.borrow (| Pointer.Kind.MutRef, vec |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (| Value.Integer IntegerKind.U8 0 |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple "alloc::borrow::Cow::Owned" [ M.read (| vec |) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_le_bytes_trimmed :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait
        (Self BITS LIMBS)
        "as_le_bytes_trimmed"
        (as_le_bytes_trimmed BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque as_le_bytes_trimmed.
    
    (*
        pub const fn to_le_bytes<const BYTES: usize>(&self) -> [u8; BYTES] {
            // TODO: Use a `const {}` block for this assertion
            assert!(BYTES == Self::BYTES, "BYTES must be equal to Self::BYTES");
    
            // Specialized impl
            #[cfg(target_endian = "little")]
            // SAFETY: BYTES == Self::BYTES == self.as_le_slice().len()
            return unsafe { *self.as_le_slice().as_ptr().cast() };
    
            // Generic impl
            #[cfg(target_endian = "big")]
            {
                let mut limbs = self.limbs;
                let mut i = 0;
                while i < LIMBS {
                    limbs[i] = limbs[i].to_le();
                    i += 1;
                }
                // SAFETY: BYTES <= LIMBS * 8
                unsafe { *limbs.as_ptr().cast() }
            }
        }
    *)
    Definition to_le_bytes
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [ BYTES ], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.never_to_any (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.not (|
                                    BinOp.eq (|
                                      M.read (|
                                        M.get_constant "ruint::bytes::to_le_bytes::BYTES"
                                      |),
                                      M.read (| M.get_constant "ruint::bytes::BYTES" |)
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                  [
                                    M.call_closure (|
                                      Ty.path "core::fmt::Arguments",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Arguments",
                                        "new_const",
                                        [ Value.Integer IntegerKind.Usize 1 ],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Value.Array
                                                  [
                                                    M.read (|
                                                      Value.String
                                                        "BYTES must be equal to Self::BYTES"
                                                    |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.return_ (|
                    M.read (|
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "*const")
                            []
                            [ Ty.apply (Ty.path "array") [ BYTES ] [ Ty.path "u8" ] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                            "cast",
                            [],
                            [ Ty.apply (Ty.path "array") [ BYTES ] [ Ty.path "u8" ] ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                "as_ptr",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        "as_le_slice",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_to_le_bytes :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "to_le_bytes" (to_le_bytes BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque to_le_bytes.
    
    (*
        pub fn to_le_bytes_vec(&self) -> Vec<u8> {
            self.as_le_bytes().into_owned()
        }
    *)
    Definition to_le_bytes_vec
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "alloc::borrow::Cow")
                []
                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
              "into_owned",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::borrow::Cow")
                  []
                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "as_le_bytes",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_to_le_bytes_vec :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "to_le_bytes_vec" (to_le_bytes_vec BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque to_le_bytes_vec.
    
    (*
        pub fn to_le_bytes_trimmed_vec(&self) -> Vec<u8> {
            self.as_le_bytes_trimmed().into_owned()
        }
    *)
    Definition to_le_bytes_trimmed_vec
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "alloc::borrow::Cow")
                []
                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
              "into_owned",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::borrow::Cow")
                  []
                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "as_le_bytes_trimmed",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_to_le_bytes_trimmed_vec :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait
        (Self BITS LIMBS)
        "to_le_bytes_trimmed_vec"
        (to_le_bytes_trimmed_vec BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque to_le_bytes_trimmed_vec.
    
    (*
        pub const fn to_be_bytes<const BYTES: usize>(&self) -> [u8; BYTES] {
            let mut bytes = self.to_le_bytes::<BYTES>();
    
            // bytes.reverse()
            let len = bytes.len();
            let half_len = len / 2;
            let mut i = 0;
            while i < half_len {
                let tmp = bytes[i];
                bytes[i] = bytes[len - 1 - i];
                bytes[len - 1 - i] = tmp;
                i += 1;
            }
    
            bytes
        }
    *)
    Definition to_be_bytes
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [ BYTES ], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ bytes : Ty.apply (Ty.path "array") [ BYTES ] [ Ty.path "u8" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "array") [ BYTES ] [ Ty.path "u8" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "to_le_bytes",
                    [ BYTES ],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ len : Ty.path "usize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                    "len",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, bytes |) ]
                |)
              |) in
            let~ half_len : Ty.path "usize" :=
              M.alloc (|
                BinOp.Wrap.div (| M.read (| len |), Value.Integer IntegerKind.Usize 2 |)
              |) in
            let~ i : Ty.path "usize" := M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
            let~ _ : Ty.tuple [] :=
              M.loop (|
                Ty.tuple [],
                ltac:(M.monadic
                  (M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.lt (| M.read (| i |), M.read (| half_len |) |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ tmp : Ty.path "u8" :=
                            M.copy (| M.SubPointer.get_array_field (| bytes, M.read (| i |) |) |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.write (|
                                M.SubPointer.get_array_field (| bytes, M.read (| i |) |),
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    bytes,
                                    BinOp.Wrap.sub (|
                                      BinOp.Wrap.sub (|
                                        M.read (| len |),
                                        Value.Integer IntegerKind.Usize 1
                                      |),
                                      M.read (| i |)
                                    |)
                                  |)
                                |)
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              M.write (|
                                M.SubPointer.get_array_field (|
                                  bytes,
                                  BinOp.Wrap.sub (|
                                    BinOp.Wrap.sub (|
                                      M.read (| len |),
                                      Value.Integer IntegerKind.Usize 1
                                    |),
                                    M.read (| i |)
                                  |)
                                |),
                                M.read (| tmp |)
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.alloc (|
                              let β := i in
                              M.write (|
                                β,
                                BinOp.Wrap.add (|
                                  M.read (| β |),
                                  Value.Integer IntegerKind.Usize 1
                                |)
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| Value.Tuple [] |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |) in
            bytes
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_to_be_bytes :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "to_be_bytes" (to_be_bytes BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque to_be_bytes.
    
    (*
        pub fn to_be_bytes_vec(&self) -> Vec<u8> {
            let mut bytes = self.to_le_bytes_vec();
            bytes.reverse();
            bytes
        }
    *)
    Definition to_be_bytes_vec
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ bytes :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "to_le_bytes_vec",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                    "reverse",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                          M.get_trait_method (|
                            "core::ops::deref::DerefMut",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "deref_mut",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, bytes |) ]
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            bytes
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_to_be_bytes_vec :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "to_be_bytes_vec" (to_be_bytes_vec BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque to_be_bytes_vec.
    
    (*
        pub fn to_be_bytes_trimmed_vec(&self) -> Vec<u8> {
            let mut bytes = self.to_le_bytes_trimmed_vec();
            bytes.reverse();
            bytes
        }
    *)
    Definition to_be_bytes_trimmed_vec
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ bytes :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "to_le_bytes_trimmed_vec",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                    "reverse",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                          M.get_trait_method (|
                            "core::ops::deref::DerefMut",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                            [],
                            [],
                            "deref_mut",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, bytes |) ]
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            bytes
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_to_be_bytes_trimmed_vec :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait
        (Self BITS LIMBS)
        "to_be_bytes_trimmed_vec"
        (to_be_bytes_trimmed_vec BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque to_be_bytes_trimmed_vec.
    
    (*
        pub const fn from_be_bytes<const BYTES: usize>(bytes: [u8; BYTES]) -> Self {
            // TODO: Use a `const {}` block for this assertion
            assert!(BYTES == Self::BYTES, "BYTES must be equal to Self::BYTES");
            Self::from_be_slice(&bytes)
        }
    *)
    Definition from_be_bytes
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [ BYTES ], [], [ bytes ] =>
        ltac:(M.monadic
          (let bytes := M.alloc (| bytes |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              BinOp.eq (|
                                M.read (| M.get_constant "ruint::bytes::from_be_bytes::BYTES" |),
                                M.read (| M.get_constant "ruint::bytes::BYTES" |)
                              |)
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic_fmt", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "core::fmt::Arguments",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_const",
                                  [ Value.Integer IntegerKind.Usize 1 ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.Array
                                            [
                                              M.read (|
                                                Value.String "BYTES must be equal to Self::BYTES"
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                M.get_associated_function (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "from_be_slice",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, bytes |) |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_from_be_bytes :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "from_be_bytes" (from_be_bytes BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque from_be_bytes.
    
    (*
        pub const fn from_be_slice(bytes: &[u8]) -> Self {
            match Self::try_from_be_slice(bytes) {
                Some(value) => value,
                None => panic!("Value too large for Uint"),
            }
        }
    *)
    Definition from_be_slice
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ bytes ] =>
        ltac:(M.monadic
          (let bytes := M.alloc (| bytes |) in
          M.read (|
            M.match_operator (|
              Some (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []),
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "try_from_be_slice",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| bytes |) |) |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let value := M.copy (| γ0_0 |) in
                    value));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                    M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                [ Value.Integer IntegerKind.Usize 1 ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [ M.read (| Value.String "Value too large for Uint" |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_from_be_slice :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "from_be_slice" (from_be_slice BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque from_be_slice.
    
    (*
        pub const fn try_from_be_slice(bytes: &[u8]) -> Option<Self> {
            if bytes.len() > Self::BYTES {
                return None;
            }
    
            if Self::BYTES % 8 == 0 && bytes.len() == Self::BYTES {
                // Optimized implementation for full-limb types.
                let mut limbs = [0; LIMBS];
                let end = bytes.as_ptr_range().end;
                let mut i = 0;
                while i < LIMBS {
                    limbs[i] = u64::from_be_bytes(unsafe { *end.sub((i + 1) * 8).cast() });
                    i += 1;
                }
                return Some(Self::from_limbs(limbs));
            }
    
            let mut limbs = [0; LIMBS];
            let mut i = 0;
            let mut c = bytes.len();
            while i < bytes.len() {
                c -= 1;
                limbs[i / 8] += (bytes[c] as u64) << ((i % 8) * 8);
                i += 1;
            }
            if Self::LIMBS > 0 && limbs[Self::LIMBS - 1] > Self::MASK {
                return None;
            }
            Some(Self::from_limbs(limbs))
        }
    *)
    Definition try_from_be_slice
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ bytes ] =>
        ltac:(M.monadic
          (let bytes := M.alloc (| bytes |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.gt (|
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                      "len",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| bytes |) |)
                                      |)
                                    ]
                                  |),
                                  M.read (| M.get_constant "ruint::bytes::BYTES" |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.and (|
                                  BinOp.eq (|
                                    BinOp.Wrap.rem (|
                                      M.read (| M.get_constant "ruint::bytes::BYTES" |),
                                      Value.Integer IntegerKind.Usize 8
                                    |),
                                    Value.Integer IntegerKind.Usize 0
                                  |),
                                  ltac:(M.monadic
                                    (BinOp.eq (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| bytes |) |)
                                          |)
                                        ]
                                      |),
                                      M.read (| M.get_constant "ruint::bytes::BYTES" |)
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ limbs :
                                    Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] :=
                                  M.alloc (|
                                    repeat (| Value.Integer IntegerKind.U64 0, LIMBS |)
                                  |) in
                                let~ end_ : Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ] :=
                                  M.copy (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ] ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                            "as_ptr_range",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| bytes |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      "core::ops::range::Range",
                                      "end"
                                    |)
                                  |) in
                                let~ i : Ty.path "usize" :=
                                  M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
                                let~ _ : Ty.tuple [] :=
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Some (Ty.tuple []),
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    BinOp.lt (|
                                                      M.read (| i |),
                                                      M.read (|
                                                        M.get_constant "ruint::bytes::LIMBS"
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      limbs,
                                                      M.read (| i |)
                                                    |),
                                                    M.call_closure (|
                                                      Ty.path "u64",
                                                      M.get_associated_function (|
                                                        Ty.path "u64",
                                                        "from_be_bytes",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "*const")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        8
                                                                    ]
                                                                    [ Ty.path "u8" ]
                                                                ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "*const")
                                                                  []
                                                                  [ Ty.path "u8" ],
                                                                "cast",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        8
                                                                    ]
                                                                    [ Ty.path "u8" ]
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "*const")
                                                                    []
                                                                    [ Ty.path "u8" ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "*const")
                                                                      []
                                                                      [ Ty.path "u8" ],
                                                                    "sub",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| end_ |);
                                                                    BinOp.Wrap.mul (|
                                                                      BinOp.Wrap.add (|
                                                                        M.read (| i |),
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      |),
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        8
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.alloc (|
                                                  let β := i in
                                                  M.write (|
                                                    β,
                                                    BinOp.Wrap.add (|
                                                      M.read (| β |),
                                                      Value.Integer IntegerKind.Usize 1
                                                    |)
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (| M.break (||) |)
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)))
                                  |) in
                                M.return_ (|
                                  Value.StructTuple
                                    "core::option::Option::Some"
                                    [
                                      M.call_closure (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "from_limbs",
                                          [],
                                          []
                                        |),
                                        [ M.read (| limbs |) ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ limbs : Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] :=
                  M.alloc (| repeat (| Value.Integer IntegerKind.U64 0, LIMBS |) |) in
                let~ i : Ty.path "usize" := M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
                let~ c : Ty.path "usize" :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                        "len",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| bytes |) |) |) ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.loop (|
                    Ty.tuple [],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.lt (|
                                      M.read (| i |),
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| bytes |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  let β := c in
                                  M.write (|
                                    β,
                                    BinOp.Wrap.sub (|
                                      M.read (| β |),
                                      Value.Integer IntegerKind.Usize 1
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  let β :=
                                    M.SubPointer.get_array_field (|
                                      limbs,
                                      BinOp.Wrap.div (|
                                        M.read (| i |),
                                        Value.Integer IntegerKind.Usize 8
                                      |)
                                    |) in
                                  M.write (|
                                    β,
                                    BinOp.Wrap.add (|
                                      M.read (| β |),
                                      BinOp.Wrap.shl (|
                                        M.cast
                                          (Ty.path "u64")
                                          (M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| bytes |) |),
                                              M.read (| c |)
                                            |)
                                          |)),
                                        BinOp.Wrap.mul (|
                                          BinOp.Wrap.rem (|
                                            M.read (| i |),
                                            Value.Integer IntegerKind.Usize 8
                                          |),
                                          Value.Integer IntegerKind.Usize 8
                                        |)
                                      |)
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  let β := i in
                                  M.write (|
                                    β,
                                    BinOp.Wrap.add (|
                                      M.read (| β |),
                                      Value.Integer IntegerKind.Usize 1
                                    |)
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.and (|
                                  BinOp.gt (|
                                    M.read (| M.get_constant "ruint::LIMBS'1" |),
                                    Value.Integer IntegerKind.Usize 0
                                  |),
                                  ltac:(M.monadic
                                    (BinOp.gt (|
                                      M.read (|
                                        M.SubPointer.get_array_field (|
                                          limbs,
                                          BinOp.Wrap.sub (|
                                            M.read (| M.get_constant "ruint::LIMBS'1" |),
                                            Value.Integer IntegerKind.Usize 1
                                          |)
                                        |)
                                      |),
                                      M.read (| M.get_constant "ruint::MASK" |)
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::option::Option::Some"
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          "from_limbs",
                          [],
                          []
                        |),
                        [ M.read (| limbs |) ]
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_try_from_be_slice :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait
        (Self BITS LIMBS)
        "try_from_be_slice"
        (try_from_be_slice BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque try_from_be_slice.
    
    (*
        pub const fn from_le_bytes<const BYTES: usize>(bytes: [u8; BYTES]) -> Self {
            // TODO: Use a `const {}` block for this assertion
            assert!(BYTES == Self::BYTES, "BYTES must be equal to Self::BYTES");
            Self::from_le_slice(&bytes)
        }
    *)
    Definition from_le_bytes
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [ BYTES ], [], [ bytes ] =>
        ltac:(M.monadic
          (let bytes := M.alloc (| bytes |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.not (|
                              BinOp.eq (|
                                M.read (| M.get_constant "ruint::bytes::from_le_bytes::BYTES" |),
                                M.read (| M.get_constant "ruint::bytes::BYTES" |)
                              |)
                            |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic_fmt", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "core::fmt::Arguments",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_const",
                                  [ Value.Integer IntegerKind.Usize 1 ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Value.Array
                                            [
                                              M.read (|
                                                Value.String "BYTES must be equal to Self::BYTES"
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                M.get_associated_function (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "from_le_slice",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, bytes |) |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_from_le_bytes :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "from_le_bytes" (from_le_bytes BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque from_le_bytes.
    
    (*
        pub const fn from_le_slice(bytes: &[u8]) -> Self {
            match Self::try_from_le_slice(bytes) {
                Some(value) => value,
                None => panic!("Value too large for Uint"),
            }
        }
    *)
    Definition from_le_slice
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ bytes ] =>
        ltac:(M.monadic
          (let bytes := M.alloc (| bytes |) in
          M.read (|
            M.match_operator (|
              Some (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []),
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "try_from_le_slice",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| bytes |) |) |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let value := M.copy (| γ0_0 |) in
                    value));
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                    M.alloc (|
                      M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                [ Value.Integer IntegerKind.Usize 1 ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Value.Array
                                          [ M.read (| Value.String "Value too large for Uint" |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_from_le_slice :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait (Self BITS LIMBS) "from_le_slice" (from_le_slice BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque from_le_slice.
    
    (*
        pub const fn try_from_le_slice(bytes: &[u8]) -> Option<Self> {
            if bytes.len() / 8 > Self::LIMBS {
                return None;
            }
    
            if Self::BYTES % 8 == 0 && bytes.len() == Self::BYTES {
                // Optimized implementation for full-limb types.
                let mut limbs = [0; LIMBS];
                let mut i = 0;
                while i < LIMBS {
                    limbs[i] = u64::from_le_bytes(unsafe { *bytes.as_ptr().add(i * 8).cast() });
                    i += 1;
                }
                return Some(Self::from_limbs(limbs));
            }
    
            let mut limbs = [0; LIMBS];
            let mut i = 0;
            while i < bytes.len() {
                limbs[i / 8] += (bytes[i] as u64) << ((i % 8) * 8);
                i += 1;
            }
            if Self::LIMBS > 0 && limbs[Self::LIMBS - 1] > Self::MASK {
                return None;
            }
            Some(Self::from_limbs(limbs))
        }
    *)
    Definition try_from_le_slice
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ bytes ] =>
        ltac:(M.monadic
          (let bytes := M.alloc (| bytes |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.gt (|
                                  BinOp.Wrap.div (|
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| bytes |) |)
                                        |)
                                      ]
                                    |),
                                    Value.Integer IntegerKind.Usize 8
                                  |),
                                  M.read (| M.get_constant "ruint::LIMBS'1" |)
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.and (|
                                  BinOp.eq (|
                                    BinOp.Wrap.rem (|
                                      M.read (| M.get_constant "ruint::bytes::BYTES" |),
                                      Value.Integer IntegerKind.Usize 8
                                    |),
                                    Value.Integer IntegerKind.Usize 0
                                  |),
                                  ltac:(M.monadic
                                    (BinOp.eq (|
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| bytes |) |)
                                          |)
                                        ]
                                      |),
                                      M.read (| M.get_constant "ruint::bytes::BYTES" |)
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ limbs :
                                    Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] :=
                                  M.alloc (|
                                    repeat (| Value.Integer IntegerKind.U64 0, LIMBS |)
                                  |) in
                                let~ i : Ty.path "usize" :=
                                  M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
                                let~ _ : Ty.tuple [] :=
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Some (Ty.tuple []),
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    BinOp.lt (|
                                                      M.read (| i |),
                                                      M.read (|
                                                        M.get_constant "ruint::bytes::LIMBS"
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.alloc (|
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      limbs,
                                                      M.read (| i |)
                                                    |),
                                                    M.call_closure (|
                                                      Ty.path "u64",
                                                      M.get_associated_function (|
                                                        Ty.path "u64",
                                                        "from_le_bytes",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "*const")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        8
                                                                    ]
                                                                    [ Ty.path "u8" ]
                                                                ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "*const")
                                                                  []
                                                                  [ Ty.path "u8" ],
                                                                "cast",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        8
                                                                    ]
                                                                    [ Ty.path "u8" ]
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "*const")
                                                                    []
                                                                    [ Ty.path "u8" ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "*const")
                                                                      []
                                                                      [ Ty.path "u8" ],
                                                                    "add",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "*const")
                                                                        []
                                                                        [ Ty.path "u8" ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ Ty.path "u8" ],
                                                                        "as_ptr",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| bytes |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    BinOp.Wrap.mul (|
                                                                      M.read (| i |),
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        8
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.alloc (|
                                                  let β := i in
                                                  M.write (|
                                                    β,
                                                    BinOp.Wrap.add (|
                                                      M.read (| β |),
                                                      Value.Integer IntegerKind.Usize 1
                                                    |)
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (| M.break (||) |)
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)))
                                  |) in
                                M.return_ (|
                                  Value.StructTuple
                                    "core::option::Option::Some"
                                    [
                                      M.call_closure (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "from_limbs",
                                          [],
                                          []
                                        |),
                                        [ M.read (| limbs |) ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ limbs : Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] :=
                  M.alloc (| repeat (| Value.Integer IntegerKind.U64 0, LIMBS |) |) in
                let~ i : Ty.path "usize" := M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
                let~ _ : Ty.tuple [] :=
                  M.loop (|
                    Ty.tuple [],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.lt (|
                                      M.read (| i |),
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| bytes |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  let β :=
                                    M.SubPointer.get_array_field (|
                                      limbs,
                                      BinOp.Wrap.div (|
                                        M.read (| i |),
                                        Value.Integer IntegerKind.Usize 8
                                      |)
                                    |) in
                                  M.write (|
                                    β,
                                    BinOp.Wrap.add (|
                                      M.read (| β |),
                                      BinOp.Wrap.shl (|
                                        M.cast
                                          (Ty.path "u64")
                                          (M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| bytes |) |),
                                              M.read (| i |)
                                            |)
                                          |)),
                                        BinOp.Wrap.mul (|
                                          BinOp.Wrap.rem (|
                                            M.read (| i |),
                                            Value.Integer IntegerKind.Usize 8
                                          |),
                                          Value.Integer IntegerKind.Usize 8
                                        |)
                                      |)
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  let β := i in
                                  M.write (|
                                    β,
                                    BinOp.Wrap.add (|
                                      M.read (| β |),
                                      Value.Integer IntegerKind.Usize 1
                                    |)
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.and (|
                                  BinOp.gt (|
                                    M.read (| M.get_constant "ruint::LIMBS'1" |),
                                    Value.Integer IntegerKind.Usize 0
                                  |),
                                  ltac:(M.monadic
                                    (BinOp.gt (|
                                      M.read (|
                                        M.SubPointer.get_array_field (|
                                          limbs,
                                          BinOp.Wrap.sub (|
                                            M.read (| M.get_constant "ruint::LIMBS'1" |),
                                            Value.Integer IntegerKind.Usize 1
                                          |)
                                        |)
                                      |),
                                      M.read (| M.get_constant "ruint::MASK" |)
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::option::Option::Some"
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          "from_limbs",
                          [],
                          []
                        |),
                        [ M.read (| limbs |) ]
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_try_from_le_slice :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.Trait
        (Self BITS LIMBS)
        "try_from_le_slice"
        (try_from_le_slice BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque try_from_le_slice.
  End Impl_ruint_Uint_BITS_LIMBS.
  
  (*
  pub const fn nbytes(bits: usize) -> usize {
      (bits + 7) / 8
  }
  *)
  Definition nbytes (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ bits ] =>
      ltac:(M.monadic
        (let bits := M.alloc (| bits |) in
        BinOp.Wrap.div (|
          BinOp.Wrap.add (| M.read (| bits |), Value.Integer IntegerKind.Usize 7 |),
          Value.Integer IntegerKind.Usize 8
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_nbytes : M.IsFunction.Trait "ruint::bytes::nbytes" nbytes.
  Admitted.
  Global Typeclasses Opaque nbytes.
End bytes.
