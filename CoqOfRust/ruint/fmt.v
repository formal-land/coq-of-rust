(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module fmt.
  Module base.
    (* Trait *)
    (* Empty module 'Base' *)
    
    (* StructTuple
      {
        name := "Binary";
        const_params := [];
        ty_params := [];
        fields := [];
      } *)
    
    Module Impl_ruint_fmt_base_Base_for_ruint_fmt_base_Binary.
      Definition Self : Ty.t := Ty.path "ruint::fmt::base::Binary".
      
      (*         const MAX: u64 = 1 << 63; *)
      (* Ty.path "u64" *)
      Definition value_MAX (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u64",
              BinOp.Wrap.shl,
              [ Value.Integer IntegerKind.U64 1; Value.Integer IntegerKind.I32 63 ]
            |)
          |))).
      
      (*         const WIDTH: usize = 63; *)
      (* Ty.path "usize" *)
      Definition value_WIDTH (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 63 |))).
      
      (*         const PREFIX: &'static str = "0b"; *)
      (* Ty.apply (Ty.path "&") [] [ Ty.path "str" ] *)
      Definition value_PREFIX (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| mk_str (| "0b" |) |))).
      
      Axiom Implements :
        M.IsTraitInstance
          "ruint::fmt::base::Base"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [
            ("value_MAX", InstanceField.Method value_MAX);
            ("value_WIDTH", InstanceField.Method value_WIDTH);
            ("value_PREFIX", InstanceField.Method value_PREFIX)
          ].
    End Impl_ruint_fmt_base_Base_for_ruint_fmt_base_Binary.
    
    (* StructTuple
      {
        name := "Octal";
        const_params := [];
        ty_params := [];
        fields := [];
      } *)
    
    Module Impl_ruint_fmt_base_Base_for_ruint_fmt_base_Octal.
      Definition Self : Ty.t := Ty.path "ruint::fmt::base::Octal".
      
      (*         const MAX: u64 = 1 << 63; *)
      (* Ty.path "u64" *)
      Definition value_MAX (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u64",
              BinOp.Wrap.shl,
              [ Value.Integer IntegerKind.U64 1; Value.Integer IntegerKind.I32 63 ]
            |)
          |))).
      
      (*         const WIDTH: usize = 21; *)
      (* Ty.path "usize" *)
      Definition value_WIDTH (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 21 |))).
      
      (*         const PREFIX: &'static str = "0o"; *)
      (* Ty.apply (Ty.path "&") [] [ Ty.path "str" ] *)
      Definition value_PREFIX (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| mk_str (| "0o" |) |))).
      
      Axiom Implements :
        M.IsTraitInstance
          "ruint::fmt::base::Base"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [
            ("value_MAX", InstanceField.Method value_MAX);
            ("value_WIDTH", InstanceField.Method value_WIDTH);
            ("value_PREFIX", InstanceField.Method value_PREFIX)
          ].
    End Impl_ruint_fmt_base_Base_for_ruint_fmt_base_Octal.
    
    (* StructTuple
      {
        name := "Decimal";
        const_params := [];
        ty_params := [];
        fields := [];
      } *)
    
    Module Impl_ruint_fmt_base_Base_for_ruint_fmt_base_Decimal.
      Definition Self : Ty.t := Ty.path "ruint::fmt::base::Decimal".
      
      (*         const MAX: u64 = 10_000_000_000_000_000_000; *)
      (* Ty.path "u64" *)
      Definition value_MAX (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 10000000000000000000 |))).
      
      (*         const WIDTH: usize = 19; *)
      (* Ty.path "usize" *)
      Definition value_WIDTH (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 19 |))).
      
      (*         const PREFIX: &'static str = ""; *)
      (* Ty.apply (Ty.path "&") [] [ Ty.path "str" ] *)
      Definition value_PREFIX (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| mk_str (| "" |) |))).
      
      Axiom Implements :
        M.IsTraitInstance
          "ruint::fmt::base::Base"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [
            ("value_MAX", InstanceField.Method value_MAX);
            ("value_WIDTH", InstanceField.Method value_WIDTH);
            ("value_PREFIX", InstanceField.Method value_PREFIX)
          ].
    End Impl_ruint_fmt_base_Base_for_ruint_fmt_base_Decimal.
    
    (* StructTuple
      {
        name := "Hexadecimal";
        const_params := [];
        ty_params := [];
        fields := [];
      } *)
    
    Module Impl_ruint_fmt_base_Base_for_ruint_fmt_base_Hexadecimal.
      Definition Self : Ty.t := Ty.path "ruint::fmt::base::Hexadecimal".
      
      (*         const MAX: u64 = 1 << 60; *)
      (* Ty.path "u64" *)
      Definition value_MAX (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            M.call_closure (|
              Ty.path "u64",
              BinOp.Wrap.shl,
              [ Value.Integer IntegerKind.U64 1; Value.Integer IntegerKind.I32 60 ]
            |)
          |))).
      
      (*         const WIDTH: usize = 15; *)
      (* Ty.path "usize" *)
      Definition value_WIDTH (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.Usize 15 |))).
      
      (*         const PREFIX: &'static str = "0x"; *)
      (* Ty.apply (Ty.path "&") [] [ Ty.path "str" ] *)
      Definition value_PREFIX (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| mk_str (| "0x" |) |))).
      
      Axiom Implements :
        M.IsTraitInstance
          "ruint::fmt::base::Base"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [
            ("value_MAX", InstanceField.Method value_MAX);
            ("value_WIDTH", InstanceField.Method value_WIDTH);
            ("value_PREFIX", InstanceField.Method value_PREFIX)
          ].
    End Impl_ruint_fmt_base_Base_for_ruint_fmt_base_Hexadecimal.
  End base.
  
  Module Impl_core_fmt_Display_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            write_digits!(self, f; base::Decimal, "");
        }
    *)
    Definition fmt
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ]) (|
            ltac:(M.monadic
              (M.never_to_any (|
                M.read (|
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  LogicalOp.or (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [ LIMBS; Value.Integer IntegerKind.Usize 0 ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "is_zero",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |)
                                        ]
                                      |)))
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Formatter",
                                        "pad_integral",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| f |) |)
                                        |);
                                        Value.Bool true;
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.read (|
                                              get_constant (|
                                                "ruint::fmt::base::Base::PREFIX",
                                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                              |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| mk_str (| "0" |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ buffer :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [ Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                          "new",
                          [],
                          []
                        |),
                        []
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.use
                      (M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [ Ty.associated_unknown ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.associated_unknown ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.associated_unknown ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.associated_unknown,
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.associated_unknown,
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "to_base_be",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "ruint::fmt::base::Base::MAX",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                ltac:(M.monadic
                                  (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.tuple [ Ty.path "usize"; Ty.path "u64" ] ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              []
                                              [ Ty.associated_unknown ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let i := M.copy (| γ1_0 |) in
                                            let spigot := M.copy (| γ1_1 |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                                    "unwrap",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                                      M.get_trait_method (|
                                                        "core::fmt::Write",
                                                        Ty.apply
                                                          (Ty.path "ruint::fmt::DisplayBuffer")
                                                          [ BITS ]
                                                          [],
                                                        [],
                                                        [],
                                                        "write_fmt",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, buffer |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::Arguments",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::Arguments",
                                                            "new_v1_formatted",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [ mk_str (| "" |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_display",
                                                                              [],
                                                                              [ Ty.path "u64" ]
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    spigot
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "from_usize",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.match_operator (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "*")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "bool",
                                                                                                    BinOp.eq,
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        i
                                                                                                      |);
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        0
                                                                                                    ]
                                                                                                  |)
                                                                                                |)) in
                                                                                            let _ :=
                                                                                              is_constant_or_break_match (|
                                                                                                M.read (|
                                                                                                  γ
                                                                                                |),
                                                                                                Value.Bool
                                                                                                  true
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                0
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (get_constant (|
                                                                                              "ruint::fmt::base::Base::WIDTH",
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            |)))
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Placeholder",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Placeholder",
                                                                              "new",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0;
                                                                              Value.UnicodeChar 32;
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Alignment::Unknown"
                                                                                [];
                                                                              Value.Integer
                                                                                IntegerKind.U32
                                                                                8;
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Count::Implied"
                                                                                [];
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Count::Param"
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ]
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::rt::UnsafeArg",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::UnsafeArg",
                                                                "new",
                                                                [],
                                                                []
                                                              |),
                                                              []
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  M.return_ (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "pad_integral",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        Value.Bool true;
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.read (|
                              get_constant (|
                                "ruint::fmt::base::Base::PREFIX",
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                              |)
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                                "as_str",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, buffer |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::fmt::Display"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self BITS LIMBS)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt BITS LIMBS)) ].
  End Impl_core_fmt_Display_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_fmt_Debug_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            fmt::Display::fmt(self, f)
        }
    *)
    Definition fmt
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_trait_method (|
              "core::fmt::Display",
              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
              [],
              [],
              "fmt",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self BITS LIMBS)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt BITS LIMBS)) ].
  End Impl_core_fmt_Debug_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_fmt_Binary_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            write_digits!(self, f; base::Binary, "b");
        }
    *)
    Definition fmt
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ]) (|
            ltac:(M.monadic
              (M.never_to_any (|
                M.read (|
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  LogicalOp.or (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [ LIMBS; Value.Integer IntegerKind.Usize 0 ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "is_zero",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |)
                                        ]
                                      |)))
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Formatter",
                                        "pad_integral",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| f |) |)
                                        |);
                                        Value.Bool true;
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.read (|
                                              get_constant (|
                                                "ruint::fmt::base::Base::PREFIX",
                                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                              |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| mk_str (| "0" |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ buffer :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [ Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                          "new",
                          [],
                          []
                        |),
                        []
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.use
                      (M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [ Ty.associated_unknown ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.associated_unknown ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.associated_unknown ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.associated_unknown,
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.associated_unknown,
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "to_base_be",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "ruint::fmt::base::Base::MAX",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                ltac:(M.monadic
                                  (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.tuple [ Ty.path "usize"; Ty.path "u64" ] ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              []
                                              [ Ty.associated_unknown ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let i := M.copy (| γ1_0 |) in
                                            let spigot := M.copy (| γ1_1 |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                                    "unwrap",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                                      M.get_trait_method (|
                                                        "core::fmt::Write",
                                                        Ty.apply
                                                          (Ty.path "ruint::fmt::DisplayBuffer")
                                                          [ BITS ]
                                                          [],
                                                        [],
                                                        [],
                                                        "write_fmt",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, buffer |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::Arguments",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::Arguments",
                                                            "new_v1_formatted",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [ mk_str (| "" |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_binary",
                                                                              [],
                                                                              [ Ty.path "u64" ]
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    spigot
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "from_usize",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.match_operator (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "*")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "bool",
                                                                                                    BinOp.eq,
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        i
                                                                                                      |);
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        0
                                                                                                    ]
                                                                                                  |)
                                                                                                |)) in
                                                                                            let _ :=
                                                                                              is_constant_or_break_match (|
                                                                                                M.read (|
                                                                                                  γ
                                                                                                |),
                                                                                                Value.Bool
                                                                                                  true
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                0
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (get_constant (|
                                                                                              "ruint::fmt::base::Base::WIDTH",
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            |)))
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Placeholder",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Placeholder",
                                                                              "new",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0;
                                                                              Value.UnicodeChar 32;
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Alignment::Unknown"
                                                                                [];
                                                                              Value.Integer
                                                                                IntegerKind.U32
                                                                                8;
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Count::Implied"
                                                                                [];
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Count::Param"
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ]
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::rt::UnsafeArg",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::UnsafeArg",
                                                                "new",
                                                                [],
                                                                []
                                                              |),
                                                              []
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  M.return_ (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "pad_integral",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        Value.Bool true;
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.read (|
                              get_constant (|
                                "ruint::fmt::base::Base::PREFIX",
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                              |)
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                                "as_str",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, buffer |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::fmt::Binary"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self BITS LIMBS)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt BITS LIMBS)) ].
  End Impl_core_fmt_Binary_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_fmt_Octal_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            write_digits!(self, f; base::Octal, "o");
        }
    *)
    Definition fmt
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ]) (|
            ltac:(M.monadic
              (M.never_to_any (|
                M.read (|
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  LogicalOp.or (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [ LIMBS; Value.Integer IntegerKind.Usize 0 ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "is_zero",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |)
                                        ]
                                      |)))
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Formatter",
                                        "pad_integral",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| f |) |)
                                        |);
                                        Value.Bool true;
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.read (|
                                              get_constant (|
                                                "ruint::fmt::base::Base::PREFIX",
                                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                              |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| mk_str (| "0" |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ buffer :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [ Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                          "new",
                          [],
                          []
                        |),
                        []
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.use
                      (M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [ Ty.associated_unknown ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.associated_unknown ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.associated_unknown ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.associated_unknown,
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.associated_unknown,
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "to_base_be",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "ruint::fmt::base::Base::MAX",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                ltac:(M.monadic
                                  (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.tuple [ Ty.path "usize"; Ty.path "u64" ] ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              []
                                              [ Ty.associated_unknown ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let i := M.copy (| γ1_0 |) in
                                            let spigot := M.copy (| γ1_1 |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                                    "unwrap",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                                      M.get_trait_method (|
                                                        "core::fmt::Write",
                                                        Ty.apply
                                                          (Ty.path "ruint::fmt::DisplayBuffer")
                                                          [ BITS ]
                                                          [],
                                                        [],
                                                        [],
                                                        "write_fmt",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, buffer |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::Arguments",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::Arguments",
                                                            "new_v1_formatted",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [ mk_str (| "" |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_octal",
                                                                              [],
                                                                              [ Ty.path "u64" ]
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    spigot
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "from_usize",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.match_operator (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "*")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "bool",
                                                                                                    BinOp.eq,
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        i
                                                                                                      |);
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        0
                                                                                                    ]
                                                                                                  |)
                                                                                                |)) in
                                                                                            let _ :=
                                                                                              is_constant_or_break_match (|
                                                                                                M.read (|
                                                                                                  γ
                                                                                                |),
                                                                                                Value.Bool
                                                                                                  true
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                0
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (get_constant (|
                                                                                              "ruint::fmt::base::Base::WIDTH",
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            |)))
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Placeholder",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Placeholder",
                                                                              "new",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0;
                                                                              Value.UnicodeChar 32;
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Alignment::Unknown"
                                                                                [];
                                                                              Value.Integer
                                                                                IntegerKind.U32
                                                                                8;
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Count::Implied"
                                                                                [];
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Count::Param"
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ]
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::rt::UnsafeArg",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::UnsafeArg",
                                                                "new",
                                                                [],
                                                                []
                                                              |),
                                                              []
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  M.return_ (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "pad_integral",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        Value.Bool true;
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.read (|
                              get_constant (|
                                "ruint::fmt::base::Base::PREFIX",
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                              |)
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                                "as_str",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, buffer |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::fmt::Octal"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self BITS LIMBS)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt BITS LIMBS)) ].
  End Impl_core_fmt_Octal_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_fmt_LowerHex_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            write_digits!(self, f; base::Hexadecimal, "x");
        }
    *)
    Definition fmt
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ]) (|
            ltac:(M.monadic
              (M.never_to_any (|
                M.read (|
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  LogicalOp.or (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [ LIMBS; Value.Integer IntegerKind.Usize 0 ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "is_zero",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |)
                                        ]
                                      |)))
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Formatter",
                                        "pad_integral",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| f |) |)
                                        |);
                                        Value.Bool true;
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.read (|
                                              get_constant (|
                                                "ruint::fmt::base::Base::PREFIX",
                                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                              |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| mk_str (| "0" |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ buffer :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [ Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                          "new",
                          [],
                          []
                        |),
                        []
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.use
                      (M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [ Ty.associated_unknown ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.associated_unknown ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.associated_unknown ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.associated_unknown,
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.associated_unknown,
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "to_base_be",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "ruint::fmt::base::Base::MAX",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                ltac:(M.monadic
                                  (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.tuple [ Ty.path "usize"; Ty.path "u64" ] ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              []
                                              [ Ty.associated_unknown ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let i := M.copy (| γ1_0 |) in
                                            let spigot := M.copy (| γ1_1 |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                                    "unwrap",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                                      M.get_trait_method (|
                                                        "core::fmt::Write",
                                                        Ty.apply
                                                          (Ty.path "ruint::fmt::DisplayBuffer")
                                                          [ BITS ]
                                                          [],
                                                        [],
                                                        [],
                                                        "write_fmt",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, buffer |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::Arguments",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::Arguments",
                                                            "new_v1_formatted",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [ mk_str (| "" |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_lower_hex",
                                                                              [],
                                                                              [ Ty.path "u64" ]
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    spigot
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "from_usize",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.match_operator (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "*")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "bool",
                                                                                                    BinOp.eq,
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        i
                                                                                                      |);
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        0
                                                                                                    ]
                                                                                                  |)
                                                                                                |)) in
                                                                                            let _ :=
                                                                                              is_constant_or_break_match (|
                                                                                                M.read (|
                                                                                                  γ
                                                                                                |),
                                                                                                Value.Bool
                                                                                                  true
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                0
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (get_constant (|
                                                                                              "ruint::fmt::base::Base::WIDTH",
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            |)))
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Placeholder",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Placeholder",
                                                                              "new",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0;
                                                                              Value.UnicodeChar 32;
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Alignment::Unknown"
                                                                                [];
                                                                              Value.Integer
                                                                                IntegerKind.U32
                                                                                8;
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Count::Implied"
                                                                                [];
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Count::Param"
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ]
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::rt::UnsafeArg",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::UnsafeArg",
                                                                "new",
                                                                [],
                                                                []
                                                              |),
                                                              []
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  M.return_ (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "pad_integral",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        Value.Bool true;
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.read (|
                              get_constant (|
                                "ruint::fmt::base::Base::PREFIX",
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                              |)
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                                "as_str",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, buffer |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::fmt::LowerHex"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self BITS LIMBS)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt BITS LIMBS)) ].
  End Impl_core_fmt_LowerHex_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_fmt_UpperHex_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            write_digits!(self, f; base::Hexadecimal, "X");
        }
    *)
    Definition fmt
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ]) (|
            ltac:(M.monadic
              (M.never_to_any (|
                M.read (|
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  LogicalOp.or (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [ LIMBS; Value.Integer IntegerKind.Usize 0 ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "is_zero",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |)
                                        ]
                                      |)))
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Formatter",
                                        "pad_integral",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| f |) |)
                                        |);
                                        Value.Bool true;
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.read (|
                                              get_constant (|
                                                "ruint::fmt::base::Base::PREFIX",
                                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                              |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| mk_str (| "0" |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let~ buffer :
                      Ty.apply
                        (Ty.path "*")
                        []
                        [ Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                          "new",
                          [],
                          []
                        |),
                        []
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.use
                      (M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [ Ty.associated_unknown ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.associated_unknown ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.associated_unknown ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.associated_unknown,
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.associated_unknown,
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "to_base_be",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "ruint::fmt::base::Base::MAX",
                                          Ty.path "u64"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                ltac:(M.monadic
                                  (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.tuple [ Ty.path "usize"; Ty.path "u64" ] ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              []
                                              [ Ty.associated_unknown ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let i := M.copy (| γ1_0 |) in
                                            let spigot := M.copy (| γ1_1 |) in
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                                    "unwrap",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                                      M.get_trait_method (|
                                                        "core::fmt::Write",
                                                        Ty.apply
                                                          (Ty.path "ruint::fmt::DisplayBuffer")
                                                          [ BITS ]
                                                          [],
                                                        [],
                                                        [],
                                                        "write_fmt",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, buffer |);
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::Arguments",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::Arguments",
                                                            "new_v1_formatted",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [ mk_str (| "" |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_upper_hex",
                                                                              [],
                                                                              [ Ty.path "u64" ]
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    spigot
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "from_usize",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.match_operator (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "*")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ :=
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "bool",
                                                                                                    BinOp.eq,
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        i
                                                                                                      |);
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        0
                                                                                                    ]
                                                                                                  |)
                                                                                                |)) in
                                                                                            let _ :=
                                                                                              is_constant_or_break_match (|
                                                                                                M.read (|
                                                                                                  γ
                                                                                                |),
                                                                                                Value.Bool
                                                                                                  true
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                0
                                                                                            |)));
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (get_constant (|
                                                                                              "ruint::fmt::base::Base::WIDTH",
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            |)))
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            (* Unsize *)
                                                            M.pointer_coercion
                                                              (M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Placeholder",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Placeholder",
                                                                              "new",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                0;
                                                                              Value.UnicodeChar 32;
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Alignment::Unknown"
                                                                                [];
                                                                              Value.Integer
                                                                                IntegerKind.U32
                                                                                8;
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Count::Implied"
                                                                                [];
                                                                              Value.StructTuple
                                                                                "core::fmt::rt::Count::Param"
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ]
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |));
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::rt::UnsafeArg",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::UnsafeArg",
                                                                "new",
                                                                [],
                                                                []
                                                              |),
                                                              []
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  M.return_ (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "pad_integral",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        Value.Bool true;
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.read (|
                              get_constant (|
                                "ruint::fmt::base::Base::PREFIX",
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                              |)
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ BITS ] [],
                                "as_str",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, buffer |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::fmt::UpperHex"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self BITS LIMBS)
        (* Instance *) [ ("fmt", InstanceField.Method (fmt BITS LIMBS)) ].
  End Impl_core_fmt_UpperHex_for_ruint_Uint_BITS_LIMBS.
  
  (* StructRecord
    {
      name := "DisplayBuffer";
      const_params := [ "SIZE" ];
      ty_params := [];
      fields :=
        [
          ("buf",
            Ty.apply
              (Ty.path "array")
              [ SIZE ]
              [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ Ty.path "u8" ] ]);
          ("len", Ty.path "usize")
        ];
    } *)
  
  Module Impl_ruint_fmt_DisplayBuffer_SIZE.
    Definition Self (SIZE : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ SIZE ] [].
    
    (*
        const fn new() -> Self {
            Self {
                buf: unsafe { MaybeUninit::uninit().assume_init() },
                len: 0,
            }
        }
    *)
    Definition new (SIZE : Value.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SIZE in
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.StructRecord
            "ruint::fmt::DisplayBuffer"
            [
              ("buf",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ SIZE ]
                    [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ Ty.path "u8" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ SIZE ]
                          [
                            Ty.apply
                              (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                              []
                              [ Ty.path "u8" ]
                          ]
                      ],
                    "assume_init",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ SIZE ]
                            [
                              Ty.apply
                                (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                []
                                [ Ty.path "u8" ]
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ SIZE ]
                              [
                                Ty.apply
                                  (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                  []
                                  [ Ty.path "u8" ]
                              ]
                          ],
                        "uninit",
                        [],
                        []
                      |),
                      []
                    |)
                  ]
                |));
              ("len", Value.Integer IntegerKind.Usize 0)
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new :
      forall (SIZE : Value.t),
      M.IsAssociatedFunction.C (Self SIZE) "new" (new SIZE).
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        fn as_str(&self) -> &str {
            // SAFETY: `buf` is only written to by the `fmt::Write::write_str`
            // implementation which writes a valid UTF-8 string to `buf` and
            // correctly sets `len`.
            unsafe { core::str::from_utf8_unchecked(&self.as_bytes_full()[..self.len]) }
        }
    *)
    Definition as_str (SIZE : Value.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self SIZE in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.call_closure (|
                Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                M.get_function (| "core::str::converts::from_utf8_unchecked", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                            M.get_trait_method (|
                              "core::ops::index::Index",
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeTo")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ SIZE ] [],
                                      "as_bytes_full",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| self |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |);
                              Value.StructRecord
                                "core::ops::range::RangeTo"
                                [
                                  ("end_",
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "ruint::fmt::DisplayBuffer",
                                        "len"
                                      |)
                                    |))
                                ]
                            ]
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_str :
      forall (SIZE : Value.t),
      M.IsAssociatedFunction.C (Self SIZE) "as_str" (as_str SIZE).
    Admitted.
    Global Typeclasses Opaque as_str.
    
    (*
        const unsafe fn as_bytes_full(&self) -> &[u8] {
            unsafe { &*(self.buf.as_slice() as *const [_] as *const [u8]) }
        }
    *)
    Definition as_bytes_full
        (SIZE : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self SIZE in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.cast
                    (Ty.apply
                      (Ty.path "*const")
                      []
                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u8" ] ])
                    (M.read (|
                      M.use
                        (M.alloc (|
                          M.borrow (|
                            Pointer.Kind.ConstPointer,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                          []
                                          [ Ty.path "u8" ]
                                      ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ SIZE ]
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        []
                                        [ Ty.path "u8" ]
                                    ],
                                  "as_slice",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "ruint::fmt::DisplayBuffer",
                                      "buf"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        |))
                    |))
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_as_bytes_full :
      forall (SIZE : Value.t),
      M.IsAssociatedFunction.C (Self SIZE) "as_bytes_full" (as_bytes_full SIZE).
    Admitted.
    Global Typeclasses Opaque as_bytes_full.
  End Impl_ruint_fmt_DisplayBuffer_SIZE.
  
  Module Impl_core_fmt_Write_for_ruint_fmt_DisplayBuffer_SIZE.
    Definition Self (SIZE : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::fmt::DisplayBuffer") [ SIZE ] [].
    
    (*
        fn write_str(&mut self, s: &str) -> fmt::Result {
            if self.len + s.len() > SIZE {
                return Err(fmt::Error);
            }
            unsafe {
                let dst = self.buf.as_mut_ptr().add(self.len).cast();
                core::ptr::copy_nonoverlapping(s.as_ptr(), dst, s.len());
            }
            self.len += s.len();
            Ok(())
        }
    *)
    Definition write_str
        (SIZE : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self SIZE in
      match ε, τ, α with
      | [], [], [ self; s ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let s := M.alloc (| s |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.gt,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "ruint::fmt::DisplayBuffer",
                                            "len"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.path "str",
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| s |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    SIZE
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [ Value.StructTuple "core::fmt::Error" [] ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  let~ dst :
                      Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "*mut") [] [ Ty.path "u8" ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "*mut")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                []
                                [ Ty.path "u8" ]
                            ],
                          "cast",
                          [],
                          [ Ty.path "u8" ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "*mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                  []
                                  [ Ty.path "u8" ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "*mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                    []
                                    [ Ty.path "u8" ]
                                ],
                              "add",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "*mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                      []
                                      [ Ty.path "u8" ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        []
                                        [ Ty.path "u8" ]
                                    ],
                                  "as_mut_ptr",
                                  [],
                                  []
                                |),
                                [
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "ruint::fmt::DisplayBuffer",
                                        "buf"
                                      |)
                                    |))
                                ]
                              |);
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "ruint::fmt::DisplayBuffer",
                                  "len"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                    M.alloc (|
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_function (|
                          "core::intrinsics::copy_nonoverlapping",
                          [],
                          [ Ty.path "u8" ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "*const") [] [ Ty.path "u8" ],
                            M.get_associated_function (| Ty.path "str", "as_ptr", [], [] |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                          |);
                          M.read (| dst |);
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (| Ty.path "str", "len", [], [] |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (|
                    let β :=
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "ruint::fmt::DisplayBuffer",
                        "len"
                      |) in
                    M.write (|
                      β,
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.add,
                        [
                          M.read (| β |);
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (| Ty.path "str", "len", [], [] |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| s |) |) |) ]
                          |)
                        ]
                      |)
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (SIZE : Value.t),
      M.IsTraitInstance
        "core::fmt::Write"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self SIZE)
        (* Instance *) [ ("write_str", InstanceField.Method (write_str SIZE)) ].
  End Impl_core_fmt_Write_for_ruint_fmt_DisplayBuffer_SIZE.
End fmt.
