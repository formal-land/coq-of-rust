(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module gcd.
  Module Impl_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        pub fn gcd(self, other: Self) -> Self {
            algorithms::gcd(self, other)
        }
    *)
    Definition gcd
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_function (| "ruint::algorithms::gcd::gcd", [ BITS; LIMBS ], [] |),
            [ M.read (| self |); M.read (| other |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_gcd :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "gcd" (gcd BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque gcd.
    
    (*
        pub fn lcm(self, other: Self) -> Option<Self> {
            let other = other.checked_div(self.gcd(other)).unwrap_or_default();
            self.checked_mul(other)
        }
    *)
    Definition lcm
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ other :
                Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                    "unwrap_or_default",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "checked_div",
                        [],
                        []
                      |),
                      [
                        M.read (| other |);
                        M.call_closure (|
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                            "gcd",
                            [],
                            []
                          |),
                          [ M.read (| self |); M.read (| other |) ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "checked_mul",
                  [],
                  []
                |),
                [ M.read (| self |); M.read (| other |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_lcm :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "lcm" (lcm BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque lcm.
    
    (*
        pub fn gcd_extended(self, other: Self) -> (Self, Self, Self, bool) {
            algorithms::gcd_extended(self, other)
        }
    *)
    Definition gcd_extended
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.call_closure (|
            Ty.tuple
              [
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                Ty.path "bool"
              ],
            M.get_function (| "ruint::algorithms::gcd::gcd_extended", [ BITS; LIMBS ], [] |),
            [ M.read (| self |); M.read (| other |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_gcd_extended :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "gcd_extended" (gcd_extended BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque gcd_extended.
  End Impl_ruint_Uint_BITS_LIMBS.
End gcd.
