(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module modular.
  Module Impl_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        pub fn reduce_mod(mut self, modulus: Self) -> Self {
            if modulus == Self::ZERO {
                return Self::ZERO;
            }
            if self >= modulus {
                self %= modulus;
            }
            self
        }
    *)
    Definition reduce_mod
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; modulus ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let modulus := M.alloc (| modulus |) in
          M.catch_return (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    [],
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, modulus |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      get_associated_constant (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        "ZERO",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.read (|
                                    get_associated_constant (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "ZERO",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    [],
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                    "ge",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, self |);
                                    M.borrow (| Pointer.Kind.Ref, modulus |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "core::ops::arith::RemAssign",
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  [],
                                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                  "rem_assign",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.MutRef, self |); M.read (| modulus |) ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                self
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_reduce_mod :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "reduce_mod" (reduce_mod BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque reduce_mod.
    
    (*
        pub fn add_mod(self, rhs: Self, modulus: Self) -> Self {
            // Reduce inputs
            let lhs = self.reduce_mod(modulus);
            let rhs = rhs.reduce_mod(modulus);
    
            // Compute the sum and conditionally subtract modulus once.
            let (mut result, overflow) = lhs.overflowing_add(rhs);
            if overflow || result >= modulus {
                result -= modulus;
            }
            result
        }
    *)
    Definition add_mod
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs; modulus ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          let modulus := M.alloc (| modulus |) in
          M.read (|
            let~ lhs :
                Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "reduce_mod",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| modulus |) ]
                |)
              |) in
            let~ rhs :
                Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "reduce_mod",
                    [],
                    []
                  |),
                  [ M.read (| rhs |); M.read (| modulus |) ]
                |)
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_add",
                    [],
                    []
                  |),
                  [ M.read (| lhs |); M.read (| rhs |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let result := M.copy (| γ0_0 |) in
                    let overflow := M.copy (| γ0_1 |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    LogicalOp.or (|
                                      M.read (| overflow |),
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          Ty.path "bool",
                                          M.get_trait_method (|
                                            "core::cmp::PartialOrd",
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            [],
                                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                            "ge",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.Ref, result |);
                                            M.borrow (| Pointer.Kind.Ref, modulus |)
                                          ]
                                        |)))
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_trait_method (|
                                      "core::ops::arith::SubAssign",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      [],
                                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                      "sub_assign",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.MutRef, result |);
                                      M.read (| modulus |)
                                    ]
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    result))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_add_mod :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "add_mod" (add_mod BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque add_mod.
    
    (*
        pub fn mul_mod(self, rhs: Self, mut modulus: Self) -> Self {
            if modulus == Self::ZERO {
                return Self::ZERO;
            }
    
            // Allocate at least `nlimbs(2 * BITS)` limbs to store the product. This array
            // casting is a workaround for `generic_const_exprs` not being stable.
            let mut product = [[0u64; 2]; LIMBS];
            let product_len = crate::nlimbs(2 * BITS);
            debug_assert!(2 * LIMBS >= product_len);
            // SAFETY: `[[u64; 2]; LIMBS] == [u64; 2 * LIMBS] >= [u64; nlimbs(2 * BITS)]`.
            let product = unsafe {
                core::slice::from_raw_parts_mut(product.as_mut_ptr().cast::<u64>(), product_len)
            };
    
            // Compute full product.
            let overflow = algorithms::addmul(product, self.as_limbs(), rhs.as_limbs());
            debug_assert!(!overflow);
    
            // Compute modulus using `div_rem`.
            // This stores the remainder in the divisor, `modulus`.
            algorithms::div(product, &mut modulus.limbs);
    
            modulus
        }
    *)
    Definition mul_mod
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs; modulus ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          let modulus := M.alloc (| modulus |) in
          M.catch_return (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    [],
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, modulus |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      get_associated_constant (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        "ZERO",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.read (|
                                    get_associated_constant (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "ZERO",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ product :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ LIMBS ]
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "u64" ]
                          ]
                      ] :=
                  M.alloc (|
                    repeat (|
                      repeat (|
                        Value.Integer IntegerKind.U64 0,
                        Value.Integer IntegerKind.Usize 2
                      |),
                      LIMBS
                    |)
                  |) in
                let~ product_len : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_function (| "ruint::nlimbs", [], [] |),
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.mul,
                          [ Value.Integer IntegerKind.Usize 2; BITS ]
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.ge,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.mul,
                                                  [ Value.Integer IntegerKind.Usize 2; LIMBS ]
                                                |);
                                                M.read (| product_len |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic", [], [] |),
                                          [
                                            mk_str (|
                                              "assertion failed: 2 * LIMBS >= product_len"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ product :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ] ]
                      ] :=
                  M.alloc (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u64" ] ],
                          M.get_function (|
                            "core::slice::raw::from_raw_parts_mut",
                            [],
                            [ Ty.path "u64" ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "*mut") [] [ Ty.path "u64" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "*mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "u64" ]
                                  ],
                                "cast",
                                [],
                                [ Ty.path "u64" ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "*mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ Ty.path "u64" ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ Ty.path "u64" ]
                                      ],
                                    "as_mut_ptr",
                                    [],
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion (M.borrow (| Pointer.Kind.MutRef, product |))
                                  ]
                                |)
                              ]
                            |);
                            M.read (| product_len |)
                          ]
                        |)
                      |)
                    |)
                  |) in
                let~ overflow : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "bool",
                      M.get_function (| "ruint::algorithms::mul::addmul", [], [] |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| product |) |) |);
                        (* Unsize *)
                        M.pointer_coercion
                          (M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  "as_limbs",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, self |) ]
                              |)
                            |)
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  "as_limbs",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                              |)
                            |)
                          |))
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          UnOp.not (| UnOp.not (| M.read (| overflow |) |) |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic", [], [] |),
                                          [ mk_str (| "assertion failed: !overflow" |) ]
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_function (| "ruint::algorithms::div::div", [], [] |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| product |) |) |);
                        (* Unsize *)
                        M.pointer_coercion
                          (M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  modulus,
                                  "ruint::Uint",
                                  "limbs"
                                |)
                              |)
                            |)
                          |))
                      ]
                    |)
                  |) in
                modulus
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_mul_mod :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "mul_mod" (mul_mod BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque mul_mod.
    
    (*
        pub fn pow_mod(mut self, mut exp: Self, modulus: Self) -> Self {
            if modulus == Self::ZERO || modulus <= Self::from(1) {
                // Also covers Self::BITS == 0
                return Self::ZERO;
            }
    
            // Exponentiation by squaring
            let mut result = Self::from(1);
            while exp > Self::ZERO {
                // Multiply by base
                if exp.limbs[0] & 1 == 1 {
                    result = result.mul_mod(self, modulus);
                }
    
                // Square base
                self = self.mul_mod(self, modulus);
                exp >>= 1;
            }
            result
        }
    *)
    Definition pow_mod
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; exp; modulus ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let exp := M.alloc (| exp |) in
          let modulus := M.alloc (| modulus |) in
          M.catch_return (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.or (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      [],
                                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, modulus |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        get_associated_constant (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          "ZERO",
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        [],
                                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, modulus |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            M.call_closure (|
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                "from",
                                                [],
                                                [ Ty.path "i32" ]
                                              |),
                                              [ Value.Integer IntegerKind.I32 1 ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.read (|
                                    get_associated_constant (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "ZERO",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ result :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "from",
                        [],
                        [ Ty.path "i32" ]
                      |),
                      [ Value.Integer IntegerKind.I32 1 ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.loop (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        [],
                                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                        "gt",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, exp |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            "ZERO",
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.eq,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "u64",
                                                    BinOp.Wrap.bit_and,
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            exp,
                                                            "ruint::Uint",
                                                            "limbs"
                                                          |),
                                                          Value.Integer IntegerKind.Usize 0
                                                        |)
                                                      |);
                                                      Value.Integer IntegerKind.U64 1
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.U64 1
                                                ]
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.write (|
                                              result,
                                              M.call_closure (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    [],
                                                  "mul_mod",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (| result |);
                                                  M.read (| self |);
                                                  M.read (| modulus |)
                                                ]
                                              |)
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  M.write (|
                                    self,
                                    M.call_closure (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        "mul_mod",
                                        [],
                                        []
                                      |),
                                      [ M.read (| self |); M.read (| self |); M.read (| modulus |) ]
                                    |)
                                  |)
                                |) in
                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_trait_method (|
                                      "core::ops::bit::ShrAssign",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      [],
                                      [ Ty.path "i32" ],
                                      "shr_assign",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.MutRef, exp |);
                                      Value.Integer IntegerKind.I32 1
                                    ]
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                result
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_pow_mod :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "pow_mod" (pow_mod BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque pow_mod.
    
    (*
        pub fn inv_mod(self, modulus: Self) -> Option<Self> {
            algorithms::inv_mod(self, modulus)
        }
    *)
    Definition inv_mod
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; modulus ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let modulus := M.alloc (| modulus |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
            M.get_function (| "ruint::algorithms::gcd::inv_mod", [ BITS; LIMBS ], [] |),
            [ M.read (| self |); M.read (| modulus |) ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_inv_mod :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "inv_mod" (inv_mod BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque inv_mod.
    
    (*
        pub fn mul_redc(self, other: Self, modulus: Self, inv: u64) -> Self {
            if BITS == 0 {
                return Self::ZERO;
            }
            assert_eq!(inv.wrapping_mul(modulus.limbs[0]), u64::MAX);
            let mut result = Self::ZERO;
            algorithms::mul_redc(
                self.as_limbs(),
                other.as_limbs(),
                &mut result.limbs,
                modulus.as_limbs(),
                inv,
            );
            debug_assert!(result < modulus);
            result
        }
    *)
    Definition mul_redc
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; other; modulus; inv ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          let modulus := M.alloc (| modulus |) in
          let inv := M.alloc (| inv |) in
          M.catch_return (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [ BITS; Value.Integer IntegerKind.Usize 0 ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.read (|
                                    get_associated_constant (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "ZERO",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (|
                      Value.Tuple
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "u64",
                                M.get_associated_function (|
                                  Ty.path "u64",
                                  "wrapping_mul",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| inv |);
                                  M.read (|
                                    M.SubPointer.get_array_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        modulus,
                                        "ruint::Uint",
                                        "limbs"
                                      |),
                                      Value.Integer IntegerKind.Usize 0
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            get_associated_constant (| Ty.path "u64", "MAX", Ty.path "u64" |)
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left_val := M.copy (| γ0_0 |) in
                          let right_val := M.copy (| γ0_1 |) in
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [
                                              M.read (| M.deref (| M.read (| left_val |) |) |);
                                              M.read (| M.deref (| M.read (| right_val |) |) |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let~ kind :
                                            Ty.apply
                                              (Ty.path "*")
                                              []
                                              [ Ty.path "core::panicking::AssertKind" ] :=
                                          M.alloc (|
                                            Value.StructTuple
                                              "core::panicking::AssertKind::Eq"
                                              []
                                              []
                                              []
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (|
                                              "core::panicking::assert_failed",
                                              [],
                                              [ Ty.path "u64"; Ty.path "u64" ]
                                            |),
                                            [
                                              M.read (| kind |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| left_val |) |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| right_val |) |)
                                                  |)
                                                |)
                                              |);
                                              Value.StructTuple
                                                "core::option::Option::None"
                                                []
                                                [ Ty.path "core::fmt::Arguments" ]
                                                []
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)))
                    ]
                  |) in
                let~ result :
                    Ty.apply
                      (Ty.path "*")
                      []
                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] :=
                  M.copy (|
                    get_associated_constant (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      "ZERO",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_function (| "ruint::algorithms::mul_redc::mul_redc", [], [] |),
                      [
                        (* Unsize *)
                        M.pointer_coercion
                          (M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  "as_limbs",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, self |) ]
                              |)
                            |)
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  "as_limbs",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, other |) ]
                              |)
                            |)
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  result,
                                  "ruint::Uint",
                                  "limbs"
                                |)
                              |)
                            |)
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  "as_limbs",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, modulus |) ]
                              |)
                            |)
                          |));
                        M.read (| inv |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_trait_method (|
                                                "core::cmp::PartialOrd",
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    []
                                                ],
                                                "lt",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (| Pointer.Kind.Ref, result |);
                                                M.borrow (| Pointer.Kind.Ref, modulus |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic", [], [] |),
                                          [ mk_str (| "assertion failed: result < modulus" |) ]
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                result
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_mul_redc :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "mul_redc" (mul_redc BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque mul_redc.
  End Impl_ruint_Uint_BITS_LIMBS.
End modular.
