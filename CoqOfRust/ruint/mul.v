(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module mul.
  Module Impl_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        pub fn checked_mul(self, rhs: Self) -> Option<Self> {
            match self.overflowing_mul(rhs) {
                (value, false) => Some(value),
                _ => None,
            }
        }
    *)
    Definition checked_mul
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]),
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_mul",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let value := M.copy (| γ0_0 |) in
                    let _ :=
                      M.is_constant_or_break_match (| M.read (| γ0_1 |), Value.Bool false |) in
                    M.alloc (|
                      Value.StructTuple "core::option::Option::Some" [ M.read (| value |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_checked_mul :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "checked_mul" (checked_mul BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque checked_mul.
    
    (*
        pub fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
            let mut result = Self::ZERO;
            let mut overflow = algorithms::addmul(&mut result.limbs, self.as_limbs(), rhs.as_limbs());
            if BITS > 0 {
                overflow |= result.limbs[LIMBS - 1] > Self::MASK;
                result.limbs[LIMBS - 1] &= Self::MASK;
            }
            (result, overflow)
        }
    *)
    Definition overflowing_mul
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ result : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
              M.copy (|
                get_associated_constant (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "ZERO",
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                |)
              |) in
            let~ overflow : Ty.path "bool" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "bool",
                  M.get_function (| "ruint::algorithms::mul::addmul", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (| result, "ruint::Uint", "limbs" |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                            "as_limbs",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                            "as_limbs",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (| BinOp.gt (| BITS, Value.Integer IntegerKind.Usize 0 |) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          let β := overflow in
                          M.write (|
                            β,
                            BinOp.bit_or
                              (M.read (| β |))
                              (BinOp.gt (|
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      result,
                                      "ruint::Uint",
                                      "limbs"
                                    |),
                                    BinOp.Wrap.sub (| LIMBS, Value.Integer IntegerKind.Usize 1 |)
                                  |)
                                |),
                                M.read (|
                                  get_associated_constant (|
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    "MASK",
                                    Ty.path "u64"
                                  |)
                                |)
                              |))
                          |)
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          let β :=
                            M.SubPointer.get_array_field (|
                              M.SubPointer.get_struct_record_field (|
                                result,
                                "ruint::Uint",
                                "limbs"
                              |),
                              BinOp.Wrap.sub (| LIMBS, Value.Integer IntegerKind.Usize 1 |)
                            |) in
                          M.write (|
                            β,
                            BinOp.bit_and
                              (M.read (| β |))
                              (M.read (|
                                get_associated_constant (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  "MASK",
                                  Ty.path "u64"
                                |)
                              |))
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (| Value.Tuple [ M.read (| result |); M.read (| overflow |) ] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_overflowing_mul :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "overflowing_mul" (overflowing_mul BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque overflowing_mul.
    
    (*
        pub fn saturating_mul(self, rhs: Self) -> Self {
            match self.overflowing_mul(rhs) {
                (value, false) => value,
                _ => Self::MAX,
            }
        }
    *)
    Definition saturating_mul
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              Some (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []),
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []; Ty.path "bool" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    "overflowing_mul",
                    [],
                    []
                  |),
                  [ M.read (| self |); M.read (| rhs |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let value := M.copy (| γ0_0 |) in
                    let _ :=
                      M.is_constant_or_break_match (| M.read (| γ0_1 |), Value.Bool false |) in
                    value));
                fun γ =>
                  ltac:(M.monadic
                    (get_associated_constant (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      "MAX",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_saturating_mul :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "saturating_mul" (saturating_mul BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque saturating_mul.
    
    (*
        pub fn wrapping_mul(self, rhs: Self) -> Self {
            let mut result = Self::ZERO;
            algorithms::addmul_n(&mut result.limbs, self.as_limbs(), rhs.as_limbs());
            if BITS > 0 {
                result.limbs[LIMBS - 1] &= Self::MASK;
            }
            result
        }
    *)
    Definition wrapping_mul
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ result : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
              M.copy (|
                get_associated_constant (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "ZERO",
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (| "ruint::algorithms::mul::addmul_n", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (| result, "ruint::Uint", "limbs" |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                            "as_limbs",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                            "as_limbs",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (| BinOp.gt (| BITS, Value.Integer IntegerKind.Usize 0 |) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.alloc (|
                          let β :=
                            M.SubPointer.get_array_field (|
                              M.SubPointer.get_struct_record_field (|
                                result,
                                "ruint::Uint",
                                "limbs"
                              |),
                              BinOp.Wrap.sub (| LIMBS, Value.Integer IntegerKind.Usize 1 |)
                            |) in
                          M.write (|
                            β,
                            BinOp.bit_and
                              (M.read (| β |))
                              (M.read (|
                                get_associated_constant (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  "MASK",
                                  Ty.path "u64"
                                |)
                              |))
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            result
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_wrapping_mul :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "wrapping_mul" (wrapping_mul BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque wrapping_mul.
    
    (*
        pub fn inv_ring(self) -> Option<Self> {
            if BITS == 0 || self.limbs[0] & 1 == 0 {
                return None;
            }
    
            // Compute inverse of first limb
            let mut result = Self::ZERO;
            result.limbs[0] = {
                const W2: Wrapping<u64> = Wrapping(2);
                const W3: Wrapping<u64> = Wrapping(3);
                let n = Wrapping(self.limbs[0]);
                let mut inv = (n * W3) ^ W2; // Correct on 4 bits.
                inv *= W2 - n * inv; // Correct on 8 bits.
                inv *= W2 - n * inv; // Correct on 16 bits.
                inv *= W2 - n * inv; // Correct on 32 bits.
                inv *= W2 - n * inv; // Correct on 64 bits.
                debug_assert_eq!(n.0.wrapping_mul(inv.0), 1);
                inv.0
            };
    
            // Continue with rest of limbs
            let mut correct_limbs = 1;
            while correct_limbs < LIMBS {
                result *= Self::from(2) - self * result;
                correct_limbs *= 2;
            }
            result.limbs[LIMBS - 1] &= Self::MASK;
    
            Some(result)
        }
    *)
    Definition inv_ring
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.or (|
                                  BinOp.eq (| BITS, Value.Integer IntegerKind.Usize 0 |),
                                  ltac:(M.monadic
                                    (BinOp.eq (|
                                      BinOp.bit_and
                                        (M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              self,
                                              "ruint::Uint",
                                              "limbs"
                                            |),
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |))
                                        (Value.Integer IntegerKind.U64 1),
                                      Value.Integer IntegerKind.U64 0
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (| Value.StructTuple "core::option::Option::None" [] |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ result : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.copy (|
                    get_associated_constant (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      "ZERO",
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    M.write (|
                      M.SubPointer.get_array_field (|
                        M.SubPointer.get_struct_record_field (| result, "ruint::Uint", "limbs" |),
                        Value.Integer IntegerKind.Usize 0
                      |),
                      M.read (|
                        let~ n :
                            Ty.apply
                              (Ty.path "core::num::wrapping::Wrapping")
                              []
                              [ Ty.path "u64" ] :=
                          M.alloc (|
                            Value.StructTuple
                              "core::num::wrapping::Wrapping"
                              [
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "ruint::Uint",
                                      "limbs"
                                    |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              ]
                          |) in
                        let~ inv :
                            Ty.apply
                              (Ty.path "core::num::wrapping::Wrapping")
                              []
                              [ Ty.path "u64" ] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::num::wrapping::Wrapping")
                                []
                                [ Ty.path "u64" ],
                              M.get_trait_method (|
                                "core::ops::bit::BitXor",
                                Ty.apply
                                  (Ty.path "core::num::wrapping::Wrapping")
                                  []
                                  [ Ty.path "u64" ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::num::wrapping::Wrapping")
                                    []
                                    [ Ty.path "u64" ]
                                ],
                                "bitxor",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::num::wrapping::Wrapping")
                                    []
                                    [ Ty.path "u64" ],
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    Ty.apply
                                      (Ty.path "core::num::wrapping::Wrapping")
                                      []
                                      [ Ty.path "u64" ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::num::wrapping::Wrapping")
                                        []
                                        [ Ty.path "u64" ]
                                    ],
                                    "mul",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| n |);
                                    M.read (|
                                      get_constant (|
                                        "ruint::mul::inv_ring::W3",
                                        Ty.apply
                                          (Ty.path "core::num::wrapping::Wrapping")
                                          []
                                          [ Ty.path "u64" ]
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (|
                                  get_constant (|
                                    "ruint::mul::inv_ring::W2",
                                    Ty.apply
                                      (Ty.path "core::num::wrapping::Wrapping")
                                      []
                                      [ Ty.path "u64" ]
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "core::ops::arith::MulAssign",
                                Ty.apply
                                  (Ty.path "core::num::wrapping::Wrapping")
                                  []
                                  [ Ty.path "u64" ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::num::wrapping::Wrapping")
                                    []
                                    [ Ty.path "u64" ]
                                ],
                                "mul_assign",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, inv |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::num::wrapping::Wrapping")
                                    []
                                    [ Ty.path "u64" ],
                                  M.get_trait_method (|
                                    "core::ops::arith::Sub",
                                    Ty.apply
                                      (Ty.path "core::num::wrapping::Wrapping")
                                      []
                                      [ Ty.path "u64" ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::num::wrapping::Wrapping")
                                        []
                                        [ Ty.path "u64" ]
                                    ],
                                    "sub",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      get_constant (|
                                        "ruint::mul::inv_ring::W2",
                                        Ty.apply
                                          (Ty.path "core::num::wrapping::Wrapping")
                                          []
                                          [ Ty.path "u64" ]
                                      |)
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::num::wrapping::Wrapping")
                                        []
                                        [ Ty.path "u64" ],
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Ty.apply
                                          (Ty.path "core::num::wrapping::Wrapping")
                                          []
                                          [ Ty.path "u64" ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::num::wrapping::Wrapping")
                                            []
                                            [ Ty.path "u64" ]
                                        ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [ M.read (| n |); M.read (| inv |) ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "core::ops::arith::MulAssign",
                                Ty.apply
                                  (Ty.path "core::num::wrapping::Wrapping")
                                  []
                                  [ Ty.path "u64" ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::num::wrapping::Wrapping")
                                    []
                                    [ Ty.path "u64" ]
                                ],
                                "mul_assign",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, inv |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::num::wrapping::Wrapping")
                                    []
                                    [ Ty.path "u64" ],
                                  M.get_trait_method (|
                                    "core::ops::arith::Sub",
                                    Ty.apply
                                      (Ty.path "core::num::wrapping::Wrapping")
                                      []
                                      [ Ty.path "u64" ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::num::wrapping::Wrapping")
                                        []
                                        [ Ty.path "u64" ]
                                    ],
                                    "sub",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      get_constant (|
                                        "ruint::mul::inv_ring::W2",
                                        Ty.apply
                                          (Ty.path "core::num::wrapping::Wrapping")
                                          []
                                          [ Ty.path "u64" ]
                                      |)
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::num::wrapping::Wrapping")
                                        []
                                        [ Ty.path "u64" ],
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Ty.apply
                                          (Ty.path "core::num::wrapping::Wrapping")
                                          []
                                          [ Ty.path "u64" ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::num::wrapping::Wrapping")
                                            []
                                            [ Ty.path "u64" ]
                                        ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [ M.read (| n |); M.read (| inv |) ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "core::ops::arith::MulAssign",
                                Ty.apply
                                  (Ty.path "core::num::wrapping::Wrapping")
                                  []
                                  [ Ty.path "u64" ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::num::wrapping::Wrapping")
                                    []
                                    [ Ty.path "u64" ]
                                ],
                                "mul_assign",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, inv |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::num::wrapping::Wrapping")
                                    []
                                    [ Ty.path "u64" ],
                                  M.get_trait_method (|
                                    "core::ops::arith::Sub",
                                    Ty.apply
                                      (Ty.path "core::num::wrapping::Wrapping")
                                      []
                                      [ Ty.path "u64" ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::num::wrapping::Wrapping")
                                        []
                                        [ Ty.path "u64" ]
                                    ],
                                    "sub",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      get_constant (|
                                        "ruint::mul::inv_ring::W2",
                                        Ty.apply
                                          (Ty.path "core::num::wrapping::Wrapping")
                                          []
                                          [ Ty.path "u64" ]
                                      |)
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::num::wrapping::Wrapping")
                                        []
                                        [ Ty.path "u64" ],
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Ty.apply
                                          (Ty.path "core::num::wrapping::Wrapping")
                                          []
                                          [ Ty.path "u64" ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::num::wrapping::Wrapping")
                                            []
                                            [ Ty.path "u64" ]
                                        ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [ M.read (| n |); M.read (| inv |) ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.alloc (|
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "core::ops::arith::MulAssign",
                                Ty.apply
                                  (Ty.path "core::num::wrapping::Wrapping")
                                  []
                                  [ Ty.path "u64" ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::num::wrapping::Wrapping")
                                    []
                                    [ Ty.path "u64" ]
                                ],
                                "mul_assign",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, inv |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::num::wrapping::Wrapping")
                                    []
                                    [ Ty.path "u64" ],
                                  M.get_trait_method (|
                                    "core::ops::arith::Sub",
                                    Ty.apply
                                      (Ty.path "core::num::wrapping::Wrapping")
                                      []
                                      [ Ty.path "u64" ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::num::wrapping::Wrapping")
                                        []
                                        [ Ty.path "u64" ]
                                    ],
                                    "sub",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      get_constant (|
                                        "ruint::mul::inv_ring::W2",
                                        Ty.apply
                                          (Ty.path "core::num::wrapping::Wrapping")
                                          []
                                          [ Ty.path "u64" ]
                                      |)
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::num::wrapping::Wrapping")
                                        []
                                        [ Ty.path "u64" ],
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Ty.apply
                                          (Ty.path "core::num::wrapping::Wrapping")
                                          []
                                          [ Ty.path "u64" ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::num::wrapping::Wrapping")
                                            []
                                            [ Ty.path "u64" ]
                                        ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [ M.read (| n |); M.read (| inv |) ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Some (Ty.tuple []),
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Some (Ty.tuple []),
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                M.call_closure (|
                                                  Ty.path "u64",
                                                  M.get_associated_function (|
                                                    Ty.path "u64",
                                                    "wrapping_mul",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        n,
                                                        "core::num::wrapping::Wrapping",
                                                        0
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        inv,
                                                        "core::num::wrapping::Wrapping",
                                                        0
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (| Value.Integer IntegerKind.U64 1 |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val := M.copy (| γ0_0 |) in
                                            let right_val := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              Some (Ty.tuple []),
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          UnOp.not (|
                                                            BinOp.eq (|
                                                              M.read (|
                                                                M.deref (| M.read (| left_val |) |)
                                                              |),
                                                              M.read (|
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          let~ kind :
                                                              Ty.path
                                                                "core::panicking::AssertKind" :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "never",
                                                              M.get_function (|
                                                                "core::panicking::assert_failed",
                                                                [],
                                                                [ Ty.path "u64"; Ty.path "u64" ]
                                                              |),
                                                              [
                                                                M.read (| kind |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        M.SubPointer.get_struct_tuple_field (|
                          inv,
                          "core::num::wrapping::Wrapping",
                          0
                        |)
                      |)
                    |)
                  |) in
                let~ correct_limbs : Ty.path "usize" :=
                  M.alloc (| Value.Integer IntegerKind.Usize 1 |) in
                let~ _ : Ty.tuple [] :=
                  M.loop (|
                    Ty.tuple [],
                    ltac:(M.monadic
                      (M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.lt (| M.read (| correct_limbs |), LIMBS |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_trait_method (|
                                      "core::ops::arith::MulAssign",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      [],
                                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                      "mul_assign",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.MutRef, result |);
                                      M.call_closure (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        M.get_trait_method (|
                                          "core::ops::arith::Sub",
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          [],
                                          [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                          "sub",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              "from",
                                              [],
                                              [ Ty.path "i32" ]
                                            |),
                                            [ Value.Integer IntegerKind.I32 2 ]
                                          |);
                                          M.call_closure (|
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            M.get_trait_method (|
                                              "core::ops::arith::Mul",
                                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                              [],
                                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              ],
                                              "mul",
                                              [],
                                              []
                                            |),
                                            [ M.read (| self |); M.read (| result |) ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.alloc (|
                                  let β := correct_limbs in
                                  M.write (|
                                    β,
                                    BinOp.Wrap.mul (|
                                      M.read (| β |),
                                      Value.Integer IntegerKind.Usize 2
                                    |)
                                  |)
                                |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |) in
                                    M.alloc (| Value.Tuple [] |)
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.alloc (|
                    let β :=
                      M.SubPointer.get_array_field (|
                        M.SubPointer.get_struct_record_field (| result, "ruint::Uint", "limbs" |),
                        BinOp.Wrap.sub (| LIMBS, Value.Integer IntegerKind.Usize 1 |)
                      |) in
                    M.write (|
                      β,
                      BinOp.bit_and
                        (M.read (| β |))
                        (M.read (|
                          get_associated_constant (|
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                            "MASK",
                            Ty.path "u64"
                          |)
                        |))
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::option::Option::Some" [ M.read (| result |) ] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_inv_ring :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "inv_ring" (inv_ring BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque inv_ring.
    
    (*
        pub fn widening_mul<
            const BITS_RHS: usize,
            const LIMBS_RHS: usize,
            const BITS_RES: usize,
            const LIMBS_RES: usize,
        >(
            self,
            rhs: Uint<BITS_RHS, LIMBS_RHS>,
        ) -> Uint<BITS_RES, LIMBS_RES> {
            assert_eq!(BITS_RES, BITS + BITS_RHS);
            assert_eq!(LIMBS_RES, nlimbs(BITS_RES));
            let mut result = Uint::<BITS_RES, LIMBS_RES>::ZERO;
            algorithms::addmul(&mut result.limbs, self.as_limbs(), rhs.as_limbs());
            if LIMBS_RES > 0 {
                debug_assert!(result.limbs[LIMBS_RES - 1] <= Uint::<BITS_RES, LIMBS_RES>::MASK);
            }
    
            result
        }
    *)
    Definition widening_mul
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [ BITS_RHS; LIMBS_RHS; BITS_RES; LIMBS_RES ], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (| Pointer.Kind.Ref, M.alloc (| BITS_RES |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (| BinOp.Wrap.add (| BITS, BITS_RHS |) |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      BinOp.eq (|
                                        M.read (| M.deref (| M.read (| left_val |) |) |),
                                        M.read (| M.deref (| M.read (| right_val |) |) |)
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind : Ty.path "core::panicking::AssertKind" :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (| Pointer.Kind.Ref, M.alloc (| LIMBS_RES |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_function (| "ruint::nlimbs", [], [] |),
                            [ BITS_RES ]
                          |)
                        |)
                      |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Some (Ty.tuple []),
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      BinOp.eq (|
                                        M.read (| M.deref (| M.read (| left_val |) |) |),
                                        M.read (| M.deref (| M.read (| right_val |) |) |)
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind : Ty.path "core::panicking::AssertKind" :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "usize"; Ty.path "usize" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple "core::option::Option::None" []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            let~ result : Ty.apply (Ty.path "ruint::Uint") [ BITS_RES; LIMBS_RES ] [] :=
              M.copy (|
                get_associated_constant (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS_RES; LIMBS_RES ] [],
                  "ZERO",
                  Ty.apply (Ty.path "ruint::Uint") [ BITS_RES; LIMBS_RES ] []
                |)
              |) in
            let~ _ : Ty.path "bool" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "bool",
                  M.get_function (| "ruint::algorithms::mul::addmul", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (| result, "ruint::Uint", "limbs" |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "array") [ LIMBS ] [ Ty.path "u64" ] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                            "as_limbs",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, self |) ]
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "array") [ LIMBS_RHS ] [ Ty.path "u64" ] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "ruint::Uint") [ BITS_RHS; LIMBS_RHS ] [],
                            "as_limbs",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, rhs |) ]
                        |)
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Some (Ty.tuple []),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.gt (| LIMBS_RES, Value.Integer IntegerKind.Usize 0 |)
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Some (Ty.tuple []),
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Value.Bool true |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Some (Ty.tuple []),
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.not (|
                                                  BinOp.le (|
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          result,
                                                          "ruint::Uint",
                                                          "limbs"
                                                        |),
                                                        BinOp.Wrap.sub (|
                                                          LIMBS_RES,
                                                          Value.Integer IntegerKind.Usize 1
                                                        |)
                                                      |)
                                                    |),
                                                    M.read (|
                                                      get_associated_constant (|
                                                        Ty.apply
                                                          (Ty.path "ruint::Uint")
                                                          [ BITS_RES; LIMBS_RES ]
                                                          [],
                                                        "MASK",
                                                        Ty.path "u64"
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::panic",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  mk_str (|
                                                    "assertion failed: result.limbs[LIMBS_RES - 1] <= Uint::<BITS_RES, LIMBS_RES>::MASK"
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            result
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_widening_mul :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "widening_mul" (widening_mul BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque widening_mul.
  End Impl_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_iter_traits_accum_Product_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn product<I>(iter: I) -> Self
        where
            I: Iterator<Item = Self>,
        {
            if BITS == 0 {
                return Self::ZERO;
            }
            iter.fold(Self::from(1), Self::wrapping_mul)
        }
    *)
    Definition product
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [ _ as I ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (| BITS, Value.Integer IntegerKind.Usize 0 |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.read (|
                                    get_associated_constant (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "ZERO",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      I,
                      [],
                      [],
                      "fold",
                      [],
                      [
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                        Ty.function
                          [
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                          ]
                          (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [])
                      ]
                    |),
                    [
                      M.read (| iter |);
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          "from",
                          [],
                          [ Ty.path "i32" ]
                        |),
                        [ Value.Integer IntegerKind.I32 1 ]
                      |);
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "wrapping_mul",
                        [],
                        []
                      |)
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::iter::traits::accum::Product"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("product", InstanceField.Method (product BITS LIMBS)) ].
  End Impl_core_iter_traits_accum_Product_ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_iter_traits_accum_Product_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        fn product<I>(iter: I) -> Self
        where
            I: Iterator<Item = &'a Self>,
        {
            if BITS == 0 {
                return Self::ZERO;
            }
            iter.copied().fold(Self::from(1), Self::wrapping_mul)
        }
    *)
    Definition product
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [ _ as I ], [ iter ] =>
        ltac:(M.monadic
          (let iter := M.alloc (| iter |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.eq (| BITS, Value.Integer IntegerKind.Usize 0 |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.read (|
                                    get_associated_constant (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "ZERO",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::iter::adapters::copied::Copied") [] [ I ],
                      [],
                      [],
                      "fold",
                      [],
                      [
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                        Ty.function
                          [
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                          ]
                          (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::iter::adapters::copied::Copied") [] [ I ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          I,
                          [],
                          [],
                          "copied",
                          [],
                          [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                        |),
                        [ M.read (| iter |) ]
                      |);
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          "from",
                          [],
                          [ Ty.path "i32" ]
                        |),
                        [ Value.Integer IntegerKind.I32 1 ]
                      |);
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "wrapping_mul",
                        [],
                        []
                      |)
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::iter::traits::accum::Product"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
        (Self BITS LIMBS)
        (* Instance *) [ ("product", InstanceField.Method (product BITS LIMBS)) ].
  End Impl_core_iter_traits_accum_Product_ref__ruint_Uint_BITS_LIMBS_for_ruint_Uint_BITS_LIMBS.
End mul.
