(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module root.
  Module Impl_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        pub fn root(self, degree: usize) -> Self {
            assert!(degree > 0, "degree must be greater than zero");
    
            // Handle zero case (including BITS == 0).
            if self == Self::ZERO {
                return Self::ZERO;
            }
    
            // Handle case where `degree > Self::BITS`.
            if degree >= Self::BITS {
                return Self::from(1);
            }
    
            // Handle case where `degree == 1`.
            if degree == 1 {
                return self;
            }
    
            // Create a first guess.
            // Root should be less than the value, so approx_pow2 should always succeed.
            #[allow(clippy::cast_precision_loss)] // Approximation is good enough.
            #[allow(clippy::cast_sign_loss)] // Result should be positive.
            let mut result = Self::approx_pow2(self.approx_log2() / degree as f64).unwrap();
    
            let deg_m1 = Self::from(degree - 1);
    
            // Iterate using Newton's method
            // See <https://en.wikipedia.org/wiki/Integer_square_root#Algorithm_using_Newton's_method>
            // See <https://gmplib.org/manual/Nth-Root-Algorithm>
            let mut decreasing = false;
            loop {
                // OPT: This could benefit from single-limb multiplication
                // and division.
                //
                // OPT: The division can be turned into bit-shifts when the degree is a power of
                // two.
                let division = result
                    .checked_pow(deg_m1)
                    .map_or(Self::ZERO, |power| self / power);
                let iter = (division + deg_m1 * result) / Self::from(degree);
                match (decreasing, iter.cmp(&result)) {
                    // Stop when we hit fix point or stop decreasing.
                    (_, Ordering::Equal) | (true, Ordering::Greater) => break result,
    
                    // When `degree` is high and the initial guess is less than or equal to the
                    // (small) true result, it takes a long time to converge. Example:
                    // 0x215f07147d573ef203e1f268ab1516d3f294619db820c5dfd0b334e4d06320b7_U256.
                    // root(196) takes 5918 iterations to converge from the initial guess of `2`.
                    // to the final result of `2`. This is because after the first iteration
                    // it jumps to `1533576856264507`. To fix this we cap the increase at `2x`.
                    // Once `result` exceeds the true result, it will converge downwards.
                    (false, Ordering::Greater) => result = min(iter, result.saturating_shl(1)),
    
                    // Converging downwards.
                    (_, Ordering::Less) => {
                        decreasing = true;
                        result = iter;
                    }
                }
            }
        }
    *)
    Definition root
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; degree ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let degree := M.alloc (| degree |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.gt,
                                    [ M.read (| degree |); Value.Integer IntegerKind.Usize 0 ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                [
                                  M.call_closure (|
                                    Ty.path "core::fmt::Arguments",
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_const",
                                      [ Value.Integer IntegerKind.Usize 1 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Value.Array
                                                [ mk_str (| "degree must be greater than zero" |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    [],
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, self |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      get_associated_constant (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        "ZERO",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.read (|
                                    get_associated_constant (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "ZERO",
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ge,
                                  [
                                    M.read (| degree |);
                                    M.read (|
                                      get_associated_constant (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        "BITS",
                                        Ty.path "usize"
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      "from",
                                      [],
                                      [ Ty.path "i32" ]
                                    |),
                                    [ Value.Integer IntegerKind.I32 1 ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [ M.read (| degree |); Value.Integer IntegerKind.Usize 1 ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (| M.read (| M.return_ (| M.read (| self |) |) |) |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ result : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                        "unwrap",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                            "approx_pow2",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "f64",
                              BinOp.Wrap.div,
                              [
                                M.call_closure (|
                                  Ty.path "f64",
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    "approx_log2",
                                    [],
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |);
                                M.cast (Ty.path "f64") (M.read (| degree |))
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let~ deg_m1 : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "from",
                        [],
                        [ Ty.path "usize" ]
                      |),
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [ M.read (| degree |); Value.Integer IntegerKind.Usize 1 ]
                        |)
                      ]
                    |)
                  |) in
                let~ decreasing : Ty.path "bool" := M.alloc (| Value.Bool false |) in
                M.loop (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  ltac:(M.monadic
                    (let~ division : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                            "map_or",
                            [],
                            [
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] ]
                                (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [])
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                "checked_pow",
                                [],
                                []
                              |),
                              [ M.read (| result |); M.read (| deg_m1 |) ]
                            |);
                            M.read (|
                              get_associated_constant (|
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                "ZERO",
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                              |)
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Some
                                          (Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    []
                                                ]
                                            ]
                                            (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [])),
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let power := M.copy (| γ |) in
                                              M.call_closure (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                M.get_trait_method (|
                                                  "core::ops::arith::Div",
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    [],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [ BITS; LIMBS ]
                                                      []
                                                  ],
                                                  "div",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| self |); M.read (| power |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      |) in
                    let~ iter : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          M.get_trait_method (|
                            "core::ops::arith::Div",
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                            [],
                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                            "div",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                [],
                                [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                "add",
                                [],
                                []
                              |),
                              [
                                M.read (| division |);
                                M.call_closure (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    [],
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                    "mul",
                                    [],
                                    []
                                  |),
                                  [ M.read (| deg_m1 |); M.read (| result |) ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                "from",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [ M.read (| degree |) ]
                            |)
                          ]
                        |)
                      |) in
                    M.match_operator (|
                      Some (Ty.tuple []),
                      M.alloc (|
                        Value.Tuple
                          [
                            M.read (| decreasing |);
                            M.call_closure (|
                              Ty.path "core::cmp::Ordering",
                              M.get_trait_method (|
                                "core::cmp::Ord",
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                [],
                                [],
                                "cmp",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, iter |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, result |) |)
                                |)
                              ]
                            |)
                          ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.find_or_pattern (|
                              γ,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let _ :=
                                      M.is_struct_tuple (| γ0_1, "core::cmp::Ordering::Equal" |) in
                                    Value.Tuple []));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ0_0 |),
                                        Value.Bool true
                                      |) in
                                    let _ :=
                                      M.is_struct_tuple (|
                                        γ0_1,
                                        "core::cmp::Ordering::Greater"
                                      |) in
                                    Value.Tuple []))
                              ],
                              fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [] =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let _ :=
                              is_constant_or_break_match (|
                                M.read (| γ0_0 |),
                                Value.Bool false
                              |) in
                            let _ := M.is_struct_tuple (| γ0_1, "core::cmp::Ordering::Greater" |) in
                            M.alloc (|
                              M.write (|
                                result,
                                M.call_closure (|
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                  M.get_function (|
                                    "core::cmp::min",
                                    [],
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                                  |),
                                  [
                                    M.read (| iter |);
                                    M.call_closure (|
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        "saturating_shl",
                                        [],
                                        []
                                      |),
                                      [ M.read (| result |); Value.Integer IntegerKind.Usize 1 ]
                                    |)
                                  ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let _ := M.is_struct_tuple (| γ0_1, "core::cmp::Ordering::Less" |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (| M.write (| decreasing, Value.Bool true |) |) in
                            let~ _ : Ty.tuple [] :=
                              M.alloc (| M.write (| result, M.read (| iter |) |) |) in
                            M.alloc (| Value.Tuple [] |)))
                      ]
                    |)))
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_root :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "root" (root BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque root.
  End Impl_ruint_Uint_BITS_LIMBS.
End root.
