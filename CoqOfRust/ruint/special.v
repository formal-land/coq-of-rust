(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module special.
  Module Impl_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        pub fn is_power_of_two(self) -> bool {
            self.count_ones() == 1
        }
    *)
    Definition is_power_of_two
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "bool",
            BinOp.eq,
            [
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "count_ones",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, self |) ]
              |);
              Value.Integer IntegerKind.Usize 1
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_power_of_two :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "is_power_of_two" (is_power_of_two BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque is_power_of_two.
    
    (*
        pub fn next_power_of_two(self) -> Self {
            self.checked_next_power_of_two().unwrap()
        }
    *)
    Definition next_power_of_two
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
              "unwrap",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                M.get_associated_function (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  "checked_next_power_of_two",
                  [],
                  []
                |),
                [ M.read (| self |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_next_power_of_two :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "next_power_of_two" (next_power_of_two BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque next_power_of_two.
    
    (*
        pub fn checked_next_power_of_two(self) -> Option<Self> {
            if self.is_power_of_two() {
                return Some(self);
            }
            let exp = self.bit_len();
            if exp >= BITS {
                return None;
            }
            Some(Self::from(1) << exp)
        }
    *)
    Definition checked_next_power_of_two
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    "is_power_of_two",
                                    [],
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::option::Option::Some"
                                    []
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                                    [ M.read (| self |) ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ exp : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "bit_len",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, self |) ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ge,
                                  [ M.read (| exp |); BITS ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::option::Option::None"
                                    []
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                                    []
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::option::Option::Some"
                    []
                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        M.get_trait_method (|
                          "core::ops::bit::Shl",
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          [],
                          [ Ty.path "usize" ],
                          "shl",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                              "from",
                              [],
                              [ Ty.path "i32" ]
                            |),
                            [ Value.Integer IntegerKind.I32 1 ]
                          |);
                          M.read (| exp |)
                        ]
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_checked_next_power_of_two :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C
        (Self BITS LIMBS)
        "checked_next_power_of_two"
        (checked_next_power_of_two BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque checked_next_power_of_two.
    (*
        pub fn next_multiple_of(self, rhs: Self) -> Self {
            self.checked_next_multiple_of(rhs).unwrap();
            todo!()
        }
    *)
    Definition next_multiple_of
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            let~ _ :
                Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "checked_next_multiple_of",
                        [],
                        []
                      |),
                      [ M.read (| self |); M.read (| rhs |) ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.never_to_any (|
                M.call_closure (|
                  Ty.path "never",
                  M.get_function (| "core::panicking::panic", [], [] |),
                  [ mk_str (| "not yet implemented" |) ]
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_next_multiple_of :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "next_multiple_of" (next_multiple_of BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque next_multiple_of.
    
    (*
        pub fn checked_next_multiple_of(self, rhs: Self) -> Option<Self> {
            if rhs == Self::ZERO {
                return None;
            }
            let (q, r) = self.div_rem(rhs);
            if r == Self::ZERO {
                return Some(self);
            }
            let q = q.checked_add(Self::from(1))?;
            q.checked_mul(rhs)
        }
    *)
    Definition checked_next_multiple_of
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::option::Option")
              []
              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                    [],
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, rhs |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      get_associated_constant (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        "ZERO",
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                      |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::option::Option::None"
                                    []
                                    [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                                    []
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.match_operator (|
                  Ty.apply
                    (Ty.path "*")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                    ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                        "div_rem",
                        [],
                        []
                      |),
                      [ M.read (| self |); M.read (| rhs |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let q := M.copy (| γ0_0 |) in
                        let r := M.copy (| γ0_1 |) in
                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_trait_method (|
                                            "core::cmp::PartialEq",
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            [],
                                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                            "eq",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.Ref, r |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              get_associated_constant (|
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                                "ZERO",
                                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            []
                                            [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ]
                                            [ M.read (| self |) ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let~ q :
                            Ty.apply
                              (Ty.path "*")
                              []
                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ] :=
                          M.copy (|
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "core::convert::Infallible" ];
                                      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                        "checked_add",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (| q |);
                                        M.call_closure (|
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                            "from",
                                            [],
                                            [ Ty.path "i32" ]
                                          |),
                                          [ Value.Integer IntegerKind.I32 1 ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "ruint::Uint")
                                                    [ BITS; LIMBS ]
                                                    []
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "ruint::Uint")
                                                      [ BITS; LIMBS ]
                                                      []
                                                  ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Ty.path "core::convert::Infallible" ]
                                                ],
                                                "from_residual",
                                                [],
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                              "checked_mul",
                              [],
                              []
                            |),
                            [ M.read (| q |); M.read (| rhs |) ]
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_checked_next_multiple_of :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C
        (Self BITS LIMBS)
        "checked_next_multiple_of"
        (checked_next_multiple_of BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque checked_next_multiple_of.
  End Impl_ruint_Uint_BITS_LIMBS.
  
End special.
