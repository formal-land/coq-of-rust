(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module string.
  (*
  Enum ParseError
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "InvalidDigit";
          item := StructTuple [ Ty.path "char" ];
        };
        {
          name := "InvalidRadix";
          item := StructTuple [ Ty.path "u64" ];
        };
        {
          name := "BaseConvertError";
          item := StructTuple [ Ty.path "ruint::base_convert::BaseConvertError" ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_ParseError_InvalidDigit :
    M.IsDiscriminant "ruint::string::ParseError::InvalidDigit" 0.
  Axiom IsDiscriminant_ParseError_InvalidRadix :
    M.IsDiscriminant "ruint::string::ParseError::InvalidRadix" 1.
  Axiom IsDiscriminant_ParseError_BaseConvertError :
    M.IsDiscriminant "ruint::string::ParseError::BaseConvertError" 2.
  
  Module Impl_core_fmt_Debug_for_ruint_string_ParseError.
    Definition Self : Ty.t := Ty.path "ruint::string::ParseError".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ]),
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::string::ParseError::InvalidDigit",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "InvalidDigit" |) |)
                          |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::string::ParseError::InvalidRadix",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "InvalidRadix" |) |)
                          |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |))
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::string::ParseError::BaseConvertError",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BaseConvertError" |) |)
                          |);
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |))
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_ruint_string_ParseError.
  
  Module Impl_core_marker_Copy_for_ruint_string_ParseError.
    Definition Self : Ty.t := Ty.path "ruint::string::ParseError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_ruint_string_ParseError.
  
  Module Impl_core_clone_Clone_for_ruint_string_ParseError.
    Definition Self : Ty.t := Ty.path "ruint::string::ParseError".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              None,
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      None,
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              None,
                              Value.DeclaredButUndefined,
                              [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_ruint_string_ParseError.
  
  Module Impl_core_marker_StructuralPartialEq_for_ruint_string_ParseError.
    Definition Self : Ty.t := Ty.path "ruint::string::ParseError".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_ruint_string_ParseError.
  
  Module Impl_core_cmp_PartialEq_ruint_string_ParseError_for_ruint_string_ParseError.
    Definition Self : Ty.t := Ty.path "ruint::string::ParseError".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "ruint::string::ParseError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr : Ty.path "isize" :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "ruint::string::ParseError" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (|
              LogicalOp.and (|
                M.call_closure (|
                  Ty.path "bool",
                  BinOp.eq,
                  [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
                |),
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      Some (Ty.path "bool"),
                      M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "ruint::string::ParseError::InvalidDigit",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "ruint::string::ParseError::InvalidDigit",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply (Ty.path "&") [] [ Ty.path "char" ],
                                  [],
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "char" ] ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                  M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "ruint::string::ParseError::InvalidRadix",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "ruint::string::ParseError::InvalidRadix",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply (Ty.path "&") [] [ Ty.path "u64" ],
                                  [],
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                  M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "ruint::string::ParseError::BaseConvertError",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "ruint::string::ParseError::BaseConvertError",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "ruint::base_convert::BaseConvertError" ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "ruint::base_convert::BaseConvertError" ]
                                  ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                  M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::intrinsics::unreachable", [], [] |),
                                  []
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)))
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "ruint::string::ParseError" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_ruint_string_ParseError_for_ruint_string_ParseError.
  
  Module Impl_core_cmp_Eq_for_ruint_string_ParseError.
    Definition Self : Ty.t := Ty.path "ruint::string::ParseError".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              None,
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      None,
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              None,
                              Value.DeclaredButUndefined,
                              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_ruint_string_ParseError.
  
  Module Impl_core_error_Error_for_ruint_string_ParseError.
    Definition Self : Ty.t := Ty.path "ruint::string::ParseError".
    
    (*
        fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
            match self {
                Self::BaseConvertError(e) => Some(e),
                _ => None,
            }
        }
    *)
    Definition source (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]),
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::string::ParseError::BaseConvertError",
                        0
                      |) in
                    let e := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::option::Option::Some"
                        [
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| e |) |) |))
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic (M.alloc (| Value.StructTuple "core::option::Option::None" [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::error::Error"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("source", InstanceField.Method source) ].
  End Impl_core_error_Error_for_ruint_string_ParseError.
  
  Module Impl_core_convert_From_ruint_base_convert_BaseConvertError_for_ruint_string_ParseError.
    Definition Self : Ty.t := Ty.path "ruint::string::ParseError".
    
    (*
        fn from(value: BaseConvertError) -> Self {
            Self::BaseConvertError(value)
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          Value.StructTuple "ruint::string::ParseError::BaseConvertError" [ M.read (| value |) ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "ruint::base_convert::BaseConvertError" ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_ruint_base_convert_BaseConvertError_for_ruint_string_ParseError.
  
  Module Impl_core_fmt_Display_for_ruint_string_ParseError.
    Definition Self : Ty.t := Ty.path "ruint::string::ParseError".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            match self {
                Self::BaseConvertError(e) => e.fmt(f),
                Self::InvalidDigit(c) => write!(f, "invalid digit: {c}"),
                Self::InvalidRadix(r) => write!(f, "invalid radix {r}, up to 64 is supported"),
            }
        }
    *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              Some
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ]),
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::string::ParseError::BaseConvertError",
                        0
                      |) in
                    let e := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_trait_method (|
                          "core::fmt::Display",
                          Ty.path "ruint::base_convert::BaseConvertError",
                          [],
                          [],
                          "fmt",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| e |) |) |);
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::string::ParseError::InvalidDigit",
                        0
                      |) in
                    let c := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                              ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (| Value.Array [ mk_str (| "invalid digit: " |) ] |)
                                  |)
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::rt::Argument",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [],
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "char" ] ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, c |) |)
                                              |)
                                            ]
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "ruint::string::ParseError::InvalidRadix",
                        0
                      |) in
                    let r := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 1
                              ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          mk_str (| "invalid radix " |);
                                          mk_str (| ", up to 64 is supported" |)
                                        ]
                                    |)
                                  |)
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::rt::Argument",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [],
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "u64" ] ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.borrow (| Pointer.Kind.Ref, r |) |)
                                              |)
                                            ]
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_ruint_string_ParseError.
  
  Module Impl_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*
        pub fn from_str_radix(src: &str, radix: u64) -> Result<Self, ParseError> {
            if radix > 64 {
                return Err(ParseError::InvalidRadix(radix));
            }
            let mut err = None;
            let digits = src.chars().filter_map(|c| {
                if err.is_some() {
                    return None;
                }
                let digit = if radix <= 36 {
                    // Case insensitive 0—9, a—z.
                    match c {
                        '0'..='9' => u64::from(c) - u64::from('0'),
                        'a'..='z' => u64::from(c) - u64::from('a') + 10,
                        'A'..='Z' => u64::from(c) - u64::from('A') + 10,
                        '_' => return None, // Ignored character.
                        _ => {
                            err = Some(ParseError::InvalidDigit(c));
                            return None;
                        }
                    }
                } else {
                    // The Base-64 alphabets
                    match c {
                        'A'..='Z' => u64::from(c) - u64::from('A'),
                        'a'..='f' => u64::from(c) - u64::from('a') + 26,
                        '0'..='9' => u64::from(c) - u64::from('0') + 52,
                        '+' | '-' => 62,
                        '/' | ',' | '_' => 63,
                        '=' | '\r' | '\n' => return None, // Ignored characters.
                        _ => {
                            err = Some(ParseError::InvalidDigit(c));
                            return None;
                        }
                    }
                };
                Some(digit)
            });
            let value = Self::from_base_be(radix, digits)?;
            err.map_or(Ok(value), Err)
        }
    *)
    Definition from_str_radix
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ src; radix ] =>
        ltac:(M.monadic
          (let src := M.alloc (| src |) in
          let radix := M.alloc (| radix |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Some (Ty.tuple []),
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.gt,
                                  [ M.read (| radix |); Value.Integer IntegerKind.U64 64 ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "ruint::string::ParseError::InvalidRadix"
                                        [ M.read (| radix |) ]
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ err :
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.path "ruint::string::ParseError" ] :=
                  M.alloc (| Value.StructTuple "core::option::Option::None" [] |) in
                let~ digits :
                    Ty.apply
                      (Ty.path "core::iter::adapters::filter_map::FilterMap")
                      []
                      [
                        Ty.path "core::str::iter::Chars";
                        Ty.function
                          [ Ty.tuple [ Ty.path "char" ] ]
                          (Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ])
                      ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::filter_map::FilterMap")
                        []
                        [
                          Ty.path "core::str::iter::Chars";
                          Ty.function
                            [ Ty.tuple [ Ty.path "char" ] ]
                            (Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.path "core::str::iter::Chars",
                        [],
                        [],
                        "filter_map",
                        [],
                        [
                          Ty.path "u64";
                          Ty.function
                            [ Ty.tuple [ Ty.path "char" ] ]
                            (Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u64" ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.path "core::str::iter::Chars",
                          M.get_associated_function (| Ty.path "str", "chars", [], [] |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| src |) |) |) ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Some
                                      (Ty.function
                                        [ Ty.tuple [ Ty.path "char" ] ]
                                        (Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "u64" ])),
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let c := M.copy (| γ |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Some (Ty.tuple []),
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "ruint::string::ParseError"
                                                                  ],
                                                                "is_some",
                                                                [],
                                                                []
                                                              |),
                                                              [ M.borrow (| Pointer.Kind.Ref, err |)
                                                              ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              Value.StructTuple
                                                                "core::option::Option::None"
                                                                []
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            let~ digit : Ty.path "u64" :=
                                              M.copy (|
                                                M.match_operator (|
                                                  Some (Ty.path "u64"),
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.le,
                                                                [
                                                                  M.read (| radix |);
                                                                  Value.Integer IntegerKind.U64 36
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.match_operator (|
                                                          Some (Ty.path "u64"),
                                                          c,
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "u64",
                                                                    BinOp.Wrap.sub,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "u64",
                                                                        M.get_trait_method (|
                                                                          "core::convert::From",
                                                                          Ty.path "u64",
                                                                          [],
                                                                          [ Ty.path "char" ],
                                                                          "from",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [ M.read (| c |) ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        Ty.path "u64",
                                                                        M.get_trait_method (|
                                                                          "core::convert::From",
                                                                          Ty.path "u64",
                                                                          [],
                                                                          [ Ty.path "char" ],
                                                                          "from",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [ Value.UnicodeChar 48 ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "u64",
                                                                    BinOp.Wrap.add,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "u64",
                                                                        BinOp.Wrap.sub,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "u64",
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              Ty.path "u64",
                                                                              [],
                                                                              [ Ty.path "char" ],
                                                                              "from",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [ M.read (| c |) ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path "u64",
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              Ty.path "u64",
                                                                              [],
                                                                              [ Ty.path "char" ],
                                                                              "from",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [ Value.UnicodeChar 97 ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.U64
                                                                        10
                                                                    ]
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "u64",
                                                                    BinOp.Wrap.add,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "u64",
                                                                        BinOp.Wrap.sub,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "u64",
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              Ty.path "u64",
                                                                              [],
                                                                              [ Ty.path "char" ],
                                                                              "from",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [ M.read (| c |) ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path "u64",
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              Ty.path "u64",
                                                                              [],
                                                                              [ Ty.path "char" ],
                                                                              "from",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [ Value.UnicodeChar 65 ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.U64
                                                                        10
                                                                    ]
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.UnicodeChar 95
                                                                  |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      M.return_ (|
                                                                        Value.StructTuple
                                                                          "core::option::Option::None"
                                                                          []
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.alloc (|
                                                                          M.write (|
                                                                            err,
                                                                            Value.StructTuple
                                                                              "core::option::Option::Some"
                                                                              [
                                                                                Value.StructTuple
                                                                                  "ruint::string::ParseError::InvalidDigit"
                                                                                  [ M.read (| c |) ]
                                                                              ]
                                                                          |)
                                                                        |) in
                                                                      M.return_ (|
                                                                        Value.StructTuple
                                                                          "core::option::Option::None"
                                                                          []
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)))
                                                          ]
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Some (Ty.path "u64"),
                                                          c,
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "u64",
                                                                    BinOp.Wrap.sub,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "u64",
                                                                        M.get_trait_method (|
                                                                          "core::convert::From",
                                                                          Ty.path "u64",
                                                                          [],
                                                                          [ Ty.path "char" ],
                                                                          "from",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [ M.read (| c |) ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        Ty.path "u64",
                                                                        M.get_trait_method (|
                                                                          "core::convert::From",
                                                                          Ty.path "u64",
                                                                          [],
                                                                          [ Ty.path "char" ],
                                                                          "from",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [ Value.UnicodeChar 65 ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "u64",
                                                                    BinOp.Wrap.add,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "u64",
                                                                        BinOp.Wrap.sub,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "u64",
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              Ty.path "u64",
                                                                              [],
                                                                              [ Ty.path "char" ],
                                                                              "from",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [ M.read (| c |) ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path "u64",
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              Ty.path "u64",
                                                                              [],
                                                                              [ Ty.path "char" ],
                                                                              "from",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [ Value.UnicodeChar 97 ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.U64
                                                                        26
                                                                    ]
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    Ty.path "u64",
                                                                    BinOp.Wrap.add,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "u64",
                                                                        BinOp.Wrap.sub,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "u64",
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              Ty.path "u64",
                                                                              [],
                                                                              [ Ty.path "char" ],
                                                                              "from",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [ M.read (| c |) ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path "u64",
                                                                            M.get_trait_method (|
                                                                              "core::convert::From",
                                                                              Ty.path "u64",
                                                                              [],
                                                                              [ Ty.path "char" ],
                                                                              "from",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [ Value.UnicodeChar 48 ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.U64
                                                                        52
                                                                    ]
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.find_or_pattern (|
                                                                  γ,
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let _ :=
                                                                          is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.UnicodeChar 43
                                                                          |) in
                                                                        Value.Tuple []));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let _ :=
                                                                          is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.UnicodeChar 45
                                                                          |) in
                                                                        Value.Tuple []))
                                                                  ],
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      match γ with
                                                                      | [] =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            Value.Integer
                                                                              IntegerKind.U64
                                                                              62
                                                                          |)))
                                                                      | _ =>
                                                                        M.impossible
                                                                          "wrong number of arguments"
                                                                      end)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.find_or_pattern (|
                                                                  γ,
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let _ :=
                                                                          is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.UnicodeChar 47
                                                                          |) in
                                                                        Value.Tuple []));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let _ :=
                                                                          is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.UnicodeChar 44
                                                                          |) in
                                                                        Value.Tuple []));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let _ :=
                                                                          is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.UnicodeChar 95
                                                                          |) in
                                                                        Value.Tuple []))
                                                                  ],
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      match γ with
                                                                      | [] =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            Value.Integer
                                                                              IntegerKind.U64
                                                                              63
                                                                          |)))
                                                                      | _ =>
                                                                        M.impossible
                                                                          "wrong number of arguments"
                                                                      end)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.find_or_pattern (|
                                                                  γ,
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let _ :=
                                                                          is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.UnicodeChar 61
                                                                          |) in
                                                                        Value.Tuple []));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let _ :=
                                                                          is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.UnicodeChar 13
                                                                          |) in
                                                                        Value.Tuple []));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let _ :=
                                                                          is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.UnicodeChar 10
                                                                          |) in
                                                                        Value.Tuple []))
                                                                  ],
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      match γ with
                                                                      | [] =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.return_ (|
                                                                                  Value.StructTuple
                                                                                    "core::option::Option::None"
                                                                                    []
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)))
                                                                      | _ =>
                                                                        M.impossible
                                                                          "wrong number of arguments"
                                                                      end)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.alloc (|
                                                                          M.write (|
                                                                            err,
                                                                            Value.StructTuple
                                                                              "core::option::Option::Some"
                                                                              [
                                                                                Value.StructTuple
                                                                                  "ruint::string::ParseError::InvalidDigit"
                                                                                  [ M.read (| c |) ]
                                                                              ]
                                                                          |)
                                                                        |) in
                                                                      M.return_ (|
                                                                        Value.StructTuple
                                                                          "core::option::Option::None"
                                                                          []
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (|
                                              Value.StructTuple
                                                "core::option::Option::Some"
                                                [ M.read (| digit |) ]
                                            |)
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  |) in
                let~ value : Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [] :=
                  M.copy (|
                    M.match_operator (|
                      Some (Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []),
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "ruint::base_convert::BaseConvertError"
                                ];
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                                Ty.path "ruint::base_convert::BaseConvertError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                                  Ty.path "ruint::base_convert::BaseConvertError"
                                ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                                "from_base_be",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                    []
                                    [
                                      Ty.path "core::str::iter::Chars";
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "char" ] ]
                                        (Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "u64" ])
                                    ]
                                ]
                              |),
                              [ M.read (| radix |); M.read (| digits |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                                          Ty.path "ruint::string::ParseError"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                                            Ty.path "ruint::string::ParseError"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "ruint::base_convert::BaseConvertError"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                        Ty.path "ruint::string::ParseError"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.path "ruint::string::ParseError" ],
                      "map_or",
                      [],
                      [
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                            Ty.path "ruint::string::ParseError"
                          ];
                        Ty.function
                          [ Ty.path "ruint::string::ParseError" ]
                          (Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                              Ty.path "ruint::string::ParseError"
                            ])
                      ]
                    |),
                    [
                      M.read (| err |);
                      Value.StructTuple "core::result::Result::Ok" [ M.read (| value |) ];
                      M.constructor_as_closure "core::result::Result::Err"
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_from_str_radix :
      forall (BITS LIMBS : Value.t),
      M.IsAssociatedFunction.C (Self BITS LIMBS) "from_str_radix" (from_str_radix BITS LIMBS).
    Admitted.
    Global Typeclasses Opaque from_str_radix.
  End Impl_ruint_Uint_BITS_LIMBS.
  
  Module Impl_core_str_traits_FromStr_for_ruint_Uint_BITS_LIMBS.
    Definition Self (BITS LIMBS : Value.t) : Ty.t :=
      Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [].
    
    (*     type Err = ParseError; *)
    Definition _Err (BITS LIMBS : Value.t) : Ty.t := Ty.path "ruint::string::ParseError".
    
    (*
        fn from_str(src: &str) -> Result<Self, Self::Err> {
            let (src, radix) = if src.is_char_boundary(2) {
                let (prefix, rest) = src.split_at(2);
                match prefix {
                    "0x" | "0X" => (rest, 16),
                    "0o" | "0O" => (rest, 8),
                    "0b" | "0B" => (rest, 2),
                    _ => (src, 10),
                }
            } else {
                (src, 10)
            };
            Self::from_str_radix(src, radix)
        }
    *)
    Definition from_str
        (BITS LIMBS : Value.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self BITS LIMBS in
      match ε, τ, α with
      | [], [], [ src ] =>
        ltac:(M.monadic
          (let src := M.alloc (| src |) in
          M.read (|
            M.match_operator (|
              None,
              M.match_operator (|
                Some (Ty.tuple [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ]; Ty.path "u64" ]),
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_associated_function (|
                                Ty.path "str",
                                "is_char_boundary",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| src |) |) |);
                                Value.Integer IntegerKind.Usize 2
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.match_operator (|
                        None,
                        M.alloc (|
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                                Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                              ],
                            M.get_associated_function (| Ty.path "str", "split_at", [], [] |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| src |) |) |);
                              Value.Integer IntegerKind.Usize 2
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let prefix := M.copy (| γ0_0 |) in
                              let rest := M.copy (| γ0_1 |) in
                              M.match_operator (|
                                Some
                                  (Ty.tuple
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ]; Ty.path "u64" ]),
                                prefix,
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.find_or_pattern (|
                                        γ,
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  mk_str (| "0x" |)
                                                |) in
                                              Value.Tuple []));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  mk_str (| "0X" |)
                                                |) in
                                              Value.Tuple []))
                                        ],
                                        fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [] =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.Tuple
                                                    [
                                                      M.read (| rest |);
                                                      Value.Integer IntegerKind.U64 16
                                                    ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.find_or_pattern (|
                                        γ,
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  mk_str (| "0o" |)
                                                |) in
                                              Value.Tuple []));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  mk_str (| "0O" |)
                                                |) in
                                              Value.Tuple []))
                                        ],
                                        fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [] =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.Tuple
                                                    [
                                                      M.read (| rest |);
                                                      Value.Integer IntegerKind.U64 8
                                                    ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.find_or_pattern (|
                                        γ,
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  mk_str (| "0b" |)
                                                |) in
                                              Value.Tuple []));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  mk_str (| "0B" |)
                                                |) in
                                              Value.Tuple []))
                                        ],
                                        fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [] =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.Tuple
                                                    [
                                                      M.read (| rest |);
                                                      Value.Integer IntegerKind.U64 2
                                                    ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        Value.Tuple
                                          [ M.read (| src |); Value.Integer IntegerKind.U64 10 ]
                                      |)))
                                ]
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.Tuple [ M.read (| src |); Value.Integer IntegerKind.U64 10 ]
                      |)))
                ]
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let src := M.copy (| γ0_0 |) in
                    let radix := M.copy (| γ0_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [];
                            Ty.path "ruint::string::ParseError"
                          ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "ruint::Uint") [ BITS; LIMBS ] [],
                          "from_str_radix",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| src |) |) |);
                          M.read (| radix |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      forall (BITS LIMBS : Value.t),
      M.IsTraitInstance
        "core::str::traits::FromStr"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        (Self BITS LIMBS)
        (* Instance *)
        [
          ("Err", InstanceField.Ty (_Err BITS LIMBS));
          ("from_str", InstanceField.Method (from_str BITS LIMBS))
        ].
  End Impl_core_str_traits_FromStr_for_ruint_Uint_BITS_LIMBS.
End string.
