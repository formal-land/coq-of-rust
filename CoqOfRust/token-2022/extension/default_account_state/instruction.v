(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module extension.
  Module default_account_state.
    Module instruction.
      (*
      Enum DefaultAccountStateInstruction
      {
        ty_params := [];
        variants :=
          [
            {
              name := "Initialize";
              item := StructTuple [];
              discriminant := None;
            };
            {
              name := "Update";
              item := StructTuple [];
              discriminant := None;
            }
          ];
      }
      *)
      
      Module Impl_core_clone_Clone_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
        Definition Self : Ty.t :=
          Ty.path
            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction".
        
        (* Clone *)
        Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.read (| M.read (| self |) |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
      
      Module Impl_core_marker_Copy_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
        Definition Self : Ty.t :=
          Ty.path
            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::Copy"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_core_marker_Copy_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
      
      Module Impl_core_fmt_Debug_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
        Definition Self : Ty.t :=
          Ty.path
            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
                [
                  M.read (| f |);
                  M.read (|
                    M.match_operator (|
                      self,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            M.alloc (| M.read (| Value.String "Initialize" |) |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            M.alloc (| M.read (| Value.String "Update" |) |)))
                      ]
                    |)
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
      
      Module Impl_core_marker_StructuralPartialEq_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
        Definition Self : Ty.t :=
          Ty.path
            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
      
      Module Impl_core_cmp_PartialEq_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
        Definition Self : Ty.t :=
          Ty.path
            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction".
        
        (* PartialEq *)
        Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; other ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let other := M.alloc (| other |) in
              M.read (|
                let __self_tag :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "core::intrinsics::discriminant_value",
                        [
                          Ty.path
                            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction"
                        ]
                      |),
                      [ M.read (| self |) ]
                    |)
                  |) in
                let __arg1_tag :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "core::intrinsics::discriminant_value",
                        [
                          Ty.path
                            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction"
                        ]
                      |),
                      [ M.read (| other |) ]
                    |)
                  |) in
                M.alloc (| BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)) |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::PartialEq"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("eq", InstanceField.Method eq) ].
      End Impl_core_cmp_PartialEq_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
      
      Module Impl_core_convert_From_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction_for_u8.
        Definition Self : Ty.t := Ty.path "u8".
        
        (* IntoPrimitive *)
        Definition from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ enum_value ] =>
            ltac:(M.monadic
              (let enum_value := M.alloc (| enum_value |) in
              M.rust_cast (M.read (| enum_value |))))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::From"
            Self
            (* Trait polymorphic types *)
            [
              (* T *)
              Ty.path
                "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction"
            ]
            (* Instance *) [ ("from", InstanceField.Method from) ].
      End Impl_core_convert_From_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction_for_u8.
      
      Module Impl_num_enum_TryFromPrimitive_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
        Definition Self : Ty.t :=
          Ty.path
            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction".
        
        (* TryFromPrimitive *)
        Definition _Primitive : Ty.t := Ty.path "u8".
        
        (* TryFromPrimitive *)
        Definition _Error : Ty.t :=
          Ty.apply
            (Ty.path "num_enum::TryFromPrimitiveError")
            [
              Ty.path
                "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction"
            ].
        
        (* TryFromPrimitive *)
        (* Ty.apply (Ty.path "&") [ Ty.path "str" ] *)
        Definition value_NAME : Value.t :=
          M.run ltac:(M.monadic (Value.String "DefaultAccountStateInstruction")).
        
        (* TryFromPrimitive *)
        Definition try_from_primitive (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ number ] =>
            ltac:(M.monadic
              (let number := M.alloc (| number |) in
              M.read (|
                M.match_operator (|
                  number,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 0 |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructTuple
                                "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction::Initialize"
                                []
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Integer 1 |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructTuple
                                "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction::Update"
                                []
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Err"
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "num_enum::TryFromPrimitiveError")
                                    [
                                      Ty.path
                                        "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction"
                                    ],
                                  "new",
                                  []
                                |),
                                [ M.read (| number |) ]
                              |)
                            ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "num_enum::TryFromPrimitive"
            Self
            (* Trait polymorphic types *) []
            (* Instance *)
            [
              ("Primitive", InstanceField.Ty _Primitive);
              ("Error", InstanceField.Ty _Error);
              ("value_NAME", InstanceField.Constant value_NAME);
              ("try_from_primitive", InstanceField.Method try_from_primitive)
            ].
      End Impl_num_enum_TryFromPrimitive_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
      
      Module Impl_core_convert_TryFrom_u8_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
        Definition Self : Ty.t :=
          Ty.path
            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction".
        
        (* TryFromPrimitive *)
        Definition _Error : Ty.t :=
          Ty.apply
            (Ty.path "num_enum::TryFromPrimitiveError")
            [
              Ty.path
                "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction"
            ].
        
        (* TryFromPrimitive *)
        Definition try_from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ number ] =>
            ltac:(M.monadic
              (let number := M.alloc (| number |) in
              M.call_closure (|
                M.get_trait_method (|
                  "num_enum::TryFromPrimitive",
                  Ty.path
                    "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction",
                  [],
                  "try_from_primitive",
                  []
                |),
                [ M.read (| number |) ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::TryFrom"
            Self
            (* Trait polymorphic types *) [ (* T *) Ty.path "u8" ]
            (* Instance *)
            [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
      End Impl_core_convert_TryFrom_u8_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
      
      Module Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
        Definition Self : Ty.t :=
          Ty.path
            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction".
        
        Axiom Implements :
          M.IsTraitInstance
            "num_enum::CannotDeriveBothFromPrimitiveAndTryFromPrimitive"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [].
      End Impl_num_enum_CannotDeriveBothFromPrimitiveAndTryFromPrimitive_for_spl_token_2022_extension_default_account_state_instruction_DefaultAccountStateInstruction.
      
      (*
      pub fn decode_instruction(
          input: &[u8],
      ) -> Result<(DefaultAccountStateInstruction, AccountState), ProgramError> {
          if input.len() != 2 {
              return Err(TokenError::InvalidInstruction.into());
          }
          Ok((
              DefaultAccountStateInstruction::try_from(input[0])
                  .or(Err(TokenError::InvalidInstruction))?,
              AccountState::try_from(input[1]).or(Err(TokenError::InvalidInstruction))?,
          ))
      }
      *)
      Definition decode_instruction (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ input ] =>
          ltac:(M.monadic
            (let input := M.alloc (| input |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  BinOp.Pure.ne
                                    (M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                                        "len",
                                        []
                                      |),
                                      [ M.read (| input |) ]
                                    |))
                                    (Value.Integer 2)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::convert::Into",
                                            Ty.path "spl_token_2022::error::TokenError",
                                            [ Ty.path "solana_program::program_error::ProgramError"
                                            ],
                                            "into",
                                            []
                                          |),
                                          [
                                            Value.StructTuple
                                              "spl_token_2022::error::TokenError::InvalidInstruction"
                                              []
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      [
                        Value.Tuple
                          [
                            M.read (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path
                                            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction";
                                          Ty.path "spl_token_2022::error::TokenError"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path
                                                "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction";
                                              Ty.apply
                                                (Ty.path "num_enum::TryFromPrimitiveError")
                                                [
                                                  Ty.path
                                                    "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction"
                                                ]
                                            ],
                                          "or",
                                          [ Ty.path "spl_token_2022::error::TokenError" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::TryFrom",
                                              Ty.path
                                                "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction",
                                              [ Ty.path "u8" ],
                                              "try_from",
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.read (| input |),
                                                  M.alloc (| Value.Integer 0 |)
                                                |)
                                              |)
                                            ]
                                          |);
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              Value.StructTuple
                                                "spl_token_2022::error::TokenError::InvalidInstruction"
                                                []
                                            ]
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path
                                                            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction";
                                                          Ty.path
                                                            "spl_token_2022::state::AccountState"
                                                        ];
                                                      Ty.path
                                                        "solana_program::program_error::ProgramError"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "spl_token_2022::error::TokenError"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |);
                            M.read (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "spl_token_2022::state::AccountState";
                                          Ty.path "spl_token_2022::error::TokenError"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "spl_token_2022::state::AccountState";
                                              Ty.apply
                                                (Ty.path "num_enum::TryFromPrimitiveError")
                                                [ Ty.path "spl_token_2022::state::AccountState" ]
                                            ],
                                          "or",
                                          [ Ty.path "spl_token_2022::error::TokenError" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::TryFrom",
                                              Ty.path "spl_token_2022::state::AccountState",
                                              [ Ty.path "u8" ],
                                              "try_from",
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_array_field (|
                                                  M.read (| input |),
                                                  M.alloc (| Value.Integer 1 |)
                                                |)
                                              |)
                                            ]
                                          |);
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              Value.StructTuple
                                                "spl_token_2022::error::TokenError::InvalidInstruction"
                                                []
                                            ]
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path
                                                            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction";
                                                          Ty.path
                                                            "spl_token_2022::state::AccountState"
                                                        ];
                                                      Ty.path
                                                        "solana_program::program_error::ProgramError"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "spl_token_2022::error::TokenError"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |)
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      (*
      fn encode_instruction(
          token_program_id: &Pubkey,
          accounts: Vec<AccountMeta>,
          instruction_type: DefaultAccountStateInstruction,
          state: &AccountState,
      ) -> Instruction {
          let mut data = TokenInstruction::DefaultAccountStateExtension.pack();
          data.push(instruction_type.into());
          data.push(( *state).into());
          Instruction {
              program_id: *token_program_id,
              accounts,
              data,
          }
      }
      *)
      Definition encode_instruction (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ token_program_id; accounts; instruction_type; state ] =>
          ltac:(M.monadic
            (let token_program_id := M.alloc (| token_program_id |) in
            let accounts := M.alloc (| accounts |) in
            let instruction_type := M.alloc (| instruction_type |) in
            let state := M.alloc (| state |) in
            M.read (|
              let data :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "spl_token_2022::instruction::TokenInstruction",
                      "pack",
                      []
                    |),
                    [
                      M.alloc (|
                        Value.StructTuple
                          "spl_token_2022::instruction::TokenInstruction::DefaultAccountStateExtension"
                          []
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                      "push",
                      []
                    |),
                    [
                      data;
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.path
                            "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction",
                          [ Ty.path "u8" ],
                          "into",
                          []
                        |),
                        [ M.read (| instruction_type |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                      "push",
                      []
                    |),
                    [
                      data;
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.path "spl_token_2022::state::AccountState",
                          [ Ty.path "u8" ],
                          "into",
                          []
                        |),
                        [ M.read (| M.read (| state |) |) ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "solana_program::instruction::Instruction"
                  [
                    ("program_id", M.read (| M.read (| token_program_id |) |));
                    ("accounts", M.read (| accounts |));
                    ("data", M.read (| data |))
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      (*
      pub fn initialize_default_account_state(
          token_program_id: &Pubkey,
          mint: &Pubkey,
          state: &AccountState,
      ) -> Result<Instruction, ProgramError> {
          check_program_account(token_program_id)?;
          let accounts = vec![AccountMeta::new( *mint, false)];
          Ok(encode_instruction(
              token_program_id,
              accounts,
              DefaultAccountStateInstruction::Initialize,
              state,
          ))
      }
      *)
      Definition initialize_default_account_state (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ token_program_id; mint; state ] =>
          ltac:(M.monadic
            (let token_program_id := M.alloc (| token_program_id |) in
            let mint := M.alloc (| mint |) in
            let state := M.alloc (| state |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "solana_program::program_error::ProgramError"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "spl_token_2022::check_program_account", [] |),
                              [ M.read (| token_program_id |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "solana_program::instruction::Instruction";
                                            Ty.path "solana_program::program_error::ProgramError"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "solana_program::program_error::ProgramError"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let accounts :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            [ Ty.path "solana_program::instruction::AccountMeta" ],
                          "into_vec",
                          [ Ty.path "alloc::alloc::Global" ]
                        |),
                        [
                          (* Unsize *)
                          M.pointer_coercion
                            (M.read (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Ty.path "solana_program::instruction::AccountMeta" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "solana_program::instruction::AccountMeta",
                                            "new",
                                            []
                                          |),
                                          [ M.read (| M.read (| mint |) |); Value.Bool false ]
                                        |)
                                      ]
                                  |)
                                ]
                              |)
                            |))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      [
                        M.call_closure (|
                          M.get_function (|
                            "spl_token_2022::extension::default_account_state::instruction::encode_instruction",
                            []
                          |),
                          [
                            M.read (| token_program_id |);
                            M.read (| accounts |);
                            Value.StructTuple
                              "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction::Initialize"
                              [];
                            M.read (| state |)
                          ]
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      (*
      pub fn update_default_account_state(
          token_program_id: &Pubkey,
          mint: &Pubkey,
          freeze_authority: &Pubkey,
          signers: &[&Pubkey],
          state: &AccountState,
      ) -> Result<Instruction, ProgramError> {
          check_program_account(token_program_id)?;
          let mut accounts = vec![
              AccountMeta::new( *mint, false),
              AccountMeta::new_readonly( *freeze_authority, signers.is_empty()),
          ];
          for signer_pubkey in signers.iter() {
              accounts.push(AccountMeta::new_readonly( **signer_pubkey, true));
          }
          Ok(encode_instruction(
              token_program_id,
              accounts,
              DefaultAccountStateInstruction::Update,
              state,
          ))
      }
      *)
      Definition update_default_account_state (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ token_program_id; mint; freeze_authority; signers; state ] =>
          ltac:(M.monadic
            (let token_program_id := M.alloc (| token_program_id |) in
            let mint := M.alloc (| mint |) in
            let freeze_authority := M.alloc (| freeze_authority |) in
            let signers := M.alloc (| signers |) in
            let state := M.alloc (| state |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "solana_program::program_error::ProgramError"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "spl_token_2022::check_program_account", [] |),
                              [ M.read (| token_program_id |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "solana_program::instruction::Instruction";
                                            Ty.path "solana_program::program_error::ProgramError"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "solana_program::program_error::ProgramError"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let accounts :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            [ Ty.path "solana_program::instruction::AccountMeta" ],
                          "into_vec",
                          [ Ty.path "alloc::alloc::Global" ]
                        |),
                        [
                          (* Unsize *)
                          M.pointer_coercion
                            (M.read (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Ty.path "solana_program::instruction::AccountMeta" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "solana_program::instruction::AccountMeta",
                                            "new",
                                            []
                                          |),
                                          [ M.read (| M.read (| mint |) |); Value.Bool false ]
                                        |);
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "solana_program::instruction::AccountMeta",
                                            "new_readonly",
                                            []
                                          |),
                                          [
                                            M.read (| M.read (| freeze_authority |) |);
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [ Ty.path "solana_program::pubkey::Pubkey" ]
                                                  ],
                                                "is_empty",
                                                []
                                              |),
                                              [ M.read (| signers |) ]
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                ]
                              |)
                            |))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [ Ty.path "solana_program::pubkey::Pubkey" ]
                                ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.path "solana_program::pubkey::Pubkey" ]
                                    ],
                                  "iter",
                                  []
                                |),
                                [ M.read (| signers |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [ Ty.path "solana_program::pubkey::Pubkey" ]
                                              ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let signer_pubkey := M.copy (| γ0_0 |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path
                                                          "solana_program::instruction::AccountMeta";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "push",
                                                    []
                                                  |),
                                                  [
                                                    accounts;
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "solana_program::instruction::AccountMeta",
                                                        "new_readonly",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.read (| M.read (| signer_pubkey |) |)
                                                        |);
                                                        Value.Bool true
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      [
                        M.call_closure (|
                          M.get_function (|
                            "spl_token_2022::extension::default_account_state::instruction::encode_instruction",
                            []
                          |),
                          [
                            M.read (| token_program_id |);
                            M.read (| accounts |);
                            Value.StructTuple
                              "spl_token_2022::extension::default_account_state::instruction::DefaultAccountStateInstruction::Update"
                              [];
                            M.read (| state |)
                          ]
                        |)
                      ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
    End instruction.
  End default_account_state.
End extension.
