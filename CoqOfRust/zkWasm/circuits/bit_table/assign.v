(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module bit_table.
    Module assign.
      (* StructRecord
        {
          name := "BitTableAssign";
          ty_params := [];
          fields :=
            [
              ("op", Ty.path "delphinus_zkwasm::circuits::bit_table::BitTableOp");
              ("left", Ty.path "u64");
              ("right", Ty.path "u64");
              ("result", Ty.path "u64")
            ];
        } *)
      
      Module Impl_delphinus_zkwasm_circuits_bit_table_BitTableTrait_for_delphinus_zkwasm_circuits_utils_table_entry_EventTableWithMemoryInfo.
        Definition Self : Ty.t :=
          Ty.path "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo".
        
        (*
            fn filter_bit_table_entries(&self) -> Vec<BitTableAssign> {
                self.0
                    .iter()
                    .filter_map(|entry| match &entry.eentry.step_info {
                        StepInfo::I32BinBitOp {
                            class,
                            left,
                            right,
                            value,
                        } => Some(BitTableAssign {
                            op: BitTableOp::BinaryBit( *class),
                            left: *left as u32 as u64,
                            right: *right as u32 as u64,
                            result: *value as u32 as u64,
                        }),
        
                        StepInfo::I64BinBitOp {
                            class,
                            left,
                            right,
                            value,
                        } => Some(BitTableAssign {
                            op: BitTableOp::BinaryBit( *class),
                            left: *left as u64,
                            right: *right as u64,
                            result: *value as u64,
                        }),
        
                        StepInfo::UnaryOp {
                            class: UnaryOp::Popcnt,
                            operand,
                            result,
                            ..
                        } => Some(BitTableAssign {
                            op: BitTableOp::Popcnt,
                            left: *operand,
                            right: 0,
                            result: *result,
                        }),
        
                        _ => None,
                    })
                    .collect::<Vec<_>>()
            }
        *)
        Definition filter_bit_table_entries (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::filter_map::FilterMap")
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [
                          Ty.path
                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                [
                                  Ty.path
                                    "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                                ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "core::option::Option")
                          [ Ty.path "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign"
                          ])
                    ],
                  [],
                  "collect",
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.path "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [
                          Ty.path
                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                        ],
                      [],
                      "filter_map",
                      [
                        Ty.path "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign";
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "core::option::Option")
                            [
                              Ty.path
                                "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign"
                            ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            [
                              Ty.path
                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                            ],
                          "iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path
                                    "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "deref",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_tuple_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo",
                                0
                              |)
                            ]
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let entry := M.copy (| γ |) in
                                      M.read (|
                                        M.match_operator (|
                                          M.alloc (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| entry |),
                                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                "eentry"
                                              |),
                                              "specs::etable::EventTableEntry",
                                              "step_info"
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::I32BinBitOp",
                                                    "class"
                                                  |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::I32BinBitOp",
                                                    "left"
                                                  |) in
                                                let γ1_2 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::I32BinBitOp",
                                                    "right"
                                                  |) in
                                                let γ1_3 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::I32BinBitOp",
                                                    "value"
                                                  |) in
                                                let class := M.alloc (| γ1_0 |) in
                                                let left := M.alloc (| γ1_1 |) in
                                                let right := M.alloc (| γ1_2 |) in
                                                let value := M.alloc (| γ1_3 |) in
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::option::Option::Some"
                                                    [
                                                      Value.StructRecord
                                                        "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign"
                                                        [
                                                          ("op",
                                                            Value.StructTuple
                                                              "delphinus_zkwasm::circuits::bit_table::BitTableOp::BinaryBit"
                                                              [ M.read (| M.read (| class |) |) ]);
                                                          ("left",
                                                            M.rust_cast
                                                              (M.rust_cast
                                                                (M.read (| M.read (| left |) |))));
                                                          ("right",
                                                            M.rust_cast
                                                              (M.rust_cast
                                                                (M.read (| M.read (| right |) |))));
                                                          ("result",
                                                            M.rust_cast
                                                              (M.rust_cast
                                                                (M.read (| M.read (| value |) |))))
                                                        ]
                                                    ]
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::I64BinBitOp",
                                                    "class"
                                                  |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::I64BinBitOp",
                                                    "left"
                                                  |) in
                                                let γ1_2 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::I64BinBitOp",
                                                    "right"
                                                  |) in
                                                let γ1_3 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::I64BinBitOp",
                                                    "value"
                                                  |) in
                                                let class := M.alloc (| γ1_0 |) in
                                                let left := M.alloc (| γ1_1 |) in
                                                let right := M.alloc (| γ1_2 |) in
                                                let value := M.alloc (| γ1_3 |) in
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::option::Option::Some"
                                                    [
                                                      Value.StructRecord
                                                        "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign"
                                                        [
                                                          ("op",
                                                            Value.StructTuple
                                                              "delphinus_zkwasm::circuits::bit_table::BitTableOp::BinaryBit"
                                                              [ M.read (| M.read (| class |) |) ]);
                                                          ("left",
                                                            M.rust_cast
                                                              (M.read (| M.read (| left |) |)));
                                                          ("right",
                                                            M.rust_cast
                                                              (M.read (| M.read (| right |) |)));
                                                          ("result",
                                                            M.rust_cast
                                                              (M.read (| M.read (| value |) |)))
                                                        ]
                                                    ]
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::UnaryOp",
                                                    "class"
                                                  |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::UnaryOp",
                                                    "operand"
                                                  |) in
                                                let γ1_2 :=
                                                  M.SubPointer.get_struct_record_field (|
                                                    γ,
                                                    "specs::step::StepInfo::UnaryOp",
                                                    "result"
                                                  |) in
                                                let operand := M.alloc (| γ1_1 |) in
                                                let result := M.alloc (| γ1_2 |) in
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "core::option::Option::Some"
                                                    [
                                                      Value.StructRecord
                                                        "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign"
                                                        [
                                                          ("op",
                                                            Value.StructTuple
                                                              "delphinus_zkwasm::circuits::bit_table::BitTableOp::Popcnt"
                                                              []);
                                                          ("left",
                                                            M.read (| M.read (| operand |) |));
                                                          ("right", Value.Integer 0);
                                                          ("result",
                                                            M.read (| M.read (| result |) |))
                                                        ]
                                                    ]
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  Value.StructTuple "core::option::Option::None" []
                                                |)))
                                          ]
                                        |)
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::bit_table::BitTableTrait"
            Self
            (* Trait polymorphic types *) []
            (* Instance *)
            [ ("filter_bit_table_entries", InstanceField.Method filter_bit_table_entries) ].
      End Impl_delphinus_zkwasm_circuits_bit_table_BitTableTrait_for_delphinus_zkwasm_circuits_utils_table_entry_EventTableWithMemoryInfo.
      
      Module Impl_delphinus_zkwasm_circuits_bit_table_BitTableChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::bit_table::BitTableChip") [ F ].
        
        (*
            fn init(&self, ctx: &mut Context<'_, F>) -> Result<(), Error> {
                for _ in 0..self.max_available_rows / STEP_SIZE {
                    ctx.region.assign_fixed(
                        || "bit table: block sel",
                        self.config.block_sel,
                        ctx.offset + BLOCK_SEL_OFFSET,
                        || Ok(F::one()),
                    )?;
        
                    for i in U8_OFFSET {
                        ctx.region.assign_fixed(
                            || "bit table: lookup sel",
                            self.config.lookup_sel,
                            ctx.offset + i,
                            || Ok(F::one()),
                        )?;
                    }
        
                    for i in U32_OFFSET {
                        ctx.region.assign_fixed(
                            || "bit table: u32 sel",
                            self.config.u32_sel,
                            ctx.offset + i,
                            || Ok(F::one()),
                        )?;
                    }
        
                    ctx.step(STEP_SIZE);
                }
        
                Ok(())
            }
        *)
        Definition init (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                Value.StructRecord
                                  "core::ops::range::Range"
                                  [
                                    ("start", Value.Integer 0);
                                    ("end_",
                                      BinOp.Panic.div (|
                                        Integer.Usize,
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "delphinus_zkwasm::circuits::bit_table::BitTableChip",
                                            "max_available_rows"
                                          |)
                                        |),
                                        M.read (|
                                          M.get_constant (|
                                            "delphinus_zkwasm::circuits::bit_table::STEP_SIZE"
                                          |)
                                        |)
                                      |))
                                  ]
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_fixed",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "bit table: block sel"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::bit_table::BitTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::bit_table::BitTableConfig",
                                                                "block_sel"
                                                              |)
                                                            |);
                                                            BinOp.Panic.add (|
                                                              Integer.Usize,
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| ctx |),
                                                                  "delphinus_zkwasm::circuits::utils::Context",
                                                                  "offset"
                                                                |)
                                                              |),
                                                              M.read (|
                                                                M.get_constant (|
                                                                  "delphinus_zkwasm::circuits::bit_table::BLOCK_SEL_OFFSET"
                                                                |)
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "ff::Field",
                                                                                    F,
                                                                                    [],
                                                                                    "one",
                                                                                    []
                                                                                  |),
                                                                                  []
                                                                                |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.get_constant (|
                                                              "delphinus_zkwasm::circuits::bit_table::U8_OFFSET"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::array::iter::IntoIter")
                                                                          [ Ty.path "usize" ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let i :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let _ :=
                                                                          M.match_operator (|
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::try_trait::Try",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::circuit::AssignedCell")
                                                                                        [ F; F ];
                                                                                      Ty.path
                                                                                        "halo2_proofs::plonk::error::Error"
                                                                                    ],
                                                                                  [],
                                                                                  "branch",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::circuit::Region")
                                                                                        [ F ],
                                                                                      "assign_fixed",
                                                                                      [
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              []
                                                                                          ]
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            [
                                                                                              F;
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::error::Error"
                                                                                            ]);
                                                                                        F;
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              []
                                                                                          ]
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "str"
                                                                                            ]);
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.path
                                                                                              "str"
                                                                                          ]
                                                                                      ]
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.read (|
                                                                                            ctx
                                                                                          |),
                                                                                          "delphinus_zkwasm::circuits::utils::Context",
                                                                                          "region"
                                                                                        |)
                                                                                      |);
                                                                                      M.closure
                                                                                        (fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            match γ
                                                                                            with
                                                                                            | [ α0
                                                                                                ] =>
                                                                                              M.match_operator (|
                                                                                                M.alloc (|
                                                                                                  α0
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (M.read (|
                                                                                                        Value.String
                                                                                                          "bit table: lookup sel"
                                                                                                      |)))
                                                                                                ]
                                                                                              |)
                                                                                            | _ =>
                                                                                              M.impossible (||)
                                                                                            end));
                                                                                      M.read (|
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.read (|
                                                                                              self
                                                                                            |),
                                                                                            "delphinus_zkwasm::circuits::bit_table::BitTableChip",
                                                                                            "config"
                                                                                          |),
                                                                                          "delphinus_zkwasm::circuits::bit_table::BitTableConfig",
                                                                                          "lookup_sel"
                                                                                        |)
                                                                                      |);
                                                                                      BinOp.Panic.add (|
                                                                                        Integer.Usize,
                                                                                        M.read (|
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.read (|
                                                                                              ctx
                                                                                            |),
                                                                                            "delphinus_zkwasm::circuits::utils::Context",
                                                                                            "offset"
                                                                                          |)
                                                                                        |),
                                                                                        M.read (|
                                                                                          i
                                                                                        |)
                                                                                      |);
                                                                                      M.closure
                                                                                        (fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            match γ
                                                                                            with
                                                                                            | [ α0
                                                                                                ] =>
                                                                                              M.match_operator (|
                                                                                                M.alloc (|
                                                                                                  α0
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (Value.StructTuple
                                                                                                        "core::result::Result::Ok"
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "ff::Field",
                                                                                                              F,
                                                                                                              [],
                                                                                                              "one",
                                                                                                              []
                                                                                                            |),
                                                                                                            []
                                                                                                          |)
                                                                                                        ]))
                                                                                                ]
                                                                                              |)
                                                                                            | _ =>
                                                                                              M.impossible (||)
                                                                                            end))
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ0_0 :=
                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                      γ,
                                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                                      0
                                                                                    |) in
                                                                                  let residual :=
                                                                                    M.copy (|
                                                                                      γ0_0
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    M.never_to_any (|
                                                                                      M.read (|
                                                                                        M.return_ (|
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::try_trait::FromResidual",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [];
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                                ],
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "core::convert::Infallible";
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]
                                                                                              ],
                                                                                              "from_residual",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                residual
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)));
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ0_0 :=
                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                      γ,
                                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                                      0
                                                                                    |) in
                                                                                  let val :=
                                                                                    M.copy (|
                                                                                      γ0_0
                                                                                    |) in
                                                                                  val))
                                                                            ]
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |)) in
                                              let _ :=
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.get_constant (|
                                                              "delphinus_zkwasm::circuits::bit_table::U32_OFFSET"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::array::iter::IntoIter")
                                                                          [ Ty.path "usize" ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let i :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let _ :=
                                                                          M.match_operator (|
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::try_trait::Try",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::circuit::AssignedCell")
                                                                                        [ F; F ];
                                                                                      Ty.path
                                                                                        "halo2_proofs::plonk::error::Error"
                                                                                    ],
                                                                                  [],
                                                                                  "branch",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::circuit::Region")
                                                                                        [ F ],
                                                                                      "assign_fixed",
                                                                                      [
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              []
                                                                                          ]
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            [
                                                                                              F;
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::error::Error"
                                                                                            ]);
                                                                                        F;
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              []
                                                                                          ]
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "str"
                                                                                            ]);
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.path
                                                                                              "str"
                                                                                          ]
                                                                                      ]
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.read (|
                                                                                            ctx
                                                                                          |),
                                                                                          "delphinus_zkwasm::circuits::utils::Context",
                                                                                          "region"
                                                                                        |)
                                                                                      |);
                                                                                      M.closure
                                                                                        (fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            match γ
                                                                                            with
                                                                                            | [ α0
                                                                                                ] =>
                                                                                              M.match_operator (|
                                                                                                M.alloc (|
                                                                                                  α0
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (M.read (|
                                                                                                        Value.String
                                                                                                          "bit table: u32 sel"
                                                                                                      |)))
                                                                                                ]
                                                                                              |)
                                                                                            | _ =>
                                                                                              M.impossible (||)
                                                                                            end));
                                                                                      M.read (|
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.read (|
                                                                                              self
                                                                                            |),
                                                                                            "delphinus_zkwasm::circuits::bit_table::BitTableChip",
                                                                                            "config"
                                                                                          |),
                                                                                          "delphinus_zkwasm::circuits::bit_table::BitTableConfig",
                                                                                          "u32_sel"
                                                                                        |)
                                                                                      |);
                                                                                      BinOp.Panic.add (|
                                                                                        Integer.Usize,
                                                                                        M.read (|
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.read (|
                                                                                              ctx
                                                                                            |),
                                                                                            "delphinus_zkwasm::circuits::utils::Context",
                                                                                            "offset"
                                                                                          |)
                                                                                        |),
                                                                                        M.read (|
                                                                                          i
                                                                                        |)
                                                                                      |);
                                                                                      M.closure
                                                                                        (fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            match γ
                                                                                            with
                                                                                            | [ α0
                                                                                                ] =>
                                                                                              M.match_operator (|
                                                                                                M.alloc (|
                                                                                                  α0
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (Value.StructTuple
                                                                                                        "core::result::Result::Ok"
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "ff::Field",
                                                                                                              F,
                                                                                                              [],
                                                                                                              "one",
                                                                                                              []
                                                                                                            |),
                                                                                                            []
                                                                                                          |)
                                                                                                        ]))
                                                                                                ]
                                                                                              |)
                                                                                            | _ =>
                                                                                              M.impossible (||)
                                                                                            end))
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ0_0 :=
                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                      γ,
                                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                                      0
                                                                                    |) in
                                                                                  let residual :=
                                                                                    M.copy (|
                                                                                      γ0_0
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    M.never_to_any (|
                                                                                      M.read (|
                                                                                        M.return_ (|
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::try_trait::FromResidual",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::result::Result")
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [];
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                                ],
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "core::convert::Infallible";
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]
                                                                                              ],
                                                                                              "from_residual",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                residual
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)));
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ0_0 :=
                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                      γ,
                                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                                      0
                                                                                    |) in
                                                                                  let val :=
                                                                                    M.copy (|
                                                                                      γ0_0
                                                                                    |) in
                                                                                  val))
                                                                            ]
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |)) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "step",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| ctx |);
                                                      M.read (|
                                                        M.get_constant (|
                                                          "delphinus_zkwasm::circuits::bit_table::STEP_SIZE"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_init :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "init" (init F).
        
        (*
            fn assign_op(&self, ctx: &mut Context<'_, F>, op: BitTableOp) -> Result<(), Error> {
                let op_index = F::from(op.index() as u64);
        
                for i in 0..STEP_SIZE {
                    ctx.region.assign_advice(
                        || "bit table op",
                        self.config.op,
                        ctx.offset + i,
                        || Ok(op_index),
                    )?;
                }
        
                if op == BitTableOp::Popcnt {
                    for i in U32_OFFSET {
                        ctx.region.assign_advice(
                            || "bit table op",
                            self.config.helper,
                            ctx.offset + i,
                            || Ok(F::one()),
                        )?;
                    }
                }
        
                Ok(())
            }
        *)
        Definition assign_op (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; op ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let op := M.alloc (| op |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let op_index :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::convert::From",
                            F,
                            [ Ty.path "u64" ],
                            "from",
                            []
                          |),
                          [
                            M.rust_cast
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "delphinus_zkwasm::circuits::bit_table::BitTableOp",
                                  "index",
                                  []
                                |),
                                [ op ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                Value.StructRecord
                                  "core::ops::range::Range"
                                  [
                                    ("start", Value.Integer 0);
                                    ("end_",
                                      M.read (|
                                        M.get_constant (|
                                          "delphinus_zkwasm::circuits::bit_table::STEP_SIZE"
                                        |)
                                      |))
                                  ]
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_advice",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "bit table op"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::bit_table::BitTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::bit_table::BitTableConfig",
                                                                "op"
                                                              |)
                                                            |);
                                                            BinOp.Panic.add (|
                                                              Integer.Usize,
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| ctx |),
                                                                  "delphinus_zkwasm::circuits::utils::Context",
                                                                  "offset"
                                                                |)
                                                              |),
                                                              M.read (| i |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.read (|
                                                                                  op_index
                                                                                |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path "delphinus_zkwasm::circuits::bit_table::BitTableOp",
                                        [
                                          Ty.path
                                            "delphinus_zkwasm::circuits::bit_table::BitTableOp"
                                        ],
                                        "eq",
                                        []
                                      |),
                                      [
                                        op;
                                        M.alloc (|
                                          Value.StructTuple
                                            "delphinus_zkwasm::circuits::bit_table::BitTableOp::Popcnt"
                                            []
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.use
                                (M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply (Ty.path "array") [ Ty.path "usize" ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.get_constant (|
                                            "delphinus_zkwasm::circuits::bit_table::U32_OFFSET"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let iter := M.copy (| γ |) in
                                        M.loop (|
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::array::iter::IntoIter")
                                                        [ Ty.path "usize" ],
                                                      [],
                                                      "next",
                                                      []
                                                    |),
                                                    [ iter ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (| M.break (||) |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::option::Option::Some",
                                                          0
                                                        |) in
                                                      let i := M.copy (| γ0_0 |) in
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::Try",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::circuit::AssignedCell")
                                                                      [ F; F ];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [],
                                                                "branch",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::circuit::Region")
                                                                      [ F ],
                                                                    "assign_advice",
                                                                    [
                                                                      Ty.function
                                                                        [ Ty.tuple [] ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            F;
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]);
                                                                      F;
                                                                      Ty.function
                                                                        [ Ty.tuple [] ]
                                                                        (Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.path "str" ]);
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| ctx |),
                                                                        "delphinus_zkwasm::circuits::utils::Context",
                                                                        "region"
                                                                      |)
                                                                    |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.read (|
                                                                                      Value.String
                                                                                        "bit table op"
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end));
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| self |),
                                                                          "delphinus_zkwasm::circuits::bit_table::BitTableChip",
                                                                          "config"
                                                                        |),
                                                                        "delphinus_zkwasm::circuits::bit_table::BitTableConfig",
                                                                        "helper"
                                                                      |)
                                                                    |);
                                                                    BinOp.Panic.add (|
                                                                      Integer.Usize,
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| ctx |),
                                                                          "delphinus_zkwasm::circuits::utils::Context",
                                                                          "offset"
                                                                        |)
                                                                      |),
                                                                      M.read (| i |)
                                                                    |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (Value.StructTuple
                                                                                      "core::result::Result::Ok"
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "ff::Field",
                                                                                            F,
                                                                                            [],
                                                                                            "one",
                                                                                            []
                                                                                          |),
                                                                                          []
                                                                                        |)
                                                                                      ]))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Break",
                                                                    0
                                                                  |) in
                                                                let residual := M.copy (| γ0_0 |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      M.return_ (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::try_trait::FromResidual",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              [
                                                                                Ty.tuple [];
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::error::Error"
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.path
                                                                                    "core::convert::Infallible";
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ]
                                                                            ],
                                                                            "from_residual",
                                                                            []
                                                                          |),
                                                                          [ M.read (| residual |) ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                                    0
                                                                  |) in
                                                                let val := M.copy (| γ0_0 |) in
                                                                val))
                                                          ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                        |)))
                                  ]
                                |))));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_op :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign_op" (assign_op F).
        
        (*
            fn assign_u64_popcnt(
                &self,
                ctx: &mut Context<'_, F>,
                col: Column<Advice>,
                value: u64,
            ) -> Result<(), Error> {
                let low_u32 = value as u32;
                let high_u32 = (value >> 32) as u32;
        
                let low_u8s_popcnt = low_u32.to_le_bytes().map(|byte| byte.count_ones());
                let high_u8s_popcnt = high_u32.to_le_bytes().map(|byte| byte.count_ones());
                let low_u32_popcnt = low_u32.count_ones();
                let high_u32_popcnt = high_u32.count_ones();
        
                ctx.region.assign_advice(
                    || "bit table: assign u64",
                    col,
                    ctx.offset,
                    || Ok(F::from(value.count_ones() as u64)),
                )?;
        
                macro_rules! assign_u32 {
                    ($v: expr, $bytes: expr, $offset: expr) => {{
                        ctx.region.assign_advice(
                            || "bit table: assign u32",
                            col,
                            ctx.offset + $offset,
                            || Ok(F::from($v as u64)),
                        )?;
        
                        for (index, byte_count_ones) in $bytes.into_iter().enumerate() {
                            ctx.region.assign_advice(
                                || "bit table: assign u8",
                                col,
                                ctx.offset + 1 + index + $offset,
                                || Ok(F::from(byte_count_ones as u64)),
                            )?;
                        }
                    }};
                }
        
                assign_u32!(low_u32_popcnt, low_u8s_popcnt, U32_OFFSET[0]);
                assign_u32!(high_u32_popcnt, high_u8s_popcnt, U32_OFFSET[1]);
        
                Ok(())
            }
        *)
        Definition assign_u64_popcnt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; col; value ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let col := M.alloc (| col |) in
              let value := M.alloc (| value |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let low_u32 := M.alloc (| M.rust_cast (M.read (| value |)) |) in
                    let high_u32 :=
                      M.alloc (|
                        M.rust_cast (BinOp.Panic.shr (| M.read (| value |), Value.Integer 32 |))
                      |) in
                    let low_u8s_popcnt :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "array") [ Ty.path "u8" ],
                            "map",
                            [
                              Ty.function [ Ty.tuple [ Ty.path "u8" ] ] (Ty.path "u32");
                              Ty.path "u32"
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                              [ M.read (| low_u32 |) ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let byte := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "u8",
                                                "count_ones",
                                                []
                                              |),
                                              [ M.read (| byte |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let high_u8s_popcnt :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "array") [ Ty.path "u8" ],
                            "map",
                            [
                              Ty.function [ Ty.tuple [ Ty.path "u8" ] ] (Ty.path "u32");
                              Ty.path "u32"
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                              [ M.read (| high_u32 |) ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let byte := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "u8",
                                                "count_ones",
                                                []
                                              |),
                                              [ M.read (| byte |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let low_u32_popcnt :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (| Ty.path "u32", "count_ones", [] |),
                          [ M.read (| low_u32 |) ]
                        |)
                      |) in
                    let high_u32_popcnt :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (| Ty.path "u32", "count_ones", [] |),
                          [ M.read (| high_u32 |) ]
                        |)
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                                  Ty.path "halo2_proofs::plonk::error::Error"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                  "assign_advice",
                                  [
                                    Ty.function
                                      [ Ty.tuple [] ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ F; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                    F;
                                    Ty.function
                                      [ Ty.tuple [] ]
                                      (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| ctx |),
                                      "delphinus_zkwasm::circuits::utils::Context",
                                      "region"
                                    |)
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.read (|
                                                    Value.String "bit table: assign u64"
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end));
                                  M.read (| col |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| ctx |),
                                      "delphinus_zkwasm::circuits::utils::Context",
                                      "offset"
                                    |)
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (Value.StructTuple
                                                    "core::result::Result::Ok"
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          F,
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [
                                                          M.rust_cast
                                                            (M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "u64",
                                                                "count_ones",
                                                                []
                                                              |),
                                                              [ M.read (| value |) ]
                                                            |))
                                                        ]
                                                      |)
                                                    ]))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    let _ :=
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                    "assign_advice",
                                    [
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ F; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                      F;
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                    ]
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| ctx |),
                                        "delphinus_zkwasm::circuits::utils::Context",
                                        "region"
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      Value.String "bit table: assign u32"
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end));
                                    M.read (| col |);
                                    BinOp.Panic.add (|
                                      Integer.Usize,
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| ctx |),
                                          "delphinus_zkwasm::circuits::utils::Context",
                                          "offset"
                                        |)
                                      |),
                                      M.read (|
                                        M.SubPointer.get_array_field (|
                                          M.get_constant (|
                                            "delphinus_zkwasm::circuits::bit_table::U32_OFFSET"
                                          |),
                                          M.alloc (| Value.Integer 0 |)
                                        |)
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (Value.StructTuple
                                                      "core::result::Result::Ok"
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            F,
                                                            [ Ty.path "u64" ],
                                                            "from",
                                                            []
                                                          |),
                                                          [
                                                            M.rust_cast
                                                              (M.read (| low_u32_popcnt |))
                                                          ]
                                                        |)
                                                      ]))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple [];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  [
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Ty.path "u32" ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Ty.path "u32" ],
                                    [],
                                    "enumerate",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply (Ty.path "array") [ Ty.path "u32" ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [ M.read (| low_u8s_popcnt |) ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::array::iter::IntoIter")
                                                    [ Ty.path "u32" ]
                                                ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ1_0 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                              let γ1_1 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                              let index := M.copy (| γ1_0 |) in
                                              let byte_count_ones := M.copy (| γ1_1 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_advice",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "bit table: assign u8"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (| col |);
                                                            BinOp.Panic.add (|
                                                              Integer.Usize,
                                                              BinOp.Panic.add (|
                                                                Integer.Usize,
                                                                BinOp.Panic.add (|
                                                                  Integer.Usize,
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| ctx |),
                                                                      "delphinus_zkwasm::circuits::utils::Context",
                                                                      "offset"
                                                                    |)
                                                                  |),
                                                                  Value.Integer 1
                                                                |),
                                                                M.read (| index |)
                                                              |),
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.get_constant (|
                                                                    "delphinus_zkwasm::circuits::bit_table::U32_OFFSET"
                                                                  |),
                                                                  M.alloc (| Value.Integer 0 |)
                                                                |)
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.rust_cast
                                                                                      (M.read (|
                                                                                        byte_count_ones
                                                                                      |))
                                                                                  ]
                                                                                |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    let _ :=
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                    "assign_advice",
                                    [
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ F; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                      F;
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                    ]
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| ctx |),
                                        "delphinus_zkwasm::circuits::utils::Context",
                                        "region"
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      Value.String "bit table: assign u32"
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end));
                                    M.read (| col |);
                                    BinOp.Panic.add (|
                                      Integer.Usize,
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| ctx |),
                                          "delphinus_zkwasm::circuits::utils::Context",
                                          "offset"
                                        |)
                                      |),
                                      M.read (|
                                        M.SubPointer.get_array_field (|
                                          M.get_constant (|
                                            "delphinus_zkwasm::circuits::bit_table::U32_OFFSET"
                                          |),
                                          M.alloc (| Value.Integer 1 |)
                                        |)
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (Value.StructTuple
                                                      "core::result::Result::Ok"
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            F,
                                                            [ Ty.path "u64" ],
                                                            "from",
                                                            []
                                                          |),
                                                          [
                                                            M.rust_cast
                                                              (M.read (| high_u32_popcnt |))
                                                          ]
                                                        |)
                                                      ]))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple [];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  [
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Ty.path "u32" ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Ty.path "u32" ],
                                    [],
                                    "enumerate",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply (Ty.path "array") [ Ty.path "u32" ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [ M.read (| high_u8s_popcnt |) ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::array::iter::IntoIter")
                                                    [ Ty.path "u32" ]
                                                ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ1_0 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                              let γ1_1 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                              let index := M.copy (| γ1_0 |) in
                                              let byte_count_ones := M.copy (| γ1_1 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_advice",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "bit table: assign u8"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (| col |);
                                                            BinOp.Panic.add (|
                                                              Integer.Usize,
                                                              BinOp.Panic.add (|
                                                                Integer.Usize,
                                                                BinOp.Panic.add (|
                                                                  Integer.Usize,
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| ctx |),
                                                                      "delphinus_zkwasm::circuits::utils::Context",
                                                                      "offset"
                                                                    |)
                                                                  |),
                                                                  Value.Integer 1
                                                                |),
                                                                M.read (| index |)
                                                              |),
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.get_constant (|
                                                                    "delphinus_zkwasm::circuits::bit_table::U32_OFFSET"
                                                                  |),
                                                                  M.alloc (| Value.Integer 1 |)
                                                                |)
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.rust_cast
                                                                                      (M.read (|
                                                                                        byte_count_ones
                                                                                      |))
                                                                                  ]
                                                                                |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_u64_popcnt :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign_u64_popcnt" (assign_u64_popcnt F).
        
        (*
            fn assign_u64_le(
                &self,
                ctx: &mut Context<'_, F>,
                col: Column<Advice>,
                value: u64,
            ) -> Result<(), Error> {
                let low_u32 = value as u32;
                let high_u32 = (value >> 32) as u32;
        
                ctx.region.assign_advice(
                    || "bit table: assign u64",
                    col,
                    ctx.offset,
                    || Ok(F::from(value)),
                )?;
        
                macro_rules! assign_u32 {
                    ($v: expr, $offset: expr) => {{
                        let bytes = $v.to_le_bytes();
        
                        ctx.region.assign_advice(
                            || "bit table: assign u32",
                            col,
                            ctx.offset + $offset,
                            || Ok(F::from($v as u64)),
                        )?;
        
                        for (index, byte) in bytes.into_iter().enumerate() {
                            ctx.region.assign_advice(
                                || "bit table: assign u8",
                                col,
                                ctx.offset + 1 + index + $offset,
                                || Ok(F::from(byte as u64)),
                            )?;
                        }
                    }};
                }
        
                assign_u32!(low_u32, U32_OFFSET[0]);
                assign_u32!(high_u32, U32_OFFSET[1]);
        
                Ok(())
            }
        *)
        Definition assign_u64_le (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; col; value ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let col := M.alloc (| col |) in
              let value := M.alloc (| value |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let low_u32 := M.alloc (| M.rust_cast (M.read (| value |)) |) in
                    let high_u32 :=
                      M.alloc (|
                        M.rust_cast (BinOp.Panic.shr (| M.read (| value |), Value.Integer 32 |))
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                                  Ty.path "halo2_proofs::plonk::error::Error"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                  "assign_advice",
                                  [
                                    Ty.function
                                      [ Ty.tuple [] ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ F; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                    F;
                                    Ty.function
                                      [ Ty.tuple [] ]
                                      (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| ctx |),
                                      "delphinus_zkwasm::circuits::utils::Context",
                                      "region"
                                    |)
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.read (|
                                                    Value.String "bit table: assign u64"
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end));
                                  M.read (| col |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| ctx |),
                                      "delphinus_zkwasm::circuits::utils::Context",
                                      "offset"
                                    |)
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (Value.StructTuple
                                                    "core::result::Result::Ok"
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          F,
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [ M.read (| value |) ]
                                                      |)
                                                    ]))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    let _ :=
                      let bytes :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                            [ M.read (| low_u32 |) ]
                          |)
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                    "assign_advice",
                                    [
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ F; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                      F;
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                    ]
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| ctx |),
                                        "delphinus_zkwasm::circuits::utils::Context",
                                        "region"
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      Value.String "bit table: assign u32"
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end));
                                    M.read (| col |);
                                    BinOp.Panic.add (|
                                      Integer.Usize,
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| ctx |),
                                          "delphinus_zkwasm::circuits::utils::Context",
                                          "offset"
                                        |)
                                      |),
                                      M.read (|
                                        M.SubPointer.get_array_field (|
                                          M.get_constant (|
                                            "delphinus_zkwasm::circuits::bit_table::U32_OFFSET"
                                          |),
                                          M.alloc (| Value.Integer 0 |)
                                        |)
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (Value.StructTuple
                                                      "core::result::Result::Ok"
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            F,
                                                            [ Ty.path "u64" ],
                                                            "from",
                                                            []
                                                          |),
                                                          [ M.rust_cast (M.read (| low_u32 |)) ]
                                                        |)
                                                      ]))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple [];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  [
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Ty.path "u8" ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Ty.path "u8" ],
                                    [],
                                    "enumerate",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply (Ty.path "array") [ Ty.path "u8" ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [ M.read (| bytes |) ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::array::iter::IntoIter")
                                                    [ Ty.path "u8" ]
                                                ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ1_0 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                              let γ1_1 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                              let index := M.copy (| γ1_0 |) in
                                              let byte := M.copy (| γ1_1 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_advice",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "bit table: assign u8"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (| col |);
                                                            BinOp.Panic.add (|
                                                              Integer.Usize,
                                                              BinOp.Panic.add (|
                                                                Integer.Usize,
                                                                BinOp.Panic.add (|
                                                                  Integer.Usize,
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| ctx |),
                                                                      "delphinus_zkwasm::circuits::utils::Context",
                                                                      "offset"
                                                                    |)
                                                                  |),
                                                                  Value.Integer 1
                                                                |),
                                                                M.read (| index |)
                                                              |),
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.get_constant (|
                                                                    "delphinus_zkwasm::circuits::bit_table::U32_OFFSET"
                                                                  |),
                                                                  M.alloc (| Value.Integer 0 |)
                                                                |)
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.rust_cast
                                                                                      (M.read (|
                                                                                        byte
                                                                                      |))
                                                                                  ]
                                                                                |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    let _ :=
                      let bytes :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                            [ M.read (| high_u32 |) ]
                          |)
                        |) in
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                    "assign_advice",
                                    [
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ F; Ty.path "halo2_proofs::plonk::error::Error" ]);
                                      F;
                                      Ty.function
                                        [ Ty.tuple [] ]
                                        (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                    ]
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| ctx |),
                                        "delphinus_zkwasm::circuits::utils::Context",
                                        "region"
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      Value.String "bit table: assign u32"
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end));
                                    M.read (| col |);
                                    BinOp.Panic.add (|
                                      Integer.Usize,
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| ctx |),
                                          "delphinus_zkwasm::circuits::utils::Context",
                                          "offset"
                                        |)
                                      |),
                                      M.read (|
                                        M.SubPointer.get_array_field (|
                                          M.get_constant (|
                                            "delphinus_zkwasm::circuits::bit_table::U32_OFFSET"
                                          |),
                                          M.alloc (| Value.Integer 1 |)
                                        |)
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (Value.StructTuple
                                                      "core::result::Result::Ok"
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            F,
                                                            [ Ty.path "u64" ],
                                                            "from",
                                                            []
                                                          |),
                                                          [ M.rust_cast (M.read (| high_u32 |)) ]
                                                        |)
                                                      ]))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple [];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |) in
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  [
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Ty.path "u8" ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Ty.path "u8" ],
                                    [],
                                    "enumerate",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply (Ty.path "array") [ Ty.path "u8" ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [ M.read (| bytes |) ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::array::iter::IntoIter")
                                                    [ Ty.path "u8" ]
                                                ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ1_0 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                              let γ1_1 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                              let index := M.copy (| γ1_0 |) in
                                              let byte := M.copy (| γ1_1 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_advice",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "bit table: assign u8"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (| col |);
                                                            BinOp.Panic.add (|
                                                              Integer.Usize,
                                                              BinOp.Panic.add (|
                                                                Integer.Usize,
                                                                BinOp.Panic.add (|
                                                                  Integer.Usize,
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| ctx |),
                                                                      "delphinus_zkwasm::circuits::utils::Context",
                                                                      "offset"
                                                                    |)
                                                                  |),
                                                                  Value.Integer 1
                                                                |),
                                                                M.read (| index |)
                                                              |),
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.get_constant (|
                                                                    "delphinus_zkwasm::circuits::bit_table::U32_OFFSET"
                                                                  |),
                                                                  M.alloc (| Value.Integer 1 |)
                                                                |)
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.rust_cast
                                                                                      (M.read (|
                                                                                        byte
                                                                                      |))
                                                                                  ]
                                                                                |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_u64_le :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign_u64_le" (assign_u64_le F).
        
        (*
            fn assign_entries(
                &self,
                ctx: &mut Context<'_, F>,
                entries: &Vec<BitTableAssign>,
            ) -> Result<(), Error> {
                assert!(entries.len() <= self.max_available_rows / STEP_SIZE);
        
                for entry in entries {
                    self.assign_op(ctx, entry.op)?;
                    self.assign_u64_le(ctx, self.config.left, entry.left)?;
                    self.assign_u64_le(ctx, self.config.right, entry.right)?;
                    if entry.op == BitTableOp::Popcnt {
                        // entry.left: Compute left's decompose popcnt
                        self.assign_u64_popcnt(ctx, self.config.result, entry.left)?;
                    } else {
                        self.assign_u64_le(ctx, self.config.result, entry.result)?;
                    }
        
                    ctx.step(STEP_SIZE);
                }
        
                Ok(())
            }
        *)
        Definition assign_entries (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; entries ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let entries := M.alloc (| entries |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.Pure.not
                                      (BinOp.Pure.le
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| entries |) ]
                                        |))
                                        (BinOp.Panic.div (|
                                          Integer.Usize,
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::bit_table::BitTableChip",
                                              "max_available_rows"
                                            |)
                                          |),
                                          M.read (|
                                            M.get_constant (|
                                              "delphinus_zkwasm::circuits::bit_table::STEP_SIZE"
                                            |)
                                          |)
                                        |)))
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    M.get_function (| "core::panicking::panic", [] |),
                                    [
                                      M.read (|
                                        Value.String
                                          "assertion failed: entries.len() <= self.max_available_rows / STEP_SIZE"
                                      |)
                                    ]
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "&")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.path
                                          "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [ M.read (| entries |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.path
                                                    "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign"
                                                ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let entry := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "delphinus_zkwasm::circuits::bit_table::BitTableChip")
                                                              [ F ],
                                                            "assign_op",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| self |);
                                                            M.read (| ctx |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| entry |),
                                                                "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign",
                                                                "op"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "delphinus_zkwasm::circuits::bit_table::BitTableChip")
                                                              [ F ],
                                                            "assign_u64_le",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| self |);
                                                            M.read (| ctx |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::bit_table::BitTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::bit_table::BitTableConfig",
                                                                "left"
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| entry |),
                                                                "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign",
                                                                "left"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "delphinus_zkwasm::circuits::bit_table::BitTableChip")
                                                              [ F ],
                                                            "assign_u64_le",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| self |);
                                                            M.read (| ctx |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::bit_table::BitTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::bit_table::BitTableConfig",
                                                                "right"
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| entry |),
                                                                "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign",
                                                                "right"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::cmp::PartialEq",
                                                                  Ty.path
                                                                    "delphinus_zkwasm::circuits::bit_table::BitTableOp",
                                                                  [
                                                                    Ty.path
                                                                      "delphinus_zkwasm::circuits::bit_table::BitTableOp"
                                                                  ],
                                                                  "eq",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| entry |),
                                                                    "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign",
                                                                    "op"
                                                                  |);
                                                                  M.alloc (|
                                                                    Value.StructTuple
                                                                      "delphinus_zkwasm::circuits::bit_table::BitTableOp::Popcnt"
                                                                      []
                                                                  |)
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        let _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::Try",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [],
                                                                  "branch",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::bit_table::BitTableChip")
                                                                        [ F ],
                                                                      "assign_u64_popcnt",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| self |);
                                                                      M.read (| ctx |);
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::circuits::bit_table::BitTableChip",
                                                                            "config"
                                                                          |),
                                                                          "delphinus_zkwasm::circuits::bit_table::BitTableConfig",
                                                                          "result"
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| entry |),
                                                                          "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign",
                                                                          "left"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                      0
                                                                    |) in
                                                                  let residual :=
                                                                    M.copy (| γ0_0 |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::try_trait::FromResidual",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::convert::Infallible";
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                  ]
                                                                              ],
                                                                              "from_residual",
                                                                              []
                                                                            |),
                                                                            [ M.read (| residual |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                      0
                                                                    |) in
                                                                  let val := M.copy (| γ0_0 |) in
                                                                  val))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::Try",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [],
                                                                  "branch",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::bit_table::BitTableChip")
                                                                        [ F ],
                                                                      "assign_u64_le",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| self |);
                                                                      M.read (| ctx |);
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| self |),
                                                                            "delphinus_zkwasm::circuits::bit_table::BitTableChip",
                                                                            "config"
                                                                          |),
                                                                          "delphinus_zkwasm::circuits::bit_table::BitTableConfig",
                                                                          "result"
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| entry |),
                                                                          "delphinus_zkwasm::circuits::bit_table::assign::BitTableAssign",
                                                                          "result"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                      0
                                                                    |) in
                                                                  let residual :=
                                                                    M.copy (| γ0_0 |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::try_trait::FromResidual",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::convert::Infallible";
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                  ]
                                                                              ],
                                                                              "from_residual",
                                                                              []
                                                                            |),
                                                                            [ M.read (| residual |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                      0
                                                                    |) in
                                                                  let val := M.copy (| γ0_0 |) in
                                                                  val))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "step",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| ctx |);
                                                      M.read (|
                                                        M.get_constant (|
                                                          "delphinus_zkwasm::circuits::bit_table::STEP_SIZE"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_entries :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign_entries" (assign_entries F).
        
        (*
            pub(crate) fn assign(
                &self,
                layouter: impl Layouter<F>,
                event_table: Vec<BitTableAssign>,
            ) -> Result<(), Error> {
                layouter.assign_region(
                    || "bit table",
                    |region| {
                        let mut ctx = Context::new(region);
        
                        self.init(&mut ctx)?;
        
                        ctx.reset();
        
                        self.assign_entries(&mut ctx, &event_table)?;
        
                        Ok(())
                    },
                )
            }
        *)
        Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Layouter_F_ ], [ self; layouter; event_table ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let layouter := M.alloc (| layouter |) in
              let event_table := M.alloc (| event_table |) in
              M.call_closure (|
                M.get_trait_method (|
                  "halo2_proofs::circuit::Layouter",
                  impl_Layouter_F_,
                  [ F ],
                  "assign_region",
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              [ Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ] ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "core::result::Result")
                        [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ]);
                    Ty.tuple [];
                    Ty.function [ Ty.tuple [] ] (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                    Ty.apply (Ty.path "&") [ Ty.path "str" ]
                  ]
                |),
                [
                  layouter;
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [ fun γ => ltac:(M.monadic (M.read (| Value.String "bit table" |))) ]
                          |)
                        | _ => M.impossible (||)
                        end));
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let region := M.copy (| γ |) in
                                  M.read (|
                                    let ctx :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "delphinus_zkwasm::circuits::utils::Context")
                                              [ F ],
                                            "new",
                                            []
                                          |),
                                          [ M.read (| region |) ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.tuple [];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::bit_table::BitTableChip")
                                                    [ F ],
                                                  "init",
                                                  []
                                                |),
                                                [ M.read (| self |); ctx ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "delphinus_zkwasm::circuits::utils::Context")
                                              [ F ],
                                            "reset",
                                            []
                                          |),
                                          [ ctx ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.tuple [];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::bit_table::BitTableChip")
                                                    [ F ],
                                                  "assign_entries",
                                                  []
                                                |),
                                                [ M.read (| self |); ctx; event_table ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        [ Value.Tuple [] ]
                                    |)
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign" (assign F).
      End Impl_delphinus_zkwasm_circuits_bit_table_BitTableChip_F.
    End assign.
  End bit_table.
End circuits.
