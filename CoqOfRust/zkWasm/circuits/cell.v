(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module cell.
    (* StructRecord
      {
        name := "AllocatedCell";
        ty_params := [ "F" ];
        fields :=
          [
            ("col",
              Ty.apply
                (Ty.path "halo2_proofs::plonk::circuit::Column")
                [ Ty.path "halo2_proofs::plonk::circuit::Advice" ]);
            ("rot", Ty.path "i32");
            ("_mark", Ty.apply (Ty.path "core::marker::PhantomData") [ F ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AllocatedCell" |);
                M.read (| Value.String "col" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedCell",
                    "col"
                  |));
                M.read (| Value.String "rot" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedCell",
                    "rot"
                  |));
                M.read (| Value.String "_mark" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedCell",
                      "_mark"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedCell_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::cell::AllocatedCell"
              [
                ("col",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                        [ Ty.path "halo2_proofs::plonk::circuit::Advice" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedCell",
                        "col"
                      |)
                    ]
                  |));
                ("rot",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.path "i32", [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedCell",
                        "rot"
                      |)
                    ]
                  |));
                ("_mark",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "core::marker::PhantomData") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedCell",
                        "_mark"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedCell_F.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedCell_F.
    
    (* Trait *)
    Module CellExpression.
      Definition expr (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_trait_method (|
                "delphinus_zkwasm::circuits::cell::CellExpression",
                Self,
                [ F ],
                "curr_expr",
                []
              |),
              [ M.read (| self |); M.read (| meta |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_expr :
        forall (F : Ty.t),
        M.IsProvidedMethod "delphinus_zkwasm::circuits::cell::CellExpression" "expr" (expr F).
      Definition assign_bn (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; ctx; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_trait_method (|
                "delphinus_zkwasm::circuits::cell::CellExpression",
                Self,
                [ F ],
                "assign",
                []
              |),
              [
                M.read (| self |);
                M.read (| ctx |);
                M.call_closure (|
                  M.get_function (| "delphinus_zkwasm::circuits::utils::bn_to_field", [ F ] |),
                  [ M.read (| value |) ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_assign_bn :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::cell::CellExpression"
          "assign_bn"
          (assign_bn F).
      Definition assign_u32 (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; ctx; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_trait_method (|
                "delphinus_zkwasm::circuits::cell::CellExpression",
                Self,
                [ F ],
                "assign",
                []
              |),
              [
                M.read (| self |);
                M.read (| ctx |);
                M.call_closure (|
                  M.get_trait_method (| "core::convert::Into", Ty.path "u64", [ F ], "into", [] |),
                  [ M.rust_cast (M.read (| value |)) ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_assign_u32 :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::cell::CellExpression"
          "assign_u32"
          (assign_u32 F).
      Definition assign_bool (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; ctx; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_trait_method (|
                "delphinus_zkwasm::circuits::cell::CellExpression",
                Self,
                [ F ],
                "assign",
                []
              |),
              [
                M.read (| self |);
                M.read (| ctx |);
                M.read (|
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use value in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (| "ff::Field", F, [], "one", [] |),
                              []
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                              []
                            |)
                          |)))
                    ]
                  |)
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_assign_bool :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::cell::CellExpression"
          "assign_bool"
          (assign_bool F).
    End CellExpression.
    
    Module Impl_delphinus_zkwasm_circuits_cell_CellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ].
      
      (*
          fn curr_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
              nextn!(meta, self.col, self.rot)
          }
      *)
      Definition curr_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::VirtualCells") [ F ],
                "query_advice",
                []
              |),
              [
                M.read (| meta |);
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedCell",
                    "col"
                  |)
                |);
                Value.StructTuple
                  "halo2_proofs::poly::Rotation"
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedCell",
                        "rot"
                      |)
                    |)
                  ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn assign(&self, ctx: &mut Context<'_, F>, value: F) -> Result<AssignedCell<F, F>, Error> {
              ctx.region.assign_advice(
                  || "assign cell",
                  self.col,
                  (ctx.offset as i32 + self.rot) as usize,
                  || Ok(value),
              )
          }
      *)
      Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; ctx; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                "assign_advice",
                [
                  Ty.function
                    [ Ty.tuple [] ]
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      [ F; Ty.path "halo2_proofs::plonk::error::Error" ]);
                  F;
                  Ty.function [ Ty.tuple [] ] (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                  Ty.apply (Ty.path "&") [ Ty.path "str" ]
                ]
              |),
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| ctx |),
                    "delphinus_zkwasm::circuits::utils::Context",
                    "region"
                  |)
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [ fun γ => ltac:(M.monadic (M.read (| Value.String "assign cell" |))) ]
                        |)
                      | _ => M.impossible (||)
                      end));
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedCell",
                    "col"
                  |)
                |);
                M.rust_cast
                  (BinOp.Panic.add (|
                    Integer.I32,
                    M.rust_cast
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| ctx |),
                          "delphinus_zkwasm::circuits::utils::Context",
                          "offset"
                        |)
                      |)),
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedCell",
                        "rot"
                      |)
                    |)
                  |));
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        M.match_operator (|
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (Value.StructTuple
                                  "core::result::Result::Ok"
                                  [ M.read (| value |) ]))
                          ]
                        |)
                      | _ => M.impossible (||)
                      end))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "delphinus_zkwasm::circuits::cell::CellExpression"
          (Self F)
          (* Trait polymorphic types *) [ (* F *) F ]
          (* Instance *)
          [
            ("curr_expr", InstanceField.Method (curr_expr F));
            ("assign", InstanceField.Method (assign F))
          ].
    End Impl_delphinus_zkwasm_circuits_cell_CellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedCell_F.
    
    (* StructRecord
      {
        name := "AllocatedU64Cell";
        ty_params := [ "F" ];
        fields :=
          [
            ("u16_cells_le",
              Ty.apply
                (Ty.path "array")
                [ Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell") [ F ] ]);
            ("u64_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AllocatedU64Cell" |);
                M.read (| Value.String "u16_cells_le" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                    "u16_cells_le"
                  |));
                M.read (| Value.String "u64_cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                      "u64_cell"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64Cell_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::cell::AllocatedU64Cell"
              [
                ("u16_cells_le",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "array")
                        [
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                            [ F ]
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                        "u16_cells_le"
                      |)
                    ]
                  |));
                ("u64_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                        "u64_cell"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64Cell_F.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64Cell_F.
    
    Module Impl_delphinus_zkwasm_circuits_cell_AllocatedU64Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ].
      
      (*
          pub(crate) fn expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
              self.u64_cell.expr(meta)
          }
      *)
      Definition expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_trait_method (|
                "delphinus_zkwasm::circuits::cell::CellExpression",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ],
                [ F ],
                "expr",
                []
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                  "u64_cell"
                |);
                M.read (| meta |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_expr :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "expr" (expr F).
      (*
          pub(crate) fn assign(&self, ctx: &mut Context<'_, F>, value: u64) -> Result<(), Error> {
              for i in 0..4 {
                  self.u16_cells_le[i].assign(ctx, ((value >> (i * 16)) & 0xffffu64).into())?;
              }
              self.u64_cell.assign(ctx, value.into())?;
              Ok(())
          }
      *)
      Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; ctx; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              Value.StructRecord
                                "core::ops::range::Range"
                                [ ("start", Value.Integer 0); ("end_", Value.Integer 4) ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              [ Ty.path "usize" ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| γ0_0 |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::circuit::AssignedCell")
                                                            [ F; F ];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                          Ty.apply
                                                            (Ty.path
                                                              "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                                                            [ F ],
                                                          [ F ],
                                                          "assign",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_array_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| self |),
                                                              "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                              "u16_cells_le"
                                                            |),
                                                            i
                                                          |);
                                                          M.read (| ctx |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.path "u64",
                                                              [ F ],
                                                              "into",
                                                              []
                                                            |),
                                                            [
                                                              BinOp.Pure.bit_and
                                                                (BinOp.Panic.shr (|
                                                                  M.read (| value |),
                                                                  BinOp.Panic.mul (|
                                                                    Integer.Usize,
                                                                    M.read (| i |),
                                                                    Value.Integer 16
                                                                  |)
                                                                |))
                                                                (Value.Integer 65535)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                  [ F ],
                                [ F ],
                                "assign",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                  "u64_cell"
                                |);
                                M.read (| ctx |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.path "u64",
                                    [ F ],
                                    "into",
                                    []
                                  |),
                                  [ M.read (| value |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_assign :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "assign" (assign F).
    End Impl_delphinus_zkwasm_circuits_cell_AllocatedU64Cell_F.
    
    (* StructRecord
      {
        name := "AllocatedU32Cell";
        ty_params := [ "F" ];
        fields :=
          [
            ("u16_cells_le",
              Ty.apply
                (Ty.path "array")
                [ Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell") [ F ] ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell") [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AllocatedU32Cell" |);
                M.read (| Value.String "u16_cells_le" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedU32Cell",
                      "u16_cells_le"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32Cell_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::cell::AllocatedU32Cell"
              [
                ("u16_cells_le",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "array")
                        [
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                            [ F ]
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU32Cell",
                        "u16_cells_le"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32Cell_F.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32Cell_F.
    
    (* StructRecord
      {
        name := "AllocatedU32PermutationCell";
        ty_params := [ "F" ];
        fields :=
          [
            ("u16_cells_le",
              Ty.apply
                (Ty.path "array")
                [ Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell") [ F ] ]);
            ("u32_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32PermutationCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell") [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AllocatedU32PermutationCell" |);
                M.read (| Value.String "u16_cells_le" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell",
                    "u16_cells_le"
                  |));
                M.read (| Value.String "u32_cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell",
                      "u32_cell"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32PermutationCell_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32PermutationCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell"
              [
                ("u16_cells_le",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "array")
                        [
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                            [ F ]
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell",
                        "u16_cells_le"
                      |)
                    ]
                  |));
                ("u32_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell",
                        "u32_cell"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32PermutationCell_F.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32PermutationCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU32PermutationCell_F.
    
    (* StructRecord
      {
        name := "AllocatedU64CellWithFlagBitDyn";
        ty_params := [ "F" ];
        fields :=
          [
            ("u16_cells_le",
              Ty.apply
                (Ty.path "array")
                [ Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell") [ F ] ]);
            ("u64_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ]);
            ("flag_bit_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("flag_u16_rem_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("flag_u16_rem_diff_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell") [ F ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDyn_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn") [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field5_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AllocatedU64CellWithFlagBitDyn" |);
                M.read (| Value.String "u16_cells_le" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                    "u16_cells_le"
                  |));
                M.read (| Value.String "u64_cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                    "u64_cell"
                  |));
                M.read (| Value.String "flag_bit_cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                    "flag_bit_cell"
                  |));
                M.read (| Value.String "flag_u16_rem_cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                    "flag_u16_rem_cell"
                  |));
                M.read (| Value.String "flag_u16_rem_diff_cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                      "flag_u16_rem_diff_cell"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDyn_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDyn_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn"
              [
                ("u16_cells_le",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "array")
                        [
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                            [ F ]
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                        "u16_cells_le"
                      |)
                    ]
                  |));
                ("u64_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                        "u64_cell"
                      |)
                    ]
                  |));
                ("flag_bit_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                        "flag_bit_cell"
                      |)
                    ]
                  |));
                ("flag_u16_rem_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                        "flag_u16_rem_cell"
                      |)
                    ]
                  |));
                ("flag_u16_rem_diff_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                        "flag_u16_rem_diff_cell"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDyn_F.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDyn_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDyn_F.
    
    (* StructRecord
      {
        name := "AllocatedU64CellWithFlagBitDynSign";
        ty_params := [ "F" ];
        fields :=
          [
            ("u16_cells_le",
              Ty.apply
                (Ty.path "array")
                [ Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell") [ F ] ]);
            ("u64_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ]);
            ("flag_bit_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("flag_u16_rem_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("flag_u16_rem_diff_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell") [ F ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDynSign_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign")
          [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field5_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AllocatedU64CellWithFlagBitDynSign" |);
                M.read (| Value.String "u16_cells_le" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                    "u16_cells_le"
                  |));
                M.read (| Value.String "u64_cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                    "u64_cell"
                  |));
                M.read (| Value.String "flag_bit_cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                    "flag_bit_cell"
                  |));
                M.read (| Value.String "flag_u16_rem_cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                    "flag_u16_rem_cell"
                  |));
                M.read (| Value.String "flag_u16_rem_diff_cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                      "flag_u16_rem_diff_cell"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDynSign_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDynSign_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign")
          [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign"
              [
                ("u16_cells_le",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "array")
                        [
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                            [ F ]
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                        "u16_cells_le"
                      |)
                    ]
                  |));
                ("u64_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                        "u64_cell"
                      |)
                    ]
                  |));
                ("flag_bit_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                        "flag_bit_cell"
                      |)
                    ]
                  |));
                ("flag_u16_rem_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                        "flag_u16_rem_cell"
                      |)
                    ]
                  |));
                ("flag_u16_rem_diff_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                        "flag_u16_rem_diff_cell"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDynSign_F.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDynSign_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign")
          [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDynSign_F.
    
    (* StructRecord
      {
        name := "AllocatedBitCell";
        ty_params := [ "F" ];
        fields :=
          [ ("cell", Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ]) ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedBitCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ].
      
      (*         Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AllocatedBitCell" |);
                M.read (| Value.String "cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedBitCell",
                      "cell"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedBitCell_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedBitCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ].
      
      (*         Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::cell::AllocatedBitCell"
              [
                ("cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell",
                        "cell"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedBitCell_F.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedBitCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedBitCell_F.
    
    Module Impl_delphinus_zkwasm_circuits_cell_CellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedBitCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ].
      
      (*
                  fn curr_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                      self.cell.curr_expr(meta)
                  }
      *)
      Definition curr_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_trait_method (|
                "delphinus_zkwasm::circuits::cell::CellExpression",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                [ F ],
                "curr_expr",
                []
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell",
                  "cell"
                |);
                M.read (| meta |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
                  fn assign(
                      &self,
                      ctx: &mut Context<'_, F>,
                      value: F,
                  ) -> Result<AssignedCell<F, F>, Error> {
                      assert!(
                          value <= $limit,
                          "assigned value {:?} exceeds the limit {:?}",
                          value,
                          $limit
                      );
      
                      self.cell.assign(ctx, value)
                  }
      *)
      Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; ctx; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.Pure.not
                                (M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    F,
                                    [ F ],
                                    "le",
                                    []
                                  |),
                                  [
                                    value;
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (| "ff::Field", F, [], "one", [] |),
                                        []
                                      |)
                                    |)
                                  ]
                                |))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic_fmt", [] |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.read (| Value.String "assigned value " |);
                                            M.read (| Value.String " exceeds the limit " |)
                                          ]
                                      |));
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [ F ]
                                              |),
                                              [ value ]
                                            |);
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [ F ]
                                              |),
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      F,
                                                      [],
                                                      "one",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |))
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "delphinus_zkwasm::circuits::cell::CellExpression",
                    Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                    [ F ],
                    "assign",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedBitCell",
                      "cell"
                    |);
                    M.read (| ctx |);
                    M.read (| value |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "delphinus_zkwasm::circuits::cell::CellExpression"
          (Self F)
          (* Trait polymorphic types *) [ (* F *) F ]
          (* Instance *)
          [
            ("curr_expr", InstanceField.Method (curr_expr F));
            ("assign", InstanceField.Method (assign F))
          ].
    End Impl_delphinus_zkwasm_circuits_cell_CellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedBitCell_F.
    
    (* StructRecord
      {
        name := "AllocatedU8Cell";
        ty_params := [ "F" ];
        fields :=
          [ ("cell", Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ]) ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU8Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU8Cell") [ F ].
      
      (*         Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AllocatedU8Cell" |);
                M.read (| Value.String "cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedU8Cell",
                      "cell"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU8Cell_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU8Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU8Cell") [ F ].
      
      (*         Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::cell::AllocatedU8Cell"
              [
                ("cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU8Cell",
                        "cell"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU8Cell_F.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU8Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU8Cell") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU8Cell_F.
    
    Module Impl_delphinus_zkwasm_circuits_cell_CellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedU8Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU8Cell") [ F ].
      
      (*
                  fn curr_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                      self.cell.curr_expr(meta)
                  }
      *)
      Definition curr_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_trait_method (|
                "delphinus_zkwasm::circuits::cell::CellExpression",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                [ F ],
                "curr_expr",
                []
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "delphinus_zkwasm::circuits::cell::AllocatedU8Cell",
                  "cell"
                |);
                M.read (| meta |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
                  fn assign(
                      &self,
                      ctx: &mut Context<'_, F>,
                      value: F,
                  ) -> Result<AssignedCell<F, F>, Error> {
                      assert!(
                          value <= $limit,
                          "assigned value {:?} exceeds the limit {:?}",
                          value,
                          $limit
                      );
      
                      self.cell.assign(ctx, value)
                  }
      *)
      Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; ctx; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.Pure.not
                                (M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    F,
                                    [ F ],
                                    "le",
                                    []
                                  |),
                                  [
                                    value;
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          F,
                                          [ Ty.path "u64" ],
                                          "from",
                                          []
                                        |),
                                        [
                                          M.rust_cast
                                            (M.read (| M.get_constant (| "core::num::MAX" |) |))
                                        ]
                                      |)
                                    |)
                                  ]
                                |))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic_fmt", [] |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.read (| Value.String "assigned value " |);
                                            M.read (| Value.String " exceeds the limit " |)
                                          ]
                                      |));
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [ F ]
                                              |),
                                              [ value ]
                                            |);
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [ F ]
                                              |),
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      F,
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [
                                                      M.rust_cast
                                                        (M.read (|
                                                          M.get_constant (| "core::num::MAX" |)
                                                        |))
                                                    ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |))
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "delphinus_zkwasm::circuits::cell::CellExpression",
                    Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                    [ F ],
                    "assign",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedU8Cell",
                      "cell"
                    |);
                    M.read (| ctx |);
                    M.read (| value |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "delphinus_zkwasm::circuits::cell::CellExpression"
          (Self F)
          (* Trait polymorphic types *) [ (* F *) F ]
          (* Instance *)
          [
            ("curr_expr", InstanceField.Method (curr_expr F));
            ("assign", InstanceField.Method (assign F))
          ].
    End Impl_delphinus_zkwasm_circuits_cell_CellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedU8Cell_F.
    
    (* StructRecord
      {
        name := "AllocatedU16Cell";
        ty_params := [ "F" ];
        fields :=
          [ ("cell", Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ]) ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU16Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell") [ F ].
      
      (*         Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AllocatedU16Cell" |);
                M.read (| Value.String "cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedU16Cell",
                      "cell"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU16Cell_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU16Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell") [ F ].
      
      (*         Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::cell::AllocatedU16Cell"
              [
                ("cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU16Cell",
                        "cell"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU16Cell_F.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU16Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedU16Cell_F.
    
    Module Impl_delphinus_zkwasm_circuits_cell_CellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedU16Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell") [ F ].
      
      (*
                  fn curr_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                      self.cell.curr_expr(meta)
                  }
      *)
      Definition curr_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_trait_method (|
                "delphinus_zkwasm::circuits::cell::CellExpression",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                [ F ],
                "curr_expr",
                []
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "delphinus_zkwasm::circuits::cell::AllocatedU16Cell",
                  "cell"
                |);
                M.read (| meta |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
                  fn assign(
                      &self,
                      ctx: &mut Context<'_, F>,
                      value: F,
                  ) -> Result<AssignedCell<F, F>, Error> {
                      assert!(
                          value <= $limit,
                          "assigned value {:?} exceeds the limit {:?}",
                          value,
                          $limit
                      );
      
                      self.cell.assign(ctx, value)
                  }
      *)
      Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; ctx; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.Pure.not
                                (M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    F,
                                    [ F ],
                                    "le",
                                    []
                                  |),
                                  [
                                    value;
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          F,
                                          [ Ty.path "u64" ],
                                          "from",
                                          []
                                        |),
                                        [
                                          M.rust_cast
                                            (M.read (| M.get_constant (| "core::num::MAX" |) |))
                                        ]
                                      |)
                                    |)
                                  ]
                                |))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic_fmt", [] |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.read (| Value.String "assigned value " |);
                                            M.read (| Value.String " exceeds the limit " |)
                                          ]
                                      |));
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [ F ]
                                              |),
                                              [ value ]
                                            |);
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [ F ]
                                              |),
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      F,
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [
                                                      M.rust_cast
                                                        (M.read (|
                                                          M.get_constant (| "core::num::MAX" |)
                                                        |))
                                                    ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |))
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "delphinus_zkwasm::circuits::cell::CellExpression",
                    Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                    [ F ],
                    "assign",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedU16Cell",
                      "cell"
                    |);
                    M.read (| ctx |);
                    M.read (| value |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "delphinus_zkwasm::circuits::cell::CellExpression"
          (Self F)
          (* Trait polymorphic types *) [ (* F *) F ]
          (* Instance *)
          [
            ("curr_expr", InstanceField.Method (curr_expr F));
            ("assign", InstanceField.Method (assign F))
          ].
    End Impl_delphinus_zkwasm_circuits_cell_CellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedU16Cell_F.
    
    (* StructRecord
      {
        name := "AllocatedUnlimitedCell";
        ty_params := [ "F" ];
        fields :=
          [ ("cell", Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ]) ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedUnlimitedCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ].
      
      (*         Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AllocatedUnlimitedCell" |);
                M.read (| Value.String "cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell",
                      "cell"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedUnlimitedCell_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedUnlimitedCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ].
      
      (*         Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell"
              [
                ("cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell",
                        "cell"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedUnlimitedCell_F.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedUnlimitedCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedUnlimitedCell_F.
    
    Module Impl_delphinus_zkwasm_circuits_cell_CellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedUnlimitedCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ].
      
      (*
                  fn curr_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                      self.cell.curr_expr(meta)
                  }
      *)
      Definition curr_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_trait_method (|
                "delphinus_zkwasm::circuits::cell::CellExpression",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                [ F ],
                "curr_expr",
                []
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell",
                  "cell"
                |);
                M.read (| meta |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
                  fn assign(
                      &self,
                      ctx: &mut Context<'_, F>,
                      value: F,
                  ) -> Result<AssignedCell<F, F>, Error> {
                      assert!(
                          value <= $limit,
                          "assigned value {:?} exceeds the limit {:?}",
                          value,
                          $limit
                      );
      
                      self.cell.assign(ctx, value)
                  }
      *)
      Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; ctx; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.Pure.not
                                (M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    F,
                                    [ F ],
                                    "le",
                                    []
                                  |),
                                  [
                                    value;
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::arith::Neg",
                                          F,
                                          [],
                                          "neg",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (| "ff::Field", F, [], "one", [] |),
                                            []
                                          |)
                                        ]
                                      |)
                                    |)
                                  ]
                                |))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic_fmt", [] |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.read (| Value.String "assigned value " |);
                                            M.read (| Value.String " exceeds the limit " |)
                                          ]
                                      |));
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [ F ]
                                              |),
                                              [ value ]
                                            |);
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [ F ]
                                              |),
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Neg",
                                                      F,
                                                      [],
                                                      "neg",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "ff::Field",
                                                          F,
                                                          [],
                                                          "one",
                                                          []
                                                        |),
                                                        []
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |))
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "delphinus_zkwasm::circuits::cell::CellExpression",
                    Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                    [ F ],
                    "assign",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell",
                      "cell"
                    |);
                    M.read (| ctx |);
                    M.read (| value |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "delphinus_zkwasm::circuits::cell::CellExpression"
          (Self F)
          (* Trait polymorphic types *) [ (* F *) F ]
          (* Instance *)
          [
            ("curr_expr", InstanceField.Method (curr_expr F));
            ("assign", InstanceField.Method (assign F))
          ].
    End Impl_delphinus_zkwasm_circuits_cell_CellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedUnlimitedCell_F.
    
    (* StructRecord
      {
        name := "AllocatedCommonRangeCell";
        ty_params := [ "F" ];
        fields :=
          [
            ("cell", Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ]);
            ("upper_bound", F)
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedCommonRangeCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell") [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "AllocatedCommonRangeCell" |);
                M.read (| Value.String "cell" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                    "cell"
                  |));
                M.read (| Value.String "upper_bound" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                      "upper_bound"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedCommonRangeCell_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedCommonRangeCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell"
              [
                ("cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                        "cell"
                      |)
                    ]
                  |));
                ("upper_bound",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", F, [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                        "upper_bound"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedCommonRangeCell_F.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedCommonRangeCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_cell_AllocatedCommonRangeCell_F.
    
    Module Impl_delphinus_zkwasm_circuits_cell_CellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedCommonRangeCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell") [ F ].
      
      (*
          fn curr_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
              self.cell.curr_expr(meta)
          }
      *)
      Definition curr_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_trait_method (|
                "delphinus_zkwasm::circuits::cell::CellExpression",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                [ F ],
                "curr_expr",
                []
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                  "cell"
                |);
                M.read (| meta |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn assign(&self, ctx: &mut Context<'_, F>, value: F) -> Result<AssignedCell<F, F>, Error> {
              assert!(
                  value <= self.upper_bound,
                  "assigned value {:?} exceeds the limit {:?}",
                  value,
                  self.upper_bound
              );
      
              self.cell.assign(ctx, value)
          }
      *)
      Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; ctx; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.Pure.not
                                (M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    F,
                                    [ F ],
                                    "le",
                                    []
                                  |),
                                  [
                                    value;
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                                      "upper_bound"
                                    |)
                                  ]
                                |))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic_fmt", [] |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.read (| Value.String "assigned value " |);
                                            M.read (| Value.String " exceeds the limit " |)
                                          ]
                                      |));
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [ F ]
                                              |),
                                              [ value ]
                                            |);
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [ F ]
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                                                  "upper_bound"
                                                |)
                                              ]
                                            |)
                                          ]
                                      |))
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "delphinus_zkwasm::circuits::cell::CellExpression",
                    Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCell") [ F ],
                    [ F ],
                    "assign",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                      "cell"
                    |);
                    M.read (| ctx |);
                    M.read (| value |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "delphinus_zkwasm::circuits::cell::CellExpression"
          (Self F)
          (* Trait polymorphic types *) [ (* F *) F ]
          (* Instance *)
          [
            ("curr_expr", InstanceField.Method (curr_expr F));
            ("assign", InstanceField.Method (assign F))
          ].
    End Impl_delphinus_zkwasm_circuits_cell_CellExpression_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_cell_AllocatedCommonRangeCell_F.
    
    Module Impl_delphinus_zkwasm_circuits_cell_AllocatedU32Cell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell") [ F ].
      
      (*
          pub(crate) fn expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
              self.u16_cells_le[0].curr_expr(meta)
                  + (self.u16_cells_le[1].curr_expr(meta) * constant_from!(1 << 16))
          }
      *)
      Definition expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_trait_method (|
                "core::ops::arith::Add",
                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                "add",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "delphinus_zkwasm::circuits::cell::CellExpression",
                    Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell") [ F ],
                    [ F ],
                    "curr_expr",
                    []
                  |),
                  [
                    M.SubPointer.get_array_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU32Cell",
                        "u16_cells_le"
                      |),
                      M.alloc (| Value.Integer 0 |)
                    |);
                    M.read (| meta |)
                  ]
                |);
                M.call_closure (|
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                    [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                    "mul",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::cell::CellExpression",
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                          [ F ],
                        [ F ],
                        "curr_expr",
                        []
                      |),
                      [
                        M.SubPointer.get_array_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "delphinus_zkwasm::circuits::cell::AllocatedU32Cell",
                            "u16_cells_le"
                          |),
                          M.alloc (| Value.Integer 1 |)
                        |);
                        M.read (| meta |)
                      ]
                    |);
                    Value.StructTuple
                      "halo2_proofs::plonk::circuit::Expression::Constant"
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::convert::From",
                            F,
                            [ Ty.path "u64" ],
                            "from",
                            []
                          |),
                          [ M.rust_cast (BinOp.Panic.shl (| Value.Integer 1, Value.Integer 16 |)) ]
                        |)
                      ]
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_expr :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "expr" (expr F).
      
      (*
          pub(crate) fn curr_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
              self.expr(meta)
          }
      *)
      Definition curr_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32Cell") [ F ],
                "expr",
                []
              |),
              [ M.read (| self |); M.read (| meta |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_curr_expr :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "curr_expr" (curr_expr F).
      
      (*
          pub(crate) fn assign(&self, ctx: &mut Context<'_, F>, value: u32) -> Result<(), Error> {
              for i in 0..2 {
                  self.u16_cells_le[i].assign(ctx, (((value >> (i * 16)) & 0xffffu32) as u64).into())?;
              }
      
              Ok(())
          }
      *)
      Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; ctx; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              Value.StructRecord
                                "core::ops::range::Range"
                                [ ("start", Value.Integer 0); ("end_", Value.Integer 2) ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              [ Ty.path "usize" ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| γ0_0 |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::circuit::AssignedCell")
                                                            [ F; F ];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                          Ty.apply
                                                            (Ty.path
                                                              "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                                                            [ F ],
                                                          [ F ],
                                                          "assign",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_array_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| self |),
                                                              "delphinus_zkwasm::circuits::cell::AllocatedU32Cell",
                                                              "u16_cells_le"
                                                            |),
                                                            i
                                                          |);
                                                          M.read (| ctx |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.path "u64",
                                                              [ F ],
                                                              "into",
                                                              []
                                                            |),
                                                            [
                                                              M.rust_cast
                                                                (BinOp.Pure.bit_and
                                                                  (BinOp.Panic.shr (|
                                                                    M.read (| value |),
                                                                    BinOp.Panic.mul (|
                                                                      Integer.Usize,
                                                                      M.read (| i |),
                                                                      Value.Integer 16
                                                                    |)
                                                                  |))
                                                                  (Value.Integer 65535))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_assign :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "assign" (assign F).
    End Impl_delphinus_zkwasm_circuits_cell_AllocatedU32Cell_F.
    
    Module Impl_delphinus_zkwasm_circuits_cell_AllocatedU32PermutationCell_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell") [ F ].
      
      (*
          pub(crate) fn expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
              self.curr_expr(meta)
          }
      *)
      Definition expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell")
                  [ F ],
                "curr_expr",
                []
              |),
              [ M.read (| self |); M.read (| meta |) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_expr :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "expr" (expr F).
      
      (*
          pub(crate) fn curr_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
              self.u32_cell.expr(meta)
          }
      *)
      Definition curr_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_trait_method (|
                "delphinus_zkwasm::circuits::cell::CellExpression",
                Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ],
                [ F ],
                "expr",
                []
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell",
                  "u32_cell"
                |);
                M.read (| meta |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_curr_expr :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "curr_expr" (curr_expr F).
      
      (*
          pub(crate) fn next_expr(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
              nextn!(
                  meta,
                  self.u32_cell.cell.col,
                  self.u32_cell.cell.rot + EVENT_TABLE_ENTRY_ROWS
              )
          }
      *)
      Definition next_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::VirtualCells") [ F ],
                "query_advice",
                []
              |),
              [
                M.read (| meta |);
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell",
                        "u32_cell"
                      |),
                      "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell",
                      "cell"
                    |),
                    "delphinus_zkwasm::circuits::cell::AllocatedCell",
                    "col"
                  |)
                |);
                Value.StructTuple
                  "halo2_proofs::poly::Rotation"
                  [
                    BinOp.Panic.add (|
                      Integer.I32,
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell",
                              "u32_cell"
                            |),
                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell",
                            "cell"
                          |),
                          "delphinus_zkwasm::circuits::cell::AllocatedCell",
                          "rot"
                        |)
                      |),
                      M.read (|
                        M.get_constant (|
                          "delphinus_zkwasm::circuits::etable::EVENT_TABLE_ENTRY_ROWS"
                        |)
                      |)
                    |)
                  ]
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_next_expr :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "next_expr" (next_expr F).
      
      (*
          pub(crate) fn assign(
              &self,
              ctx: &mut Context<'_, F>,
              value: u32,
          ) -> Result<AssignedCell<F, F>, Error> {
              for i in 0..2 {
                  self.u16_cells_le[i].assign(ctx, (((value >> (i * 16)) & 0xffffu32) as u64).into())?;
              }
              self.u32_cell.assign(ctx, (value as u64).into())
          }
      *)
      Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; ctx; value ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              Value.StructRecord
                                "core::ops::range::Range"
                                [ ("start", Value.Integer 0); ("end_", Value.Integer 2) ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              [ Ty.path "usize" ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| γ0_0 |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::circuit::AssignedCell")
                                                            [ F; F ];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                          Ty.apply
                                                            (Ty.path
                                                              "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                                                            [ F ],
                                                          [ F ],
                                                          "assign",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_array_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| self |),
                                                              "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell",
                                                              "u16_cells_le"
                                                            |),
                                                            i
                                                          |);
                                                          M.read (| ctx |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.path "u64",
                                                              [ F ],
                                                              "into",
                                                              []
                                                            |),
                                                            [
                                                              M.rust_cast
                                                                (BinOp.Pure.bit_and
                                                                  (BinOp.Panic.shr (|
                                                                    M.read (| value |),
                                                                    BinOp.Panic.mul (|
                                                                      Integer.Usize,
                                                                      M.read (| i |),
                                                                      Value.Integer 16
                                                                    |)
                                                                  |))
                                                                  (Value.Integer 65535))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::AssignedCell")
                                                                        [ F; F ];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::cell::CellExpression",
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                          [ F ],
                        [ F ],
                        "assign",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::cell::AllocatedU32PermutationCell",
                          "u32_cell"
                        |);
                        M.read (| ctx |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.path "u64",
                            [ F ],
                            "into",
                            []
                          |),
                          [ M.rust_cast (M.read (| value |)) ]
                        |)
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_assign :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "assign" (assign F).
    End Impl_delphinus_zkwasm_circuits_cell_AllocatedU32PermutationCell_F.
    
    
    Module Impl_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDyn_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn") [ F ].
      
      (*
          pub(crate) fn assign(
              &self,
              ctx: &mut Context<'_, F>,
              value: u64,
              is_i32: bool,
          ) -> Result<(), Error> {
              for i in 0..4 {
                  self.u16_cells_le[i].assign(ctx, ((value >> (i * 16)) & 0xffffu64).into())?;
              }
              self.u64_cell.assign(ctx, value.into())?;
      
              let pos = if is_i32 { 1 } else { 3 };
              let u16_value = (value >> (pos * 16)) & 0xffff;
              let u16_flag_bit = u16_value >> 15;
              let u16_rem = u16_value & 0x7fff;
              let u16_rem_diff = 0x7fff - u16_rem;
              self.flag_bit_cell.assign_u32(ctx, u16_flag_bit as u32)?;
              self.flag_u16_rem_cell.assign_u32(ctx, u16_rem as u32)?;
              self.flag_u16_rem_diff_cell
                  .assign_u32(ctx, u16_rem_diff as u32)?;
              Ok(())
          }
      *)
      Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; ctx; value; is_i32 ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            let is_i32 := M.alloc (| is_i32 |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              Value.StructRecord
                                "core::ops::range::Range"
                                [ ("start", Value.Integer 0); ("end_", Value.Integer 4) ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              [ Ty.path "usize" ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| γ0_0 |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::circuit::AssignedCell")
                                                            [ F; F ];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                          Ty.apply
                                                            (Ty.path
                                                              "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                                                            [ F ],
                                                          [ F ],
                                                          "assign",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_array_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| self |),
                                                              "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                                                              "u16_cells_le"
                                                            |),
                                                            i
                                                          |);
                                                          M.read (| ctx |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.path "u64",
                                                              [ F ],
                                                              "into",
                                                              []
                                                            |),
                                                            [
                                                              BinOp.Pure.bit_and
                                                                (BinOp.Panic.shr (|
                                                                  M.read (| value |),
                                                                  BinOp.Panic.mul (|
                                                                    Integer.Usize,
                                                                    M.read (| i |),
                                                                    Value.Integer 16
                                                                  |)
                                                                |))
                                                                (Value.Integer 65535)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                  [ F ],
                                [ F ],
                                "assign",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                                  "u64_cell"
                                |);
                                M.read (| ctx |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.path "u64",
                                    [ F ],
                                    "into",
                                    []
                                  |),
                                  [ M.read (| value |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let pos :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use is_i32 in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (| Value.Integer 1 |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Integer 3 |)))
                        ]
                      |)
                    |) in
                  let u16_value :=
                    M.alloc (|
                      BinOp.Pure.bit_and
                        (BinOp.Panic.shr (|
                          M.read (| value |),
                          BinOp.Panic.mul (| Integer.I32, M.read (| pos |), Value.Integer 16 |)
                        |))
                        (Value.Integer 65535)
                    |) in
                  let u16_flag_bit :=
                    M.alloc (| BinOp.Panic.shr (| M.read (| u16_value |), Value.Integer 15 |) |) in
                  let u16_rem :=
                    M.alloc (|
                      BinOp.Pure.bit_and (M.read (| u16_value |)) (Value.Integer 32767)
                    |) in
                  let u16_rem_diff :=
                    M.alloc (|
                      BinOp.Panic.sub (| Integer.U64, Value.Integer 32767, M.read (| u16_rem |) |)
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                  [ F ],
                                [ F ],
                                "assign_u32",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                                  "flag_bit_cell"
                                |);
                                M.read (| ctx |);
                                M.rust_cast (M.read (| u16_flag_bit |))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                  [ F ],
                                [ F ],
                                "assign_u32",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                                  "flag_u16_rem_cell"
                                |);
                                M.read (| ctx |);
                                M.rust_cast (M.read (| u16_rem |))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                  [ F ],
                                [ F ],
                                "assign_u32",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                                  "flag_u16_rem_diff_cell"
                                |);
                                M.read (| ctx |);
                                M.rust_cast (M.read (| u16_rem_diff |))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_assign :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "assign" (assign F).
    End Impl_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDyn_F.
    
    Module Impl_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDynSign_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign")
          [ F ].
      
      (*
          pub(crate) fn assign(
              &self,
              ctx: &mut Context<'_, F>,
              value: u64,
              is_i32: bool,
              is_sign: bool,
          ) -> Result<(), Error> {
              for i in 0..4 {
                  self.u16_cells_le[i].assign(ctx, ((value >> (i * 16)) & 0xffffu64).into())?;
              }
              self.u64_cell.assign(ctx, value.into())?;
      
              if is_sign {
                  let pos = if is_i32 { 1 } else { 3 };
                  let u16_value = (value >> (pos * 16)) & 0xffff;
                  let u16_flag_bit = u16_value >> 15;
                  let u16_rem = u16_value & 0x7fff;
                  let u16_rem_diff = 0x7fff - u16_rem;
                  self.flag_bit_cell.assign_u32(ctx, u16_flag_bit as u32)?;
                  self.flag_u16_rem_cell.assign_u32(ctx, u16_rem as u32)?;
                  self.flag_u16_rem_diff_cell
                      .assign_u32(ctx, u16_rem_diff as u32)?;
              }
              Ok(())
          }
      *)
      Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; ctx; value; is_i32; is_sign ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let ctx := M.alloc (| ctx |) in
            let value := M.alloc (| value |) in
            let is_i32 := M.alloc (| is_i32 |) in
            let is_sign := M.alloc (| is_sign |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              Value.StructRecord
                                "core::ops::range::Range"
                                [ ("start", Value.Integer 0); ("end_", Value.Integer 4) ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              [ Ty.path "usize" ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| γ0_0 |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::circuit::AssignedCell")
                                                            [ F; F ];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                          Ty.apply
                                                            (Ty.path
                                                              "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                                                            [ F ],
                                                          [ F ],
                                                          "assign",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_array_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| self |),
                                                              "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                                                              "u16_cells_le"
                                                            |),
                                                            i
                                                          |);
                                                          M.read (| ctx |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.path "u64",
                                                              [ F ],
                                                              "into",
                                                              []
                                                            |),
                                                            [
                                                              BinOp.Pure.bit_and
                                                                (BinOp.Panic.shr (|
                                                                  M.read (| value |),
                                                                  BinOp.Panic.mul (|
                                                                    Integer.Usize,
                                                                    M.read (| i |),
                                                                    Value.Integer 16
                                                                  |)
                                                                |))
                                                                (Value.Integer 65535)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                  [ F ],
                                [ F ],
                                "assign",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                                  "u64_cell"
                                |);
                                M.read (| ctx |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.path "u64",
                                    [ F ],
                                    "into",
                                    []
                                  |),
                                  [ M.read (| value |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use is_sign in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let pos :=
                              M.copy (|
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use is_i32 in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (| Value.Integer 1 |)));
                                    fun γ => ltac:(M.monadic (M.alloc (| Value.Integer 3 |)))
                                  ]
                                |)
                              |) in
                            let u16_value :=
                              M.alloc (|
                                BinOp.Pure.bit_and
                                  (BinOp.Panic.shr (|
                                    M.read (| value |),
                                    BinOp.Panic.mul (|
                                      Integer.I32,
                                      M.read (| pos |),
                                      Value.Integer 16
                                    |)
                                  |))
                                  (Value.Integer 65535)
                              |) in
                            let u16_flag_bit :=
                              M.alloc (|
                                BinOp.Panic.shr (| M.read (| u16_value |), Value.Integer 15 |)
                              |) in
                            let u16_rem :=
                              M.alloc (|
                                BinOp.Pure.bit_and (M.read (| u16_value |)) (Value.Integer 32767)
                              |) in
                            let u16_rem_diff :=
                              M.alloc (|
                                BinOp.Panic.sub (|
                                  Integer.U64,
                                  Value.Integer 32767,
                                  M.read (| u16_rem |)
                                |)
                              |) in
                            let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::circuit::AssignedCell")
                                            [ F; F ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                          Ty.apply
                                            (Ty.path
                                              "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                            [ F ],
                                          [ F ],
                                          "assign_u32",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                                            "flag_bit_cell"
                                          |);
                                          M.read (| ctx |);
                                          M.rust_cast (M.read (| u16_flag_bit |))
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::circuit::AssignedCell")
                                            [ F; F ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                          Ty.apply
                                            (Ty.path
                                              "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                            [ F ],
                                          [ F ],
                                          "assign_u32",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                                            "flag_u16_rem_cell"
                                          |);
                                          M.read (| ctx |);
                                          M.rust_cast (M.read (| u16_rem |))
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::circuit::AssignedCell")
                                            [ F; F ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                          Ty.apply
                                            (Ty.path
                                              "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                            [ F ],
                                          [ F ],
                                          "assign_u32",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDynSign",
                                            "flag_u16_rem_diff_cell"
                                          |);
                                          M.read (| ctx |);
                                          M.rust_cast (M.read (| u16_rem_diff |))
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_assign :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "assign" (assign F).
    End Impl_delphinus_zkwasm_circuits_cell_AllocatedU64CellWithFlagBitDynSign_F.
  End cell.
End circuits.
