(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module config.
    Definition value_POW_TABLE_POWER_START : Value.t :=
      M.run ltac:(M.monadic (M.alloc (| Value.Integer 128 |))).
    
    Definition value_MIN_K : Value.t := M.run ltac:(M.monadic (M.alloc (| Value.Integer 18 |))).
    
    Definition value_MAX_K : Value.t := M.run ltac:(M.monadic (M.alloc (| Value.Integer 25 |))).
    
    (*
    pub(crate) fn set_zkwasm_k(k: u32) {
        assert!(k >= MIN_K);
        assert!(k <= MAX_K);
    
        let mut zkwasm_k = ( *ZKWASM_K).lock().unwrap();
        *zkwasm_k = Some(k);
    }
    *)
    Definition set_zkwasm_k (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ k ] =>
        ltac:(M.monadic
          (let k := M.alloc (| k |) in
          M.read (|
            let _ :=
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.Pure.not
                              (BinOp.Pure.ge
                                (M.read (| k |))
                                (M.read (|
                                  M.get_constant (| "delphinus_zkwasm::circuits::config::MIN_K" |)
                                |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            M.get_function (| "core::panicking::panic", [] |),
                            [ M.read (| Value.String "assertion failed: k >= MIN_K" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let _ :=
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.Pure.not
                              (BinOp.Pure.le
                                (M.read (| k |))
                                (M.read (|
                                  M.get_constant (| "delphinus_zkwasm::circuits::config::MAX_K" |)
                                |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            M.get_function (| "core::panicking::panic", [] |),
                            [ M.read (| Value.String "assertion failed: k <= MAX_K" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let zkwasm_k :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [
                        Ty.apply
                          (Ty.path "std::sync::mutex::MutexGuard")
                          [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ] ];
                        Ty.apply
                          (Ty.path "std::sync::poison::PoisonError")
                          [
                            Ty.apply
                              (Ty.path "std::sync::mutex::MutexGuard")
                              [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ] ]
                          ]
                      ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::sync::mutex::Mutex")
                          [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ] ],
                        "lock",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.path "delphinus_zkwasm::circuits::config::ZKWASM_K",
                            [],
                            "deref",
                            []
                          |),
                          [
                            M.read (|
                              M.get_constant (| "delphinus_zkwasm::circuits::config::ZKWASM_K" |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.write (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::ops::deref::DerefMut",
                    Ty.apply
                      (Ty.path "std::sync::mutex::MutexGuard")
                      [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ] ],
                    [],
                    "deref_mut",
                    []
                  |),
                  [ zkwasm_k ]
                |),
                Value.StructTuple "core::option::Option::Some" [ M.read (| k |) ]
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    pub(in crate::circuits) fn zkwasm_k() -> u32 {
        ZKWASM_K
            .lock()
            .unwrap()
            .expect("ZKWASM_K is not set, please make sure 'init_zkwasm_runtime' have called.")
    }
    *)
    Definition zkwasm_k (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [] =>
        ltac:(M.monadic
          (M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ],
              "expect",
              []
            |),
            [
              M.read (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::ops::deref::Deref",
                    Ty.apply
                      (Ty.path "std::sync::mutex::MutexGuard")
                      [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ] ],
                    [],
                    "deref",
                    []
                  |),
                  [
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ] ];
                              Ty.apply
                                (Ty.path "std::sync::poison::PoisonError")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::MutexGuard")
                                    [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ] ]
                                ]
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::sync::mutex::Mutex")
                                [ Ty.apply (Ty.path "core::option::Option") [ Ty.path "u32" ] ],
                              "lock",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.path "delphinus_zkwasm::circuits::config::ZKWASM_K",
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.read (|
                                    M.get_constant (|
                                      "delphinus_zkwasm::circuits::config::ZKWASM_K"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |)
                  ]
                |)
              |);
              M.read (|
                Value.String
                  "ZKWASM_K is not set, please make sure 'init_zkwasm_runtime' have called."
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    pub(crate) fn init_zkwasm_runtime(k: u32) {
        set_zkwasm_k(k);
    }
    *)
    Definition init_zkwasm_runtime (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ k ] =>
        ltac:(M.monadic
          (let k := M.alloc (| k |) in
          M.read (|
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (| "delphinus_zkwasm::circuits::config::set_zkwasm_k", [] |),
                  [ M.read (| k |) ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    pub(crate) fn common_range(k: u32) -> u32 {
        (1 << k) - 256
    }
    *)
    Definition common_range (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ k ] =>
        ltac:(M.monadic
          (let k := M.alloc (| k |) in
          BinOp.Panic.sub (|
            Integer.U32,
            BinOp.Panic.shl (| Value.Integer 1, M.read (| k |) |),
            Value.Integer 256
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    pub(crate) fn common_range_max(k: u32) -> u32 {
        common_range(k) - 1
    }
    *)
    Definition common_range_max (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ k ] =>
        ltac:(M.monadic
          (let k := M.alloc (| k |) in
          BinOp.Panic.sub (|
            Integer.U32,
            M.call_closure (|
              M.get_function (| "delphinus_zkwasm::circuits::config::common_range", [] |),
              [ M.read (| k |) ]
            |),
            Value.Integer 1
          |)))
      | _, _ => M.impossible
      end.
  End config.
End circuits.
