(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module etable.
    Module assign.
      (* StructRecord
        {
          name := "EventTablePermutationCells";
          ty_params := [ "F" ];
          fields :=
            [
              ("rest_mops", Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ]);
              ("rest_jops",
                Ty.apply
                  (Ty.path "core::option::Option")
                  [ Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ] ]);
              ("pre_initialization_state",
                Ty.apply
                  (Ty.path "specs::state::InitializationState")
                  [
                    Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                    Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ]
                  ]);
              ("post_initialization_state",
                Ty.apply
                  (Ty.path "specs::state::InitializationState")
                  [
                    Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                    Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ]
                  ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_etable_assign_EventTablePermutationCells_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells")
            [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field4_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "EventTablePermutationCells" |);
                  M.read (| Value.String "rest_mops" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells",
                      "rest_mops"
                    |));
                  M.read (| Value.String "rest_jops" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells",
                      "rest_jops"
                    |));
                  M.read (| Value.String "pre_initialization_state" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells",
                      "pre_initialization_state"
                    |));
                  M.read (| Value.String "post_initialization_state" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells",
                        "post_initialization_state"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (Self F)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_etable_assign_EventTablePermutationCells_F.
      
      Module Impl_delphinus_zkwasm_circuits_etable_EventTableChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::etable::EventTableChip") [ F ].
        
        (*
            fn assign_step_state(
                &self,
                ctx: &mut Context<'_, F>,
                state: &InitializationState<u32, BigUint>,
            ) -> Result<InitializationState<AssignedCell<F, F>, AssignedCell<F, F>>, Error> {
                cfg_if::cfg_if! {
                    if #[cfg(feature="continuation")] {
                        macro_rules! assign_u32_state {
                            ($cell:ident, $value:expr) => {
                                self.config.common_config.$cell.assign(ctx, $value)?
                            };
                        }
                    } else {
                        macro_rules! assign_u32_state {
                            ($cell:ident, $value:expr) => {
                                self.config.common_config.$cell.assign_u32(ctx, $value)?
                            };
                        }
                    }
                }
        
                macro_rules! assign_common_range_advice {
                    ($cell:ident, $value:expr) => {
                        self.config
                            .common_config
                            .$cell
                            .assign(ctx, F::from($value as u64))?
                    };
                }
        
                #[cfg(feature = "continuation")]
                macro_rules! assign_biguint {
                    ($cell:ident, $value:expr) => {
                        self.config
                            .common_config
                            .$cell
                            .assign(ctx, bn_to_field(&$value))?
                    };
                }
        
                let eid = assign_u32_state!(eid_cell, state.eid);
                let fid = assign_common_range_advice!(fid_cell, state.fid);
                let iid = assign_common_range_advice!(iid_cell, state.iid);
                let sp = assign_common_range_advice!(sp_cell, state.sp);
                let frame_id = assign_u32_state!(frame_id_cell, state.frame_id);
        
                let host_public_inputs =
                    assign_common_range_advice!(input_index_cell, state.host_public_inputs);
                let context_in_index =
                    assign_common_range_advice!(context_input_index_cell, state.context_in_index);
                let context_out_index =
                    assign_common_range_advice!(context_output_index_cell, state.context_out_index);
                let external_host_call_call_index = assign_common_range_advice!(
                    external_host_call_index_cell,
                    state.external_host_call_call_index
                );
        
                let initial_memory_pages =
                    assign_common_range_advice!(mpages_cell, state.initial_memory_pages);
                let maximal_memory_pages =
                    assign_common_range_advice!(maximal_memory_pages_cell, state.maximal_memory_pages);
        
                #[cfg(feature = "continuation")]
                let jops = assign_biguint!(jops_cell, state.jops);
        
                ctx.step(EVENT_TABLE_ENTRY_ROWS as usize);
        
                Ok(InitializationState {
                    eid,
                    fid,
                    iid,
                    frame_id,
                    sp,
        
                    host_public_inputs,
                    context_in_index,
                    context_out_index,
                    external_host_call_call_index,
        
                    initial_memory_pages,
                    maximal_memory_pages,
        
                    #[cfg(feature = "continuation")]
                    jops,
        
                    #[cfg(not(feature = "continuation"))]
                    _phantom: core::marker::PhantomData,
                })
            }
        *)
        Definition assign_step_state (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; state ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let state := M.alloc (| state |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let eid :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign_u32",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "eid_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| state |),
                                        "specs::state::InitializationState",
                                        "eid"
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "specs::state::InitializationState")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let fid :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "fid_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        F,
                                        [ Ty.path "u64" ],
                                        "from",
                                        []
                                      |),
                                      [
                                        M.rust_cast
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| state |),
                                              "specs::state::InitializationState",
                                              "fid"
                                            |)
                                          |))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "specs::state::InitializationState")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let iid :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "iid_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        F,
                                        [ Ty.path "u64" ],
                                        "from",
                                        []
                                      |),
                                      [
                                        M.rust_cast
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| state |),
                                              "specs::state::InitializationState",
                                              "iid"
                                            |)
                                          |))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "specs::state::InitializationState")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let sp :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "sp_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        F,
                                        [ Ty.path "u64" ],
                                        "from",
                                        []
                                      |),
                                      [
                                        M.rust_cast
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| state |),
                                              "specs::state::InitializationState",
                                              "sp"
                                            |)
                                          |))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "specs::state::InitializationState")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let frame_id :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign_u32",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "frame_id_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| state |),
                                        "specs::state::InitializationState",
                                        "frame_id"
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "specs::state::InitializationState")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let host_public_inputs :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "input_index_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        F,
                                        [ Ty.path "u64" ],
                                        "from",
                                        []
                                      |),
                                      [
                                        M.rust_cast
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| state |),
                                              "specs::state::InitializationState",
                                              "host_public_inputs"
                                            |)
                                          |))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "specs::state::InitializationState")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let context_in_index :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "context_input_index_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        F,
                                        [ Ty.path "u64" ],
                                        "from",
                                        []
                                      |),
                                      [
                                        M.rust_cast
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| state |),
                                              "specs::state::InitializationState",
                                              "context_in_index"
                                            |)
                                          |))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "specs::state::InitializationState")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let context_out_index :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "context_output_index_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        F,
                                        [ Ty.path "u64" ],
                                        "from",
                                        []
                                      |),
                                      [
                                        M.rust_cast
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| state |),
                                              "specs::state::InitializationState",
                                              "context_out_index"
                                            |)
                                          |))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "specs::state::InitializationState")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let external_host_call_call_index :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "external_host_call_index_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        F,
                                        [ Ty.path "u64" ],
                                        "from",
                                        []
                                      |),
                                      [
                                        M.rust_cast
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| state |),
                                              "specs::state::InitializationState",
                                              "external_host_call_call_index"
                                            |)
                                          |))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "specs::state::InitializationState")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let initial_memory_pages :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "mpages_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        F,
                                        [ Ty.path "u64" ],
                                        "from",
                                        []
                                      |),
                                      [
                                        M.rust_cast
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| state |),
                                              "specs::state::InitializationState",
                                              "initial_memory_pages"
                                            |)
                                          |))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "specs::state::InitializationState")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let maximal_memory_pages :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "maximal_memory_pages_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        F,
                                        [ Ty.path "u64" ],
                                        "from",
                                        []
                                      |),
                                      [
                                        M.rust_cast
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| state |),
                                              "specs::state::InitializationState",
                                              "maximal_memory_pages"
                                            |)
                                          |))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "specs::state::InitializationState")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "delphinus_zkwasm::circuits::utils::Context") [ F ],
                            "step",
                            []
                          |),
                          [
                            M.read (| ctx |);
                            M.rust_cast
                              (M.read (|
                                M.get_constant (|
                                  "delphinus_zkwasm::circuits::etable::EVENT_TABLE_ENTRY_ROWS"
                                |)
                              |))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructRecord
                            "specs::state::InitializationState"
                            [
                              ("eid", M.read (| eid |));
                              ("fid", M.read (| fid |));
                              ("iid", M.read (| iid |));
                              ("frame_id", M.read (| frame_id |));
                              ("sp", M.read (| sp |));
                              ("host_public_inputs", M.read (| host_public_inputs |));
                              ("context_in_index", M.read (| context_in_index |));
                              ("context_out_index", M.read (| context_out_index |));
                              ("external_host_call_call_index",
                                M.read (| external_host_call_call_index |));
                              ("initial_memory_pages", M.read (| initial_memory_pages |));
                              ("maximal_memory_pages", M.read (| maximal_memory_pages |));
                              ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
                            ]
                        ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_step_state :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign_step_state" (assign_step_state F).
        
        (*
            fn compute_rest_mops_and_jops(
                &self,
                op_configs: Arc<BTreeMap<OpcodeClassPlain, OpcodeConfig<F>>>,
                itable: &InstructionTable,
                event_table: &EventTableWithMemoryInfo,
                _initialization_state: &InitializationState<u32, BigUint>,
            ) -> (u32, BigUint) {
                let (rest_mops, _rest_jops) = event_table.0.iter().fold(
                    (0, BigUint::from(0u64)),
                    |(rest_mops_sum, rest_jops_sum), entry| {
                        let instruction = entry.eentry.get_instruction(itable);
        
                        let op_config = op_configs.get(&((&instruction.opcode).into())).unwrap();
        
                        (
                            rest_mops_sum + op_config.0.memory_writing_ops(&entry.eentry),
                            rest_jops_sum + op_config.0.jops(),
                        )
                    },
                );
        
                cfg_if::cfg_if! {
                    if #[cfg(feature="continuation")] {
                        (rest_mops, _initialization_state.jops.clone())
                    } else {
                        (rest_mops, _rest_jops)
                    }
                }
            }
        *)
        Definition compute_rest_mops_and_jops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; op_configs; itable; event_table; _initialization_state ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let op_configs := M.alloc (| op_configs |) in
              let itable := M.alloc (| itable |) in
              let event_table := M.alloc (| event_table |) in
              let _initialization_state := M.alloc (| _initialization_state |) in
              M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                          ],
                        [],
                        "fold",
                        [
                          Ty.tuple [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ];
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.path
                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                                    ]
                                ]
                            ]
                            (Ty.tuple [ Ty.path "u32"; Ty.path "num_bigint::biguint::BigUint" ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [
                                Ty.path
                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                              ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_tuple_field (|
                                  M.read (| event_table |),
                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo",
                                  0
                                |)
                              ]
                            |)
                          ]
                        |);
                        Value.Tuple
                          [
                            Value.Integer 0;
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::convert::From",
                                Ty.path "num_bigint::biguint::BigUint",
                                [ Ty.path "u64" ],
                                "from",
                                []
                              |),
                              [ Value.Integer 0 ]
                            |)
                          ];
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0; α1 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let rest_mops_sum := M.copy (| γ0_0 |) in
                                        let rest_jops_sum := M.copy (| γ0_1 |) in
                                        M.match_operator (|
                                          M.alloc (| α1 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let entry := M.copy (| γ |) in
                                                M.read (|
                                                  let instruction :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "specs::etable::EventTableEntry",
                                                          "get_instruction",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| entry |),
                                                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                            "eentry"
                                                          |);
                                                          M.read (| itable |)
                                                        ]
                                                      |)
                                                    |) in
                                                  let op_config :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                    [ F ]
                                                                ]
                                                            ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::collections::btree::map::BTreeMap")
                                                                [
                                                                  Ty.path
                                                                    "specs::itable::OpcodeClassPlain";
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "get",
                                                              [
                                                                Ty.path
                                                                  "specs::itable::OpcodeClassPlain"
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::collections::btree::map::BTreeMap")
                                                                        [
                                                                          Ty.path
                                                                            "specs::itable::OpcodeClassPlain";
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [ op_configs ]
                                                              |);
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::convert::Into",
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "specs::itable::Opcode"
                                                                      ],
                                                                    [
                                                                      Ty.path
                                                                        "specs::itable::OpcodeClassPlain"
                                                                    ],
                                                                    "into",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| instruction |),
                                                                      "specs::itable::InstructionTableEntry",
                                                                      "opcode"
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (|
                                                    Value.Tuple
                                                      [
                                                        BinOp.Panic.add (|
                                                          Integer.U32,
                                                          M.read (| rest_mops_sum |),
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                              Ty.dyn
                                                                [
                                                                  ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                    [])
                                                                ],
                                                              [ F ],
                                                              "memory_writing_ops",
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  M.read (| op_config |),
                                                                  "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                  0
                                                                |)
                                                              |);
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| entry |),
                                                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                "eentry"
                                                              |)
                                                            ]
                                                          |)
                                                        |);
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Add",
                                                            Ty.path "num_bigint::biguint::BigUint",
                                                            [ Ty.path "num_bigint::biguint::BigUint"
                                                            ],
                                                            "add",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| rest_jops_sum |);
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                Ty.dyn
                                                                  [
                                                                    ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                      [])
                                                                  ],
                                                                [ F ],
                                                                "jops",
                                                                []
                                                              |),
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    M.read (| op_config |),
                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                    0
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let rest_mops := M.copy (| γ0_0 |) in
                        let _rest_jops := M.copy (| γ0_1 |) in
                        M.alloc (|
                          Value.Tuple [ M.read (| rest_mops |); M.read (| _rest_jops |) ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_compute_rest_mops_and_jops :
          forall (F : Ty.t),
          M.IsAssociatedFunction
            (Self F)
            "compute_rest_mops_and_jops"
            (compute_rest_mops_and_jops F).
        
        (*
            fn init(&self, ctx: &mut Context<'_, F>) -> Result<(), Error> {
                for _ in 0..self.capability {
                    ctx.region.assign_fixed(
                        || "etable: step sel",
                        self.config.step_sel,
                        ctx.offset,
                        || Ok(F::one()),
                    )?;
        
                    ctx.step(EVENT_TABLE_ENTRY_ROWS as usize);
                }
        
                ctx.region.assign_advice_from_constant(
                    || "etable: rest mops terminates",
                    self.config.common_config.rest_mops_cell.cell.col,
                    ctx.offset,
                    F::zero(),
                )?;
        
                #[cfg(not(feature = "continuation"))]
                ctx.region.assign_advice_from_constant(
                    || "etable: rest jops terminates",
                    self.config.common_config.jops_cell.cell.col,
                    ctx.offset,
                    F::zero(),
                )?;
        
                Ok(())
            }
        *)
        Definition init (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                Value.StructRecord
                                  "core::ops::range::Range"
                                  [
                                    ("start", Value.Integer 0);
                                    ("end_",
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "capability"
                                        |)
                                      |))
                                  ]
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::Region")
                                                              [ F ],
                                                            "assign_fixed",
                                                            [
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    F;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]);
                                                              F;
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "str" ]);
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "region"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              Value.String
                                                                                "etable: step sel"
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end));
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::etable::EventTableChip",
                                                                  "config"
                                                                |),
                                                                "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                                                "step_sel"
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| ctx |),
                                                                "delphinus_zkwasm::circuits::utils::Context",
                                                                "offset"
                                                              |)
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (Value.StructTuple
                                                                              "core::result::Result::Ok"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "ff::Field",
                                                                                    F,
                                                                                    [],
                                                                                    "one",
                                                                                    []
                                                                                  |),
                                                                                  []
                                                                                |)
                                                                              ]))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "step",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| ctx |);
                                                      M.rust_cast
                                                        (M.read (|
                                                          M.get_constant (|
                                                            "delphinus_zkwasm::circuits::etable::EVENT_TABLE_ENTRY_ROWS"
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                                  Ty.path "halo2_proofs::plonk::error::Error"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                  "assign_advice_from_constant",
                                  [
                                    F;
                                    Ty.function
                                      [ Ty.tuple [] ]
                                      (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| ctx |),
                                      "delphinus_zkwasm::circuits::utils::Context",
                                      "region"
                                    |)
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.read (|
                                                    Value.String "etable: rest mops terminates"
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end));
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::EventTableChip",
                                              "config"
                                            |),
                                            "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                            "common_config"
                                          |),
                                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                          "rest_mops_cell"
                                        |),
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell",
                                        "cell"
                                      |),
                                      "delphinus_zkwasm::circuits::cell::AllocatedCell",
                                      "col"
                                    |)
                                  |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| ctx |),
                                      "delphinus_zkwasm::circuits::utils::Context",
                                      "offset"
                                    |)
                                  |);
                                  M.call_closure (|
                                    M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                                    []
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply (Ty.path "halo2_proofs::circuit::AssignedCell") [ F; F ];
                                  Ty.path "halo2_proofs::plonk::error::Error"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ],
                                  "assign_advice_from_constant",
                                  [
                                    F;
                                    Ty.function
                                      [ Ty.tuple [] ]
                                      (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| ctx |),
                                      "delphinus_zkwasm::circuits::utils::Context",
                                      "region"
                                    |)
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.read (|
                                                    Value.String "etable: rest jops terminates"
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end));
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::EventTableChip",
                                              "config"
                                            |),
                                            "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                            "common_config"
                                          |),
                                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                          "jops_cell"
                                        |),
                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell",
                                        "cell"
                                      |),
                                      "delphinus_zkwasm::circuits::cell::AllocatedCell",
                                      "col"
                                    |)
                                  |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| ctx |),
                                      "delphinus_zkwasm::circuits::utils::Context",
                                      "offset"
                                    |)
                                  |);
                                  M.call_closure (|
                                    M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                                    []
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_init :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "init" (init F).
        
        (*
            fn assign_rest_ops_first_step(
                &self,
                ctx: &mut Context<'_, F>,
            ) -> Result<(AssignedCell<F, F>, AssignedCell<F, F>), Error> {
                let rest_mops_cell = self
                    .config
                    .common_config
                    .rest_mops_cell
                    .assign(ctx, F::zero())?;
        
                let rest_jops_cell = self.config.common_config.jops_cell.assign(ctx, F::zero())?;
        
                Ok((rest_mops_cell, rest_jops_cell))
            }
        *)
        Definition assign_rest_ops_first_step (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let rest_mops_cell :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "assign",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "rest_mops_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.call_closure (|
                                      M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                                      []
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let rest_jops_cell :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::circuit::AssignedCell")
                                      [ F; F ];
                                    Ty.path "halo2_proofs::plonk::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                      [ F ],
                                    [ F ],
                                    "assign",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                          "config"
                                        |),
                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                        "common_config"
                                      |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "jops_cell"
                                    |);
                                    M.read (| ctx |);
                                    M.call_closure (|
                                      M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                                      []
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.Tuple [ M.read (| rest_mops_cell |); M.read (| rest_jops_cell |) ] ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_rest_ops_first_step :
          forall (F : Ty.t),
          M.IsAssociatedFunction
            (Self F)
            "assign_rest_ops_first_step"
            (assign_rest_ops_first_step F).
        
        (*
            fn assign_padding_and_post_initialization_state(
                &self,
                ctx: &mut Context<'_, F>,
                initialization_state: &InitializationState<u32, BigUint>,
            ) -> Result<InitializationState<AssignedCell<F, F>, AssignedCell<F, F>>, Error> {
                while ctx.offset < self.capability * EVENT_TABLE_ENTRY_ROWS as usize {
                    self.assign_step_state(ctx, initialization_state)?;
                }
        
                self.assign_step_state(ctx, initialization_state)
            }
        *)
        Definition assign_padding_and_post_initialization_state
            (F : Ty.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; ctx; initialization_state ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let ctx := M.alloc (| ctx |) in
              let initialization_state := M.alloc (| initialization_state |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let _ :=
                      M.loop (|
                        ltac:(M.monadic
                          (M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.Pure.lt
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| ctx |),
                                              "delphinus_zkwasm::circuits::utils::Context",
                                              "offset"
                                            |)
                                          |))
                                          (BinOp.Panic.mul (|
                                            Integer.Usize,
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::EventTableChip",
                                                "capability"
                                              |)
                                            |),
                                            M.rust_cast
                                              (M.read (|
                                                M.get_constant (|
                                                  "delphinus_zkwasm::circuits::etable::EVENT_TABLE_ENTRY_ROWS"
                                                |)
                                              |))
                                          |))
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::Try",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "specs::state::InitializationState")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ]
                                                  ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [],
                                            "branch",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::etable::EventTableChip")
                                                  [ F ],
                                                "assign_step_state",
                                                []
                                              |),
                                              [
                                                M.read (| self |);
                                                M.read (| ctx |);
                                                M.read (| initialization_state |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Break",
                                                0
                                              |) in
                                            let residual := M.copy (| γ0_0 |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.read (|
                                                  M.return_ (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::FromResidual",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "specs::state::InitializationState")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::circuit::AssignedCell")
                                                                  [ F; F ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::circuit::AssignedCell")
                                                                  [ F; F ]
                                                              ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.path "core::convert::Infallible";
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ]
                                                        ],
                                                        "from_residual",
                                                        []
                                                      |),
                                                      [ M.read (| residual |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Continue",
                                                0
                                              |) in
                                            let val := M.copy (| γ0_0 |) in
                                            val))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let _ :=
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::EventTableChip")
                            [ F ],
                          "assign_step_state",
                          []
                        |),
                        [ M.read (| self |); M.read (| ctx |); M.read (| initialization_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_padding_and_post_initialization_state :
          forall (F : Ty.t),
          M.IsAssociatedFunction
            (Self F)
            "assign_padding_and_post_initialization_state"
            (assign_padding_and_post_initialization_state F).
        
        (*
            fn assign_entries(
                &self,
                region: &Region<'_, F>,
                op_configs: Arc<BTreeMap<OpcodeClassPlain, OpcodeConfig<F>>>,
                itable: &InstructionTable,
                event_table: &EventTableWithMemoryInfo,
                configure_table: &ConfigureTable,
                initialization_state: &InitializationState<u32, BigUint>,
                post_initialization_state: &InitializationState<u32, BigUint>,
                rest_mops: u32,
                jops: BigUint,
            ) -> Result<(), Error> {
                macro_rules! assign_advice {
                    ($ctx:expr, $cell:ident, $value:expr) => {
                        self.config
                            .common_config
                            .$cell
                            .assign($ctx, $value)
                            .unwrap()
                    };
                }
        
                macro_rules! assign_advice_cell {
                    ($ctx:expr, $cell:ident, $value:expr) => {
                        $cell.assign($ctx, $value).unwrap()
                    };
                }
        
                /*
                 * The length of event_table equals 0: without_witness
                 */
                if event_table.0.len() == 0 {
                    return Ok(());
                }
        
                let status = {
                    let mut host_public_inputs = initialization_state.host_public_inputs;
                    let mut context_in_index = initialization_state.context_in_index;
                    let mut context_out_index = initialization_state.context_out_index;
                    let mut external_host_call_call_index =
                        initialization_state.external_host_call_call_index;
        
                    let mut rest_mops = rest_mops;
                    let mut jops = jops;
        
                    let mut status = event_table
                        .0
                        .iter()
                        .map(|entry| {
                            let op_config = op_configs
                                .get(&((&entry.eentry.get_instruction(itable).opcode).into()))
                                .unwrap();
        
                            let status = Status {
                                eid: entry.eentry.eid,
                                fid: entry.eentry.fid,
                                iid: entry.eentry.iid,
                                sp: entry.eentry.sp,
                                last_jump_eid: entry.eentry.last_jump_eid,
                                allocated_memory_pages: entry.eentry.allocated_memory_pages,
        
                                rest_mops,
                                jops: jops.clone(),
        
                                host_public_inputs,
                                context_in_index,
                                context_out_index,
                                external_host_call_call_index,
        
                                itable,
                            };
        
                            if op_config.0.is_host_public_input(&entry.eentry) {
                                host_public_inputs += 1;
                            }
                            if op_config.0.is_context_input_op(&entry.eentry) {
                                context_in_index += 1;
                            }
                            if op_config.0.is_context_output_op(&entry.eentry) {
                                context_out_index += 1;
                            }
                            if op_config.0.is_external_host_call(&entry.eentry) {
                                external_host_call_call_index += 1;
                            }
        
                            rest_mops -= op_config.0.memory_writing_ops(&entry.eentry);
                            if cfg!(feature = "continuation") {
                                jops += op_config.0.jops()
                            } else {
                                jops -= op_config.0.jops()
                            }
        
                            status
                        })
                        .collect::<Vec<_>>();
        
                    assert_eq!(
                        post_initialization_state.host_public_inputs,
                        host_public_inputs
                    );
                    assert_eq!(post_initialization_state.context_in_index, context_in_index);
                    assert_eq!(
                        post_initialization_state.context_out_index,
                        context_out_index
                    );
                    assert_eq!(
                        post_initialization_state.external_host_call_call_index,
                        external_host_call_call_index
                    );
        
                    let terminate_status = Status {
                        eid: post_initialization_state.eid,
                        fid: post_initialization_state.fid,
                        iid: post_initialization_state.iid,
                        sp: post_initialization_state.sp,
                        last_jump_eid: post_initialization_state.frame_id,
                        allocated_memory_pages: post_initialization_state.initial_memory_pages,
        
                        host_public_inputs: post_initialization_state.host_public_inputs,
                        context_in_index: post_initialization_state.context_in_index,
                        context_out_index: post_initialization_state.context_out_index,
                        external_host_call_call_index: post_initialization_state
                            .external_host_call_call_index,
        
                        rest_mops,
                        jops,
        
                        itable,
                    };
        
                    status.push(terminate_status);
        
                    status
                };
        
                event_table
                    .0
                    .par_iter()
                    .enumerate()
                    .for_each(|(index, entry)| {
                        let mut ctx = Context::new(region);
                        ctx.step((EVENT_TABLE_ENTRY_ROWS as usize * index) as usize);
        
                        let instruction = entry.eentry.get_instruction(itable);
        
                        let step_status = StepStatus {
                            current: &status[index],
                            next: &status[index + 1],
                            configure_table,
                        };
        
                        {
                            let class: OpcodeClassPlain = (&instruction.opcode).into();
        
                            let op = self.config.common_config.ops[class.index()];
                            assign_advice_cell!(&mut ctx, op, F::one());
                        }
        
                        assign_advice!(&mut ctx, enabled_cell, F::one());
                        assign_advice!(
                            &mut ctx,
                            rest_mops_cell,
                            F::from(status[index].rest_mops as u64)
                        );
                        assign_advice!(
                            &mut ctx,
                            itable_lookup_cell,
                            bn_to_field(&instruction.encode)
                        );
                        assign_advice!(&mut ctx, jops_cell, bn_to_field(&status[index].jops));
        
                        {
                            let op_config = op_configs.get(&((&instruction.opcode).into())).unwrap();
                            op_config.0.assign(&mut ctx, &step_status, &entry).unwrap();
                        }
        
                        // Be careful, the function will step context.
                        self.assign_step_state(
                            &mut ctx,
                            &InitializationState {
                                eid: entry.eentry.eid,
                                fid: entry.eentry.fid,
                                iid: entry.eentry.iid,
                                sp: entry.eentry.sp,
                                frame_id: entry.eentry.last_jump_eid,
        
                                host_public_inputs: status[index].host_public_inputs,
                                context_in_index: status[index].context_in_index,
                                context_out_index: status[index].context_out_index,
                                external_host_call_call_index: status[index].external_host_call_call_index,
        
                                initial_memory_pages: entry.eentry.allocated_memory_pages,
                                maximal_memory_pages: configure_table.maximal_memory_pages,
        
                                #[cfg(feature = "continuation")]
                                jops: status[index].jops.clone(),
        
                                #[cfg(not(feature = "continuation"))]
                                _phantom: core::marker::PhantomData,
                            },
                        )
                        .unwrap();
                    });
        
                Ok(())
            }
        *)
        Definition assign_entries (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [],
              [
                self;
                region;
                op_configs;
                itable;
                event_table;
                configure_table;
                initialization_state;
                post_initialization_state;
                rest_mops;
                jops
              ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let region := M.alloc (| region |) in
              let op_configs := M.alloc (| op_configs |) in
              let itable := M.alloc (| itable |) in
              let event_table := M.alloc (| event_table |) in
              let configure_table := M.alloc (| configure_table |) in
              let initialization_state := M.alloc (| initialization_state |) in
              let post_initialization_state := M.alloc (| post_initialization_state |) in
              let rest_mops := M.alloc (| rest_mops |) in
              let jops := M.alloc (| jops |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.eq
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path
                                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.read (| event_table |),
                                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo",
                                            0
                                          |)
                                        ]
                                      |))
                                      (Value.Integer 0)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        [ Value.Tuple [] ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let status :=
                      M.copy (|
                        let host_public_inputs :=
                          M.copy (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| initialization_state |),
                              "specs::state::InitializationState",
                              "host_public_inputs"
                            |)
                          |) in
                        let context_in_index :=
                          M.copy (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| initialization_state |),
                              "specs::state::InitializationState",
                              "context_in_index"
                            |)
                          |) in
                        let context_out_index :=
                          M.copy (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| initialization_state |),
                              "specs::state::InitializationState",
                              "context_out_index"
                            |)
                          |) in
                        let external_host_call_call_index :=
                          M.copy (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| initialization_state |),
                              "specs::state::InitializationState",
                              "external_host_call_call_index"
                            |)
                          |) in
                        let rest_mops := M.copy (| rest_mops |) in
                        let jops := M.copy (| jops |) in
                        let status :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.path
                                          "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                                              ]
                                          ]
                                      ]
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::utils::step_status::Status")
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path
                                        "delphinus_zkwasm::circuits::utils::step_status::Status";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.path
                                          "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                                      ],
                                    [],
                                    "map",
                                    [
                                      Ty.path
                                        "delphinus_zkwasm::circuits::utils::step_status::Status";
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.path
                                                    "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                                                ]
                                            ]
                                        ]
                                        (Ty.path
                                          "delphinus_zkwasm::circuits::utils::step_status::Status")
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.path
                                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                                          ],
                                        "iter",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path
                                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_tuple_field (|
                                              M.read (| event_table |),
                                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo",
                                              0
                                            |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let entry := M.copy (| γ |) in
                                                    M.read (|
                                                      let op_config :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                        [ F ]
                                                                    ]
                                                                ],
                                                              "unwrap",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "alloc::collections::btree::map::BTreeMap")
                                                                    [
                                                                      Ty.path
                                                                        "specs::itable::OpcodeClassPlain";
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                        [ F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "get",
                                                                  [
                                                                    Ty.path
                                                                      "specs::itable::OpcodeClassPlain"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::collections::btree::map::BTreeMap")
                                                                            [
                                                                              Ty.path
                                                                                "specs::itable::OpcodeClassPlain";
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                                [ F ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      "deref",
                                                                      []
                                                                    |),
                                                                    [ op_configs ]
                                                                  |);
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::convert::Into",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.path
                                                                              "specs::itable::Opcode"
                                                                          ],
                                                                        [
                                                                          Ty.path
                                                                            "specs::itable::OpcodeClassPlain"
                                                                        ],
                                                                        "into",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "specs::etable::EventTableEntry",
                                                                              "get_instruction",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.read (| entry |),
                                                                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                                "eentry"
                                                                              |);
                                                                              M.read (| itable |)
                                                                            ]
                                                                          |),
                                                                          "specs::itable::InstructionTableEntry",
                                                                          "opcode"
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      let status :=
                                                        M.alloc (|
                                                          Value.StructRecord
                                                            "delphinus_zkwasm::circuits::utils::step_status::Status"
                                                            [
                                                              ("eid",
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| entry |),
                                                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                      "eentry"
                                                                    |),
                                                                    "specs::etable::EventTableEntry",
                                                                    "eid"
                                                                  |)
                                                                |));
                                                              ("fid",
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| entry |),
                                                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                      "eentry"
                                                                    |),
                                                                    "specs::etable::EventTableEntry",
                                                                    "fid"
                                                                  |)
                                                                |));
                                                              ("iid",
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| entry |),
                                                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                      "eentry"
                                                                    |),
                                                                    "specs::etable::EventTableEntry",
                                                                    "iid"
                                                                  |)
                                                                |));
                                                              ("sp",
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| entry |),
                                                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                      "eentry"
                                                                    |),
                                                                    "specs::etable::EventTableEntry",
                                                                    "sp"
                                                                  |)
                                                                |));
                                                              ("last_jump_eid",
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| entry |),
                                                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                      "eentry"
                                                                    |),
                                                                    "specs::etable::EventTableEntry",
                                                                    "last_jump_eid"
                                                                  |)
                                                                |));
                                                              ("allocated_memory_pages",
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| entry |),
                                                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                      "eentry"
                                                                    |),
                                                                    "specs::etable::EventTableEntry",
                                                                    "allocated_memory_pages"
                                                                  |)
                                                                |));
                                                              ("rest_mops", M.read (| rest_mops |));
                                                              ("jops",
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    Ty.path
                                                                      "num_bigint::biguint::BigUint",
                                                                    [],
                                                                    "clone",
                                                                    []
                                                                  |),
                                                                  [ jops ]
                                                                |));
                                                              ("host_public_inputs",
                                                                M.read (| host_public_inputs |));
                                                              ("context_in_index",
                                                                M.read (| context_in_index |));
                                                              ("context_out_index",
                                                                M.read (| context_out_index |));
                                                              ("external_host_call_call_index",
                                                                M.read (|
                                                                  external_host_call_call_index
                                                                |));
                                                              ("itable", M.read (| itable |))
                                                            ]
                                                        |) in
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                          Ty.dyn
                                                                            [
                                                                              ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                [])
                                                                            ],
                                                                          [ F ],
                                                                          "is_host_public_input",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              M.read (|
                                                                                op_config
                                                                              |),
                                                                              "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                              0
                                                                            |)
                                                                          |);
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| entry |),
                                                                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                            "eentry"
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                let _ :=
                                                                  let β := host_public_inputs in
                                                                  M.write (|
                                                                    β,
                                                                    BinOp.Panic.add (|
                                                                      Integer.U32,
                                                                      M.read (| β |),
                                                                      Value.Integer 1
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                          Ty.dyn
                                                                            [
                                                                              ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                [])
                                                                            ],
                                                                          [ F ],
                                                                          "is_context_input_op",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              M.read (|
                                                                                op_config
                                                                              |),
                                                                              "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                              0
                                                                            |)
                                                                          |);
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| entry |),
                                                                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                            "eentry"
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                let _ :=
                                                                  let β := context_in_index in
                                                                  M.write (|
                                                                    β,
                                                                    BinOp.Panic.add (|
                                                                      Integer.U32,
                                                                      M.read (| β |),
                                                                      Value.Integer 1
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                          Ty.dyn
                                                                            [
                                                                              ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                [])
                                                                            ],
                                                                          [ F ],
                                                                          "is_context_output_op",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              M.read (|
                                                                                op_config
                                                                              |),
                                                                              "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                              0
                                                                            |)
                                                                          |);
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| entry |),
                                                                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                            "eentry"
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                let _ :=
                                                                  let β := context_out_index in
                                                                  M.write (|
                                                                    β,
                                                                    BinOp.Panic.add (|
                                                                      Integer.U32,
                                                                      M.read (| β |),
                                                                      Value.Integer 1
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                          Ty.dyn
                                                                            [
                                                                              ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                [])
                                                                            ],
                                                                          [ F ],
                                                                          "is_external_host_call",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              M.read (|
                                                                                op_config
                                                                              |),
                                                                              "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                              0
                                                                            |)
                                                                          |);
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| entry |),
                                                                            "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                            "eentry"
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                let _ :=
                                                                  let β :=
                                                                    external_host_call_call_index in
                                                                  M.write (|
                                                                    β,
                                                                    BinOp.Panic.add (|
                                                                      Integer.U32,
                                                                      M.read (| β |),
                                                                      Value.Integer 1
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      let _ :=
                                                        let β := rest_mops in
                                                        M.write (|
                                                          β,
                                                          BinOp.Panic.sub (|
                                                            Integer.U32,
                                                            M.read (| β |),
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                Ty.dyn
                                                                  [
                                                                    ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                      [])
                                                                  ],
                                                                [ F ],
                                                                "memory_writing_ops",
                                                                []
                                                              |),
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    M.read (| op_config |),
                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                    0
                                                                  |)
                                                                |);
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| entry |),
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                  "eentry"
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |) in
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      Value.Bool false
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::AddAssign",
                                                                      Ty.path
                                                                        "num_bigint::biguint::BigUint",
                                                                      [
                                                                        Ty.path
                                                                          "num_bigint::biguint::BigUint"
                                                                      ],
                                                                      "add_assign",
                                                                      []
                                                                    |),
                                                                    [
                                                                      jops;
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                          Ty.dyn
                                                                            [
                                                                              ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                [])
                                                                            ],
                                                                          [ F ],
                                                                          "jops",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              M.read (|
                                                                                op_config
                                                                              |),
                                                                              "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                              0
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::SubAssign",
                                                                      Ty.path
                                                                        "num_bigint::biguint::BigUint",
                                                                      [
                                                                        Ty.path
                                                                          "num_bigint::biguint::BigUint"
                                                                      ],
                                                                      "sub_assign",
                                                                      []
                                                                    |),
                                                                    [
                                                                      jops;
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                          Ty.dyn
                                                                            [
                                                                              ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                [])
                                                                            ],
                                                                          [ F ],
                                                                          "jops",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              M.read (|
                                                                                op_config
                                                                              |),
                                                                              "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                              0
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)))
                                                          ]
                                                        |) in
                                                      status
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              Value.Tuple
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| post_initialization_state |),
                                    "specs::state::InitializationState",
                                    "host_public_inputs"
                                  |);
                                  host_public_inputs
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val := M.copy (| γ0_0 |) in
                                  let right_val := M.copy (| γ0_1 |) in
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.Pure.not
                                                  (BinOp.Pure.eq
                                                    (M.read (| M.read (| left_val |) |))
                                                    (M.read (| M.read (| right_val |) |)))
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let kind :=
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [ Ty.path "u32"; Ty.path "u32" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.read (| left_val |);
                                                      M.read (| right_val |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              Value.Tuple
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| post_initialization_state |),
                                    "specs::state::InitializationState",
                                    "context_in_index"
                                  |);
                                  context_in_index
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val := M.copy (| γ0_0 |) in
                                  let right_val := M.copy (| γ0_1 |) in
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.Pure.not
                                                  (BinOp.Pure.eq
                                                    (M.read (| M.read (| left_val |) |))
                                                    (M.read (| M.read (| right_val |) |)))
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let kind :=
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [ Ty.path "u32"; Ty.path "u32" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.read (| left_val |);
                                                      M.read (| right_val |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              Value.Tuple
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| post_initialization_state |),
                                    "specs::state::InitializationState",
                                    "context_out_index"
                                  |);
                                  context_out_index
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val := M.copy (| γ0_0 |) in
                                  let right_val := M.copy (| γ0_1 |) in
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.Pure.not
                                                  (BinOp.Pure.eq
                                                    (M.read (| M.read (| left_val |) |))
                                                    (M.read (| M.read (| right_val |) |)))
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let kind :=
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [ Ty.path "u32"; Ty.path "u32" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.read (| left_val |);
                                                      M.read (| right_val |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              Value.Tuple
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| post_initialization_state |),
                                    "specs::state::InitializationState",
                                    "external_host_call_call_index"
                                  |);
                                  external_host_call_call_index
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val := M.copy (| γ0_0 |) in
                                  let right_val := M.copy (| γ0_1 |) in
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.Pure.not
                                                  (BinOp.Pure.eq
                                                    (M.read (| M.read (| left_val |) |))
                                                    (M.read (| M.read (| right_val |) |)))
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                let kind :=
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                  |) in
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [ Ty.path "u32"; Ty.path "u32" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.read (| left_val |);
                                                      M.read (| right_val |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)))
                            ]
                          |) in
                        let terminate_status :=
                          M.alloc (|
                            Value.StructRecord
                              "delphinus_zkwasm::circuits::utils::step_status::Status"
                              [
                                ("eid",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| post_initialization_state |),
                                      "specs::state::InitializationState",
                                      "eid"
                                    |)
                                  |));
                                ("fid",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| post_initialization_state |),
                                      "specs::state::InitializationState",
                                      "fid"
                                    |)
                                  |));
                                ("iid",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| post_initialization_state |),
                                      "specs::state::InitializationState",
                                      "iid"
                                    |)
                                  |));
                                ("sp",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| post_initialization_state |),
                                      "specs::state::InitializationState",
                                      "sp"
                                    |)
                                  |));
                                ("last_jump_eid",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| post_initialization_state |),
                                      "specs::state::InitializationState",
                                      "frame_id"
                                    |)
                                  |));
                                ("allocated_memory_pages",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| post_initialization_state |),
                                      "specs::state::InitializationState",
                                      "initial_memory_pages"
                                    |)
                                  |));
                                ("host_public_inputs",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| post_initialization_state |),
                                      "specs::state::InitializationState",
                                      "host_public_inputs"
                                    |)
                                  |));
                                ("context_in_index",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| post_initialization_state |),
                                      "specs::state::InitializationState",
                                      "context_in_index"
                                    |)
                                  |));
                                ("context_out_index",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| post_initialization_state |),
                                      "specs::state::InitializationState",
                                      "context_out_index"
                                    |)
                                  |));
                                ("external_host_call_call_index",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| post_initialization_state |),
                                      "specs::state::InitializationState",
                                      "external_host_call_call_index"
                                    |)
                                  |));
                                ("rest_mops", M.read (| rest_mops |));
                                ("jops", M.read (| jops |));
                                ("itable", M.read (| itable |))
                              ]
                          |) in
                        let _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::step_status::Status";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "push",
                                []
                              |),
                              [ status; M.read (| terminate_status |) ]
                            |)
                          |) in
                        status
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "rayon::iter::ParallelIterator",
                            Ty.apply
                              (Ty.path "rayon::iter::enumerate::Enumerate")
                              [
                                Ty.apply
                                  (Ty.path "rayon::slice::Iter")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                                  ]
                              ],
                            [],
                            "for_each",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.path
                                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                                            ]
                                        ]
                                    ]
                                ]
                                (Ty.tuple [])
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "rayon::iter::IndexedParallelIterator",
                                Ty.apply
                                  (Ty.path "rayon::slice::Iter")
                                  [
                                    Ty.path
                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo"
                                  ],
                                [],
                                "enumerate",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "rayon::iter::IntoParallelRefIterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.path
                                          "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "par_iter",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_tuple_field (|
                                      M.read (| event_table |),
                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo",
                                      0
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let index := M.copy (| γ0_0 |) in
                                            let entry := M.copy (| γ0_1 |) in
                                            M.read (|
                                              let ctx :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "new",
                                                      []
                                                    |),
                                                    [ M.read (| region |) ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::utils::Context")
                                                        [ F ],
                                                      "step",
                                                      []
                                                    |),
                                                    [
                                                      ctx;
                                                      M.read (|
                                                        M.use
                                                          (M.alloc (|
                                                            BinOp.Panic.mul (|
                                                              Integer.Usize,
                                                              M.rust_cast
                                                                (M.read (|
                                                                  M.get_constant (|
                                                                    "delphinus_zkwasm::circuits::etable::EVENT_TABLE_ENTRY_ROWS"
                                                                  |)
                                                                |)),
                                                              M.read (| index |)
                                                            |)
                                                          |))
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let instruction :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::etable::EventTableEntry",
                                                      "get_instruction",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| entry |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                        "eentry"
                                                      |);
                                                      M.read (| itable |)
                                                    ]
                                                  |)
                                                |) in
                                              let step_status :=
                                                M.alloc (|
                                                  Value.StructRecord
                                                    "delphinus_zkwasm::circuits::utils::step_status::StepStatus"
                                                    [
                                                      ("current",
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::step_status::Status";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [ status; M.read (| index |) ]
                                                        |));
                                                      ("next",
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::step_status::Status";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [
                                                            status;
                                                            BinOp.Panic.add (|
                                                              Integer.Usize,
                                                              M.read (| index |),
                                                              Value.Integer 1
                                                            |)
                                                          ]
                                                        |));
                                                      ("configure_table",
                                                        M.read (| configure_table |))
                                                    ]
                                                |) in
                                              let _ :=
                                                let class :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [ Ty.path "specs::itable::Opcode" ],
                                                        [ Ty.path "specs::itable::OpcodeClassPlain"
                                                        ],
                                                        "into",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| instruction |),
                                                          "specs::itable::InstructionTableEntry",
                                                          "opcode"
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let op :=
                                                  M.copy (|
                                                    M.SubPointer.get_array_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| self |),
                                                            "delphinus_zkwasm::circuits::etable::EventTableChip",
                                                            "config"
                                                          |),
                                                          "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                                          "common_config"
                                                        |),
                                                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                                        "ops"
                                                      |),
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "specs::itable::OpcodeClassPlain",
                                                            "index",
                                                            []
                                                          |),
                                                          [ M.read (| class |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::circuit::AssignedCell")
                                                              [ F; F ];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        "unwrap",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                            Ty.apply
                                                              (Ty.path
                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                              [ F ],
                                                            [ F ],
                                                            "assign",
                                                            []
                                                          |),
                                                          [
                                                            op;
                                                            ctx;
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "ff::Field",
                                                                F,
                                                                [],
                                                                "one",
                                                                []
                                                              |),
                                                              []
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::circuit::AssignedCell")
                                                            [ F; F ];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                          Ty.apply
                                                            (Ty.path
                                                              "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                            [ F ],
                                                          [ F ],
                                                          "assign",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::EventTableChip",
                                                                "config"
                                                              |),
                                                              "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                                              "common_config"
                                                            |),
                                                            "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                                            "enabled_cell"
                                                          |);
                                                          ctx;
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "ff::Field",
                                                              F,
                                                              [],
                                                              "one",
                                                              []
                                                            |),
                                                            []
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::circuit::AssignedCell")
                                                            [ F; F ];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                          Ty.apply
                                                            (Ty.path
                                                              "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                            [ F ],
                                                          [ F ],
                                                          "assign",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::EventTableChip",
                                                                "config"
                                                              |),
                                                              "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                                              "common_config"
                                                            |),
                                                            "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                                            "rest_mops_cell"
                                                          |);
                                                          ctx;
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::From",
                                                              F,
                                                              [ Ty.path "u64" ],
                                                              "from",
                                                              []
                                                            |),
                                                            [
                                                              M.rust_cast
                                                                (M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "delphinus_zkwasm::circuits::utils::step_status::Status";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [ status; M.read (| index |) ]
                                                                    |),
                                                                    "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                    "rest_mops"
                                                                  |)
                                                                |))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::circuit::AssignedCell")
                                                            [ F; F ];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                          Ty.apply
                                                            (Ty.path
                                                              "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                            [ F ],
                                                          [ F ],
                                                          "assign",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::EventTableChip",
                                                                "config"
                                                              |),
                                                              "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                                              "common_config"
                                                            |),
                                                            "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                                            "itable_lookup_cell"
                                                          |);
                                                          ctx;
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                              [ F ]
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| instruction |),
                                                                "specs::itable::InstructionTableEntry",
                                                                "encode"
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::circuit::AssignedCell")
                                                            [ F; F ];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                                          Ty.apply
                                                            (Ty.path
                                                              "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                            [ F ],
                                                          [ F ],
                                                          "assign",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::EventTableChip",
                                                                "config"
                                                              |),
                                                              "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                                              "common_config"
                                                            |),
                                                            "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                                            "jops_cell"
                                                          |);
                                                          ctx;
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                              [ F ]
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path
                                                                          "delphinus_zkwasm::circuits::utils::step_status::Status";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    []
                                                                  |),
                                                                  [ status; M.read (| index |) ]
                                                                |),
                                                                "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                "jops"
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                let op_config :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                  [ F ]
                                                              ]
                                                          ],
                                                        "unwrap",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::collections::btree::map::BTreeMap")
                                                              [
                                                                Ty.path
                                                                  "specs::itable::OpcodeClassPlain";
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "get",
                                                            [
                                                              Ty.path
                                                                "specs::itable::OpcodeClassPlain"
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path "alloc::sync::Arc")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::collections::btree::map::BTreeMap")
                                                                      [
                                                                        Ty.path
                                                                          "specs::itable::OpcodeClassPlain";
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ op_configs ]
                                                            |);
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "specs::itable::Opcode"
                                                                    ],
                                                                  [
                                                                    Ty.path
                                                                      "specs::itable::OpcodeClassPlain"
                                                                  ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| instruction |),
                                                                    "specs::itable::InstructionTableEntry",
                                                                    "opcode"
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        "unwrap",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                            Ty.dyn
                                                              [
                                                                ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                  [])
                                                              ],
                                                            [ F ],
                                                            "assign",
                                                            []
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                M.read (| op_config |),
                                                                "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                0
                                                              |)
                                                            |);
                                                            ctx;
                                                            step_status;
                                                            M.read (| entry |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "specs::state::InitializationState")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ]
                                                            ];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "delphinus_zkwasm::circuits::etable::EventTableChip")
                                                            [ F ],
                                                          "assign_step_state",
                                                          []
                                                        |),
                                                        [
                                                          M.read (| self |);
                                                          ctx;
                                                          M.alloc (|
                                                            Value.StructRecord
                                                              "specs::state::InitializationState"
                                                              [
                                                                ("eid",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| entry |),
                                                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                        "eentry"
                                                                      |),
                                                                      "specs::etable::EventTableEntry",
                                                                      "eid"
                                                                    |)
                                                                  |));
                                                                ("fid",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| entry |),
                                                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                        "eentry"
                                                                      |),
                                                                      "specs::etable::EventTableEntry",
                                                                      "fid"
                                                                    |)
                                                                  |));
                                                                ("iid",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| entry |),
                                                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                        "eentry"
                                                                      |),
                                                                      "specs::etable::EventTableEntry",
                                                                      "iid"
                                                                    |)
                                                                  |));
                                                                ("sp",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| entry |),
                                                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                        "eentry"
                                                                      |),
                                                                      "specs::etable::EventTableEntry",
                                                                      "sp"
                                                                    |)
                                                                  |));
                                                                ("frame_id",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| entry |),
                                                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                        "eentry"
                                                                      |),
                                                                      "specs::etable::EventTableEntry",
                                                                      "last_jump_eid"
                                                                    |)
                                                                  |));
                                                                ("host_public_inputs",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::Index",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.path
                                                                                "delphinus_zkwasm::circuits::utils::step_status::Status";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [ Ty.path "usize" ],
                                                                          "index",
                                                                          []
                                                                        |),
                                                                        [ status; M.read (| index |)
                                                                        ]
                                                                      |),
                                                                      "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                      "host_public_inputs"
                                                                    |)
                                                                  |));
                                                                ("context_in_index",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::Index",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.path
                                                                                "delphinus_zkwasm::circuits::utils::step_status::Status";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [ Ty.path "usize" ],
                                                                          "index",
                                                                          []
                                                                        |),
                                                                        [ status; M.read (| index |)
                                                                        ]
                                                                      |),
                                                                      "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                      "context_in_index"
                                                                    |)
                                                                  |));
                                                                ("context_out_index",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::Index",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.path
                                                                                "delphinus_zkwasm::circuits::utils::step_status::Status";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [ Ty.path "usize" ],
                                                                          "index",
                                                                          []
                                                                        |),
                                                                        [ status; M.read (| index |)
                                                                        ]
                                                                      |),
                                                                      "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                      "context_out_index"
                                                                    |)
                                                                  |));
                                                                ("external_host_call_call_index",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::Index",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.path
                                                                                "delphinus_zkwasm::circuits::utils::step_status::Status";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [ Ty.path "usize" ],
                                                                          "index",
                                                                          []
                                                                        |),
                                                                        [ status; M.read (| index |)
                                                                        ]
                                                                      |),
                                                                      "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                      "external_host_call_call_index"
                                                                    |)
                                                                  |));
                                                                ("initial_memory_pages",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| entry |),
                                                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                        "eentry"
                                                                      |),
                                                                      "specs::etable::EventTableEntry",
                                                                      "allocated_memory_pages"
                                                                    |)
                                                                  |));
                                                                ("maximal_memory_pages",
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| configure_table |),
                                                                      "specs::configure_table::ConfigureTable",
                                                                      "maximal_memory_pages"
                                                                    |)
                                                                  |));
                                                                ("_phantom",
                                                                  Value.StructTuple
                                                                    "core::marker::PhantomData"
                                                                    [])
                                                              ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign_entries :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign_entries" (assign_entries F).
        
        (*
            pub(in crate::circuits) fn assign(
                &self,
                layouter: impl Layouter<F>,
                itable: &InstructionTable,
                event_table: &EventTableWithMemoryInfo,
                configure_table: &ConfigureTable,
                initialization_state: &InitializationState<u32, BigUint>,
                post_initialization_state: &InitializationState<u32, BigUint>,
                _is_last_slice: bool,
            ) -> Result<EventTablePermutationCells<F>, Error> {
                layouter.assign_region(
                    || "event table",
                    |region| {
                        let mut ctx = Context::new(region);
        
                        debug!("size of execution table: {}", event_table.0.len());
        
                        assert!(event_table.0.len() <= self.capability);
        
                        self.init(&mut ctx)?;
                        ctx.reset();
        
                        let pre_initialization_state =
                            self.assign_step_state(&mut ctx, initialization_state)?;
                        ctx.reset();
        
                        let (rest_mops_cell, _jops_cell) = self.assign_rest_ops_first_step(&mut ctx)?;
        
                        let (rest_mops, jops) = self.compute_rest_mops_and_jops(
                            self.config.op_configs.clone(),
                            itable,
                            event_table,
                            initialization_state,
                        );
        
                        self.assign_entries(
                            region,
                            self.config.op_configs.clone(),
                            itable,
                            event_table,
                            configure_table,
                            &initialization_state,
                            post_initialization_state,
                            rest_mops,
                            jops,
                        )?;
                        ctx.step(EVENT_TABLE_ENTRY_ROWS as usize * event_table.0.len());
        
                        let post_initialization_state_cells = self
                            .assign_padding_and_post_initialization_state(
                                &mut ctx,
                                &post_initialization_state,
                            )?;
        
                        cfg_if::cfg_if! {
                            if #[cfg(feature = "continuation")] {
                                Ok(EventTablePermutationCells {
                                    rest_mops: rest_mops_cell,
                                    rest_jops: None,
                                    pre_initialization_state,
                                    post_initialization_state: post_initialization_state_cells,
                                })
                            } else {
                                Ok(EventTablePermutationCells {
                                    rest_mops: rest_mops_cell,
                                    rest_jops: Some(_jops_cell),
                                    pre_initialization_state,
                                    post_initialization_state: post_initialization_state_cells,
                                })
                            }
                        }
                    },
                )
            }
        *)
        Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Layouter_F_ ],
              [
                self;
                layouter;
                itable;
                event_table;
                configure_table;
                initialization_state;
                post_initialization_state;
                _is_last_slice
              ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let layouter := M.alloc (| layouter |) in
              let itable := M.alloc (| itable |) in
              let event_table := M.alloc (| event_table |) in
              let configure_table := M.alloc (| configure_table |) in
              let initialization_state := M.alloc (| initialization_state |) in
              let post_initialization_state := M.alloc (| post_initialization_state |) in
              let _is_last_slice := M.alloc (| _is_last_slice |) in
              M.call_closure (|
                M.get_trait_method (|
                  "halo2_proofs::circuit::Layouter",
                  impl_Layouter_F_,
                  [ F ],
                  "assign_region",
                  [
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              [ Ty.apply (Ty.path "halo2_proofs::circuit::Region") [ F ] ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "core::result::Result")
                        [
                          Ty.apply
                            (Ty.path
                              "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells")
                            [ F ];
                          Ty.path "halo2_proofs::plonk::error::Error"
                        ]);
                    Ty.apply
                      (Ty.path
                        "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells")
                      [ F ];
                    Ty.function [ Ty.tuple [] ] (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                    Ty.apply (Ty.path "&") [ Ty.path "str" ]
                  ]
                |),
                [
                  layouter;
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [ fun γ => ltac:(M.monadic (M.read (| Value.String "event table" |))) ]
                          |)
                        | _ => M.impossible (||)
                        end));
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let region := M.copy (| γ |) in
                                  M.read (|
                                    let ctx :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "delphinus_zkwasm::circuits::utils::Context")
                                              [ F ],
                                            "new",
                                            []
                                          |),
                                          [ M.read (| region |) ]
                                        |)
                                      |) in
                                    let _ :=
                                      let lvl :=
                                        M.alloc (| Value.StructTuple "log::Level::Debug" [] |) in
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    LogicalOp.and (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::cmp::PartialOrd",
                                                          Ty.path "log::Level",
                                                          [ Ty.path "log::LevelFilter" ],
                                                          "le",
                                                          []
                                                        |),
                                                        [
                                                          lvl;
                                                          M.get_constant (|
                                                            "log::STATIC_MAX_LEVEL"
                                                          |)
                                                        ]
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "log::Level",
                                                            [ Ty.path "log::LevelFilter" ],
                                                            "le",
                                                            []
                                                          |),
                                                          [
                                                            lvl;
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "log::max_level",
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            |)
                                                          ]
                                                        |)))
                                                    |)
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "log::__private_api::log",
                                                      [ Ty.tuple [] ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_v1",
                                                          []
                                                        |),
                                                        [
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.read (|
                                                                    Value.String
                                                                      "size of execution table: "
                                                                  |)
                                                                ]
                                                            |));
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::rt::Argument",
                                                                      "new_display",
                                                                      [ Ty.path "usize" ]
                                                                    |),
                                                                    [
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                Ty.path
                                                                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            "len",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              M.read (|
                                                                                event_table
                                                                              |),
                                                                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo",
                                                                              0
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |))
                                                        ]
                                                      |);
                                                      M.read (| lvl |);
                                                      M.alloc (|
                                                        Value.Tuple
                                                          [
                                                            M.read (|
                                                              Value.String
                                                                "delphinus_zkwasm::circuits::etable::assign"
                                                            |);
                                                            M.read (|
                                                              Value.String
                                                                "delphinus_zkwasm::circuits::etable::assign"
                                                            |);
                                                            M.read (|
                                                              Value.String
                                                                "crates/zkwasm/src/circuits/etable/assign.rs"
                                                            |)
                                                          ]
                                                      |);
                                                      Value.Integer 475;
                                                      Value.Tuple []
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    UnOp.Pure.not
                                                      (BinOp.Pure.le
                                                        (M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "len",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              M.read (| event_table |),
                                                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo",
                                                              0
                                                            |)
                                                          ]
                                                        |))
                                                        (M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| self |),
                                                            "delphinus_zkwasm::circuits::etable::EventTableChip",
                                                            "capability"
                                                          |)
                                                        |)))
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::panic",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        Value.String
                                                          "assertion failed: event_table.0.len() <= self.capability"
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.tuple [];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::etable::EventTableChip")
                                                    [ F ],
                                                  "init",
                                                  []
                                                |),
                                                [ M.read (| self |); ctx ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells")
                                                                [ F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "delphinus_zkwasm::circuits::utils::Context")
                                              [ F ],
                                            "reset",
                                            []
                                          |),
                                          [ ctx ]
                                        |)
                                      |) in
                                    let pre_initialization_state :=
                                      M.copy (|
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "specs::state::InitializationState")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::circuit::AssignedCell")
                                                          [ F; F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::circuit::AssignedCell")
                                                          [ F; F ]
                                                      ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::etable::EventTableChip")
                                                      [ F ],
                                                    "assign_step_state",
                                                    []
                                                  |),
                                                  [
                                                    M.read (| self |);
                                                    ctx;
                                                    M.read (| initialization_state |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells")
                                                                  [ F ];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "delphinus_zkwasm::circuits::utils::Context")
                                              [ F ],
                                            "reset",
                                            []
                                          |),
                                          [ ctx ]
                                        |)
                                      |) in
                                    M.match_operator (|
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ]
                                                    ];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::etable::EventTableChip")
                                                    [ F ],
                                                  "assign_rest_ops_first_step",
                                                  []
                                                |),
                                                [ M.read (| self |); ctx ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells")
                                                                [ F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let rest_mops_cell := M.copy (| γ0_0 |) in
                                            let _jops_cell := M.copy (| γ0_1 |) in
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::etable::EventTableChip")
                                                      [ F ],
                                                    "compute_rest_mops_and_jops",
                                                    []
                                                  |),
                                                  [
                                                    M.read (| self |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::collections::btree::map::BTreeMap")
                                                              [
                                                                Ty.path
                                                                  "specs::itable::OpcodeClassPlain";
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "clone",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| self |),
                                                            "delphinus_zkwasm::circuits::etable::EventTableChip",
                                                            "config"
                                                          |),
                                                          "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                                          "op_configs"
                                                        |)
                                                      ]
                                                    |);
                                                    M.read (| itable |);
                                                    M.read (| event_table |);
                                                    M.read (| initialization_state |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let rest_mops := M.copy (| γ0_0 |) in
                                                    let jops := M.copy (| γ0_1 |) in
                                                    let _ :=
                                                      M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::Try",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [],
                                                              "branch",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "delphinus_zkwasm::circuits::etable::EventTableChip")
                                                                    [ F ],
                                                                  "assign_entries",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| self |);
                                                                  M.read (| region |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::sync::Arc")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::collections::btree::map::BTreeMap")
                                                                            [
                                                                              Ty.path
                                                                                "specs::itable::OpcodeClassPlain";
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                                [ F ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      "clone",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| self |),
                                                                          "delphinus_zkwasm::circuits::etable::EventTableChip",
                                                                          "config"
                                                                        |),
                                                                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                                                                        "op_configs"
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.read (| itable |);
                                                                  M.read (| event_table |);
                                                                  M.read (| configure_table |);
                                                                  M.read (| initialization_state |);
                                                                  M.read (|
                                                                    post_initialization_state
                                                                  |);
                                                                  M.read (| rest_mops |);
                                                                  M.read (| jops |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                  0
                                                                |) in
                                                              let residual := M.copy (| γ0_0 |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    M.return_ (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::try_trait::FromResidual",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells")
                                                                                [ F ];
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::error::Error"
                                                                            ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              [
                                                                                Ty.path
                                                                                  "core::convert::Infallible";
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::error::Error"
                                                                              ]
                                                                          ],
                                                                          "from_residual",
                                                                          []
                                                                        |),
                                                                        [ M.read (| residual |) ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                  0
                                                                |) in
                                                              let val := M.copy (| γ0_0 |) in
                                                              val))
                                                        ]
                                                      |) in
                                                    let _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "delphinus_zkwasm::circuits::utils::Context")
                                                              [ F ],
                                                            "step",
                                                            []
                                                          |),
                                                          [
                                                            ctx;
                                                            BinOp.Panic.mul (|
                                                              Integer.Usize,
                                                              M.rust_cast
                                                                (M.read (|
                                                                  M.get_constant (|
                                                                    "delphinus_zkwasm::circuits::etable::EVENT_TABLE_ENTRY_ROWS"
                                                                  |)
                                                                |)),
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.path
                                                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "len",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    M.read (| event_table |),
                                                                    "delphinus_zkwasm::circuits::utils::table_entry::EventTableWithMemoryInfo",
                                                                    0
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    let post_initialization_state_cells :=
                                                      M.copy (|
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::Try",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "specs::state::InitializationState")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::circuit::AssignedCell")
                                                                          [ F; F ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::circuit::AssignedCell")
                                                                          [ F; F ]
                                                                      ];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [],
                                                                "branch",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "delphinus_zkwasm::circuits::etable::EventTableChip")
                                                                      [ F ],
                                                                    "assign_padding_and_post_initialization_state",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| self |);
                                                                    ctx;
                                                                    M.read (|
                                                                      post_initialization_state
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Break",
                                                                    0
                                                                  |) in
                                                                let residual := M.copy (| γ0_0 |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      M.return_ (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::try_trait::FromResidual",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells")
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::error::Error"
                                                                              ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.path
                                                                                    "core::convert::Infallible";
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ]
                                                                            ],
                                                                            "from_residual",
                                                                            []
                                                                          |),
                                                                          [ M.read (| residual |) ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                                    0
                                                                  |) in
                                                                let val := M.copy (| γ0_0 |) in
                                                                val))
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (|
                                                      Value.StructTuple
                                                        "core::result::Result::Ok"
                                                        [
                                                          Value.StructRecord
                                                            "delphinus_zkwasm::circuits::etable::assign::EventTablePermutationCells"
                                                            [
                                                              ("rest_mops",
                                                                M.read (| rest_mops_cell |));
                                                              ("rest_jops",
                                                                Value.StructTuple
                                                                  "core::option::Option::Some"
                                                                  [ M.read (| _jops_cell |) ]);
                                                              ("pre_initialization_state",
                                                                M.read (|
                                                                  pre_initialization_state
                                                                |));
                                                              ("post_initialization_state",
                                                                M.read (|
                                                                  post_initialization_state_cells
                                                                |))
                                                            ]
                                                        ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign" (assign F).
      End Impl_delphinus_zkwasm_circuits_etable_EventTableChip_F.
    End assign.
  End etable.
End circuits.
