(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module etable.
    Module constraint_builder.
      (* StructRecord
        {
          name := "ConstraintBuilder";
          ty_params := [ "F" ];
          fields :=
            [
              ("meta",
                Ty.apply
                  (Ty.path "&mut")
                  [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ] ]);
              ("foreign_table_configs",
                Ty.apply
                  (Ty.path "&")
                  [
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      [
                        Ty.apply (Ty.path "&") [ Ty.path "str" ];
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          [
                            Ty.dyn [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]);
              ("constraints",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [ Ty.path "str" ];
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          [
                            Ty.dyn
                              [
                                ("existential predicate with variables", []);
                                ("existential predicate with variables", [])
                              ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("lookups",
                Ty.apply
                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                  [
                    Ty.apply (Ty.path "&") [ Ty.path "str" ];
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&") [ Ty.path "str" ];
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [
                                Ty.dyn
                                  [
                                    ("existential predicate with variables", []);
                                    ("existential predicate with variables", [])
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_delphinus_zkwasm_circuits_etable_constraint_builder_ConstraintBuilder_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
            [ F ].
        
        (*
            pub(super) fn new(
                meta: &'a mut ConstraintSystem<F>,
                foreign_table_configs: &'b BTreeMap<&'static str, Box<dyn ForeignTableConfig<F>>>,
            ) -> Self {
                Self {
                    meta,
                    foreign_table_configs,
                    constraints: vec![],
                    lookups: BTreeMap::new(),
                }
            }
        *)
        Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ meta; foreign_table_configs ] =>
            ltac:(M.monadic
              (let meta := M.alloc (| meta |) in
              let foreign_table_configs := M.alloc (| foreign_table_configs |) in
              Value.StructRecord
                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder"
                [
                  ("meta", M.read (| meta |));
                  ("foreign_table_configs", M.read (| foreign_table_configs |));
                  ("constraints",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.dyn
                                      [
                                        ("existential predicate with variables", []);
                                        ("existential predicate with variables", [])
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        []
                      |),
                      []
                    |));
                  ("lookups",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.apply (Ty.path "&") [ Ty.path "str" ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.dyn
                                          [
                                            ("existential predicate with variables", []);
                                            ("existential predicate with variables", [])
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        []
                      |),
                      []
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "new" (new F).
        
        (*
            pub(crate) fn push(
                &mut self,
                name: &'static str,
                constraint: Box<dyn FnOnce(&mut VirtualCells<F>) -> Vec<Expression<F>>>,
            ) {
                self.constraints.push((name, constraint))
            }
        *)
        Definition push (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; name; constraint ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let name := M.alloc (| name |) in
              let constraint := M.alloc (| constraint |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [
                                  ("existential predicate with variables", []);
                                  ("existential predicate with variables", [])
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  "push",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder",
                    "constraints"
                  |);
                  Value.Tuple
                    [ M.read (| name |); (* Unsize *) M.pointer_coercion (M.read (| constraint |)) ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_push :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "push" (push F).
        
        (*
            pub(crate) fn lookup(
                &mut self,
                foreign_table_id: &'static str,
                name: &'static str,
                builder: Box<dyn Fn(&mut VirtualCells<F>) -> Vec<Expression<F>>>,
            ) {
                match self.lookups.get_mut(&foreign_table_id) {
                    Some(lookups) => lookups.push((name, builder)),
                    None => {
                        self.lookups.insert(foreign_table_id, vec![(name, builder)]);
                    }
                }
            }
        *)
        Definition lookup (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; foreign_table_id; name; builder ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let foreign_table_id := M.alloc (| foreign_table_id |) in
              let name := M.alloc (| name |) in
              let builder := M.alloc (| builder |) in
              M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.apply (Ty.path "&") [ Ty.path "str" ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.dyn
                                          [
                                            ("existential predicate with variables", []);
                                            ("existential predicate with variables", [])
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "get_mut",
                        [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder",
                          "lookups"
                        |);
                        foreign_table_id
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let lookups := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.dyn
                                            [
                                              ("existential predicate with variables", []);
                                              ("existential predicate with variables", [])
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "push",
                              []
                            |),
                            [
                              M.read (| lookups |);
                              Value.Tuple
                                [
                                  M.read (| name |);
                                  (* Unsize *) M.pointer_coercion (M.read (| builder |))
                                ]
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.dyn
                                                  [
                                                    ("existential predicate with variables", []);
                                                    ("existential predicate with variables", [])
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "insert",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder",
                                  "lookups"
                                |);
                                M.read (| foreign_table_id |);
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.dyn
                                                  [
                                                    ("existential predicate with variables", []);
                                                    ("existential predicate with variables", [])
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ],
                                    "into_vec",
                                    [ Ty.path "alloc::alloc::Global" ]
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.read (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                                        Ty.apply
                                                          (Ty.path "alloc::boxed::Box")
                                                          [
                                                            Ty.dyn
                                                              [
                                                                ("existential predicate with variables",
                                                                  []);
                                                                ("existential predicate with variables",
                                                                  [])
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          [
                                            M.alloc (|
                                              Value.Array
                                                [
                                                  Value.Tuple
                                                    [
                                                      M.read (| name |);
                                                      (* Unsize *)
                                                      M.pointer_coercion (M.read (| builder |))
                                                    ]
                                                ]
                                            |)
                                          ]
                                        |)
                                      |))
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_lookup :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "lookup" (lookup F).
        
        (*
            pub(super) fn finalize(
                self,
                selector: impl Fn(&mut VirtualCells<F>) -> (Expression<F>, Expression<F>),
            ) {
                for (name, builder) in self.constraints {
                    self.meta.create_gate(&name, |meta| {
                        builder(meta)
                            .into_iter()
                            .map(|constraint| {
                                let (step_sel, op_sel) = selector(meta);
        
                                constraint * step_sel * op_sel
                            })
                            .collect::<Vec<_>>()
                    });
                }
        
                for (id, lookups) in self.lookups {
                    let config = self.foreign_table_configs.get(&id).unwrap();
        
                    for (name, expr) in lookups {
                        config.configure_in_table(self.meta, name, &|meta| {
                            expr(meta)
                                .into_iter()
                                .map(|expr| {
                                    let (step_sel, _op_sel) = selector(meta);
                                    expr * step_sel
                                })
                                .collect()
                        });
                    }
                }
            }
        *)
        Definition finalize (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Fn__mut_VirtualCells_F___arrow__Expression_F___Expression_F__ ],
              [ self; selector ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let selector := M.alloc (| selector |) in
              M.read (|
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.dyn
                                          [
                                            ("existential predicate with variables", []);
                                            ("existential predicate with variables", [])
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder",
                                "constraints"
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.dyn
                                                        [
                                                          ("existential predicate with variables",
                                                            []);
                                                          ("existential predicate with variables",
                                                            [])
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let name := M.copy (| γ1_0 |) in
                                          let builder := M.copy (| γ1_1 |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                    [ F ],
                                                  "create_gate",
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ])
                                                  ]
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      self,
                                                      "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder",
                                                      "meta"
                                                    |)
                                                  |);
                                                  M.read (| name |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          M.match_operator (|
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let meta := M.copy (| γ |) in
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::map::Map")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::into_iter::IntoIter")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ])
                                                                        ],
                                                                      [],
                                                                      "collect",
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::into_iter::IntoIter")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          "map",
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ];
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ])
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::collect::IntoIterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              "into_iter",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::function::FnOnce",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::boxed::Box")
                                                                                    [
                                                                                      Ty.dyn
                                                                                        [
                                                                                          ("existential predicate with variables",
                                                                                            []);
                                                                                          ("existential predicate with variables",
                                                                                            [])
                                                                                        ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&mut")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                              [ F ]
                                                                                          ]
                                                                                      ]
                                                                                  ],
                                                                                  "call_once",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    builder
                                                                                  |);
                                                                                  Value.Tuple
                                                                                    [
                                                                                      M.read (|
                                                                                        meta
                                                                                      |)
                                                                                    ]
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.closure
                                                                            (fun γ =>
                                                                              ltac:(M.monadic
                                                                                match γ with
                                                                                | [ α0 ] =>
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                constraint :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.read (|
                                                                                            M.match_operator (|
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::function::Fn",
                                                                                                    impl_Fn__mut_VirtualCells_F___arrow__Expression_F___Expression_F__,
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&mut")
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                                                [
                                                                                                                  F
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                    ],
                                                                                                    "call",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    selector;
                                                                                                    Value.Tuple
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          meta
                                                                                                        |)
                                                                                                      ]
                                                                                                  ]
                                                                                                |)
                                                                                              |),
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (let
                                                                                                          γ0_0 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ,
                                                                                                        0
                                                                                                      |) in
                                                                                                    let
                                                                                                          γ0_1 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ,
                                                                                                        1
                                                                                                      |) in
                                                                                                    let
                                                                                                          step_sel :=
                                                                                                      M.copy (|
                                                                                                        γ0_0
                                                                                                      |) in
                                                                                                    let
                                                                                                          op_sel :=
                                                                                                      M.copy (|
                                                                                                        γ0_1
                                                                                                      |) in
                                                                                                    M.alloc (|
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::arith::Mul",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                                            [
                                                                                                              F
                                                                                                            ],
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                                              [
                                                                                                                F
                                                                                                              ]
                                                                                                          ],
                                                                                                          "mul",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::arith::Mul",
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                                [
                                                                                                                  F
                                                                                                                ],
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                                                  [
                                                                                                                    F
                                                                                                                  ]
                                                                                                              ],
                                                                                                              "mul",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                constraint
                                                                                                              |);
                                                                                                              M.read (|
                                                                                                                step_sel
                                                                                                              |)
                                                                                                            ]
                                                                                                          |);
                                                                                                          M.read (|
                                                                                                            op_sel
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)))
                                                                                              ]
                                                                                            |)
                                                                                          |)))
                                                                                    ]
                                                                                  |)
                                                                                | _ =>
                                                                                  M.impossible (||)
                                                                                end))
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            [
                              Ty.apply (Ty.path "&") [ Ty.path "str" ];
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.dyn
                                            [
                                              ("existential predicate with variables", []);
                                              ("existential predicate with variables", [])
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder",
                              "lookups"
                            |)
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "alloc::collections::btree::map::IntoIter")
                                          [
                                            Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.dyn
                                                          [
                                                            ("existential predicate with variables",
                                                              []);
                                                            ("existential predicate with variables",
                                                              [])
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let id := M.copy (| γ1_0 |) in
                                        let lookups := M.copy (| γ1_1 |) in
                                        let config :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::boxed::Box")
                                                          [
                                                            Ty.dyn
                                                              [
                                                                ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait",
                                                                  [])
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ],
                                                "unwrap",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloc::collections::btree::map::BTreeMap")
                                                      [
                                                        Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                                        Ty.apply
                                                          (Ty.path "alloc::boxed::Box")
                                                          [
                                                            Ty.dyn
                                                              [
                                                                ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait",
                                                                  [])
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "get",
                                                    [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        self,
                                                        "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder",
                                                        "foreign_table_configs"
                                                      |)
                                                    |);
                                                    id
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.use
                                          (M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                                          Ty.apply
                                                            (Ty.path "alloc::boxed::Box")
                                                            [
                                                              Ty.dyn
                                                                [
                                                                  ("existential predicate with variables",
                                                                    []);
                                                                  ("existential predicate with variables",
                                                                    [])
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [ M.read (| lookups |) ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter := M.copy (| γ |) in
                                                  M.loop (|
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::vec::into_iter::IntoIter")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.path "str" ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::boxed::Box")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                "next",
                                                                []
                                                              |),
                                                              [ iter ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::option::Option::Some",
                                                                    0
                                                                  |) in
                                                                let γ1_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ0_0,
                                                                    0
                                                                  |) in
                                                                let γ1_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ0_0,
                                                                    1
                                                                  |) in
                                                                let name := M.copy (| γ1_0 |) in
                                                                let expr := M.copy (| γ1_1 |) in
                                                                let _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::foreign::ForeignTableConfig",
                                                                        Ty.dyn
                                                                          [
                                                                            ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait",
                                                                              [])
                                                                          ],
                                                                        [ F ],
                                                                        "configure_in_table",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (|
                                                                          M.read (| config |)
                                                                        |);
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            self,
                                                                            "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder",
                                                                            "meta"
                                                                          |)
                                                                        |);
                                                                        M.read (| name |);
                                                                        (* Unsize *)
                                                                        M.pointer_coercion
                                                                          (M.alloc (|
                                                                            M.closure
                                                                              (fun γ =>
                                                                                ltac:(M.monadic
                                                                                  match γ with
                                                                                  | [ α0 ] =>
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α0
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  meta :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::iter::adapters::map::Map")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::into_iter::IntoIter")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                                          [
                                                                                                            F
                                                                                                          ];
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ];
                                                                                                    Ty.function
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                                              [
                                                                                                                F
                                                                                                              ]
                                                                                                          ]
                                                                                                      ]
                                                                                                      (Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                                        [
                                                                                                          F
                                                                                                        ])
                                                                                                  ],
                                                                                                [],
                                                                                                "collect",
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                                        [
                                                                                                          F
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ]
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::into_iter::IntoIter")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                                          [
                                                                                                            F
                                                                                                          ];
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ],
                                                                                                    [],
                                                                                                    "map",
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                                        [
                                                                                                          F
                                                                                                        ];
                                                                                                      Ty.function
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                                [
                                                                                                                  F
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                        (Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                                          [
                                                                                                            F
                                                                                                          ])
                                                                                                    ]
                                                                                                  |),
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::iter::traits::collect::IntoIterator",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                                              [
                                                                                                                F
                                                                                                              ];
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ],
                                                                                                        [],
                                                                                                        "into_iter",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::ops::function::Fn",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::boxed::Box")
                                                                                                              [
                                                                                                                Ty.dyn
                                                                                                                  [
                                                                                                                    ("existential predicate with variables",
                                                                                                                      []);
                                                                                                                    ("existential predicate with variables",
                                                                                                                      [])
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ],
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&mut")
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                ]
                                                                                                            ],
                                                                                                            "call",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            expr;
                                                                                                            Value.Tuple
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  meta
                                                                                                                |)
                                                                                                              ]
                                                                                                          ]
                                                                                                        |)
                                                                                                      ]
                                                                                                    |);
                                                                                                    M.closure
                                                                                                      (fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          match
                                                                                                            γ
                                                                                                          with
                                                                                                          | [
                                                                                                                α0
                                                                                                              ] =>
                                                                                                            M.match_operator (|
                                                                                                              M.alloc (|
                                                                                                                α0
                                                                                                              |),
                                                                                                              [
                                                                                                                fun
                                                                                                                    γ =>
                                                                                                                  ltac:(M.monadic
                                                                                                                    (let
                                                                                                                          expr :=
                                                                                                                      M.copy (|
                                                                                                                        γ
                                                                                                                      |) in
                                                                                                                    M.read (|
                                                                                                                      M.match_operator (|
                                                                                                                        M.alloc (|
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_trait_method (|
                                                                                                                              "core::ops::function::Fn",
                                                                                                                              impl_Fn__mut_VirtualCells_F___arrow__Expression_F___Expression_F__,
                                                                                                                              [
                                                                                                                                Ty.tuple
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "&mut")
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                                                                          [
                                                                                                                                            F
                                                                                                                                          ]
                                                                                                                                      ]
                                                                                                                                  ]
                                                                                                                              ],
                                                                                                                              "call",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              selector;
                                                                                                                              Value.Tuple
                                                                                                                                [
                                                                                                                                  M.read (|
                                                                                                                                    meta
                                                                                                                                  |)
                                                                                                                                ]
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          fun
                                                                                                                              γ =>
                                                                                                                            ltac:(M.monadic
                                                                                                                              (let
                                                                                                                                    γ0_0 :=
                                                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                                                  γ,
                                                                                                                                  0
                                                                                                                                |) in
                                                                                                                              let
                                                                                                                                    γ0_1 :=
                                                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                                                  γ,
                                                                                                                                  1
                                                                                                                                |) in
                                                                                                                              let
                                                                                                                                    step_sel :=
                                                                                                                                M.copy (|
                                                                                                                                  γ0_0
                                                                                                                                |) in
                                                                                                                              let
                                                                                                                                    _op_sel :=
                                                                                                                                M.copy (|
                                                                                                                                  γ0_1
                                                                                                                                |) in
                                                                                                                              M.alloc (|
                                                                                                                                M.call_closure (|
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "core::ops::arith::Mul",
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                                                      [
                                                                                                                                        F
                                                                                                                                      ],
                                                                                                                                    [
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                                                                        [
                                                                                                                                          F
                                                                                                                                        ]
                                                                                                                                    ],
                                                                                                                                    "mul",
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.read (|
                                                                                                                                      expr
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      step_sel
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              |)))
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)))
                                                                                                              ]
                                                                                                            |)
                                                                                                          | _ =>
                                                                                                            M.impossible (||)
                                                                                                          end))
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)
                                                                                  | _ =>
                                                                                    M.impossible (||)
                                                                                  end))
                                                                          |))
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                  |)))
                                            ]
                                          |))))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_finalize :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "finalize" (finalize F).
      End Impl_delphinus_zkwasm_circuits_etable_constraint_builder_ConstraintBuilder_F.
    End constraint_builder.
  End etable.
End circuits.
