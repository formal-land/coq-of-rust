(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module etable.
    Axiom AllocatedU32StateCell :
      forall (F : Ty.t),
      (Ty.apply (Ty.path "delphinus_zkwasm::circuits::etable::AllocatedU32StateCell") [ F ]) =
        (Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell") [ F ]).
    
    Definition value_EVENT_TABLE_ENTRY_ROWS : Value.t :=
      M.run ltac:(M.monadic (M.alloc (| Value.Integer 4 |))).
    
    Definition value_OP_CAPABILITY : Value.t :=
      M.run ltac:(M.monadic (M.alloc (| Value.Integer 32 |))).
    
    Definition value_FOREIGN_LOOKUP_CAPABILITY : Value.t :=
      M.run ltac:(M.monadic (M.alloc (| Value.Integer 6 |))).
    
    (* StructRecord
      {
        name := "EventTableCommonConfig";
        ty_params := [ "F" ];
        fields :=
          [
            ("enabled_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
            ("ops",
              Ty.apply
                (Ty.path "array")
                [ Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ] ]);
            ("rest_mops_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("jops_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ]);
            ("input_index_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("context_input_index_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("context_output_index_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("external_host_call_index_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("sp_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("mpages_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("frame_id_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("eid_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("fid_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("iid_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("maximal_memory_pages_cell",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                [ F ]);
            ("itable_lookup_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ]);
            ("brtable_lookup_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ]);
            ("jtable_lookup_cell",
              Ty.apply
                (Ty.path
                  "delphinus_zkwasm::circuits::etable::allocator::AllocatedJumpTableLookupCell")
                [ F ]);
            ("pow_table_lookup_modulus_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ]);
            ("pow_table_lookup_power_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ]);
            ("bit_table_lookup_cells",
              Ty.apply
                (Ty.path
                  "delphinus_zkwasm::circuits::etable::allocator::AllocatedBitTableLookupCells")
                [ F ]);
            ("external_foreign_call_lookup_cell",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell") [ F ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_etable_EventTableCommonConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::etable::EventTableCommonConfig") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::etable::EventTableCommonConfig"
              [
                ("enabled_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "enabled_cell"
                      |)
                    ]
                  |));
                ("ops",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "array")
                        [
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                            [ F ]
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "ops"
                      |)
                    ]
                  |));
                ("rest_mops_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "rest_mops_cell"
                      |)
                    ]
                  |));
                ("jops_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "jops_cell"
                      |)
                    ]
                  |));
                ("input_index_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "input_index_cell"
                      |)
                    ]
                  |));
                ("context_input_index_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "context_input_index_cell"
                      |)
                    ]
                  |));
                ("context_output_index_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "context_output_index_cell"
                      |)
                    ]
                  |));
                ("external_host_call_index_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "external_host_call_index_cell"
                      |)
                    ]
                  |));
                ("sp_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "sp_cell"
                      |)
                    ]
                  |));
                ("mpages_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "mpages_cell"
                      |)
                    ]
                  |));
                ("frame_id_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "frame_id_cell"
                      |)
                    ]
                  |));
                ("eid_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "eid_cell"
                      |)
                    ]
                  |));
                ("fid_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "fid_cell"
                      |)
                    ]
                  |));
                ("iid_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "iid_cell"
                      |)
                    ]
                  |));
                ("maximal_memory_pages_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "maximal_memory_pages_cell"
                      |)
                    ]
                  |));
                ("itable_lookup_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "itable_lookup_cell"
                      |)
                    ]
                  |));
                ("brtable_lookup_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "brtable_lookup_cell"
                      |)
                    ]
                  |));
                ("jtable_lookup_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::AllocatedJumpTableLookupCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "jtable_lookup_cell"
                      |)
                    ]
                  |));
                ("pow_table_lookup_modulus_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "pow_table_lookup_modulus_cell"
                      |)
                    ]
                  |));
                ("pow_table_lookup_power_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "pow_table_lookup_power_cell"
                      |)
                    ]
                  |));
                ("bit_table_lookup_cells",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::AllocatedBitTableLookupCells")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "bit_table_lookup_cells"
                      |)
                    ]
                  |));
                ("external_foreign_call_lookup_cell",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                        "external_foreign_call_lookup_cell"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_etable_EventTableCommonConfig_F.
    
    (* Trait *)
    (* Empty module 'EventTableOpcodeConfigBuilder' *)
    
    (* Trait *)
    Module EventTableOpcodeConfig.
      Definition memory_writing_ops (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; β1 ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let β1 := M.alloc (| β1 |) in
            M.match_operator (| β1, [ fun γ => ltac:(M.monadic (Value.Integer 0)) ] |)))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_memory_writing_ops :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "memory_writing_ops"
          (memory_writing_ops F).
      Definition sp_diff (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; _meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _meta := M.alloc (| _meta |) in
            Value.StructTuple "core::option::Option::None" []))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_sp_diff :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "sp_diff"
          (sp_diff F).
      Definition allocated_memory_pages_diff
          (F Self : Ty.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match τ, α with
        | [], [ self; _meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _meta := M.alloc (| _meta |) in
            Value.StructTuple "core::option::Option::None" []))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_allocated_memory_pages_diff :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "allocated_memory_pages_diff"
          (allocated_memory_pages_diff F).
      Definition jops_expr (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; _meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _meta := M.alloc (| _meta |) in
            Value.StructTuple "core::option::Option::None" []))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_jops_expr :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "jops_expr"
          (jops_expr F).
      Definition jops (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_trait_method (|
                "num_traits::identities::Zero",
                Ty.path "num_bigint::biguint::BigUint",
                [],
                "zero",
                []
              |),
              []
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_jops :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "jops"
          (jops F).
      Definition mops (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; _meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _meta := M.alloc (| _meta |) in
            Value.StructTuple "core::option::Option::None" []))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_mops :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "mops"
          (mops F).
      Definition next_frame_id (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; _meta; _common_config ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _meta := M.alloc (| _meta |) in
            let _common_config := M.alloc (| _common_config |) in
            Value.StructTuple "core::option::Option::None" []))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_next_frame_id :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "next_frame_id"
          (next_frame_id F).
      Definition next_fid (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; _meta; _common_config ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _meta := M.alloc (| _meta |) in
            let _common_config := M.alloc (| _common_config |) in
            Value.StructTuple "core::option::Option::None" []))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_next_fid :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "next_fid"
          (next_fid F).
      Definition next_iid (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; _meta; _common_config ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _meta := M.alloc (| _meta |) in
            let _common_config := M.alloc (| _common_config |) in
            Value.StructTuple "core::option::Option::None" []))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_next_iid :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "next_iid"
          (next_iid F).
      Definition input_index_increase (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; _meta; _common_config ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _meta := M.alloc (| _meta |) in
            let _common_config := M.alloc (| _common_config |) in
            Value.StructTuple "core::option::Option::None" []))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_input_index_increase :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "input_index_increase"
          (input_index_increase F).
      Definition is_host_public_input (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; _entry ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _entry := M.alloc (| _entry |) in
            Value.Bool false))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_is_host_public_input :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "is_host_public_input"
          (is_host_public_input F).
      Definition context_input_index_increase
          (F Self : Ty.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match τ, α with
        | [], [ self; _meta; _common_config ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _meta := M.alloc (| _meta |) in
            let _common_config := M.alloc (| _common_config |) in
            Value.StructTuple "core::option::Option::None" []))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_context_input_index_increase :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "context_input_index_increase"
          (context_input_index_increase F).
      Definition is_context_input_op (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; _entry ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _entry := M.alloc (| _entry |) in
            Value.Bool false))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_is_context_input_op :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "is_context_input_op"
          (is_context_input_op F).
      Definition context_output_index_increase
          (F Self : Ty.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match τ, α with
        | [], [ self; _meta; _common_config ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _meta := M.alloc (| _meta |) in
            let _common_config := M.alloc (| _common_config |) in
            Value.StructTuple "core::option::Option::None" []))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_context_output_index_increase :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "context_output_index_increase"
          (context_output_index_increase F).
      Definition is_context_output_op (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; _entry ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _entry := M.alloc (| _entry |) in
            Value.Bool false))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_is_context_output_op :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "is_context_output_op"
          (is_context_output_op F).
      Definition external_host_call_index_increase
          (F Self : Ty.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match τ, α with
        | [], [ self; _meta; _common_config ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _meta := M.alloc (| _meta |) in
            let _common_config := M.alloc (| _common_config |) in
            Value.StructTuple "core::option::Option::None" []))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_external_host_call_index_increase :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "external_host_call_index_increase"
          (external_host_call_index_increase F).
      Definition is_external_host_call (F Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; _entry ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let _entry := M.alloc (| _entry |) in
            Value.Bool false))
        | _, _ => M.impossible
        end.
      
      Axiom ProvidedMethod_is_external_host_call :
        forall (F : Ty.t),
        M.IsProvidedMethod
          "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
          "is_external_host_call"
          (is_external_host_call F).
    End EventTableOpcodeConfig.
    
    (* StructTuple
      {
        name := "OpcodeConfig";
        ty_params := [ "F" ];
        fields :=
          [
            Ty.apply
              (Ty.path "alloc::boxed::Box")
              [
                Ty.dyn
                  [ ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait", []) ];
                Ty.path "alloc::alloc::Global"
              ]
          ];
      } *)
    
    Module Impl_core_marker_Send_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_etable_OpcodeConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Send"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Send_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_etable_OpcodeConfig_F.
    
    Module Impl_core_marker_Sync_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_etable_OpcodeConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Sync"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Sync_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_etable_OpcodeConfig_F.
    
    (* StructRecord
      {
        name := "EventTableConfig";
        ty_params := [ "F" ];
        fields :=
          [
            ("step_sel",
              Ty.apply
                (Ty.path "halo2_proofs::plonk::circuit::Column")
                [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]);
            ("common_config",
              Ty.apply
                (Ty.path "delphinus_zkwasm::circuits::etable::EventTableCommonConfig")
                [ F ]);
            ("op_configs",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    [
                      Ty.path "specs::itable::OpcodeClassPlain";
                      Ty.apply (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig") [ F ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_etable_EventTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::etable::EventTableConfig") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::etable::EventTableConfig"
              [
                ("step_sel",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                        [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                        "step_sel"
                      |)
                    ]
                  |));
                ("common_config",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::etable::EventTableCommonConfig")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                        "common_config"
                      |)
                    ]
                  |));
                ("op_configs",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            [
                              Ty.path "specs::itable::OpcodeClassPlain";
                              Ty.apply
                                (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableConfig",
                        "op_configs"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_etable_EventTableConfig_F.
    
    Module Impl_delphinus_zkwasm_circuits_etable_EventTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::etable::EventTableConfig") [ F ].
      
      (*
          pub(crate) fn configure(
              meta: &mut ConstraintSystem<F>,
              k: u32,
              cols: &mut (impl Iterator<Item = Column<Advice>> + Clone),
              rtable: &RangeTableConfig<F>,
              image_table: &ImageTableConfig<F>,
              mtable: &MemoryTableConfig<F>,
              jtable: &JumpTableConfig<F>,
              bit_table: &BitTableConfig<F>,
              external_host_call_table: &ExternalHostCallTableConfig<F>,
              foreign_table_configs: &BTreeMap<&'static str, Box<dyn ForeignTableConfig<F>>>,
          ) -> EventTableConfig<F> {
              let step_sel = meta.fixed_column();
      
              let mut allocator =
                  EventTableCellAllocator::new(meta, k, step_sel, rtable, mtable, jtable, cols);
      
              let ops = [0; OP_CAPABILITY].map(|_| allocator.alloc_bit_cell());
              let enabled_cell = allocator.alloc_bit_cell();
      
              let rest_mops_cell = allocator.alloc_common_range_cell();
              let jops_cell = allocator.alloc_unlimited_cell();
              let input_index_cell = allocator.alloc_common_range_cell();
              let context_input_index_cell = allocator.alloc_common_range_cell();
              let context_output_index_cell = allocator.alloc_common_range_cell();
              let external_host_call_index_cell = allocator.alloc_common_range_cell();
              let sp_cell = allocator.alloc_common_range_cell();
              let mpages_cell = allocator.alloc_common_range_cell();
              let frame_id_cell = allocator.alloc_u32_state_cell();
              let eid_cell = allocator.alloc_u32_state_cell();
              let fid_cell = allocator.alloc_common_range_cell();
              let iid_cell = allocator.alloc_common_range_cell();
              let maximal_memory_pages_cell = allocator.alloc_common_range_cell();
      
              // We only need to enable equality for the cells of states
              let used_common_range_cells_for_state = allocator
                  .free_cells
                  .get(&EventTableCellType::CommonRange)
                  .unwrap();
              allocator.enable_equality(
                  meta,
                  &EventTableCellType::CommonRange,
                  used_common_range_cells_for_state.0
                      + (used_common_range_cells_for_state.1 != 0) as usize,
              );
              let used_unlimited_cells_for_state = allocator
                  .free_cells
                  .get(&EventTableCellType::Unlimited)
                  .unwrap();
              allocator.enable_equality(
                  meta,
                  &EventTableCellType::Unlimited,
                  used_unlimited_cells_for_state.0 + (used_unlimited_cells_for_state.1 != 0) as usize,
              );
      
              let itable_lookup_cell = allocator.alloc_unlimited_cell();
              let brtable_lookup_cell = allocator.alloc_unlimited_cell();
              let jtable_lookup_cell = allocator.alloc_jump_table_lookup_cell();
              let pow_table_lookup_modulus_cell = allocator.alloc_unlimited_cell();
              let pow_table_lookup_power_cell = allocator.alloc_unlimited_cell();
              let external_foreign_call_lookup_cell = allocator.alloc_unlimited_cell();
              let bit_table_lookup_cells = allocator.alloc_bit_table_lookup_cells();
      
              let mut foreign_table_reserved_lookup_cells = [(); FOREIGN_LOOKUP_CAPABILITY]
                  .map(|_| allocator.alloc_unlimited_cell())
                  .into_iter();
      
              let common_config = EventTableCommonConfig {
                  enabled_cell,
                  ops,
                  rest_mops_cell,
                  jops_cell,
                  input_index_cell,
                  context_input_index_cell,
                  context_output_index_cell,
                  external_host_call_index_cell,
                  sp_cell,
                  mpages_cell,
                  frame_id_cell,
                  eid_cell,
                  fid_cell,
                  iid_cell,
                  maximal_memory_pages_cell,
                  itable_lookup_cell,
                  brtable_lookup_cell,
                  jtable_lookup_cell,
                  pow_table_lookup_modulus_cell,
                  pow_table_lookup_power_cell,
                  bit_table_lookup_cells,
                  external_foreign_call_lookup_cell,
              };
      
              let mut op_bitmaps: BTreeMap<OpcodeClassPlain, usize> = BTreeMap::new();
              let mut op_configs: BTreeMap<OpcodeClassPlain, OpcodeConfig<F>> = BTreeMap::new();
      
              let mut profiler = AllocatorFreeCellsProfiler::new(&allocator);
      
              macro_rules! configure {
                  ($op:expr, $x:ident) => {
                      let op = OpcodeClassPlain($op as usize);
      
                      let foreign_table_configs = BTreeMap::new();
                      let mut constraint_builder = ConstraintBuilder::new(meta, &foreign_table_configs);
      
                      let mut allocator = allocator.clone();
                      let config = $x::configure(&common_config, &mut allocator, &mut constraint_builder);
      
                      constraint_builder.finalize(|meta| {
                          (fixed_curr!(meta, step_sel), ops[op.index()].curr_expr(meta))
                      });
      
                      op_bitmaps.insert(op, op.index());
                      op_configs.insert(op, OpcodeConfig::<F>(config));
      
                      profiler.update(&allocator);
                  };
              }
      
              configure!(OpcodeClass::BinShift, BinShiftConfigBuilder);
              configure!(OpcodeClass::Bin, BinConfigBuilder);
              configure!(OpcodeClass::BrIfEqz, BrIfEqzConfigBuilder);
              configure!(OpcodeClass::BrIf, BrIfConfigBuilder);
              configure!(OpcodeClass::Br, BrConfigBuilder);
              configure!(OpcodeClass::Call, CallConfigBuilder);
              configure!(OpcodeClass::CallHost, ExternalCallHostCircuitConfigBuilder);
              configure!(OpcodeClass::Const, ConstConfigBuilder);
              configure!(OpcodeClass::Conversion, ConversionConfigBuilder);
              configure!(OpcodeClass::Drop, DropConfigBuilder);
              configure!(OpcodeClass::GlobalGet, GlobalGetConfigBuilder);
              configure!(OpcodeClass::GlobalSet, GlobalSetConfigBuilder);
              configure!(OpcodeClass::LocalGet, LocalGetConfigBuilder);
              configure!(OpcodeClass::LocalSet, LocalSetConfigBuilder);
              configure!(OpcodeClass::LocalTee, LocalTeeConfigBuilder);
              configure!(OpcodeClass::Rel, RelConfigBuilder);
              configure!(OpcodeClass::Return, ReturnConfigBuilder);
              configure!(OpcodeClass::Select, SelectConfigBuilder);
              configure!(OpcodeClass::Test, TestConfigBuilder);
              configure!(OpcodeClass::Unary, UnaryConfigBuilder);
              configure!(OpcodeClass::Load, LoadConfigBuilder);
              configure!(OpcodeClass::Store, StoreConfigBuilder);
              configure!(OpcodeClass::BinBit, BinBitConfigBuilder);
              configure!(OpcodeClass::MemorySize, MemorySizeConfigBuilder);
              configure!(OpcodeClass::MemoryGrow, MemoryGrowConfigBuilder);
              configure!(OpcodeClass::BrTable, BrTableConfigBuilder);
              configure!(OpcodeClass::CallIndirect, CallIndirectConfigBuilder);
      
              macro_rules! configure_foreign {
                  ($x:ident, $i:expr) => {
                      let builder = $x::new($i);
                      let op = OpcodeClass::ForeignPluginStart as usize + $i;
                      let op = OpcodeClassPlain(op);
      
                      let mut constraint_builder = ConstraintBuilder::new(meta, foreign_table_configs);
                      let mut allocator = allocator.clone();
      
                      let config = builder.configure(
                          &common_config,
                          &mut allocator,
                          &mut constraint_builder,
                          &mut foreign_table_reserved_lookup_cells,
                      );
      
                      constraint_builder.finalize(|meta| {
                          (fixed_curr!(meta, step_sel), ops[op.index()].curr_expr(meta))
                      });
      
                      op_bitmaps.insert(op, op.index());
                      op_configs.insert(op, OpcodeConfig(config));
      
                      profiler.update(&allocator);
                  };
              }
              configure_foreign!(ETableWasmInputHelperTableConfigBuilder, 0);
              configure_foreign!(ETableContextHelperTableConfigBuilder, 1);
              configure_foreign!(ETableRequireHelperTableConfigBuilder, 2);
      
              profiler.assert_no_free_cells(&allocator);
      
              meta.create_gate("c1. enable seq", |meta| {
                  vec![
                      enabled_cell.next_expr(meta)
                          * (enabled_cell.curr_expr(meta) - constant_from!(1))
                          * fixed_curr!(meta, step_sel),
                  ]
              });
      
              meta.create_gate("c4. opcode_bit lvl sum equals to 1", |meta| {
                  vec![
                      ops.map(|x| x.curr_expr(meta))
                          .into_iter()
                          .reduce(|acc, x| acc + x)
                          .unwrap()
                          - enabled_cell.curr_expr(meta),
                  ]
                  .into_iter()
                  .map(|expr| expr * fixed_curr!(meta, step_sel))
                  .collect::<Vec<_>>()
              });
      
              /*
               * How `* enabled_cell.curr_expr(meta)` effects on the separate step:
               *    1. constrains the relation between the last step and termination.
               *    2. ignores rows following the termination step.
               */
              let sum_ops_expr_with_init =
                  |init: Expression<F>,
                   meta: &mut VirtualCells<'_, F>,
                   get_expr: &dyn Fn(
                      &mut VirtualCells<'_, F>,
                      &OpcodeConfig<F>,
                  ) -> Option<Expression<F>>,
                   enable: Option<&dyn Fn(&mut VirtualCells<'_, F>) -> Expression<F>>| {
                      let expr = op_bitmaps
                          .iter()
                          .filter_map(|(op, op_index)| {
                              get_expr(meta, op_configs.get(op).unwrap())
                                  .map(|expr| expr * ops[*op_index].curr_expr(meta))
                          })
                          .fold(init, |acc, x| acc + x)
                          * fixed_curr!(meta, step_sel);
      
                      enable.map_or(expr.clone(), |enable_expr| expr * enable_expr(meta))
                  };
      
              let sum_ops_expr = |meta: &mut VirtualCells<'_, F>,
                                  get_expr: &dyn Fn(
                  &mut VirtualCells<'_, F>,
                  &OpcodeConfig<F>,
              ) -> Option<Expression<F>>| {
                  op_bitmaps
                      .iter()
                      .filter_map(|(op, op_index)| {
                          get_expr(meta, op_configs.get(op).unwrap())
                              .map(|expr| expr * ops[*op_index].curr_expr(meta))
                      })
                      .reduce(|acc, x| acc + x)
                      .unwrap()
              };
      
              meta.create_gate("c5a. rest_mops change", |meta| {
                  vec![sum_ops_expr_with_init(
                      rest_mops_cell.next_expr(meta) - rest_mops_cell.curr_expr(meta),
                      meta,
                      &|meta, config: &OpcodeConfig<F>| config.0.mops(meta),
                      None,
                  )]
              });
      
              meta.create_gate("c5b. jops change(increase if continuation)", |meta| {
                  vec![sum_ops_expr_with_init(
                      if cfg!(feature = "continuation") {
                          jops_cell.curr_expr(meta) - jops_cell.next_expr(meta)
                      } else {
                          jops_cell.next_expr(meta) - jops_cell.curr_expr(meta)
                      },
                      meta,
                      &|meta, config: &OpcodeConfig<F>| config.0.jops_expr(meta),
                      None,
                  )]
              });
      
              meta.create_gate("c5c. input_index change", |meta| {
                  vec![sum_ops_expr_with_init(
                      input_index_cell.curr_expr(meta) - input_index_cell.next_expr(meta),
                      meta,
                      &|meta, config: &OpcodeConfig<F>| {
                          config.0.input_index_increase(meta, &common_config)
                      },
                      None,
                  )]
              });
      
              meta.create_gate("c5d. external_host_call_index change", |meta| {
                  vec![sum_ops_expr_with_init(
                      external_host_call_index_cell.curr_expr(meta)
                          - external_host_call_index_cell.next_expr(meta),
                      meta,
                      &|meta, config: &OpcodeConfig<F>| {
                          config
                              .0
                              .external_host_call_index_increase(meta, &common_config)
                      },
                      None,
                  )]
              });
      
              meta.create_gate("c5e. sp change", |meta| {
                  vec![sum_ops_expr_with_init(
                      sp_cell.curr_expr(meta) - sp_cell.next_expr(meta),
                      meta,
                      &|meta, config: &OpcodeConfig<F>| config.0.sp_diff(meta),
                      None,
                  )]
              });
      
              meta.create_gate("c5f. mpages change", |meta| {
                  vec![sum_ops_expr_with_init(
                      mpages_cell.curr_expr(meta) - mpages_cell.next_expr(meta),
                      meta,
                      &|meta, config: &OpcodeConfig<F>| config.0.allocated_memory_pages_diff(meta),
                      None,
                  )]
              });
      
              meta.create_gate("c5g. context_input_index change", |meta| {
                  vec![sum_ops_expr_with_init(
                      context_input_index_cell.curr_expr(meta) - context_input_index_cell.next_expr(meta),
                      meta,
                      &|meta, config: &OpcodeConfig<F>| {
                          config.0.context_input_index_increase(meta, &common_config)
                      },
                      None,
                  )]
              });
      
              meta.create_gate("c5h. context_output_index change", |meta| {
                  vec![sum_ops_expr_with_init(
                      context_output_index_cell.curr_expr(meta)
                          - context_output_index_cell.next_expr(meta),
                      meta,
                      &|meta, config: &OpcodeConfig<F>| {
                          config.0.context_output_index_increase(meta, &common_config)
                      },
                      None,
                  )]
              });
      
              meta.create_gate("c6a. eid change", |meta| {
                  vec![
                      (eid_cell.next_expr(meta)
                          - eid_cell.curr_expr(meta)
                          - enabled_cell.curr_expr(meta))
                          * fixed_curr!(meta, step_sel),
                  ]
              });
      
              meta.create_gate("c6b. fid change", |meta| {
                  vec![sum_ops_expr_with_init(
                      fid_cell.curr_expr(meta) - fid_cell.next_expr(meta),
                      meta,
                      &|meta, config: &OpcodeConfig<F>| {
                          config
                              .0
                              .next_fid(meta, &common_config)
                              .map(|x| x - fid_cell.curr_expr(meta))
                      },
                      None,
                  )]
              });
      
              meta.create_gate("c6c. iid change", |meta| {
                  vec![sum_ops_expr_with_init(
                      iid_cell.next_expr(meta) - iid_cell.curr_expr(meta) - enabled_cell.curr_expr(meta),
                      meta,
                      &|meta, config: &OpcodeConfig<F>| {
                          config
                              .0
                              .next_iid(meta, &common_config)
                              .map(|x| iid_cell.curr_expr(meta) + enabled_cell.curr_expr(meta) - x)
                      },
                      None,
                  )]
              });
      
              meta.create_gate("c6d. frame_id change", |meta| {
                  vec![sum_ops_expr_with_init(
                      frame_id_cell.curr_expr(meta) - frame_id_cell.next_expr(meta),
                      meta,
                      &|meta, config: &OpcodeConfig<F>| {
                          config
                              .0
                              .next_frame_id(meta, &common_config)
                              .map(|x| x - frame_id_cell.curr_expr(meta))
                      },
                      None,
                  )]
              });
      
              meta.create_gate("c7. itable_lookup_encode", |meta| {
                  let opcode = sum_ops_expr(meta, &|meta, config: &OpcodeConfig<F>| {
                      Some(config.0.opcode(meta))
                  });
                  vec![
                      (encode_instruction_table_entry(fid_cell.expr(meta), iid_cell.expr(meta), opcode)
                          - itable_lookup_cell.curr_expr(meta))
                          * fixed_curr!(meta, step_sel),
                  ]
              });
      
              image_table.instruction_lookup(meta, "c8a. itable_lookup in itable", |meta| {
                  itable_lookup_cell.curr_expr(meta) * fixed_curr!(meta, step_sel)
              });
      
              image_table.br_table_lookup(meta, "c8b. brtable_lookup in brtable", |meta| {
                  brtable_lookup_cell.curr_expr(meta) * fixed_curr!(meta, step_sel)
              });
      
              rtable.configure_in_pow_set(
                  meta,
                  "c8d. pow_table_lookup in pow_table",
                  |meta| pow_table_lookup_power_cell.curr_expr(meta),
                  |meta| pow_table_lookup_modulus_cell.curr_expr(meta),
                  |meta| fixed_curr!(meta, step_sel),
              );
      
              external_host_call_table.configure_in_table(
                  meta,
                  "c8g. external_foreign_call_lookup in foreign table",
                  |meta| {
                      vec![
                          external_foreign_call_lookup_cell.curr_expr(meta) * fixed_curr!(meta, step_sel),
                      ]
                  },
              );
      
              bit_table.configure_in_table(meta, "c8f: bit_table_lookup in bit_table", |meta| {
                  (
                      fixed_curr!(meta, step_sel),
                      fixed_curr!(meta, step_sel) * bit_table_lookup_cells.op.expr(meta),
                      fixed_curr!(meta, step_sel) * bit_table_lookup_cells.left.expr(meta),
                      fixed_curr!(meta, step_sel) * bit_table_lookup_cells.right.expr(meta),
                      fixed_curr!(meta, step_sel) * bit_table_lookup_cells.result.expr(meta),
                  )
              });
      
              meta.create_gate("c9. maximal memory pages consistent", |meta| {
                  vec![
                      (maximal_memory_pages_cell.next_expr(meta)
                          - maximal_memory_pages_cell.curr_expr(meta))
                          * fixed_curr!(meta, step_sel),
                  ]
              });
      
              Self {
                  step_sel,
                  common_config,
                  op_configs: Arc::new(op_configs),
              }
          }
      *)
      Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ impl_Iterator_Item___Column_Advice____plus__Clone ],
            [
              meta;
              k;
              cols;
              rtable;
              image_table;
              mtable;
              jtable;
              bit_table;
              external_host_call_table;
              foreign_table_configs
            ] =>
          ltac:(M.monadic
            (let meta := M.alloc (| meta |) in
            let k := M.alloc (| k |) in
            let cols := M.alloc (| cols |) in
            let rtable := M.alloc (| rtable |) in
            let image_table := M.alloc (| image_table |) in
            let mtable := M.alloc (| mtable |) in
            let jtable := M.alloc (| jtable |) in
            let bit_table := M.alloc (| bit_table |) in
            let external_host_call_table := M.alloc (| external_host_call_table |) in
            let foreign_table_configs := M.alloc (| foreign_table_configs |) in
            M.read (|
              let step_sel :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "fixed_column",
                      []
                    |),
                    [ M.read (| meta |) ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "new",
                      [
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::mtable::MemoryTableConfig")
                          [ F ];
                        impl_Iterator_Item___Column_Advice____plus__Clone
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| k |);
                      M.read (| step_sel |);
                      M.read (| rtable |);
                      M.read (| mtable |);
                      M.read (| jtable |);
                      M.read (| cols |)
                    ]
                  |)
                |) in
              let ops :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "array") [ Ty.path "i32" ],
                      "map",
                      [
                        Ty.function
                          [ Ty.tuple [ Ty.path "i32" ] ]
                          (Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                            [ F ]);
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                          [ F ]
                      ]
                    |),
                    [
                      repeat (Value.Integer 0) 32;
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                                            [ F ],
                                          "alloc_bit_cell",
                                          []
                                        |),
                                        [ allocator ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let enabled_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_bit_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let rest_mops_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_common_range_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let jops_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_unlimited_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let input_index_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_common_range_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let context_input_index_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_common_range_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let context_output_index_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_common_range_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let external_host_call_index_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_common_range_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let sp_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_common_range_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let mpages_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_common_range_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let frame_id_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_u32_state_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let eid_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_u32_state_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let fid_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_common_range_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let iid_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_common_range_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let maximal_memory_pages_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_common_range_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let used_common_range_cells_for_state :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [ Ty.apply (Ty.path "&") [ Ty.tuple [ Ty.path "usize"; Ty.path "u32" ] ] ],
                      "unwrap",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            [
                              Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellType";
                              Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "get",
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellType"
                          ]
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            allocator,
                            "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator",
                            "free_cells"
                          |);
                          M.alloc (|
                            Value.StructTuple
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellType::CommonRange"
                              []
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "enable_equality",
                      []
                    |),
                    [
                      allocator;
                      M.read (| meta |);
                      M.alloc (|
                        Value.StructTuple
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellType::CommonRange"
                          []
                      |);
                      BinOp.Panic.add (|
                        Integer.Usize,
                        M.read (|
                          M.SubPointer.get_tuple_field (|
                            M.read (| used_common_range_cells_for_state |),
                            0
                          |)
                        |),
                        M.rust_cast
                          (BinOp.Pure.ne
                            (M.read (|
                              M.SubPointer.get_tuple_field (|
                                M.read (| used_common_range_cells_for_state |),
                                1
                              |)
                            |))
                            (Value.Integer 0))
                      |)
                    ]
                  |)
                |) in
              let used_unlimited_cells_for_state :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [ Ty.apply (Ty.path "&") [ Ty.tuple [ Ty.path "usize"; Ty.path "u32" ] ] ],
                      "unwrap",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            [
                              Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellType";
                              Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "get",
                          [
                            Ty.path
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellType"
                          ]
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            allocator,
                            "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator",
                            "free_cells"
                          |);
                          M.alloc (|
                            Value.StructTuple
                              "delphinus_zkwasm::circuits::etable::allocator::EventTableCellType::Unlimited"
                              []
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "enable_equality",
                      []
                    |),
                    [
                      allocator;
                      M.read (| meta |);
                      M.alloc (|
                        Value.StructTuple
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellType::Unlimited"
                          []
                      |);
                      BinOp.Panic.add (|
                        Integer.Usize,
                        M.read (|
                          M.SubPointer.get_tuple_field (|
                            M.read (| used_unlimited_cells_for_state |),
                            0
                          |)
                        |),
                        M.rust_cast
                          (BinOp.Pure.ne
                            (M.read (|
                              M.SubPointer.get_tuple_field (|
                                M.read (| used_unlimited_cells_for_state |),
                                1
                              |)
                            |))
                            (Value.Integer 0))
                      |)
                    ]
                  |)
                |) in
              let itable_lookup_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_unlimited_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let brtable_lookup_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_unlimited_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let jtable_lookup_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_jump_table_lookup_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let pow_table_lookup_modulus_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_unlimited_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let pow_table_lookup_power_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_unlimited_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let external_foreign_call_lookup_cell :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_unlimited_cell",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let bit_table_lookup_cells :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      "alloc_bit_table_lookup_cells",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let foreign_table_reserved_lookup_cells :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "array")
                        [
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                            [ F ]
                        ],
                      [],
                      "into_iter",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "array") [ Ty.tuple [] ],
                          "map",
                          [
                            Ty.function
                              [ Ty.tuple [ Ty.tuple [] ] ]
                              (Ty.apply
                                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                [ F ]);
                            Ty.apply
                              (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                              [ F ]
                          ]
                        |),
                        [
                          repeat (Value.Tuple []) 6;
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                                                [ F ],
                                              "alloc_unlimited_cell",
                                              []
                                            |),
                                            [ allocator ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    ]
                  |)
                |) in
              let common_config :=
                M.alloc (|
                  Value.StructRecord
                    "delphinus_zkwasm::circuits::etable::EventTableCommonConfig"
                    [
                      ("enabled_cell", M.read (| enabled_cell |));
                      ("ops", M.read (| ops |));
                      ("rest_mops_cell", M.read (| rest_mops_cell |));
                      ("jops_cell", M.read (| jops_cell |));
                      ("input_index_cell", M.read (| input_index_cell |));
                      ("context_input_index_cell", M.read (| context_input_index_cell |));
                      ("context_output_index_cell", M.read (| context_output_index_cell |));
                      ("external_host_call_index_cell", M.read (| external_host_call_index_cell |));
                      ("sp_cell", M.read (| sp_cell |));
                      ("mpages_cell", M.read (| mpages_cell |));
                      ("frame_id_cell", M.read (| frame_id_cell |));
                      ("eid_cell", M.read (| eid_cell |));
                      ("fid_cell", M.read (| fid_cell |));
                      ("iid_cell", M.read (| iid_cell |));
                      ("maximal_memory_pages_cell", M.read (| maximal_memory_pages_cell |));
                      ("itable_lookup_cell", M.read (| itable_lookup_cell |));
                      ("brtable_lookup_cell", M.read (| brtable_lookup_cell |));
                      ("jtable_lookup_cell", M.read (| jtable_lookup_cell |));
                      ("pow_table_lookup_modulus_cell", M.read (| pow_table_lookup_modulus_cell |));
                      ("pow_table_lookup_power_cell", M.read (| pow_table_lookup_power_cell |));
                      ("bit_table_lookup_cells", M.read (| bit_table_lookup_cells |));
                      ("external_foreign_call_lookup_cell",
                        M.read (| external_foreign_call_lookup_cell |))
                    ]
                |) in
              let op_bitmaps :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let op_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let profiler :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "new",
                      [ F ]
                    |),
                    [ allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 11
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 9
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin::BinConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 17
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_br_if_eqz::BrIfEqzConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 16
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 15
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_br::BrConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 20
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_call::CallConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 21
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 5
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_const::ConstConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 27
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_conversion::ConversionConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 6
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_drop::DropConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 3
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_global_get::GlobalGetConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 4
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_global_set::GlobalSetConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 0
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_local_get::LocalGetConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 1
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_local_set::LocalSetConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 2
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_local_tee::LocalTeeConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 14
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_rel::RelConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 8
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_return::ReturnConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 7
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_select::SelectConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 13
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_test::TestConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 10
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 23
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_load::LoadConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 24
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_store::StoreConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 12
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_bit::BinBitConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 25
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_memory_size::MemorySizeConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 26
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_memory_grow::MemoryGrowConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 18
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple
                    "specs::itable::OpcodeClassPlain"
                    [
                      M.rust_cast
                        (BinOp.Panic.add (|
                          Integer.Isize,
                          M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                          Value.Integer 22
                        |))
                    ]
                |) in
              let foreign_table_configs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.apply (Ty.path "&") [ Ty.path "str" ];
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            [
                              Ty.dyn
                                [ ("delphinus_zkwasm::foreign::ForeignTableConfig::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); foreign_table_configs ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::op_configure::op_call_indirect::CallIndirectConfigBuilder",
                      [ F ],
                      "configure",
                      []
                    |),
                    [ common_config; allocator; constraint_builder ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::foreign::InternalHostPluginBuilder",
                      Ty.path
                        "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfigBuilder",
                      [],
                      "new",
                      []
                    |),
                    [ Value.Integer 0 ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  BinOp.Panic.add (|
                    Integer.Usize,
                    M.rust_cast
                      (BinOp.Panic.add (|
                        Integer.Isize,
                        M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                        Value.Integer 28
                      |)),
                    Value.Integer 0
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple "specs::itable::OpcodeClassPlain" [ M.read (| op |) ]
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); M.read (| foreign_table_configs |) ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::foreign::EventTableForeignCallConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::foreign::wasm_input_helper::etable_op_configure::ETableWasmInputHelperTableConfigBuilder",
                      [ F ],
                      "configure",
                      [
                        Ty.apply
                          (Ty.path "core::array::iter::IntoIter")
                          [
                            Ty.apply
                              (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                              [ F ]
                          ]
                      ]
                    |),
                    [
                      M.read (| builder |);
                      common_config;
                      allocator;
                      constraint_builder;
                      foreign_table_reserved_lookup_cells
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::foreign::InternalHostPluginBuilder",
                      Ty.path
                        "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfigBuilder",
                      [],
                      "new",
                      []
                    |),
                    [ Value.Integer 1 ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  BinOp.Panic.add (|
                    Integer.Usize,
                    M.rust_cast
                      (BinOp.Panic.add (|
                        Integer.Isize,
                        M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                        Value.Integer 28
                      |)),
                    Value.Integer 1
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple "specs::itable::OpcodeClassPlain" [ M.read (| op |) ]
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); M.read (| foreign_table_configs |) ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::foreign::EventTableForeignCallConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::foreign::context::etable_op_configure::ETableContextHelperTableConfigBuilder",
                      [ F ],
                      "configure",
                      [
                        Ty.apply
                          (Ty.path "core::array::iter::IntoIter")
                          [
                            Ty.apply
                              (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                              [ F ]
                          ]
                      ]
                    |),
                    [
                      M.read (| builder |);
                      common_config;
                      allocator;
                      constraint_builder;
                      foreign_table_reserved_lookup_cells
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::foreign::InternalHostPluginBuilder",
                      Ty.path
                        "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfigBuilder",
                      [],
                      "new",
                      []
                    |),
                    [ Value.Integer 2 ]
                  |)
                |) in
              let op :=
                M.alloc (|
                  BinOp.Panic.add (|
                    Integer.Usize,
                    M.rust_cast
                      (BinOp.Panic.add (|
                        Integer.Isize,
                        M.get_constant (| "specs::itable::OpcodeClass::LocalGet_discriminant" |),
                        Value.Integer 28
                      |)),
                    Value.Integer 2
                  |)
                |) in
              let op :=
                M.alloc (|
                  Value.StructTuple "specs::itable::OpcodeClassPlain" [ M.read (| op |) ]
                |) in
              let constraint_builder :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "new",
                      []
                    |),
                    [ M.read (| meta |); M.read (| foreign_table_configs |) ]
                  |)
                |) in
              let allocator :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [ allocator ]
                  |)
                |) in
              let config :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::foreign::EventTableForeignCallConfigBuilder",
                      Ty.path
                        "delphinus_zkwasm::foreign::require_helper::etable_op_configure::ETableRequireHelperTableConfigBuilder",
                      [ F ],
                      "configure",
                      [
                        Ty.apply
                          (Ty.path "core::array::iter::IntoIter")
                          [
                            Ty.apply
                              (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                              [ F ]
                          ]
                      ]
                    |),
                    [
                      M.read (| builder |);
                      common_config;
                      allocator;
                      constraint_builder;
                      foreign_table_reserved_lookup_cells
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                        [ F ],
                      "finalize",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| constraint_builder |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_array_field (|
                                                ops,
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "specs::itable::OpcodeClassPlain",
                                                      "index",
                                                      []
                                                    |),
                                                    [ M.read (| op |) ]
                                                  |)
                                                |)
                                              |);
                                              M.read (| meta |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_bitmaps;
                      M.read (| op |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "specs::itable::OpcodeClassPlain",
                          "index",
                          []
                        |),
                        [ M.read (| op |) ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "specs::itable::OpcodeClassPlain";
                          Ty.apply
                            (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "insert",
                      []
                    |),
                    [
                      op_configs;
                      M.read (| op |);
                      Value.StructTuple
                        "delphinus_zkwasm::circuits::etable::OpcodeConfig"
                        [ (* Unsize *) M.pointer_coercion (M.read (| config |)) ]
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "update",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path
                        "delphinus_zkwasm::circuits::etable::allocator::AllocatorFreeCellsProfiler",
                      "assert_no_free_cells",
                      [ F ]
                    |),
                    [ profiler; allocator ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c1. enable seq" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Mul",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ],
                                                            "mul",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Mul",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ],
                                                                "mul",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                      [ F ],
                                                                    [ F ],
                                                                    "next_expr",
                                                                    []
                                                                  |),
                                                                  [ enabled_cell; M.read (| meta |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        enabled_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    Value.StructTuple
                                                                      "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::convert::From",
                                                                            F,
                                                                            [ Ty.path "u64" ],
                                                                            "from",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (|
                                                                              M.use
                                                                                (M.alloc (|
                                                                                  Value.Integer 1
                                                                                |))
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                                  [ F ],
                                                                "query_fixed",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| meta |);
                                                                M.read (| step_sel |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Rotation",
                                                                    "cur",
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c4. opcode_bit lvl sum equals to 1" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ])
                                            ],
                                          [],
                                          "collect",
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ]
                                                                              ],
                                                                            "unwrap",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::array::iter::IntoIter")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ]
                                                                                  ],
                                                                                [],
                                                                                "reduce",
                                                                                [
                                                                                  Ty.function
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ]
                                                                                    ]
                                                                                    (Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ])
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::iter::traits::collect::IntoIterator",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "array")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ]
                                                                                      ],
                                                                                    [],
                                                                                    "into_iter",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                              [ F ]
                                                                                          ],
                                                                                        "map",
                                                                                        [
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                            (Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F
                                                                                              ]);
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ]
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          ops
                                                                                        |);
                                                                                        M.closure
                                                                                          (fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              match
                                                                                                γ
                                                                                              with
                                                                                              | [ α0
                                                                                                  ] =>
                                                                                                M.match_operator (|
                                                                                                  M.alloc (|
                                                                                                    α0
                                                                                                  |),
                                                                                                  [
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (let
                                                                                                              x :=
                                                                                                          M.copy (|
                                                                                                            γ
                                                                                                          |) in
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                                              [
                                                                                                                F
                                                                                                              ],
                                                                                                            [
                                                                                                              F
                                                                                                            ],
                                                                                                            "curr_expr",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            x;
                                                                                                            M.read (|
                                                                                                              meta
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)))
                                                                                                  ]
                                                                                                |)
                                                                                              | _ =>
                                                                                                M.impossible (||)
                                                                                              end))
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.closure
                                                                                  (fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      match γ with
                                                                                      | [ α0; α1
                                                                                          ] =>
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            α0
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      acc :=
                                                                                                  M.copy (|
                                                                                                    γ
                                                                                                  |) in
                                                                                                M.match_operator (|
                                                                                                  M.alloc (|
                                                                                                    α1
                                                                                                  |),
                                                                                                  [
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (let
                                                                                                              x :=
                                                                                                          M.copy (|
                                                                                                            γ
                                                                                                          |) in
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::ops::arith::Add",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                                              [
                                                                                                                F
                                                                                                              ],
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                                [
                                                                                                                  F
                                                                                                                ]
                                                                                                            ],
                                                                                                            "add",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.read (|
                                                                                                              acc
                                                                                                            |);
                                                                                                            M.read (|
                                                                                                              x
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)))
                                                                                                  ]
                                                                                                |)))
                                                                                          ]
                                                                                        |)
                                                                                      | _ =>
                                                                                        M.impossible (||)
                                                                                      end))
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            enabled_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let expr := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| expr |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (| step_sel |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let sum_ops_expr_with_init :=
                M.alloc (|
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0; α1; α2; α3 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let init := M.copy (| γ |) in
                                  M.match_operator (|
                                    M.alloc (| α1 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let meta := M.copy (| γ |) in
                                          M.match_operator (|
                                            M.alloc (| α2 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let get_expr := M.copy (| γ |) in
                                                  M.match_operator (|
                                                    M.alloc (| α3 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let enable := M.copy (| γ |) in
                                                          M.read (|
                                                            let expr :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Mul",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "mul",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::filter_map::FilterMap")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::collections::btree::map::Iter")
                                                                              [
                                                                                Ty.path
                                                                                  "specs::itable::OpcodeClassPlain";
                                                                                Ty.path "usize"
                                                                              ];
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.path
                                                                                              "specs::itable::OpcodeClassPlain"
                                                                                          ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ])
                                                                          ],
                                                                        [],
                                                                        "fold",
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ];
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ])
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::collections::btree::map::Iter")
                                                                              [
                                                                                Ty.path
                                                                                  "specs::itable::OpcodeClassPlain";
                                                                                Ty.path "usize"
                                                                              ],
                                                                            [],
                                                                            "filter_map",
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ];
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "specs::itable::OpcodeClassPlain"
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                                (Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ]
                                                                                  ])
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                                  [
                                                                                    Ty.path
                                                                                      "specs::itable::OpcodeClassPlain";
                                                                                    Ty.path "usize";
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                "iter",
                                                                                []
                                                                              |),
                                                                              [ op_bitmaps ]
                                                                            |);
                                                                            M.closure
                                                                              (fun γ =>
                                                                                ltac:(M.monadic
                                                                                  match γ with
                                                                                  | [ α0 ] =>
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α0
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ0_0 :=
                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                γ,
                                                                                                0
                                                                                              |) in
                                                                                            let
                                                                                                  γ0_1 :=
                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                γ,
                                                                                                1
                                                                                              |) in
                                                                                            let
                                                                                                  op :=
                                                                                              M.copy (|
                                                                                                γ0_0
                                                                                              |) in
                                                                                            let
                                                                                                  op_index :=
                                                                                              M.copy (|
                                                                                                γ0_1
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ],
                                                                                                "map",
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                                    [
                                                                                                      F
                                                                                                    ];
                                                                                                  Ty.function
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                                            [
                                                                                                              F
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                    (Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                      [
                                                                                                        F
                                                                                                      ])
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::function::Fn",
                                                                                                    Ty.dyn
                                                                                                      [
                                                                                                        ("existential predicate with variables",
                                                                                                          []);
                                                                                                        ("existential predicate with variables",
                                                                                                          [])
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&mut")
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                                                [
                                                                                                                  F
                                                                                                                ]
                                                                                                            ];
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                                                                [
                                                                                                                  F
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                    ],
                                                                                                    "call",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      get_expr
                                                                                                    |);
                                                                                                    Value.Tuple
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          meta
                                                                                                        |);
                                                                                                        M.call_closure (|
                                                                                                          M.get_associated_function (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::option::Option")
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&")
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ]
                                                                                                                  ]
                                                                                                              ],
                                                                                                            "unwrap",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.call_closure (|
                                                                                                              M.get_associated_function (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "specs::itable::OpcodeClassPlain";
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ];
                                                                                                                    Ty.path
                                                                                                                      "alloc::alloc::Global"
                                                                                                                  ],
                                                                                                                "get",
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "specs::itable::OpcodeClassPlain"
                                                                                                                ]
                                                                                                              |),
                                                                                                              [
                                                                                                                op_configs;
                                                                                                                M.read (|
                                                                                                                  op
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      ]
                                                                                                  ]
                                                                                                |);
                                                                                                M.closure
                                                                                                  (fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      match
                                                                                                        γ
                                                                                                      with
                                                                                                      | [
                                                                                                            α0
                                                                                                          ] =>
                                                                                                        M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            α0
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      expr :=
                                                                                                                  M.copy (|
                                                                                                                    γ
                                                                                                                  |) in
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::arith::Mul",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ],
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ]
                                                                                                                    ],
                                                                                                                    "mul",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      expr
                                                                                                                    |);
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                                                          [
                                                                                                                            F
                                                                                                                          ],
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ],
                                                                                                                        "curr_expr",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.SubPointer.get_array_field (|
                                                                                                                          ops,
                                                                                                                          M.read (|
                                                                                                                            op_index
                                                                                                                          |)
                                                                                                                        |);
                                                                                                                        M.read (|
                                                                                                                          meta
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)))
                                                                                                          ]
                                                                                                        |)
                                                                                                      | _ =>
                                                                                                        M.impossible (||)
                                                                                                      end))
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)
                                                                                  | _ =>
                                                                                    M.impossible (||)
                                                                                  end))
                                                                          ]
                                                                        |);
                                                                        M.read (| init |);
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0; α1 ] =>
                                                                                M.match_operator (|
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let acc :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            α1
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      x :=
                                                                                                  M.copy (|
                                                                                                    γ
                                                                                                  |) in
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                                        [
                                                                                                          F
                                                                                                        ]
                                                                                                    ],
                                                                                                    "add",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      acc
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      x
                                                                                                    |)
                                                                                                  ]
                                                                                                |)))
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)
                                                                              | _ =>
                                                                                M.impossible (||)
                                                                              end))
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ],
                                                                        "query_fixed",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| meta |);
                                                                        M.read (| step_sel |);
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation",
                                                                            "cur",
                                                                            []
                                                                          |),
                                                                          []
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("existential predicate with variables",
                                                                                []);
                                                                              ("existential predicate with variables",
                                                                                [])
                                                                            ]
                                                                        ]
                                                                    ],
                                                                  "map_or",
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [
                                                                                Ty.dyn
                                                                                  [
                                                                                    ("existential predicate with variables",
                                                                                      []);
                                                                                    ("existential predicate with variables",
                                                                                      [])
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ])
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| enable |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      [],
                                                                      "clone",
                                                                      []
                                                                    |),
                                                                    [ expr ]
                                                                  |);
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0 ] =>
                                                                          M.match_operator (|
                                                                            M.alloc (| α0 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let
                                                                                        enable_expr :=
                                                                                    M.copy (|
                                                                                      γ
                                                                                    |) in
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::arith::Mul",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ],
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ]
                                                                                      ],
                                                                                      "mul",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        expr
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::function::Fn",
                                                                                          Ty.dyn
                                                                                            [
                                                                                              ("existential predicate with variables",
                                                                                                []);
                                                                                              ("existential predicate with variables",
                                                                                                [])
                                                                                            ],
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&mut")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                          ],
                                                                                          "call",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            enable_expr
                                                                                          |);
                                                                                          Value.Tuple
                                                                                            [
                                                                                              M.read (|
                                                                                                meta
                                                                                              |)
                                                                                            ]
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)))
                                                                            ]
                                                                          |)
                                                                        | _ => M.impossible (||)
                                                                        end))
                                                                ]
                                                              |)
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                    ]
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                |) in
              let sum_ops_expr :=
                M.alloc (|
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0; α1 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let meta := M.copy (| γ |) in
                                  M.match_operator (|
                                    M.alloc (| α1 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let get_expr := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                              "unwrap",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::filter_map::FilterMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::Iter")
                                                        [
                                                          Ty.path "specs::itable::OpcodeClassPlain";
                                                          Ty.path "usize"
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "specs::itable::OpcodeClassPlain"
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.path "usize" ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ]
                                                          ])
                                                    ],
                                                  [],
                                                  "reduce",
                                                  [
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ])
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::Iter")
                                                        [
                                                          Ty.path "specs::itable::OpcodeClassPlain";
                                                          Ty.path "usize"
                                                        ],
                                                      [],
                                                      "filter_map",
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "specs::itable::OpcodeClassPlain"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [ Ty.path "usize" ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ])
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::collections::btree::map::BTreeMap")
                                                            [
                                                              Ty.path
                                                                "specs::itable::OpcodeClassPlain";
                                                              Ty.path "usize";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          "iter",
                                                          []
                                                        |),
                                                        [ op_bitmaps ]
                                                      |);
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              M.match_operator (|
                                                                M.alloc (| α0 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          0
                                                                        |) in
                                                                      let γ0_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          1
                                                                        |) in
                                                                      let op := M.copy (| γ0_0 |) in
                                                                      let op_index :=
                                                                        M.copy (| γ0_1 |) in
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                          "map",
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ];
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ])
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::function::Fn",
                                                                              Ty.dyn
                                                                                [
                                                                                  ("existential predicate with variables",
                                                                                    []);
                                                                                  ("existential predicate with variables",
                                                                                    [])
                                                                                ],
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                          [ F ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                                          [ F ]
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                              "call",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (| get_expr |);
                                                                              Value.Tuple
                                                                                [
                                                                                  M.read (| meta |);
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                                                [ F
                                                                                                ]
                                                                                            ]
                                                                                        ],
                                                                                      "unwrap",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::collections::btree::map::BTreeMap")
                                                                                            [
                                                                                              Ty.path
                                                                                                "specs::itable::OpcodeClassPlain";
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                                                                                [ F
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          "get",
                                                                                          [
                                                                                            Ty.path
                                                                                              "specs::itable::OpcodeClassPlain"
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          op_configs;
                                                                                          M.read (|
                                                                                            op
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                            ]
                                                                          |);
                                                                          M.closure
                                                                            (fun γ =>
                                                                              ltac:(M.monadic
                                                                                match γ with
                                                                                | [ α0 ] =>
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                expr :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::arith::Mul",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ],
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                                  [
                                                                                                    F
                                                                                                  ]
                                                                                              ],
                                                                                              "mul",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                expr
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                  "curr_expr",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.SubPointer.get_array_field (|
                                                                                                    ops,
                                                                                                    M.read (|
                                                                                                      op_index
                                                                                                    |)
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    meta
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)))
                                                                                    ]
                                                                                  |)
                                                                                | _ =>
                                                                                  M.impossible (||)
                                                                                end))
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |)
                                                            | _ => M.impossible (||)
                                                            end))
                                                    ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0; α1 ] =>
                                                          M.match_operator (|
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let acc := M.copy (| γ |) in
                                                                  M.match_operator (|
                                                                    M.alloc (| α1 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let x :=
                                                                            M.copy (| γ |) in
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::arith::Add",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ]
                                                                              ],
                                                                              "add",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (| acc |);
                                                                              M.read (| x |)
                                                                            ]
                                                                          |)))
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                ]
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c5a. rest_mops change" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::function::Fn",
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("existential predicate with variables",
                                                                              []);
                                                                            ("existential predicate with variables",
                                                                              [])
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]),
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("existential predicate with variables",
                                                                            []);
                                                                          ("existential predicate with variables",
                                                                            [])
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("existential predicate with variables",
                                                                                []);
                                                                              ("existential predicate with variables",
                                                                                [])
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                            "call",
                                                            []
                                                          |),
                                                          [
                                                            sum_ops_expr_with_init;
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "next_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        rest_mops_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        rest_mops_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (| meta |);
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0; α1 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let meta :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α1
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  config :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                                                Ty.dyn
                                                                                                  [
                                                                                                    ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                                      [])
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "mops",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                    M.read (|
                                                                                                      config
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                                                    0
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  |));
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c5b. jops change(increase if continuation)" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::function::Fn",
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("existential predicate with variables",
                                                                              []);
                                                                            ("existential predicate with variables",
                                                                              [])
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]),
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("existential predicate with variables",
                                                                            []);
                                                                          ("existential predicate with variables",
                                                                            [])
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("existential predicate with variables",
                                                                                []);
                                                                              ("existential predicate with variables",
                                                                                [])
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                            "call",
                                                            []
                                                          |),
                                                          [
                                                            sum_ops_expr_with_init;
                                                            Value.Tuple
                                                              [
                                                                M.read (|
                                                                  M.match_operator (|
                                                                    M.alloc (| Value.Tuple [] |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.use
                                                                              (M.alloc (|
                                                                                Value.Bool false
                                                                              |)) in
                                                                          let _ :=
                                                                            M.is_constant_or_break_match (|
                                                                              M.read (| γ |),
                                                                              Value.Bool true
                                                                            |) in
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Sub",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "sub",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    jops_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "next_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    jops_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Sub",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "sub",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "next_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    jops_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "curr_expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    jops_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                |);
                                                                M.read (| meta |);
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0; α1 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let meta :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α1
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  config :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                                                Ty.dyn
                                                                                                  [
                                                                                                    ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                                      [])
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "jops_expr",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                    M.read (|
                                                                                                      config
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                                                    0
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  |));
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c5c. input_index change" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::function::Fn",
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("existential predicate with variables",
                                                                              []);
                                                                            ("existential predicate with variables",
                                                                              [])
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]),
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("existential predicate with variables",
                                                                            []);
                                                                          ("existential predicate with variables",
                                                                            [])
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("existential predicate with variables",
                                                                                []);
                                                                              ("existential predicate with variables",
                                                                                [])
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                            "call",
                                                            []
                                                          |),
                                                          [
                                                            sum_ops_expr_with_init;
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        input_index_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "next_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        input_index_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (| meta |);
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0; α1 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let meta :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α1
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  config :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                                                Ty.dyn
                                                                                                  [
                                                                                                    ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                                      [])
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "input_index_increase",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                    M.read (|
                                                                                                      config
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                                                    0
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |);
                                                                                                common_config
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  |));
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c5d. external_host_call_index change" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::function::Fn",
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("existential predicate with variables",
                                                                              []);
                                                                            ("existential predicate with variables",
                                                                              [])
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]),
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("existential predicate with variables",
                                                                            []);
                                                                          ("existential predicate with variables",
                                                                            [])
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("existential predicate with variables",
                                                                                []);
                                                                              ("existential predicate with variables",
                                                                                [])
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                            "call",
                                                            []
                                                          |),
                                                          [
                                                            sum_ops_expr_with_init;
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        external_host_call_index_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "next_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        external_host_call_index_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (| meta |);
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0; α1 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let meta :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α1
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  config :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                                                Ty.dyn
                                                                                                  [
                                                                                                    ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                                      [])
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "external_host_call_index_increase",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                    M.read (|
                                                                                                      config
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                                                    0
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |);
                                                                                                common_config
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  |));
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c5e. sp change" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::function::Fn",
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("existential predicate with variables",
                                                                              []);
                                                                            ("existential predicate with variables",
                                                                              [])
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]),
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("existential predicate with variables",
                                                                            []);
                                                                          ("existential predicate with variables",
                                                                            [])
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("existential predicate with variables",
                                                                                []);
                                                                              ("existential predicate with variables",
                                                                                [])
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                            "call",
                                                            []
                                                          |),
                                                          [
                                                            sum_ops_expr_with_init;
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [ sp_cell; M.read (| meta |) ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "next_expr",
                                                                        []
                                                                      |),
                                                                      [ sp_cell; M.read (| meta |) ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (| meta |);
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0; α1 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let meta :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α1
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  config :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                                                Ty.dyn
                                                                                                  [
                                                                                                    ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                                      [])
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "sp_diff",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                    M.read (|
                                                                                                      config
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                                                    0
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  |));
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c5f. mpages change" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::function::Fn",
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("existential predicate with variables",
                                                                              []);
                                                                            ("existential predicate with variables",
                                                                              [])
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]),
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("existential predicate with variables",
                                                                            []);
                                                                          ("existential predicate with variables",
                                                                            [])
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("existential predicate with variables",
                                                                                []);
                                                                              ("existential predicate with variables",
                                                                                [])
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                            "call",
                                                            []
                                                          |),
                                                          [
                                                            sum_ops_expr_with_init;
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        mpages_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "next_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        mpages_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (| meta |);
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0; α1 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let meta :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α1
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  config :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                                                Ty.dyn
                                                                                                  [
                                                                                                    ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                                      [])
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "allocated_memory_pages_diff",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                    M.read (|
                                                                                                      config
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                                                    0
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  |));
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c5g. context_input_index change" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::function::Fn",
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("existential predicate with variables",
                                                                              []);
                                                                            ("existential predicate with variables",
                                                                              [])
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]),
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("existential predicate with variables",
                                                                            []);
                                                                          ("existential predicate with variables",
                                                                            [])
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("existential predicate with variables",
                                                                                []);
                                                                              ("existential predicate with variables",
                                                                                [])
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                            "call",
                                                            []
                                                          |),
                                                          [
                                                            sum_ops_expr_with_init;
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        context_input_index_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "next_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        context_input_index_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (| meta |);
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0; α1 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let meta :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α1
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  config :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                                                Ty.dyn
                                                                                                  [
                                                                                                    ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                                      [])
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "context_input_index_increase",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                    M.read (|
                                                                                                      config
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                                                    0
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |);
                                                                                                common_config
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  |));
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c5h. context_output_index change" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::function::Fn",
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("existential predicate with variables",
                                                                              []);
                                                                            ("existential predicate with variables",
                                                                              [])
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]),
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("existential predicate with variables",
                                                                            []);
                                                                          ("existential predicate with variables",
                                                                            [])
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("existential predicate with variables",
                                                                                []);
                                                                              ("existential predicate with variables",
                                                                                [])
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                            "call",
                                                            []
                                                          |),
                                                          [
                                                            sum_ops_expr_with_init;
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        context_output_index_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "next_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        context_output_index_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (| meta |);
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0; α1 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let meta :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α1
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  config :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                                                Ty.dyn
                                                                                                  [
                                                                                                    ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                                      [])
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "context_output_index_increase",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                    M.read (|
                                                                                                      config
                                                                                                    |),
                                                                                                    "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                                                    0
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |);
                                                                                                common_config
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  |));
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c6a. eid change" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Mul",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ],
                                                            "mul",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Sub",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ],
                                                                "sub",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "next_expr",
                                                                        []
                                                                      |),
                                                                      [ eid_cell; M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [ eid_cell; M.read (| meta |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                      [ F ],
                                                                    [ F ],
                                                                    "curr_expr",
                                                                    []
                                                                  |),
                                                                  [ enabled_cell; M.read (| meta |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                                  [ F ],
                                                                "query_fixed",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| meta |);
                                                                M.read (| step_sel |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Rotation",
                                                                    "cur",
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c6b. fid change" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::function::Fn",
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("existential predicate with variables",
                                                                              []);
                                                                            ("existential predicate with variables",
                                                                              [])
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]),
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("existential predicate with variables",
                                                                            []);
                                                                          ("existential predicate with variables",
                                                                            [])
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("existential predicate with variables",
                                                                                []);
                                                                              ("existential predicate with variables",
                                                                                [])
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                            "call",
                                                            []
                                                          |),
                                                          [
                                                            sum_ops_expr_with_init;
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [ fid_cell; M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "next_expr",
                                                                        []
                                                                      |),
                                                                      [ fid_cell; M.read (| meta |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (| meta |);
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0; α1 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let meta :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α1
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  config :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ],
                                                                                                "map",
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                                    [
                                                                                                      F
                                                                                                    ];
                                                                                                  Ty.function
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                                            [
                                                                                                              F
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                    (Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                      [
                                                                                                        F
                                                                                                      ])
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                                                    Ty.dyn
                                                                                                      [
                                                                                                        ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                                          [])
                                                                                                      ],
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                    "next_fid",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                        M.read (|
                                                                                                          config
                                                                                                        |),
                                                                                                        "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                                                        0
                                                                                                      |)
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      meta
                                                                                                    |);
                                                                                                    common_config
                                                                                                  ]
                                                                                                |);
                                                                                                M.closure
                                                                                                  (fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      match
                                                                                                        γ
                                                                                                      with
                                                                                                      | [
                                                                                                            α0
                                                                                                          ] =>
                                                                                                        M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            α0
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      x :=
                                                                                                                  M.copy (|
                                                                                                                    γ
                                                                                                                  |) in
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::arith::Sub",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ],
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ]
                                                                                                                    ],
                                                                                                                    "sub",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      x
                                                                                                                    |);
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                                                          [
                                                                                                                            F
                                                                                                                          ],
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ],
                                                                                                                        "curr_expr",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        fid_cell;
                                                                                                                        M.read (|
                                                                                                                          meta
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)))
                                                                                                          ]
                                                                                                        |)
                                                                                                      | _ =>
                                                                                                        M.impossible (||)
                                                                                                      end))
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  |));
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c6c. iid change" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::function::Fn",
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("existential predicate with variables",
                                                                              []);
                                                                            ("existential predicate with variables",
                                                                              [])
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]),
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("existential predicate with variables",
                                                                            []);
                                                                          ("existential predicate with variables",
                                                                            [])
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("existential predicate with variables",
                                                                                []);
                                                                              ("existential predicate with variables",
                                                                                [])
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                            "call",
                                                            []
                                                          |),
                                                          [
                                                            sum_ops_expr_with_init;
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "next_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            iid_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "curr_expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            iid_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        enabled_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (| meta |);
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0; α1 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let meta :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α1
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  config :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ],
                                                                                                "map",
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                                    [
                                                                                                      F
                                                                                                    ];
                                                                                                  Ty.function
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                                            [
                                                                                                              F
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                    (Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                      [
                                                                                                        F
                                                                                                      ])
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                                                    Ty.dyn
                                                                                                      [
                                                                                                        ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                                          [])
                                                                                                      ],
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                    "next_iid",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                        M.read (|
                                                                                                          config
                                                                                                        |),
                                                                                                        "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                                                        0
                                                                                                      |)
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      meta
                                                                                                    |);
                                                                                                    common_config
                                                                                                  ]
                                                                                                |);
                                                                                                M.closure
                                                                                                  (fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      match
                                                                                                        γ
                                                                                                      with
                                                                                                      | [
                                                                                                            α0
                                                                                                          ] =>
                                                                                                        M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            α0
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      x :=
                                                                                                                  M.copy (|
                                                                                                                    γ
                                                                                                                  |) in
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::arith::Sub",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ],
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ]
                                                                                                                    ],
                                                                                                                    "sub",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::arith::Add",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                                                          [
                                                                                                                            F
                                                                                                                          ],
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                                                            [
                                                                                                                              F
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                        "add",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                                                              [
                                                                                                                                F
                                                                                                                              ],
                                                                                                                            [
                                                                                                                              F
                                                                                                                            ],
                                                                                                                            "curr_expr",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            iid_cell;
                                                                                                                            M.read (|
                                                                                                                              meta
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |);
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                                                              [
                                                                                                                                F
                                                                                                                              ],
                                                                                                                            [
                                                                                                                              F
                                                                                                                            ],
                                                                                                                            "curr_expr",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            enabled_cell;
                                                                                                                            M.read (|
                                                                                                                              meta
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |);
                                                                                                                    M.read (|
                                                                                                                      x
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)))
                                                                                                          ]
                                                                                                        |)
                                                                                                      | _ =>
                                                                                                        M.impossible (||)
                                                                                                      end))
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  |));
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c6d. frame_id change" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::function::Fn",
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ];
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCells")
                                                                          [ F ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("existential predicate with variables",
                                                                              []);
                                                                            ("existential predicate with variables",
                                                                              [])
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("existential predicate with variables",
                                                                                  []);
                                                                                ("existential predicate with variables",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]),
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("existential predicate with variables",
                                                                            []);
                                                                          ("existential predicate with variables",
                                                                            [])
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("existential predicate with variables",
                                                                                []);
                                                                              ("existential predicate with variables",
                                                                                [])
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ],
                                                            "call",
                                                            []
                                                          |),
                                                          [
                                                            sum_ops_expr_with_init;
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        frame_id_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "next_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        frame_id_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (| meta |);
                                                                (* Unsize *)
                                                                M.pointer_coercion
                                                                  (M.alloc (|
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0; α1 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let meta :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      M.alloc (|
                                                                                        α1
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  config :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::option::Option")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ],
                                                                                                "map",
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                                    [
                                                                                                      F
                                                                                                    ];
                                                                                                  Ty.function
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                                            [
                                                                                                              F
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                    (Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                      [
                                                                                                        F
                                                                                                      ])
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                                                    Ty.dyn
                                                                                                      [
                                                                                                        ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                                          [])
                                                                                                      ],
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                    "next_frame_id",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                        M.read (|
                                                                                                          config
                                                                                                        |),
                                                                                                        "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                                                        0
                                                                                                      |)
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      meta
                                                                                                    |);
                                                                                                    common_config
                                                                                                  ]
                                                                                                |);
                                                                                                M.closure
                                                                                                  (fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      match
                                                                                                        γ
                                                                                                      with
                                                                                                      | [
                                                                                                            α0
                                                                                                          ] =>
                                                                                                        M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            α0
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      x :=
                                                                                                                  M.copy (|
                                                                                                                    γ
                                                                                                                  |) in
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::arith::Sub",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ],
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ]
                                                                                                                    ],
                                                                                                                    "sub",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      x
                                                                                                                    |);
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                                                          [
                                                                                                                            F
                                                                                                                          ],
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ],
                                                                                                                        "curr_expr",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        frame_id_cell;
                                                                                                                        M.read (|
                                                                                                                          meta
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)))
                                                                                                          ]
                                                                                                        |)
                                                                                                      | _ =>
                                                                                                        M.impossible (||)
                                                                                                      end))
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  |));
                                                                Value.StructTuple
                                                                  "core::option::Option::None"
                                                                  []
                                                              ]
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c7. itable_lookup_encode" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.read (|
                                        let opcode :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::function::Fn",
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCells")
                                                              [ F ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.dyn
                                                              [
                                                                ("existential predicate with variables",
                                                                  []);
                                                                ("existential predicate with variables",
                                                                  [])
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]),
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::VirtualCells")
                                                            [ F ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.dyn
                                                            [
                                                              ("existential predicate with variables",
                                                                []);
                                                              ("existential predicate with variables",
                                                                [])
                                                            ]
                                                        ]
                                                    ]
                                                ],
                                                "call",
                                                []
                                              |),
                                              [
                                                sum_ops_expr;
                                                Value.Tuple
                                                  [
                                                    M.read (| meta |);
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.alloc (|
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0; α1 ] =>
                                                                M.match_operator (|
                                                                  M.alloc (| α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let meta :=
                                                                          M.copy (| γ |) in
                                                                        M.match_operator (|
                                                                          M.alloc (| α1 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let config :=
                                                                                  M.copy (| γ |) in
                                                                                Value.StructTuple
                                                                                  "core::option::Option::Some"
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                                                                        Ty.dyn
                                                                                          [
                                                                                            ("delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig::Trait",
                                                                                              [])
                                                                                          ],
                                                                                        [ F ],
                                                                                        "opcode",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            M.read (|
                                                                                              config
                                                                                            |),
                                                                                            "delphinus_zkwasm::circuits::etable::OpcodeConfig",
                                                                                            0
                                                                                          |)
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]))
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |)
                                                              | _ => M.impossible (||)
                                                              end))
                                                      |))
                                                  ]
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                              "into_vec",
                                              [ Ty.path "alloc::alloc::Global" ]
                                            |),
                                            [
                                              (* Unsize *)
                                              M.pointer_coercion
                                                (M.read (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::boxed::Box")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      []
                                                    |),
                                                    [
                                                      M.alloc (|
                                                        Value.Array
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Mul",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ],
                                                                "mul",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Sub",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                    "sub",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_function (|
                                                                        "specs::encode::instruction_table::encode_instruction_table_entry",
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            fid_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            iid_cell;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.read (| opcode |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                          [ F ],
                                                                        [ F ],
                                                                        "curr_expr",
                                                                        []
                                                                      |),
                                                                      [
                                                                        itable_lookup_cell;
                                                                        M.read (| meta |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCells")
                                                                      [ F ],
                                                                    "query_fixed",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| meta |);
                                                                    M.read (| step_sel |);
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "halo2_proofs::poly::Rotation",
                                                                        "cur",
                                                                        []
                                                                      |),
                                                                      []
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                      |)
                                                    ]
                                                  |)
                                                |))
                                            ]
                                          |)
                                        |)
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::image_table::ImageTableConfig")
                        [ F ],
                      "instruction_lookup",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ])
                      ]
                    |),
                    [
                      M.read (| image_table |);
                      M.read (| meta |);
                      M.read (| Value.String "c8a. itable_lookup in itable" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::arith::Mul",
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ],
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ]
                                          ],
                                          "mul",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [ itable_lookup_cell; M.read (| meta |) ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::image_table::ImageTableConfig")
                        [ F ],
                      "br_table_lookup",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ])
                      ]
                    |),
                    [
                      M.read (| image_table |);
                      M.read (| meta |);
                      M.read (| Value.String "c8b. brtable_lookup in brtable" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::arith::Mul",
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ],
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ]
                                          ],
                                          "mul",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                [ F ],
                                              [ F ],
                                              "curr_expr",
                                              []
                                            |),
                                            [ brtable_lookup_cell; M.read (| meta |) ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::rtable::RangeTableConfig")
                        [ F ],
                      "configure_in_pow_set",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]);
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ])
                      ]
                    |),
                    [
                      M.read (| rtable |);
                      M.read (| meta |);
                      M.read (| Value.String "c8d. pow_table_lookup in pow_table" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                          Ty.apply
                                            (Ty.path
                                              "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                            [ F ],
                                          [ F ],
                                          "curr_expr",
                                          []
                                        |),
                                        [ pow_table_lookup_power_cell; M.read (| meta |) ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end));
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "delphinus_zkwasm::circuits::cell::CellExpression",
                                          Ty.apply
                                            (Ty.path
                                              "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                            [ F ],
                                          [ F ],
                                          "curr_expr",
                                          []
                                        |),
                                        [ pow_table_lookup_modulus_cell; M.read (| meta |) ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end));
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ],
                                          "query_fixed",
                                          []
                                        |),
                                        [
                                          M.read (| meta |);
                                          M.read (| step_sel |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "halo2_proofs::poly::Rotation",
                                              "cur",
                                              []
                                            |),
                                            []
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "delphinus_zkwasm::circuits::traits::ConfigureLookupTable",
                      Ty.apply
                        (Ty.path
                          "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallTableConfig")
                        [ F ],
                      [ F ],
                      "configure_in_table",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| external_host_call_table |);
                      M.read (| meta |);
                      M.read (|
                        Value.String "c8g. external_foreign_call_lookup in foreign table"
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Mul",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ],
                                                            "mul",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                  [ F ],
                                                                [ F ],
                                                                "curr_expr",
                                                                []
                                                              |),
                                                              [
                                                                external_foreign_call_lookup_cell;
                                                                M.read (| meta |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                                  [ F ],
                                                                "query_fixed",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| meta |);
                                                                M.read (| step_sel |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Rotation",
                                                                    "cur",
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::bit_table::BitTableConfig")
                        [ F ],
                      "configure_in_table",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                            ])
                      ]
                    |),
                    [
                      M.read (| bit_table |);
                      M.read (| meta |);
                      M.read (| Value.String "c8f: bit_table_lookup in bit_table" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      Value.Tuple
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::VirtualCells")
                                                [ F ],
                                              "query_fixed",
                                              []
                                            |),
                                            [
                                              M.read (| meta |);
                                              M.read (| step_sel |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "cur",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::arith::Mul",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                              "mul",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ],
                                                  "query_fixed",
                                                  []
                                                |),
                                                [
                                                  M.read (| meta |);
                                                  M.read (| step_sel |);
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "halo2_proofs::poly::Rotation",
                                                      "cur",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                    [ F ],
                                                  [ F ],
                                                  "expr",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    bit_table_lookup_cells,
                                                    "delphinus_zkwasm::circuits::etable::allocator::AllocatedBitTableLookupCells",
                                                    "op"
                                                  |);
                                                  M.read (| meta |)
                                                ]
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::arith::Mul",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                              "mul",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ],
                                                  "query_fixed",
                                                  []
                                                |),
                                                [
                                                  M.read (| meta |);
                                                  M.read (| step_sel |);
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "halo2_proofs::poly::Rotation",
                                                      "cur",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                    [ F ],
                                                  [ F ],
                                                  "expr",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    bit_table_lookup_cells,
                                                    "delphinus_zkwasm::circuits::etable::allocator::AllocatedBitTableLookupCells",
                                                    "left"
                                                  |);
                                                  M.read (| meta |)
                                                ]
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::arith::Mul",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                              "mul",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ],
                                                  "query_fixed",
                                                  []
                                                |),
                                                [
                                                  M.read (| meta |);
                                                  M.read (| step_sel |);
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "halo2_proofs::poly::Rotation",
                                                      "cur",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                    [ F ],
                                                  [ F ],
                                                  "expr",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    bit_table_lookup_cells,
                                                    "delphinus_zkwasm::circuits::etable::allocator::AllocatedBitTableLookupCells",
                                                    "right"
                                                  |);
                                                  M.read (| meta |)
                                                ]
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::arith::Mul",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ],
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ],
                                              "mul",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ],
                                                  "query_fixed",
                                                  []
                                                |),
                                                [
                                                  M.read (| meta |);
                                                  M.read (| step_sel |);
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "halo2_proofs::poly::Rotation",
                                                      "cur",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                  Ty.apply
                                                    (Ty.path
                                                      "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                    [ F ],
                                                  [ F ],
                                                  "expr",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    bit_table_lookup_cells,
                                                    "delphinus_zkwasm::circuits::etable::allocator::AllocatedBitTableLookupCells",
                                                    "result"
                                                  |);
                                                  M.read (| meta |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                      "create_gate",
                      [
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.read (| meta |);
                      M.read (| Value.String "c9. maximal memory pages consistent" |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let meta := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                          "into_vec",
                                          [ Ty.path "alloc::alloc::Global" ]
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.read (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::boxed::Box")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "new",
                                                  []
                                                |),
                                                [
                                                  M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Mul",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ],
                                                            "mul",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Sub",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ],
                                                                "sub",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                      [ F ],
                                                                    [ F ],
                                                                    "next_expr",
                                                                    []
                                                                  |),
                                                                  [
                                                                    maximal_memory_pages_cell;
                                                                    M.read (| meta |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                      [ F ],
                                                                    [ F ],
                                                                    "curr_expr",
                                                                    []
                                                                  |),
                                                                  [
                                                                    maximal_memory_pages_cell;
                                                                    M.read (| meta |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                                  [ F ],
                                                                "query_fixed",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| meta |);
                                                                M.read (| step_sel |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Rotation",
                                                                    "cur",
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                ]
                                              |)
                                            |))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "delphinus_zkwasm::circuits::etable::EventTableConfig"
                  [
                    ("step_sel", M.read (| step_sel |));
                    ("common_config", M.read (| common_config |));
                    ("op_configs",
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            [
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                [
                                  Ty.path "specs::itable::OpcodeClassPlain";
                                  Ty.apply
                                    (Ty.path "delphinus_zkwasm::circuits::etable::OpcodeConfig")
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        [ M.read (| op_configs |) ]
                      |))
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_configure :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "configure" (configure F).
    End Impl_delphinus_zkwasm_circuits_etable_EventTableConfig_F.
    
    (* StructRecord
      {
        name := "EventTableChip";
        ty_params := [ "F" ];
        fields :=
          [
            ("config",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::etable::EventTableConfig") [ F ]);
            ("capability", Ty.path "usize")
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_etable_EventTableChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::etable::EventTableChip") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::etable::EventTableChip"
              [
                ("config",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::etable::EventTableConfig")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableChip",
                        "config"
                      |)
                    ]
                  |));
                ("capability",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.path "usize", [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::etable::EventTableChip",
                        "capability"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_etable_EventTableChip_F.
    
    Module Impl_delphinus_zkwasm_circuits_etable_EventTableChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::etable::EventTableChip") [ F ].
      
      (*
          pub(super) fn new(
              config: EventTableConfig<F>,
              capability: usize,
              max_available_rows: usize,
          ) -> Self {
              assert!(capability * EVENT_TABLE_ENTRY_ROWS as usize <= max_available_rows);
      
              Self { config, capability }
          }
      *)
      Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ config; capability; max_available_rows ] =>
          ltac:(M.monadic
            (let config := M.alloc (| config |) in
            let capability := M.alloc (| capability |) in
            let max_available_rows := M.alloc (| max_available_rows |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.Pure.not
                                (BinOp.Pure.le
                                  (BinOp.Panic.mul (|
                                    Integer.Usize,
                                    M.read (| capability |),
                                    M.rust_cast
                                      (M.read (|
                                        M.get_constant (|
                                          "delphinus_zkwasm::circuits::etable::EVENT_TABLE_ENTRY_ROWS"
                                        |)
                                      |))
                                  |))
                                  (M.read (| max_available_rows |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic", [] |),
                              [
                                M.read (|
                                  Value.String
                                    "assertion failed: capability * EVENT_TABLE_ENTRY_ROWS as usize <= max_available_rows"
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                Value.StructRecord
                  "delphinus_zkwasm::circuits::etable::EventTableChip"
                  [ ("config", M.read (| config |)); ("capability", M.read (| capability |)) ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "new" (new F).
    End Impl_delphinus_zkwasm_circuits_etable_EventTableChip_F.
  End etable.
End circuits.
