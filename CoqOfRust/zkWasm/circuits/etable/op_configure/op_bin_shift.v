(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module etable.
    Module op_configure.
      Module op_bin_shift.
        (* StructRecord
          {
            name := "BinShiftConfig";
            ty_params := [ "F" ];
            fields :=
              [
                ("lhs",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn")
                    [ F ]);
                ("rhs",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
                ("round",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
                ("rem",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
                ("diff",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
                ("pad",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("res",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("rhs_modulus",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("size_modulus",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("rhs_round",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                    [ F ]);
                ("rhs_rem",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                    [ F ]);
                ("rhs_rem_diff",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                    [ F ]);
                ("is_i32",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_shl",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_shr_u",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_shr_s",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_rotl",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_rotr",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_l",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_r",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("degree_helper",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("lookup_pow_modulus",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("lookup_pow_power",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("memory_table_lookup_stack_read_lhs",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                    [ F ]);
                ("memory_table_lookup_stack_read_rhs",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                    [ F ]);
                ("memory_table_lookup_stack_write",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                    [ F ])
              ];
          } *)
        
        (* StructTuple
          {
            name := "BinShiftConfigBuilder";
            ty_params := [];
            fields := [];
          } *)
        
        Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_bin_shift_BinShiftConfigBuilder.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.path
              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfigBuilder".
          
          (*
              fn configure(
                  common_config: &EventTableCommonConfig<F>,
                  allocator: &mut EventTableCellAllocator<F>,
                  constraint_builder: &mut ConstraintBuilder<F>,
              ) -> Box<dyn EventTableOpcodeConfig<F>> {
                  let is_i32 = allocator.alloc_bit_cell();
                  let lhs = allocator
                      .alloc_u64_with_flag_bit_cell_dyn(constraint_builder, move |meta| is_i32.expr(meta));
                  let rhs = allocator.alloc_u64_cell();
                  let round = allocator.alloc_u64_cell();
                  let rem = allocator.alloc_u64_cell();
                  let diff = allocator.alloc_u64_cell();
                  let pad = allocator.alloc_unlimited_cell();
                  let rhs_modulus = allocator.alloc_unlimited_cell();
                  let size_modulus = allocator.alloc_unlimited_cell();
          
                  let rhs_round = allocator.alloc_common_range_cell();
                  let rhs_rem = allocator.alloc_common_range_cell();
                  let rhs_rem_diff = allocator.alloc_common_range_cell();
          
                  let is_shl = allocator.alloc_bit_cell();
                  let is_shr_u = allocator.alloc_bit_cell();
                  let is_shr_s = allocator.alloc_bit_cell();
                  let is_rotl = allocator.alloc_bit_cell();
                  let is_rotr = allocator.alloc_bit_cell();
          
                  let is_l = allocator.alloc_bit_cell();
                  let is_r = allocator.alloc_bit_cell();
          
                  let degree_helper = allocator.alloc_unlimited_cell();
          
                  let lookup_pow_modulus = common_config.pow_table_lookup_modulus_cell;
                  let lookup_pow_power = common_config.pow_table_lookup_power_cell;
          
                  let eid = common_config.eid_cell;
                  let sp = common_config.sp_cell;
          
                  let memory_table_lookup_stack_read_rhs = allocator.alloc_memory_table_lookup_read_cell(
                      "op_bin_shift stack read",
                      constraint_builder,
                      eid,
                      move |____| constant_from!(LocationType::Stack as u64),
                      move |meta| sp.expr(meta) + constant_from!(1),
                      move |meta| is_i32.expr(meta),
                      move |meta| rhs.u64_cell.expr(meta),
                      move |____| constant_from!(1),
                  );
          
                  let memory_table_lookup_stack_read_lhs = allocator.alloc_memory_table_lookup_read_cell(
                      "op_bin_shift stack read",
                      constraint_builder,
                      eid,
                      move |____| constant_from!(LocationType::Stack as u64),
                      move |meta| sp.expr(meta) + constant_from!(2),
                      move |meta| is_i32.expr(meta),
                      move |meta| lhs.u64_cell.expr(meta),
                      move |____| constant_from!(1),
                  );
          
                  let memory_table_lookup_stack_write = allocator
                      .alloc_memory_table_lookup_write_cell_with_value(
                          "op_bin_shift stack write",
                          constraint_builder,
                          eid,
                          move |____| constant_from!(LocationType::Stack as u64),
                          move |meta| sp.expr(meta) + constant_from!(2),
                          move |meta| is_i32.expr(meta),
                          move |____| constant_from!(1),
                      );
                  let res = memory_table_lookup_stack_write.value_cell;
          
                  constraint_builder.push(
                      "bin_shift op select",
                      Box::new(move |meta| {
                          vec![
                              is_shr_u.expr(meta) + is_shr_s.expr(meta) + is_rotr.expr(meta)
                                  - is_r.expr(meta),
                              is_shl.expr(meta) + is_rotl.expr(meta) - is_l.expr(meta),
                              is_l.expr(meta) + is_r.expr(meta) - constant_from!(1),
                          ]
                      }),
                  );
          
                  // cs 1: rhs_modulus = if is_i32 { 32 } else { 64 }
                  // cs 2: size_modulus = 1 << rhs_modulus
                  constraint_builder.push(
                      "bin_shift modulus",
                      Box::new(move |meta| {
                          vec![
                              rhs_modulus.expr(meta) - constant_from!(64)
                                  + is_i32.expr(meta) * constant_from!(32),
                              size_modulus.expr(meta) - constant_from_bn!(&(BigUint::from(1u64) << 64usize))
                                  + is_i32.expr(meta) * constant_from!((u32::MAX as u64) << 32),
                          ]
                      }),
                  );
          
                  // cs 3: (rhs_round, rhs_rem) = (rhs & 0xffff) div rhs_modulus
                  // cs 3.helper: rhs_rem < rhs_modulus
                  constraint_builder.push(
                      "bin_shift rhs rem",
                      Box::new(move |meta| {
                          vec![
                              rhs_round.expr(meta) * rhs_modulus.expr(meta) + rhs_rem.expr(meta)
                                  - rhs.u16_cells_le[0].expr(meta),
                              rhs_rem.expr(meta) + rhs_rem_diff.expr(meta) + constant_from!(1)
                                  - rhs_modulus.expr(meta),
                          ]
                      }),
                  );
          
                  // cs 4: lookup_pow_modulus = 1 << rhs_rem
                  constraint_builder.push(
                      "bin_shift modulus pow lookup",
                      Box::new(move |meta| {
                          vec![lookup_pow_power.expr(meta) - pow_table_power_encode(rhs_rem.expr(meta))]
                      }),
                  );
          
                  // cs is_r:
                  // 1: (round, rem) = lhs div lookup_pow_modulus
                  // 1.helper: rem < lookup_pow_modulus
                  constraint_builder.push(
                      "bin_shift is_r",
                      Box::new(move |meta| {
                          vec![
                              is_r.expr(meta)
                                  * (rem.u64_cell.expr(meta)
                                      + round.u64_cell.expr(meta) * lookup_pow_modulus.expr(meta)
                                      - lhs.u64_cell.expr(meta)),
                              is_r.expr(meta)
                                  * (rem.u64_cell.expr(meta) + diff.u64_cell.expr(meta) + constant_from!(1)
                                      - lookup_pow_modulus.expr(meta)),
                          ]
                      }),
                  );
          
                  // cs is_shr_u:
                  // 2: res = round
                  constraint_builder.push(
                      "bin_shift shr_u",
                      Box::new(move |meta| {
                          vec![is_shr_u.expr(meta) * (res.expr(meta) - round.u64_cell.expr(meta))]
                      }),
                  );
          
                  // cs is_shr_s:
                  // let size = if is_i32 { 32 } else { 64 }
                  // 1. pad = flag * ((1 << rhs_rem) - 1)) << (size - rhs_rem)
                  // 2: res = pad + round
                  constraint_builder.push(
                      "bin_shift shr_s",
                      Box::new(move |meta| {
                          vec![
                              degree_helper.expr(meta)
                                  - (lookup_pow_modulus.expr(meta) - constant_from!(1))
                                      * size_modulus.expr(meta),
                              is_shr_s.expr(meta)
                                  * (pad.expr(meta) * lookup_pow_modulus.expr(meta)
                                      - lhs.flag_bit_cell.expr(meta) * degree_helper.expr(meta)),
                              is_shr_s.expr(meta)
                                  * (res.expr(meta) - round.u64_cell.expr(meta) - pad.expr(meta)),
                          ]
                      }),
                  );
          
                  // cs is_rotr:
                  // 1: res = round + rem * size_modulus / lookup_pow_modulus
                  constraint_builder.push(
                      "bin_shift rotr",
                      Box::new(move |meta| {
                          vec![
                              is_rotr.expr(meta)
                                  * (res.expr(meta) * lookup_pow_modulus.expr(meta)
                                      - round.u64_cell.expr(meta) * lookup_pow_modulus.expr(meta)
                                      - rem.u64_cell.expr(meta) * size_modulus.expr(meta)),
                          ]
                      }),
                  );
          
                  // cs is_l:
                  // 1: (round, rem) = (lhs << rhs_rem) div size_modulus
                  // 1.helper: rem < size_modulus
                  constraint_builder.push(
                      "bin_shift shl",
                      Box::new(move |meta| {
                          vec![
                              is_l.expr(meta)
                                  * (lhs.u64_cell.expr(meta) * lookup_pow_modulus.expr(meta)
                                      - round.u64_cell.expr(meta) * size_modulus.expr(meta)
                                      - rem.u64_cell.expr(meta)),
                              is_l.expr(meta)
                                  * (rem.u64_cell.expr(meta) + diff.u64_cell.expr(meta) + constant_from!(1)
                                      - size_modulus.expr(meta)),
                          ]
                      }),
                  );
          
                  // cs is_shl:
                  // 1: res = rem
                  constraint_builder.push(
                      "bin_shift shl",
                      Box::new(move |meta| {
                          vec![is_shl.expr(meta) * (res.expr(meta) - rem.u64_cell.expr(meta))]
                      }),
                  );
          
                  // cs is_rotl:
                  // 2: res = rem + round
                  constraint_builder.push(
                      "bin_shift rotl",
                      Box::new(move |meta| {
                          vec![
                              is_rotl.expr(meta)
                                  * (res.expr(meta) - rem.u64_cell.expr(meta) - round.u64_cell.expr(meta)),
                          ]
                      }),
                  );
          
                  Box::new(BinShiftConfig {
                      lhs,
                      rhs,
                      round,
                      rem,
                      diff,
                      pad,
                      res,
                      rhs_round,
                      rhs_rem,
                      rhs_rem_diff,
                      is_i32,
                      is_shl,
                      is_shr_u,
                      is_shr_s,
                      is_rotl,
                      is_rotr,
                      is_l,
                      is_r,
                      lookup_pow_modulus,
                      lookup_pow_power,
                      memory_table_lookup_stack_read_lhs,
                      memory_table_lookup_stack_read_rhs,
                      memory_table_lookup_stack_write,
                      rhs_modulus,
                      size_modulus,
                      degree_helper,
                  })
              }
          *)
          Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ common_config; allocator; constraint_builder ] =>
              ltac:(M.monadic
                (let common_config := M.alloc (| common_config |) in
                let allocator := M.alloc (| allocator |) in
                let constraint_builder := M.alloc (| constraint_builder |) in
                (* Unsize *)
                M.pointer_coercion
                  (M.read (|
                    let is_i32 :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let lhs :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_u64_with_flag_bit_cell_dyn",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| constraint_builder |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ is_i32; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let rhs :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_u64_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let round :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_u64_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let rem :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_u64_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let diff :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_u64_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let pad :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_unlimited_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let rhs_modulus :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_unlimited_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let size_modulus :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_unlimited_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let rhs_round :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_common_range_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let rhs_rem :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_common_range_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let rhs_rem_diff :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_common_range_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_shl :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_shr_u :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_shr_s :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_rotl :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_rotr :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_l :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_r :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let degree_helper :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_unlimited_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let lookup_pow_modulus :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "pow_table_lookup_modulus_cell"
                        |)
                      |) in
                    let lookup_pow_power :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "pow_table_lookup_power_cell"
                        |)
                      |) in
                    let eid :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "eid_cell"
                        |)
                      |) in
                    let sp :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "sp_cell"
                        |)
                      |) in
                    let memory_table_lookup_stack_read_rhs :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_read_cell",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_bin_shift stack read" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use
                                                        (M.alloc (|
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Isize,
                                                              M.get_constant (|
                                                                "specs::mtable::LocationType::Stack_discriminant"
                                                              |),
                                                              Value.Integer 0
                                                            |))
                                                        |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "add",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ sp; M.read (| meta |) ]
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.use (M.alloc (| Value.Integer 1 |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ is_i32; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  rhs,
                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                  "u64_cell"
                                                |);
                                                M.read (| meta |)
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use (M.alloc (| Value.Integer 1 |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let memory_table_lookup_stack_read_lhs :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_read_cell",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_bin_shift stack read" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use
                                                        (M.alloc (|
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Isize,
                                                              M.get_constant (|
                                                                "specs::mtable::LocationType::Stack_discriminant"
                                                              |),
                                                              Value.Integer 0
                                                            |))
                                                        |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "add",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ sp; M.read (| meta |) ]
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.use (M.alloc (| Value.Integer 2 |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ is_i32; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  lhs,
                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                                                  "u64_cell"
                                                |);
                                                M.read (| meta |)
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use (M.alloc (| Value.Integer 1 |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let memory_table_lookup_stack_write :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_write_cell_with_value",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_bin_shift stack write" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use
                                                        (M.alloc (|
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Isize,
                                                              M.get_constant (|
                                                                "specs::mtable::LocationType::Stack_discriminant"
                                                              |),
                                                              Value.Integer 0
                                                            |))
                                                        |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "add",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ sp; M.read (| meta |) ]
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.use (M.alloc (| Value.Integer 2 |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ is_i32; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use (M.alloc (| Value.Integer 1 |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let res :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          memory_table_lookup_stack_write,
                          "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell",
                          "value_cell"
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "bin_shift op select" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "add",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_shr_u;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_shr_s;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_rotr;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [ is_r; M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "add",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_shl;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_rotl;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [ is_l; M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "add",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_l;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_r;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        Value.StructTuple
                                                                          "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::convert::From",
                                                                                F,
                                                                                [ Ty.path "u64" ],
                                                                                "from",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      Value.Integer
                                                                                        1
                                                                                    |))
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "bin_shift modulus" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Add",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "add",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                rhs_modulus;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            64
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_i32;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            32
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Add",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "add",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                size_modulus;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_function (|
                                                                                    "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                                    [ F ]
                                                                                  |),
                                                                                  [
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::bit::Shl",
                                                                                          Ty.path
                                                                                            "num_bigint::biguint::BigUint",
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ],
                                                                                          "shl",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::convert::From",
                                                                                              Ty.path
                                                                                                "num_bigint::biguint::BigUint",
                                                                                              [
                                                                                                Ty.path
                                                                                                  "u64"
                                                                                              ],
                                                                                              "from",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              Value.Integer
                                                                                                1
                                                                                            ]
                                                                                          |);
                                                                                          Value.Integer
                                                                                            64
                                                                                        ]
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_i32;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          BinOp.Panic.shl (|
                                                                                            M.rust_cast
                                                                                              (M.read (|
                                                                                                M.get_constant (|
                                                                                                  "core::num::MAX"
                                                                                                |)
                                                                                              |)),
                                                                                            Value.Integer
                                                                                              32
                                                                                          |)
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "bin_shift rhs rem" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "add",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Mul",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "mul",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    rhs_round;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    rhs_modulus;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                rhs_rem;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedU16Cell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_array_field (|
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                rhs,
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                "u16_cells_le"
                                                                              |),
                                                                              M.alloc (|
                                                                                Value.Integer 0
                                                                              |)
                                                                            |);
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "add",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    rhs_rem;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    rhs_rem_diff;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            rhs_modulus;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "bin_shift modulus pow lookup" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            lookup_pow_power;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_function (|
                                                                            "delphinus_zkwasm::circuits::rtable::pow_table_power_encode",
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                rhs_rem;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "bin_shift is_r" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [ is_r; M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      rem,
                                                                                      "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                      "u64_cell"
                                                                                    |);
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "mul",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          round,
                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                          "u64_cell"
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        lookup_pow_modulus;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  lhs,
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                                                                                  "u64_cell"
                                                                                |);
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [ is_r; M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Add",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "add",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          rem,
                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                          "u64_cell"
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          diff,
                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                          "u64_cell"
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::convert::From",
                                                                                        F,
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64"
                                                                                        ],
                                                                                        "from",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              Value.Integer
                                                                                                1
                                                                                            |))
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                lookup_pow_modulus;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "bin_shift shr_u" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_shr_u;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                res;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  round,
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                  "u64_cell"
                                                                                |);
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "bin_shift shr_s" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            degree_helper;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Sub",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "sub",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    lookup_pow_modulus;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::convert::From",
                                                                                        F,
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64"
                                                                                        ],
                                                                                        "from",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              Value.Integer
                                                                                                1
                                                                                            |))
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                size_modulus;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_shr_s;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Mul",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "mul",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    pad;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    lookup_pow_modulus;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Mul",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "mul",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      lhs,
                                                                                      "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                                                                                      "flag_bit_cell"
                                                                                    |);
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    degree_helper;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_shr_s;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Sub",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "sub",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    res;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      round,
                                                                                      "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                      "u64_cell"
                                                                                    |);
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                pad;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "bin_shift rotr" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_rotr;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Sub",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "sub",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "mul",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        res;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        lookup_pow_modulus;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "mul",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          round,
                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                          "u64_cell"
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        lookup_pow_modulus;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Mul",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "mul",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      rem,
                                                                                      "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                      "u64_cell"
                                                                                    |);
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    size_modulus;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "bin_shift shl" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [ is_l; M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Sub",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "sub",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "mul",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          lhs,
                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn",
                                                                                          "u64_cell"
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        lookup_pow_modulus;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "mul",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          round,
                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                          "u64_cell"
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        size_modulus;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  rem,
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                  "u64_cell"
                                                                                |);
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [ is_l; M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Add",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "add",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          rem,
                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                          "u64_cell"
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          diff,
                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                          "u64_cell"
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::convert::From",
                                                                                        F,
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64"
                                                                                        ],
                                                                                        "from",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              Value.Integer
                                                                                                1
                                                                                            |))
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                size_modulus;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "bin_shift shl" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_shl;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                res;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  rem,
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                  "u64_cell"
                                                                                |);
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "bin_shift rotl" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_rotl;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Sub",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "sub",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    res;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      rem,
                                                                                      "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                      "u64_cell"
                                                                                    |);
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  round,
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                  "u64_cell"
                                                                                |);
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      (* Unsize *)
                      M.pointer_coercion
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig")
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [
                            Value.StructRecord
                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig"
                              [
                                ("lhs", M.read (| lhs |));
                                ("rhs", M.read (| rhs |));
                                ("round", M.read (| round |));
                                ("rem", M.read (| rem |));
                                ("diff", M.read (| diff |));
                                ("pad", M.read (| pad |));
                                ("res", M.read (| res |));
                                ("rhs_round", M.read (| rhs_round |));
                                ("rhs_rem", M.read (| rhs_rem |));
                                ("rhs_rem_diff", M.read (| rhs_rem_diff |));
                                ("is_i32", M.read (| is_i32 |));
                                ("is_shl", M.read (| is_shl |));
                                ("is_shr_u", M.read (| is_shr_u |));
                                ("is_shr_s", M.read (| is_shr_s |));
                                ("is_rotl", M.read (| is_rotl |));
                                ("is_rotr", M.read (| is_rotr |));
                                ("is_l", M.read (| is_l |));
                                ("is_r", M.read (| is_r |));
                                ("lookup_pow_modulus", M.read (| lookup_pow_modulus |));
                                ("lookup_pow_power", M.read (| lookup_pow_power |));
                                ("memory_table_lookup_stack_read_lhs",
                                  M.read (| memory_table_lookup_stack_read_lhs |));
                                ("memory_table_lookup_stack_read_rhs",
                                  M.read (| memory_table_lookup_stack_read_rhs |));
                                ("memory_table_lookup_stack_write",
                                  M.read (| memory_table_lookup_stack_write |));
                                ("rhs_modulus", M.read (| rhs_modulus |));
                                ("size_modulus", M.read (| size_modulus |));
                                ("degree_helper", M.read (| degree_helper |))
                              ]
                          ]
                        |))
                    |)
                  |))))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *) [ ("configure", InstanceField.Method (configure F)) ].
        End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_bin_shift_BinShiftConfigBuilder.
        
        Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_bin_shift_BinShiftConfig_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig")
              [ F ].
          
          (*
              fn opcode(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                  constant!(bn_to_field(
                      &(BigUint::from(OpcodeClass::BinShift as u64) << OPCODE_CLASS_SHIFT)
                  )) + self.is_shl.expr(meta)
                      * constant!(bn_to_field(
                          &(BigUint::from(ShiftOp::Shl as u64) << OPCODE_ARG0_SHIFT)
                      ))
                      + self.is_shr_u.expr(meta)
                          * constant!(bn_to_field(
                              &(BigUint::from(ShiftOp::UnsignedShr as u64) << OPCODE_ARG0_SHIFT)
                          ))
                      + self.is_shr_s.expr(meta)
                          * constant!(bn_to_field(
                              &(BigUint::from(ShiftOp::SignedShr as u64) << OPCODE_ARG0_SHIFT)
                          ))
                      + self.is_rotl.expr(meta)
                          * constant!(bn_to_field(
                              &(BigUint::from(ShiftOp::Rotl as u64) << OPCODE_ARG0_SHIFT)
                          ))
                      + self.is_rotr.expr(meta)
                          * constant!(bn_to_field(
                              &(BigUint::from(ShiftOp::Rotr as u64) << OPCODE_ARG0_SHIFT)
                          ))
                      + self.is_i32.expr(meta)
                          * constant!(bn_to_field(&(BigUint::from(1u64) << OPCODE_ARG1_SHIFT)))
              }
          *)
          Definition opcode (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                M.call_closure (|
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                    [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                    "add",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                        [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                        "add",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                            [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                            "add",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ]
                                ],
                                "add",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::arith::Add",
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ],
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                        [ F ]
                                    ],
                                    "add",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::arith::Add",
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ],
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ]
                                        ],
                                        "add",
                                        []
                                      |),
                                      [
                                        Value.StructTuple
                                          "halo2_proofs::plonk::circuit::Expression::Constant"
                                          [
                                            M.call_closure (|
                                              M.get_function (|
                                                "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                [ F ]
                                              |),
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::bit::Shl",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [ Ty.path "u32" ],
                                                      "shl",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          Ty.path "num_bigint::biguint::BigUint",
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Isize,
                                                              M.get_constant (|
                                                                "specs::itable::OpcodeClass::LocalGet_discriminant"
                                                              |),
                                                              Value.Integer 11
                                                            |))
                                                        ]
                                                      |);
                                                      M.read (|
                                                        M.get_constant (|
                                                          "specs::itable::OPCODE_CLASS_SHIFT"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ];
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::arith::Mul",
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ],
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ],
                                            "mul",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                  "is_shl"
                                                |);
                                                M.read (| meta |)
                                              ]
                                            |);
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                    [ F ]
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::bit::Shl",
                                                          Ty.path "num_bigint::biguint::BigUint",
                                                          [ Ty.path "u32" ],
                                                          "shl",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::From",
                                                              Ty.path
                                                                "num_bigint::biguint::BigUint",
                                                              [ Ty.path "u64" ],
                                                              "from",
                                                              []
                                                            |),
                                                            [ M.rust_cast (Value.Integer 0) ]
                                                          |);
                                                          M.read (|
                                                            M.get_constant (|
                                                              "specs::itable::OPCODE_ARG0_SHIFT"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ],
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ]
                                        ],
                                        "mul",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                              [ F ],
                                            [ F ],
                                            "expr",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "is_shr_u"
                                            |);
                                            M.read (| meta |)
                                          ]
                                        |);
                                        Value.StructTuple
                                          "halo2_proofs::plonk::circuit::Expression::Constant"
                                          [
                                            M.call_closure (|
                                              M.get_function (|
                                                "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                [ F ]
                                              |),
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::bit::Shl",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [ Ty.path "u32" ],
                                                      "shl",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          Ty.path "num_bigint::biguint::BigUint",
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [ M.rust_cast (Value.Integer 1) ]
                                                      |);
                                                      M.read (|
                                                        M.get_constant (|
                                                          "specs::itable::OPCODE_ARG0_SHIFT"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      ]
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ],
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                        [ F ]
                                    ],
                                    "mul",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                        Ty.apply
                                          (Ty.path
                                            "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                          [ F ],
                                        [ F ],
                                        "expr",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                          "is_shr_s"
                                        |);
                                        M.read (| meta |)
                                      ]
                                    |);
                                    Value.StructTuple
                                      "halo2_proofs::plonk::circuit::Expression::Constant"
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "delphinus_zkwasm::circuits::utils::bn_to_field",
                                            [ F ]
                                          |),
                                          [
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::bit::Shl",
                                                  Ty.path "num_bigint::biguint::BigUint",
                                                  [ Ty.path "u32" ],
                                                  "shl",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [ M.rust_cast (Value.Integer 2) ]
                                                  |);
                                                  M.read (|
                                                    M.get_constant (|
                                                      "specs::itable::OPCODE_ARG0_SHIFT"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::arith::Mul",
                                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ]
                                ],
                                "mul",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                      [ F ],
                                    [ F ],
                                    "expr",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                      "is_rotl"
                                    |);
                                    M.read (| meta |)
                                  ]
                                |);
                                Value.StructTuple
                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                  [
                                    M.call_closure (|
                                      M.get_function (|
                                        "delphinus_zkwasm::circuits::utils::bn_to_field",
                                        [ F ]
                                      |),
                                      [
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::bit::Shl",
                                              Ty.path "num_bigint::biguint::BigUint",
                                              [ Ty.path "u32" ],
                                              "shl",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  Ty.path "num_bigint::biguint::BigUint",
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.rust_cast (Value.Integer 3) ]
                                              |);
                                              M.read (|
                                                M.get_constant (|
                                                  "specs::itable::OPCODE_ARG0_SHIFT"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                            [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                            "mul",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                  [ F ],
                                [ F ],
                                "expr",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                  "is_rotr"
                                |);
                                M.read (| meta |)
                              ]
                            |);
                            Value.StructTuple
                              "halo2_proofs::plonk::circuit::Expression::Constant"
                              [
                                M.call_closure (|
                                  M.get_function (|
                                    "delphinus_zkwasm::circuits::utils::bn_to_field",
                                    [ F ]
                                  |),
                                  [
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::bit::Shl",
                                          Ty.path "num_bigint::biguint::BigUint",
                                          [ Ty.path "u32" ],
                                          "shl",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::From",
                                              Ty.path "num_bigint::biguint::BigUint",
                                              [ Ty.path "u64" ],
                                              "from",
                                              []
                                            |),
                                            [ M.rust_cast (Value.Integer 4) ]
                                          |);
                                          M.read (|
                                            M.get_constant (| "specs::itable::OPCODE_ARG0_SHIFT" |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          ]
                        |)
                      ]
                    |);
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                        [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                        "mul",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "delphinus_zkwasm::circuits::cell::CellExpression",
                            Ty.apply
                              (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                              [ F ],
                            [ F ],
                            "expr",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                              "is_i32"
                            |);
                            M.read (| meta |)
                          ]
                        |);
                        Value.StructTuple
                          "halo2_proofs::plonk::circuit::Expression::Constant"
                          [
                            M.call_closure (|
                              M.get_function (|
                                "delphinus_zkwasm::circuits::utils::bn_to_field",
                                [ F ]
                              |),
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::bit::Shl",
                                      Ty.path "num_bigint::biguint::BigUint",
                                      [ Ty.path "u32" ],
                                      "shl",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          Ty.path "num_bigint::biguint::BigUint",
                                          [ Ty.path "u64" ],
                                          "from",
                                          []
                                        |),
                                        [ Value.Integer 1 ]
                                      |);
                                      M.read (|
                                        M.get_constant (| "specs::itable::OPCODE_ARG1_SHIFT" |)
                                      |)
                                    ]
                                  |)
                                |)
                              ]
                            |)
                          ]
                      ]
                    |)
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn assign(
                  &self,
                  ctx: &mut Context<'_, F>,
                  step: &StepStatus,
                  entry: &EventTableEntryWithMemoryInfo,
              ) -> Result<(), Error> {
                  let (class, left, right, value, power, is_eight_bytes, _is_sign) =
                      match entry.eentry.step_info {
                          StepInfo::I32BinShiftOp {
                              class,
                              left,
                              right,
                              value,
                          } => {
                              let left = left as u32 as u64;
                              let right = right as u32 as u64;
                              let value = value as u32 as u64;
                              let power = right % 32;
                              let is_eight_bytes = false;
                              let is_sign = true;
                              (class, left, right, value, power, is_eight_bytes, is_sign)
                          }
          
                          StepInfo::I64BinShiftOp {
                              class,
                              left,
                              right,
                              value,
                          } => {
                              let left = left as u64;
                              let right = right as u64;
                              let value = value as u64;
                              let power = right % 64;
                              let is_eight_bytes = true;
                              let is_sign = true;
                              (class, left, right, value, power, is_eight_bytes, is_sign)
                          }
          
                          _ => {
                              unreachable!();
                          }
                      };
          
                  let size = if is_eight_bytes { 64 } else { 32 };
                  let size_mask = if is_eight_bytes {
                      u64::MAX
                  } else {
                      u32::MAX as u64
                  };
          
                  let modulus = 1u64 << power;
                  let size_modulus = if is_eight_bytes {
                      BigUint::from(1u64) << 64usize
                  } else {
                      BigUint::from(1u64) << 32usize
                  };
          
                  self.lhs.assign(ctx, left.into(), !is_eight_bytes)?;
                  self.rhs.assign(ctx, right)?;
                  self.rhs_round
                      .assign(ctx, F::from((right & 0xffff) / size))?;
                  self.rhs_rem.assign(ctx, F::from(power))?;
                  self.rhs_rem_diff.assign(ctx, F::from(size - 1 - power))?;
                  self.lookup_pow_modulus.assign(ctx, modulus.into())?;
                  self.lookup_pow_power
                      .assign_bn(ctx, &pow_table_power_encode(BigUint::from(power)))?;
                  self.is_i32
                      .assign(ctx, if is_eight_bytes { F::zero() } else { F::one() })?;
                  self.res.assign(ctx, F::from(value))?;
                  self.rhs_modulus
                      .assign_u32(ctx, if is_eight_bytes { 64 } else { 32 })?;
                  self.size_modulus.assign_bn(ctx, &size_modulus)?;
                  self.degree_helper
                      .assign_bn(ctx, &(size_modulus * (modulus - 1)))?;
          
                  match class {
                      ShiftOp::Shl => {
                          self.is_l.assign(ctx, 1.into())?;
                          self.is_shl.assign(ctx, 1.into())?;
                          if power != 0 {
                              self.round.assign(ctx, left >> (size - power))?;
                          } else {
                              self.round.assign(ctx, 0)?;
                          }
                          let rem = (left << power) & size_mask;
                          self.rem.assign(ctx, rem)?;
                          self.diff.assign(ctx, size_mask - rem)?;
                      }
                      ShiftOp::UnsignedShr => {
                          self.is_r.assign(ctx, 1.into())?;
                          self.is_shr_u.assign(ctx, 1.into())?;
                          self.round.assign(ctx, left >> power)?;
                          let rem = left & ((1 << power) - 1);
                          self.rem.assign(ctx, rem)?;
                          self.diff.assign(ctx, (1u64 << power) - rem - 1)?;
                      }
                      ShiftOp::SignedShr => {
                          self.is_r.assign(ctx, 1.into())?;
                          self.is_shr_s.assign(ctx, 1.into())?;
                          self.round.assign(ctx, left >> power)?;
                          let rem = left & ((1 << power) - 1);
                          self.rem.assign(ctx, rem)?;
                          self.diff.assign(ctx, (1u64 << power) - 1 - rem)?;
          
                          let flag_bit = if is_eight_bytes {
                              left >> 63
                          } else {
                              left >> 31
                          };
                          if flag_bit == 1 && power != 0 {
                              self.pad
                                  .assign(ctx, (((1 << power) - 1) << (size - power)).into())?;
                          }
                      }
                      ShiftOp::Rotl => {
                          // same as shl
                          self.is_l.assign(ctx, 1.into())?;
                          self.is_rotl.assign(ctx, 1.into())?;
                          if power != 0 {
                              self.round.assign(ctx, left >> (size - power))?;
                          } else {
                              self.round.assign(ctx, 0)?;
                          }
                          let rem = (left << power) & size_mask;
                          self.rem.assign(ctx, rem)?;
                          self.diff.assign(ctx, size_mask - rem)?;
                      }
                      ShiftOp::Rotr => {
                          // same as shr_u
                          self.is_r.assign(ctx, 1.into())?;
                          self.is_rotr.assign(ctx, 1.into())?;
                          self.round.assign(ctx, left >> power)?;
                          let rem = left & ((1 << power) - 1);
                          self.rem.assign(ctx, rem)?;
                          self.diff.assign(ctx, (1u64 << power) - rem - 1)?;
                      }
                  }
          
                  self.memory_table_lookup_stack_read_rhs.assign(
                      ctx,
                      entry.memory_rw_entires[0].start_eid,
                      step.current.eid,
                      entry.memory_rw_entires[0].end_eid,
                      step.current.sp + 1,
                      LocationType::Stack,
                      !is_eight_bytes,
                      right,
                  )?;
          
                  self.memory_table_lookup_stack_read_lhs.assign(
                      ctx,
                      entry.memory_rw_entires[1].start_eid,
                      step.current.eid,
                      entry.memory_rw_entires[1].end_eid,
                      step.current.sp + 2,
                      LocationType::Stack,
                      !is_eight_bytes,
                      left,
                  )?;
          
                  self.memory_table_lookup_stack_write.assign(
                      ctx,
                      step.current.eid,
                      entry.memory_rw_entires[2].end_eid,
                      step.current.sp + 2,
                      LocationType::Stack,
                      !is_eight_bytes,
                      value,
                  )?;
          
                  Ok(())
              }
          *)
          Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; ctx; step; entry ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let ctx := M.alloc (| ctx |) in
                let step := M.alloc (| step |) in
                let entry := M.alloc (| entry |) in
                M.catch_return (|
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        M.match_operator (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| entry |),
                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                              "eentry"
                            |),
                            "specs::etable::EventTableEntry",
                            "step_info"
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::I32BinShiftOp",
                                    "class"
                                  |) in
                                let γ0_1 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::I32BinShiftOp",
                                    "left"
                                  |) in
                                let γ0_2 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::I32BinShiftOp",
                                    "right"
                                  |) in
                                let γ0_3 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::I32BinShiftOp",
                                    "value"
                                  |) in
                                let class := M.copy (| γ0_0 |) in
                                let left := M.copy (| γ0_1 |) in
                                let right := M.copy (| γ0_2 |) in
                                let value := M.copy (| γ0_3 |) in
                                let left :=
                                  M.alloc (| M.rust_cast (M.rust_cast (M.read (| left |))) |) in
                                let right :=
                                  M.alloc (| M.rust_cast (M.rust_cast (M.read (| right |))) |) in
                                let value :=
                                  M.alloc (| M.rust_cast (M.rust_cast (M.read (| value |))) |) in
                                let power :=
                                  M.alloc (|
                                    BinOp.Panic.rem (|
                                      Integer.U64,
                                      M.read (| right |),
                                      Value.Integer 32
                                    |)
                                  |) in
                                let is_eight_bytes := M.alloc (| Value.Bool false |) in
                                let is_sign := M.alloc (| Value.Bool true |) in
                                M.alloc (|
                                  Value.Tuple
                                    [
                                      M.read (| class |);
                                      M.read (| left |);
                                      M.read (| right |);
                                      M.read (| value |);
                                      M.read (| power |);
                                      M.read (| is_eight_bytes |);
                                      M.read (| is_sign |)
                                    ]
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::I64BinShiftOp",
                                    "class"
                                  |) in
                                let γ0_1 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::I64BinShiftOp",
                                    "left"
                                  |) in
                                let γ0_2 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::I64BinShiftOp",
                                    "right"
                                  |) in
                                let γ0_3 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::I64BinShiftOp",
                                    "value"
                                  |) in
                                let class := M.copy (| γ0_0 |) in
                                let left := M.copy (| γ0_1 |) in
                                let right := M.copy (| γ0_2 |) in
                                let value := M.copy (| γ0_3 |) in
                                let left := M.alloc (| M.rust_cast (M.read (| left |)) |) in
                                let right := M.alloc (| M.rust_cast (M.read (| right |)) |) in
                                let value := M.alloc (| M.rust_cast (M.read (| value |)) |) in
                                let power :=
                                  M.alloc (|
                                    BinOp.Panic.rem (|
                                      Integer.U64,
                                      M.read (| right |),
                                      Value.Integer 64
                                    |)
                                  |) in
                                let is_eight_bytes := M.alloc (| Value.Bool true |) in
                                let is_sign := M.alloc (| Value.Bool true |) in
                                M.alloc (|
                                  Value.Tuple
                                    [
                                      M.read (| class |);
                                      M.read (| left |);
                                      M.read (| right |);
                                      M.read (| value |);
                                      M.read (| power |);
                                      M.read (| is_eight_bytes |);
                                      M.read (| is_sign |)
                                    ]
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      M.get_function (| "core::panicking::panic", [] |),
                                      [
                                        M.read (|
                                          Value.String "internal error: entered unreachable code"
                                        |)
                                      ]
                                    |)
                                  |)
                                |)))
                          ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                              let γ0_3 := M.SubPointer.get_tuple_field (| γ, 3 |) in
                              let γ0_4 := M.SubPointer.get_tuple_field (| γ, 4 |) in
                              let γ0_5 := M.SubPointer.get_tuple_field (| γ, 5 |) in
                              let γ0_6 := M.SubPointer.get_tuple_field (| γ, 6 |) in
                              let class := M.copy (| γ0_0 |) in
                              let left := M.copy (| γ0_1 |) in
                              let right := M.copy (| γ0_2 |) in
                              let value := M.copy (| γ0_3 |) in
                              let power := M.copy (| γ0_4 |) in
                              let is_eight_bytes := M.copy (| γ0_5 |) in
                              let _is_sign := M.copy (| γ0_6 |) in
                              let size :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ := M.use is_eight_bytes in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (| Value.Integer 64 |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Integer 32 |)))
                                    ]
                                  |)
                                |) in
                              let size_mask :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ := M.use is_eight_bytes in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.get_constant (| "core::num::MAX" |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.rust_cast
                                              (M.read (| M.get_constant (| "core::num::MAX" |) |))
                                          |)))
                                    ]
                                  |)
                                |) in
                              let modulus :=
                                M.alloc (|
                                  BinOp.Panic.shl (| Value.Integer 1, M.read (| power |) |)
                                |) in
                              let size_modulus :=
                                M.copy (|
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ := M.use is_eight_bytes in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::bit::Shl",
                                                Ty.path "num_bigint::biguint::BigUint",
                                                [ Ty.path "usize" ],
                                                "shl",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    Ty.path "num_bigint::biguint::BigUint",
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [ Value.Integer 1 ]
                                                |);
                                                Value.Integer 64
                                              ]
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::bit::Shl",
                                                Ty.path "num_bigint::biguint::BigUint",
                                                [ Ty.path "usize" ],
                                                "shl",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    Ty.path "num_bigint::biguint::BigUint",
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [ Value.Integer 1 ]
                                                |);
                                                Value.Integer 32
                                              ]
                                            |)
                                          |)))
                                    ]
                                  |)
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedU64CellWithFlagBitDyn")
                                              [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "lhs"
                                            |);
                                            M.read (| ctx |);
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                Ty.path "u64",
                                                [ Ty.path "u64" ],
                                                "into",
                                                []
                                              |),
                                              [ M.read (| left |) ]
                                            |);
                                            UnOp.Pure.not (M.read (| is_eight_bytes |))
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                              [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "rhs"
                                            |);
                                            M.read (| ctx |);
                                            M.read (| right |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                              [ F ],
                                            [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "rhs_round"
                                            |);
                                            M.read (| ctx |);
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::From",
                                                F,
                                                [ Ty.path "u64" ],
                                                "from",
                                                []
                                              |),
                                              [
                                                BinOp.Panic.div (|
                                                  Integer.U64,
                                                  BinOp.Pure.bit_and
                                                    (M.read (| right |))
                                                    (Value.Integer 65535),
                                                  M.read (| size |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                              [ F ],
                                            [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "rhs_rem"
                                            |);
                                            M.read (| ctx |);
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::From",
                                                F,
                                                [ Ty.path "u64" ],
                                                "from",
                                                []
                                              |),
                                              [ M.read (| power |) ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                              [ F ],
                                            [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "rhs_rem_diff"
                                            |);
                                            M.read (| ctx |);
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::From",
                                                F,
                                                [ Ty.path "u64" ],
                                                "from",
                                                []
                                              |),
                                              [
                                                BinOp.Panic.sub (|
                                                  Integer.U64,
                                                  BinOp.Panic.sub (|
                                                    Integer.U64,
                                                    M.read (| size |),
                                                    Value.Integer 1
                                                  |),
                                                  M.read (| power |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                              [ F ],
                                            [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "lookup_pow_modulus"
                                            |);
                                            M.read (| ctx |);
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                Ty.path "u64",
                                                [ F ],
                                                "into",
                                                []
                                              |),
                                              [ M.read (| modulus |) ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                              [ F ],
                                            [ F ],
                                            "assign_bn",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "lookup_pow_power"
                                            |);
                                            M.read (| ctx |);
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_function (|
                                                  "delphinus_zkwasm::circuits::rtable::pow_table_power_encode",
                                                  [ Ty.path "num_bigint::biguint::BigUint" ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [ M.read (| power |) ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                              [ F ],
                                            [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "is_i32"
                                            |);
                                            M.read (| ctx |);
                                            M.read (|
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ := M.use is_eight_bytes in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "ff::Field",
                                                            F,
                                                            [],
                                                            "zero",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "ff::Field",
                                                            F,
                                                            [],
                                                            "one",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      |)))
                                                ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                              [ F ],
                                            [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "res"
                                            |);
                                            M.read (| ctx |);
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::From",
                                                F,
                                                [ Ty.path "u64" ],
                                                "from",
                                                []
                                              |),
                                              [ M.read (| value |) ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                              [ F ],
                                            [ F ],
                                            "assign_u32",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "rhs_modulus"
                                            |);
                                            M.read (| ctx |);
                                            M.read (|
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ := M.use is_eight_bytes in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (| Value.Integer 64 |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (| Value.Integer 32 |)))
                                                ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                              [ F ],
                                            [ F ],
                                            "assign_bn",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "size_modulus"
                                            |);
                                            M.read (| ctx |);
                                            size_modulus
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                              [ F ],
                                            [ F ],
                                            "assign_bn",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "degree_helper"
                                            |);
                                            M.read (| ctx |);
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Ty.path "num_bigint::biguint::BigUint",
                                                  [ Ty.path "u64" ],
                                                  "mul",
                                                  []
                                                |),
                                                [
                                                  M.read (| size_modulus |);
                                                  BinOp.Panic.sub (|
                                                    Integer.U64,
                                                    M.read (| modulus |),
                                                    Value.Integer 1
                                                  |)
                                                ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  class,
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "is_l"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u64",
                                                          [ F ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ Value.Integer 1 ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "is_shl"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u64",
                                                          [ F ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ Value.Integer 1 ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        BinOp.Pure.ne
                                                          (M.read (| power |))
                                                          (Value.Integer 0)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let _ :=
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [],
                                                            "branch",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                  [ F ],
                                                                "assign",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                                  "round"
                                                                |);
                                                                M.read (| ctx |);
                                                                BinOp.Panic.shr (|
                                                                  M.read (| left |),
                                                                  BinOp.Panic.sub (|
                                                                    Integer.U64,
                                                                    M.read (| size |),
                                                                    M.read (| power |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::error::Error"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [],
                                                            "branch",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                  [ F ],
                                                                "assign",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                                  "round"
                                                                |);
                                                                M.read (| ctx |);
                                                                Value.Integer 0
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::error::Error"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        let rem :=
                                          M.alloc (|
                                            BinOp.Pure.bit_and
                                              (BinOp.Panic.shl (|
                                                M.read (| left |),
                                                M.read (| power |)
                                              |))
                                              (M.read (| size_mask |))
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "rem"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.read (| rem |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "diff"
                                                      |);
                                                      M.read (| ctx |);
                                                      BinOp.Panic.sub (|
                                                        Integer.U64,
                                                        M.read (| size_mask |),
                                                        M.read (| rem |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "is_r"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u64",
                                                          [ F ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ Value.Integer 1 ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "is_shr_u"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u64",
                                                          [ F ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ Value.Integer 1 ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "round"
                                                      |);
                                                      M.read (| ctx |);
                                                      BinOp.Panic.shr (|
                                                        M.read (| left |),
                                                        M.read (| power |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let rem :=
                                          M.alloc (|
                                            BinOp.Pure.bit_and
                                              (M.read (| left |))
                                              (BinOp.Panic.sub (|
                                                Integer.U64,
                                                BinOp.Panic.shl (|
                                                  Value.Integer 1,
                                                  M.read (| power |)
                                                |),
                                                Value.Integer 1
                                              |))
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "rem"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.read (| rem |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "diff"
                                                      |);
                                                      M.read (| ctx |);
                                                      BinOp.Panic.sub (|
                                                        Integer.U64,
                                                        BinOp.Panic.sub (|
                                                          Integer.U64,
                                                          BinOp.Panic.shl (|
                                                            Value.Integer 1,
                                                            M.read (| power |)
                                                          |),
                                                          M.read (| rem |)
                                                        |),
                                                        Value.Integer 1
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "is_r"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u64",
                                                          [ F ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ Value.Integer 1 ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "is_shr_s"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u64",
                                                          [ F ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ Value.Integer 1 ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "round"
                                                      |);
                                                      M.read (| ctx |);
                                                      BinOp.Panic.shr (|
                                                        M.read (| left |),
                                                        M.read (| power |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let rem :=
                                          M.alloc (|
                                            BinOp.Pure.bit_and
                                              (M.read (| left |))
                                              (BinOp.Panic.sub (|
                                                Integer.U64,
                                                BinOp.Panic.shl (|
                                                  Value.Integer 1,
                                                  M.read (| power |)
                                                |),
                                                Value.Integer 1
                                              |))
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "rem"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.read (| rem |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "diff"
                                                      |);
                                                      M.read (| ctx |);
                                                      BinOp.Panic.sub (|
                                                        Integer.U64,
                                                        BinOp.Panic.sub (|
                                                          Integer.U64,
                                                          BinOp.Panic.shl (|
                                                            Value.Integer 1,
                                                            M.read (| power |)
                                                          |),
                                                          Value.Integer 1
                                                        |),
                                                        M.read (| rem |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let flag_bit :=
                                          M.copy (|
                                            M.match_operator (|
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ := M.use is_eight_bytes in
                                                    let _ :=
                                                      M.is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.alloc (|
                                                      BinOp.Panic.shr (|
                                                        M.read (| left |),
                                                        Value.Integer 63
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      BinOp.Panic.shr (|
                                                        M.read (| left |),
                                                        Value.Integer 31
                                                      |)
                                                    |)))
                                              ]
                                            |)
                                          |) in
                                        M.match_operator (|
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      LogicalOp.and (|
                                                        BinOp.Pure.eq
                                                          (M.read (| flag_bit |))
                                                          (Value.Integer 1),
                                                        ltac:(M.monadic
                                                          (BinOp.Pure.ne
                                                            (M.read (| power |))
                                                            (Value.Integer 0)))
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  M.is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                                "pad"
                                                              |);
                                                              M.read (| ctx |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::Into",
                                                                  Ty.path "u64",
                                                                  [ F ],
                                                                  "into",
                                                                  []
                                                                |),
                                                                [
                                                                  BinOp.Panic.shl (|
                                                                    BinOp.Panic.sub (|
                                                                      Integer.U64,
                                                                      BinOp.Panic.shl (|
                                                                        Value.Integer 1,
                                                                        M.read (| power |)
                                                                      |),
                                                                      Value.Integer 1
                                                                    |),
                                                                    BinOp.Panic.sub (|
                                                                      Integer.U64,
                                                                      M.read (| size |),
                                                                      M.read (| power |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "is_l"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u64",
                                                          [ F ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ Value.Integer 1 ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "is_rotl"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u64",
                                                          [ F ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ Value.Integer 1 ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        BinOp.Pure.ne
                                                          (M.read (| power |))
                                                          (Value.Integer 0)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let _ :=
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [],
                                                            "branch",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                  [ F ],
                                                                "assign",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                                  "round"
                                                                |);
                                                                M.read (| ctx |);
                                                                BinOp.Panic.shr (|
                                                                  M.read (| left |),
                                                                  BinOp.Panic.sub (|
                                                                    Integer.U64,
                                                                    M.read (| size |),
                                                                    M.read (| power |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::error::Error"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [],
                                                            "branch",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                  [ F ],
                                                                "assign",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                                  "round"
                                                                |);
                                                                M.read (| ctx |);
                                                                Value.Integer 0
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::error::Error"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        let rem :=
                                          M.alloc (|
                                            BinOp.Pure.bit_and
                                              (BinOp.Panic.shl (|
                                                M.read (| left |),
                                                M.read (| power |)
                                              |))
                                              (M.read (| size_mask |))
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "rem"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.read (| rem |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "diff"
                                                      |);
                                                      M.read (| ctx |);
                                                      BinOp.Panic.sub (|
                                                        Integer.U64,
                                                        M.read (| size_mask |),
                                                        M.read (| rem |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "is_r"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u64",
                                                          [ F ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ Value.Integer 1 ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::circuit::AssignedCell")
                                                        [ F; F ];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                        [ F ],
                                                      [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "is_rotr"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u64",
                                                          [ F ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ Value.Integer 1 ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "round"
                                                      |);
                                                      M.read (| ctx |);
                                                      BinOp.Panic.shr (|
                                                        M.read (| left |),
                                                        M.read (| power |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let rem :=
                                          M.alloc (|
                                            BinOp.Pure.bit_and
                                              (M.read (| left |))
                                              (BinOp.Panic.sub (|
                                                Integer.U64,
                                                BinOp.Panic.shl (|
                                                  Value.Integer 1,
                                                  M.read (| power |)
                                                |),
                                                Value.Integer 1
                                              |))
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "rem"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.read (| rem |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                                        "diff"
                                                      |);
                                                      M.read (| ctx |);
                                                      BinOp.Panic.sub (|
                                                        Integer.U64,
                                                        BinOp.Panic.sub (|
                                                          Integer.U64,
                                                          BinOp.Panic.shl (|
                                                            Value.Integer 1,
                                                            M.read (| power |)
                                                          |),
                                                          M.read (| rem |)
                                                        |),
                                                        Value.Integer 1
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                                              [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "memory_table_lookup_stack_read_rhs"
                                            |);
                                            M.read (| ctx |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::index::Index",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path
                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [ Ty.path "usize" ],
                                                    "index",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| entry |),
                                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                      "memory_rw_entires"
                                                    |);
                                                    Value.Integer 0
                                                  ]
                                                |),
                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                "start_eid"
                                              |)
                                            |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| step |),
                                                    "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                    "current"
                                                  |)
                                                |),
                                                "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                "eid"
                                              |)
                                            |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::index::Index",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path
                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [ Ty.path "usize" ],
                                                    "index",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| entry |),
                                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                      "memory_rw_entires"
                                                    |);
                                                    Value.Integer 0
                                                  ]
                                                |),
                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                "end_eid"
                                              |)
                                            |);
                                            BinOp.Panic.add (|
                                              Integer.U32,
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| step |),
                                                      "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                      "current"
                                                    |)
                                                  |),
                                                  "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                  "sp"
                                                |)
                                              |),
                                              Value.Integer 1
                                            |);
                                            Value.StructTuple
                                              "specs::mtable::LocationType::Stack"
                                              [];
                                            UnOp.Pure.not (M.read (| is_eight_bytes |));
                                            M.read (| right |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                                              [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "memory_table_lookup_stack_read_lhs"
                                            |);
                                            M.read (| ctx |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::index::Index",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path
                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [ Ty.path "usize" ],
                                                    "index",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| entry |),
                                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                      "memory_rw_entires"
                                                    |);
                                                    Value.Integer 1
                                                  ]
                                                |),
                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                "start_eid"
                                              |)
                                            |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| step |),
                                                    "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                    "current"
                                                  |)
                                                |),
                                                "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                "eid"
                                              |)
                                            |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::index::Index",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path
                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [ Ty.path "usize" ],
                                                    "index",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| entry |),
                                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                      "memory_rw_entires"
                                                    |);
                                                    Value.Integer 1
                                                  ]
                                                |),
                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                "end_eid"
                                              |)
                                            |);
                                            BinOp.Panic.add (|
                                              Integer.U32,
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| step |),
                                                      "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                      "current"
                                                    |)
                                                  |),
                                                  "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                  "sp"
                                                |)
                                              |),
                                              Value.Integer 2
                                            |);
                                            Value.StructTuple
                                              "specs::mtable::LocationType::Stack"
                                              [];
                                            UnOp.Pure.not (M.read (| is_eight_bytes |));
                                            M.read (| left |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                                              [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_bin_shift::BinShiftConfig",
                                              "memory_table_lookup_stack_write"
                                            |);
                                            M.read (| ctx |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| step |),
                                                    "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                    "current"
                                                  |)
                                                |),
                                                "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                "eid"
                                              |)
                                            |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::index::Index",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path
                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [ Ty.path "usize" ],
                                                    "index",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| entry |),
                                                      "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                      "memory_rw_entires"
                                                    |);
                                                    Value.Integer 2
                                                  ]
                                                |),
                                                "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                "end_eid"
                                              |)
                                            |);
                                            BinOp.Panic.add (|
                                              Integer.U32,
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| step |),
                                                      "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                      "current"
                                                    |)
                                                  |),
                                                  "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                  "sp"
                                                |)
                                              |),
                                              Value.Integer 2
                                            |);
                                            Value.StructTuple
                                              "specs::mtable::LocationType::Stack"
                                              [];
                                            UnOp.Pure.not (M.read (| is_eight_bytes |));
                                            M.read (| value |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              M.alloc (|
                                Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                              |)))
                        ]
                      |)
                    |)))
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn mops(&self, _meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                  Some(constant_from!(1))
              }
          *)
          Definition mops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; _meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let _meta := M.alloc (| _meta |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    Value.StructTuple
                      "halo2_proofs::plonk::circuit::Expression::Constant"
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::convert::From",
                            F,
                            [ Ty.path "u64" ],
                            "from",
                            []
                          |),
                          [ M.read (| M.use (M.alloc (| Value.Integer 1 |)) |) ]
                        |)
                      ]
                  ]))
            | _, _ => M.impossible
            end.
          
          (*
              fn memory_writing_ops(&self, _: &EventTableEntry) -> u32 {
                  1
              }
          *)
          Definition memory_writing_ops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; β1 ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let β1 := M.alloc (| β1 |) in
                M.match_operator (| β1, [ fun γ => ltac:(M.monadic (Value.Integer 1)) ] |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn sp_diff(&self, _meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                  Some(constant!(F::one()))
              }
          *)
          Definition sp_diff (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; _meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let _meta := M.alloc (| _meta |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    Value.StructTuple
                      "halo2_proofs::plonk::circuit::Expression::Constant"
                      [
                        M.call_closure (|
                          M.get_trait_method (| "ff::Field", F, [], "one", [] |),
                          []
                        |)
                      ]
                  ]))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *)
              [
                ("opcode", InstanceField.Method (opcode F));
                ("assign", InstanceField.Method (assign F));
                ("mops", InstanceField.Method (mops F));
                ("memory_writing_ops", InstanceField.Method (memory_writing_ops F));
                ("sp_diff", InstanceField.Method (sp_diff F))
              ].
        End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_bin_shift_BinShiftConfig_F.
      End op_bin_shift.
    End op_configure.
  End etable.
End circuits.
