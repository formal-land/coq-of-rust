(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module etable.
    Module op_configure.
      Module op_br_if.
        (* StructRecord
          {
            name := "BrIfConfig";
            ty_params := [ "F" ];
            fields :=
              [
                ("cond_cell",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
                ("cond_inv_cell",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("cond_is_zero_cell",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("cond_is_not_zero_cell",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("keep_cell",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_i32_cell",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("drop_cell",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                    [ F ]);
                ("dst_pc_cell",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                    [ F ]);
                ("value_cell",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
                ("memory_table_lookup_stack_read_cond",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                    [ F ]);
                ("memory_table_lookup_stack_read_return_value",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                    [ F ]);
                ("memory_table_lookup_stack_write_return_value",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                    [ F ])
              ];
          } *)
        
        (* StructTuple
          {
            name := "BrIfConfigBuilder";
            ty_params := [];
            fields := [];
          } *)
        
        Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_br_if_BrIfConfigBuilder.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.path "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfigBuilder".
          
          (*
              fn configure(
                  common_config: &EventTableCommonConfig<F>,
                  allocator: &mut EventTableCellAllocator<F>,
                  constraint_builder: &mut ConstraintBuilder<F>,
              ) -> Box<dyn EventTableOpcodeConfig<F>> {
                  let cond_cell = allocator.alloc_u64_cell();
                  let cond_inv_cell = allocator.alloc_unlimited_cell();
                  let cond_is_zero_cell = allocator.alloc_bit_cell();
                  let cond_is_not_zero_cell = allocator.alloc_bit_cell();
          
                  constraint_builder.constraints.push((
                      "op_br_if cond bit",
                      Box::new(move |meta| {
                          vec![
                              cond_is_zero_cell.expr(meta) * cond_cell.u64_cell.expr(meta),
                              cond_is_zero_cell.expr(meta)
                                  + cond_cell.u64_cell.expr(meta) * cond_inv_cell.expr(meta)
                                  - constant_from!(1),
                              cond_is_zero_cell.expr(meta) + cond_is_not_zero_cell.expr(meta)
                                  - constant_from!(1),
                          ]
                      }),
                  ));
          
                  let keep_cell = allocator.alloc_bit_cell();
                  let is_i32_cell = allocator.alloc_bit_cell();
                  let drop_cell = allocator.alloc_common_range_cell();
                  let dst_pc_cell = allocator.alloc_common_range_cell();
                  let value_cell = allocator.alloc_u64_cell();
          
                  let eid = common_config.eid_cell;
                  let sp = common_config.sp_cell;
          
                  let memory_table_lookup_stack_read_cond = allocator.alloc_memory_table_lookup_read_cell(
                      "op_br_if stack read cond",
                      constraint_builder,
                      eid,
                      move |____| constant_from!(LocationType::Stack as u64),
                      move |meta| sp.expr(meta) + constant_from!(1),
                      move |____| constant_from!(1),
                      move |meta| cond_cell.u64_cell.expr(meta),
                      move |____| constant_from!(1),
                  );
                  let memory_table_lookup_stack_read_return_value = allocator
                      .alloc_memory_table_lookup_read_cell(
                          "op_br_if stack read return value",
                          constraint_builder,
                          eid,
                          move |____| constant_from!(LocationType::Stack as u64),
                          move |meta| sp.expr(meta) + constant_from!(2),
                          move |meta| is_i32_cell.expr(meta),
                          move |meta| value_cell.u64_cell.expr(meta),
                          move |meta| keep_cell.expr(meta) * cond_is_not_zero_cell.expr(meta),
                      );
                  let memory_table_lookup_stack_write_return_value = allocator
                      .alloc_memory_table_lookup_write_cell(
                          "op_br_if stack write return value",
                          constraint_builder,
                          eid,
                          move |____| constant_from!(LocationType::Stack as u64),
                          move |meta| sp.expr(meta) + drop_cell.expr(meta) + constant_from!(2),
                          move |meta| is_i32_cell.expr(meta),
                          move |meta| value_cell.u64_cell.expr(meta),
                          move |meta| keep_cell.expr(meta) * cond_is_not_zero_cell.expr(meta),
                      );
          
                  Box::new(BrIfConfig {
                      cond_cell,
                      cond_inv_cell,
                      cond_is_zero_cell,
                      cond_is_not_zero_cell,
                      keep_cell,
                      is_i32_cell,
                      drop_cell,
                      dst_pc_cell,
                      value_cell,
                      memory_table_lookup_stack_read_cond,
                      memory_table_lookup_stack_read_return_value,
                      memory_table_lookup_stack_write_return_value,
                  })
              }
          *)
          Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ common_config; allocator; constraint_builder ] =>
              ltac:(M.monadic
                (let common_config := M.alloc (| common_config |) in
                let allocator := M.alloc (| allocator |) in
                let constraint_builder := M.alloc (| constraint_builder |) in
                (* Unsize *)
                M.pointer_coercion
                  (M.read (|
                    let cond_cell :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_u64_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let cond_inv_cell :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_unlimited_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let cond_is_zero_cell :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let cond_is_not_zero_cell :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.dyn
                                          [
                                            ("existential predicate with variables", []);
                                            ("existential predicate with variables", [])
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "push",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| constraint_builder |),
                              "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder",
                              "constraints"
                            |);
                            Value.Tuple
                              [
                                M.read (| Value.String "op_br_if cond bit" |);
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                        [ F ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]);
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let meta := M.copy (| γ |) in
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ],
                                                          "into_vec",
                                                          [ Ty.path "alloc::alloc::Global" ]
                                                        |),
                                                        [
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.read (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "new",
                                                                  []
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                cond_is_zero_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  cond_cell,
                                                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                  "u64_cell"
                                                                                |);
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    cond_is_zero_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "mul",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          cond_cell,
                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                          "u64_cell"
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        cond_inv_cell;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    cond_is_zero_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    cond_is_not_zero_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |)
                                                                      ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |))
                                                        ]
                                                      |)))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |))
                              ]
                          ]
                        |)
                      |) in
                    let keep_cell :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_i32_cell :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let drop_cell :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_common_range_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let dst_pc_cell :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_common_range_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let value_cell :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_u64_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let eid :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "eid_cell"
                        |)
                      |) in
                    let sp :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "sp_cell"
                        |)
                      |) in
                    let memory_table_lookup_stack_read_cond :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_read_cell",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_br_if stack read cond" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use
                                                        (M.alloc (|
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Isize,
                                                              M.get_constant (|
                                                                "specs::mtable::LocationType::Stack_discriminant"
                                                              |),
                                                              Value.Integer 0
                                                            |))
                                                        |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "add",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ sp; M.read (| meta |) ]
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.use (M.alloc (| Value.Integer 1 |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use (M.alloc (| Value.Integer 1 |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  cond_cell,
                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                  "u64_cell"
                                                |);
                                                M.read (| meta |)
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use (M.alloc (| Value.Integer 1 |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let memory_table_lookup_stack_read_return_value :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_read_cell",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_br_if stack read return value" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use
                                                        (M.alloc (|
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Isize,
                                                              M.get_constant (|
                                                                "specs::mtable::LocationType::Stack_discriminant"
                                                              |),
                                                              Value.Integer 0
                                                            |))
                                                        |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "add",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ sp; M.read (| meta |) ]
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.use (M.alloc (| Value.Integer 2 |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ is_i32_cell; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  value_cell,
                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                  "u64_cell"
                                                |);
                                                M.read (| meta |)
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Mul",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "mul",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ keep_cell; M.read (| meta |) ]
                                                |);
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ cond_is_not_zero_cell; M.read (| meta |) ]
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let memory_table_lookup_stack_write_return_value :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_write_cell",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_br_if stack write return value" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use
                                                        (M.alloc (|
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Isize,
                                                              M.get_constant (|
                                                                "specs::mtable::LocationType::Stack_discriminant"
                                                              |),
                                                              Value.Integer 0
                                                            |))
                                                        |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "add",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Add",
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ],
                                                    "add",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                        Ty.apply
                                                          (Ty.path
                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                          [ F ],
                                                        [ F ],
                                                        "expr",
                                                        []
                                                      |),
                                                      [ sp; M.read (| meta |) ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                        Ty.apply
                                                          (Ty.path
                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                          [ F ],
                                                        [ F ],
                                                        "expr",
                                                        []
                                                      |),
                                                      [ drop_cell; M.read (| meta |) ]
                                                    |)
                                                  ]
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.use (M.alloc (| Value.Integer 2 |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ is_i32_cell; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  value_cell,
                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                  "u64_cell"
                                                |);
                                                M.read (| meta |)
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Mul",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "mul",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ keep_cell; M.read (| meta |) ]
                                                |);
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ cond_is_not_zero_cell; M.read (| meta |) ]
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      (* Unsize *)
                      M.pointer_coercion
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig")
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [
                            Value.StructRecord
                              "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig"
                              [
                                ("cond_cell", M.read (| cond_cell |));
                                ("cond_inv_cell", M.read (| cond_inv_cell |));
                                ("cond_is_zero_cell", M.read (| cond_is_zero_cell |));
                                ("cond_is_not_zero_cell", M.read (| cond_is_not_zero_cell |));
                                ("keep_cell", M.read (| keep_cell |));
                                ("is_i32_cell", M.read (| is_i32_cell |));
                                ("drop_cell", M.read (| drop_cell |));
                                ("dst_pc_cell", M.read (| dst_pc_cell |));
                                ("value_cell", M.read (| value_cell |));
                                ("memory_table_lookup_stack_read_cond",
                                  M.read (| memory_table_lookup_stack_read_cond |));
                                ("memory_table_lookup_stack_read_return_value",
                                  M.read (| memory_table_lookup_stack_read_return_value |));
                                ("memory_table_lookup_stack_write_return_value",
                                  M.read (| memory_table_lookup_stack_write_return_value |))
                              ]
                          ]
                        |))
                    |)
                  |))))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *) [ ("configure", InstanceField.Method (configure F)) ].
        End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_br_if_BrIfConfigBuilder.
        
        Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_br_if_BrIfConfig_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig")
              [ F ].
          
          (*
              fn opcode(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                  constant!(bn_to_field(
                      &(BigUint::from(OpcodeClass::BrIf as u64) << OPCODE_CLASS_SHIFT)
                  )) + self.drop_cell.expr(meta)
                      * constant!(bn_to_field(&(BigUint::from(1u64) << OPCODE_ARG0_SHIFT)))
                      + self.keep_cell.expr(meta)
                          * constant!(bn_to_field(&(BigUint::from(1u64) << OPCODE_ARG1_SHIFT)))
                      + self.dst_pc_cell.expr(meta)
              }
          *)
          Definition opcode (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                M.call_closure (|
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                    [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                    "add",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                        [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                        "add",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                            [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                            "add",
                            []
                          |),
                          [
                            Value.StructTuple
                              "halo2_proofs::plonk::circuit::Expression::Constant"
                              [
                                M.call_closure (|
                                  M.get_function (|
                                    "delphinus_zkwasm::circuits::utils::bn_to_field",
                                    [ F ]
                                  |),
                                  [
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::bit::Shl",
                                          Ty.path "num_bigint::biguint::BigUint",
                                          [ Ty.path "u32" ],
                                          "shl",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::From",
                                              Ty.path "num_bigint::biguint::BigUint",
                                              [ Ty.path "u64" ],
                                              "from",
                                              []
                                            |),
                                            [
                                              M.rust_cast
                                                (BinOp.Panic.add (|
                                                  Integer.Isize,
                                                  M.get_constant (|
                                                    "specs::itable::OpcodeClass::LocalGet_discriminant"
                                                  |),
                                                  Value.Integer 16
                                                |))
                                            ]
                                          |);
                                          M.read (|
                                            M.get_constant (| "specs::itable::OPCODE_CLASS_SHIFT" |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  ]
                                |)
                              ];
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::arith::Mul",
                                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ]
                                ],
                                "mul",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "expr",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                      "drop_cell"
                                    |);
                                    M.read (| meta |)
                                  ]
                                |);
                                Value.StructTuple
                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                  [
                                    M.call_closure (|
                                      M.get_function (|
                                        "delphinus_zkwasm::circuits::utils::bn_to_field",
                                        [ F ]
                                      |),
                                      [
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::bit::Shl",
                                              Ty.path "num_bigint::biguint::BigUint",
                                              [ Ty.path "u32" ],
                                              "shl",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  Ty.path "num_bigint::biguint::BigUint",
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ Value.Integer 1 ]
                                              |);
                                              M.read (|
                                                M.get_constant (|
                                                  "specs::itable::OPCODE_ARG0_SHIFT"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                            [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                            "mul",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                  [ F ],
                                [ F ],
                                "expr",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                  "keep_cell"
                                |);
                                M.read (| meta |)
                              ]
                            |);
                            Value.StructTuple
                              "halo2_proofs::plonk::circuit::Expression::Constant"
                              [
                                M.call_closure (|
                                  M.get_function (|
                                    "delphinus_zkwasm::circuits::utils::bn_to_field",
                                    [ F ]
                                  |),
                                  [
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::bit::Shl",
                                          Ty.path "num_bigint::biguint::BigUint",
                                          [ Ty.path "u32" ],
                                          "shl",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::From",
                                              Ty.path "num_bigint::biguint::BigUint",
                                              [ Ty.path "u64" ],
                                              "from",
                                              []
                                            |),
                                            [ Value.Integer 1 ]
                                          |);
                                          M.read (|
                                            M.get_constant (| "specs::itable::OPCODE_ARG1_SHIFT" |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          ]
                        |)
                      ]
                    |);
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::cell::CellExpression",
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                          [ F ],
                        [ F ],
                        "expr",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                          "dst_pc_cell"
                        |);
                        M.read (| meta |)
                      ]
                    |)
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn assign(
                  &self,
                  ctx: &mut Context<'_, F>,
                  step: &StepStatus,
                  entry: &EventTableEntryWithMemoryInfo,
              ) -> Result<(), Error> {
                  match &entry.eentry.step_info {
                      StepInfo::BrIfNez {
                          condition,
                          dst_pc,
                          drop,
                          keep,
                          keep_values,
                      } => {
                          assert!(keep.len() <= 1);
          
                          let cond = *condition as u32 as u64;
          
                          self.memory_table_lookup_stack_read_cond.assign(
                              ctx,
                              entry.memory_rw_entires[0].start_eid,
                              step.current.eid,
                              entry.memory_rw_entires[0].end_eid,
                              step.current.sp + 1,
                              LocationType::Stack,
                              true,
                              cond,
                          )?;
          
                          self.drop_cell.assign(ctx, F::from( *drop as u64))?;
          
                          if keep.len() > 0 {
                              let keep_type: VarType = keep[0].into();
          
                              self.keep_cell.assign(ctx, F::one())?;
                              self.value_cell.assign(ctx, keep_values[0])?;
                              self.is_i32_cell.assign(ctx, F::from(keep_type as u64))?;
                              if *condition != 0 {
                                  self.memory_table_lookup_stack_read_return_value.assign(
                                      ctx,
                                      entry.memory_rw_entires[1].start_eid,
                                      step.current.eid,
                                      entry.memory_rw_entires[1].end_eid,
                                      step.current.sp + 2,
                                      LocationType::Stack,
                                      VarType::from(keep[0]) == VarType::I32,
                                      keep_values[0],
                                  )?;
          
                                  self.memory_table_lookup_stack_write_return_value.assign(
                                      ctx,
                                      step.current.eid,
                                      entry.memory_rw_entires[2].end_eid,
                                      step.current.sp + *drop + 2,
                                      LocationType::Stack,
                                      VarType::from(keep[0]) == VarType::I32,
                                      keep_values[0],
                                  )?;
                              }
                          }
          
                          self.cond_cell.assign(ctx, cond)?;
                          self.cond_inv_cell
                              .assign(ctx, F::from(cond).invert().unwrap_or(F::zero()))?;
                          self.cond_is_zero_cell
                              .assign(ctx, if cond == 0 { F::one() } else { F::zero() })?;
                          self.cond_is_not_zero_cell
                              .assign(ctx, if cond == 0 { F::zero() } else { F::one() })?;
                          self.dst_pc_cell.assign(ctx, F::from(( *dst_pc) as u64))?;
                      }
                      _ => unreachable!(),
                  }
          
                  Ok(())
              }
          *)
          Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; ctx; step; entry ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let ctx := M.alloc (| ctx |) in
                let step := M.alloc (| step |) in
                let entry := M.alloc (| entry |) in
                M.catch_return (|
                  ltac:(M.monadic
                    (M.read (|
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| entry |),
                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                "eentry"
                              |),
                              "specs::etable::EventTableEntry",
                              "step_info"
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.read (| γ |) in
                                let γ1_0 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::BrIfNez",
                                    "condition"
                                  |) in
                                let γ1_1 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::BrIfNez",
                                    "dst_pc"
                                  |) in
                                let γ1_2 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::BrIfNez",
                                    "drop"
                                  |) in
                                let γ1_3 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::BrIfNez",
                                    "keep"
                                  |) in
                                let γ1_4 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::BrIfNez",
                                    "keep_values"
                                  |) in
                                let condition := M.alloc (| γ1_0 |) in
                                let dst_pc := M.alloc (| γ1_1 |) in
                                let drop := M.alloc (| γ1_2 |) in
                                let keep := M.alloc (| γ1_3 |) in
                                let keep_values := M.alloc (| γ1_4 |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.Pure.not
                                                  (BinOp.Pure.le
                                                    (M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path "specs::types::ValueType";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "len",
                                                        []
                                                      |),
                                                      [ M.read (| keep |) ]
                                                    |))
                                                    (Value.Integer 1))
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.call_closure (|
                                                M.get_function (| "core::panicking::panic", [] |),
                                                [
                                                  M.read (|
                                                    Value.String "assertion failed: keep.len() <= 1"
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let cond :=
                                  M.alloc (|
                                    M.rust_cast (M.rust_cast (M.read (| M.read (| condition |) |)))
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                                                [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                                "memory_table_lookup_stack_read_cond"
                                              |);
                                              M.read (| ctx |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::index::Index",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path
                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [ Ty.path "usize" ],
                                                      "index",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| entry |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                        "memory_rw_entires"
                                                      |);
                                                      Value.Integer 0
                                                    ]
                                                  |),
                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                  "start_eid"
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| step |),
                                                      "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                      "current"
                                                    |)
                                                  |),
                                                  "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                  "eid"
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::index::Index",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path
                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [ Ty.path "usize" ],
                                                      "index",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| entry |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                        "memory_rw_entires"
                                                      |);
                                                      Value.Integer 0
                                                    ]
                                                  |),
                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                  "end_eid"
                                                |)
                                              |);
                                              BinOp.Panic.add (|
                                                Integer.U32,
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| step |),
                                                        "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                        "current"
                                                      |)
                                                    |),
                                                    "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                    "sp"
                                                  |)
                                                |),
                                                Value.Integer 1
                                              |);
                                              Value.StructTuple
                                                "specs::mtable::LocationType::Stack"
                                                [];
                                              Value.Bool true;
                                              M.read (| cond |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                [ F; F ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                [ F ],
                                              [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                                "drop_cell"
                                              |);
                                              M.read (| ctx |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.rust_cast (M.read (| M.read (| drop |) |)) ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                BinOp.Pure.gt
                                                  (M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "specs::types::ValueType";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "len",
                                                      []
                                                    |),
                                                    [ M.read (| keep |) ]
                                                  |))
                                                  (Value.Integer 0)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          let keep_type :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "specs::types::ValueType",
                                                  [ Ty.path "specs::mtable::VarType" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::index::Index",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path "specs::types::ValueType";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [ Ty.path "usize" ],
                                                        "index",
                                                        []
                                                      |),
                                                      [ M.read (| keep |); Value.Integer 0 ]
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::circuit::AssignedCell")
                                                          [ F; F ];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                        Ty.apply
                                                          (Ty.path
                                                            "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                          [ F ],
                                                        [ F ],
                                                        "assign",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                                          "keep_cell"
                                                        |);
                                                        M.read (| ctx |);
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "ff::Field",
                                                            F,
                                                            [],
                                                            "one",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                          [ F ],
                                                        "assign",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                                          "value_cell"
                                                        |);
                                                        M.read (| ctx |);
                                                        M.read (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "u64";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [
                                                              M.read (| keep_values |);
                                                              Value.Integer 0
                                                            ]
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::circuit::AssignedCell")
                                                          [ F; F ];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                        Ty.apply
                                                          (Ty.path
                                                            "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                          [ F ],
                                                        [ F ],
                                                        "assign",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                                          "is_i32_cell"
                                                        |);
                                                        M.read (| ctx |);
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            F,
                                                            [ Ty.path "u64" ],
                                                            "from",
                                                            []
                                                          |),
                                                          [ M.rust_cast (M.read (| keep_type |)) ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        BinOp.Pure.ne
                                                          (M.read (| M.read (| condition |) |))
                                                          (Value.Integer 0)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let _ :=
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [],
                                                            "branch",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                                                                  [ F ],
                                                                "assign",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                                                  "memory_table_lookup_stack_read_return_value"
                                                                |);
                                                                M.read (| ctx |);
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| entry |),
                                                                          "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                          "memory_rw_entires"
                                                                        |);
                                                                        Value.Integer 1
                                                                      ]
                                                                    |),
                                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                                    "start_eid"
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| step |),
                                                                        "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                        "current"
                                                                      |)
                                                                    |),
                                                                    "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                    "eid"
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| entry |),
                                                                          "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                          "memory_rw_entires"
                                                                        |);
                                                                        Value.Integer 1
                                                                      ]
                                                                    |),
                                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                                    "end_eid"
                                                                  |)
                                                                |);
                                                                BinOp.Panic.add (|
                                                                  Integer.U32,
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| step |),
                                                                          "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                          "current"
                                                                        |)
                                                                      |),
                                                                      "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                      "sp"
                                                                    |)
                                                                  |),
                                                                  Value.Integer 2
                                                                |);
                                                                Value.StructTuple
                                                                  "specs::mtable::LocationType::Stack"
                                                                  [];
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::cmp::PartialEq",
                                                                    Ty.path
                                                                      "specs::mtable::VarType",
                                                                    [
                                                                      Ty.path
                                                                        "specs::mtable::VarType"
                                                                    ],
                                                                    "eq",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::convert::From",
                                                                          Ty.path
                                                                            "specs::mtable::VarType",
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType"
                                                                          ],
                                                                          "from",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::index::Index",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.path
                                                                                      "specs::types::ValueType";
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [ Ty.path "usize" ],
                                                                                "index",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| keep |);
                                                                                Value.Integer 0
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |);
                                                                    M.alloc (|
                                                                      Value.StructTuple
                                                                        "specs::mtable::VarType::I32"
                                                                        []
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::index::Index",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.path "u64";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [ Ty.path "usize" ],
                                                                      "index",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| keep_values |);
                                                                      Value.Integer 0
                                                                    ]
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::error::Error"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |) in
                                                  let _ :=
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [],
                                                            "branch",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                                                                  [ F ],
                                                                "assign",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                                                  "memory_table_lookup_stack_write_return_value"
                                                                |);
                                                                M.read (| ctx |);
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| step |),
                                                                        "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                        "current"
                                                                      |)
                                                                    |),
                                                                    "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                    "eid"
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| entry |),
                                                                          "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                          "memory_rw_entires"
                                                                        |);
                                                                        Value.Integer 2
                                                                      ]
                                                                    |),
                                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                                    "end_eid"
                                                                  |)
                                                                |);
                                                                BinOp.Panic.add (|
                                                                  Integer.U32,
                                                                  BinOp.Panic.add (|
                                                                    Integer.U32,
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| step |),
                                                                            "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                            "current"
                                                                          |)
                                                                        |),
                                                                        "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                        "sp"
                                                                      |)
                                                                    |),
                                                                    M.read (| M.read (| drop |) |)
                                                                  |),
                                                                  Value.Integer 2
                                                                |);
                                                                Value.StructTuple
                                                                  "specs::mtable::LocationType::Stack"
                                                                  [];
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::cmp::PartialEq",
                                                                    Ty.path
                                                                      "specs::mtable::VarType",
                                                                    [
                                                                      Ty.path
                                                                        "specs::mtable::VarType"
                                                                    ],
                                                                    "eq",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::convert::From",
                                                                          Ty.path
                                                                            "specs::mtable::VarType",
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType"
                                                                          ],
                                                                          "from",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::index::Index",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.path
                                                                                      "specs::types::ValueType";
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [ Ty.path "usize" ],
                                                                                "index",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| keep |);
                                                                                Value.Integer 0
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |);
                                                                    M.alloc (|
                                                                      Value.StructTuple
                                                                        "specs::mtable::VarType::I32"
                                                                        []
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::index::Index",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.path "u64";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [ Ty.path "usize" ],
                                                                      "index",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| keep_values |);
                                                                      Value.Integer 0
                                                                    ]
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::error::Error"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                                "cond_cell"
                                              |);
                                              M.read (| ctx |);
                                              M.read (| cond |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                [ F; F ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                [ F ],
                                              [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                                "cond_inv_cell"
                                              |);
                                              M.read (| ctx |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "subtle::CtOption") [ F ],
                                                  "unwrap_or",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      F,
                                                      [],
                                                      "invert",
                                                      []
                                                    |),
                                                    [
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::convert::From",
                                                            F,
                                                            [ Ty.path "u64" ],
                                                            "from",
                                                            []
                                                          |),
                                                          [ M.read (| cond |) ]
                                                        |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      F,
                                                      [],
                                                      "zero",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                [ F; F ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                                "cond_is_zero_cell"
                                              |);
                                              M.read (| ctx |);
                                              M.read (|
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              BinOp.Pure.eq
                                                                (M.read (| cond |))
                                                                (Value.Integer 0)
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "ff::Field",
                                                              F,
                                                              [],
                                                              "one",
                                                              []
                                                            |),
                                                            []
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "ff::Field",
                                                              F,
                                                              [],
                                                              "zero",
                                                              []
                                                            |),
                                                            []
                                                          |)
                                                        |)))
                                                  ]
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                [ F; F ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                                "cond_is_not_zero_cell"
                                              |);
                                              M.read (| ctx |);
                                              M.read (|
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              BinOp.Pure.eq
                                                                (M.read (| cond |))
                                                                (Value.Integer 0)
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "ff::Field",
                                                              F,
                                                              [],
                                                              "zero",
                                                              []
                                                            |),
                                                            []
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "ff::Field",
                                                              F,
                                                              [],
                                                              "one",
                                                              []
                                                            |),
                                                            []
                                                          |)
                                                        |)))
                                                  ]
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                [ F; F ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                [ F ],
                                              [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                                "dst_pc_cell"
                                              |);
                                              M.read (| ctx |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.rust_cast (M.read (| M.read (| dst_pc |) |)) ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      M.get_function (| "core::panicking::panic", [] |),
                                      [
                                        M.read (|
                                          Value.String "internal error: entered unreachable code"
                                        |)
                                      ]
                                    |)
                                  |)
                                |)))
                          ]
                        |) in
                      M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                    |)))
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn sp_diff(&self, meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                  Some(constant_from!(1) + self.cond_is_not_zero_cell.expr(meta) * self.drop_cell.expr(meta))
              }
          *)
          Definition sp_diff (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                        [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                        "add",
                        []
                      |),
                      [
                        Value.StructTuple
                          "halo2_proofs::plonk::circuit::Expression::Constant"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::convert::From",
                                F,
                                [ Ty.path "u64" ],
                                "from",
                                []
                              |),
                              [ M.read (| M.use (M.alloc (| Value.Integer 1 |)) |) ]
                            |)
                          ];
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                            [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                            "mul",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                  [ F ],
                                [ F ],
                                "expr",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                  "cond_is_not_zero_cell"
                                |);
                                M.read (| meta |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                  [ F ],
                                [ F ],
                                "expr",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                  "drop_cell"
                                |);
                                M.read (| meta |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]))
            | _, _ => M.impossible
            end.
          
          (*
              fn mops(&self, meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                  Some(self.cond_is_not_zero_cell.expr(meta) * self.keep_cell.expr(meta))
              }
          *)
          Definition mops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                        [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                        "mul",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "delphinus_zkwasm::circuits::cell::CellExpression",
                            Ty.apply
                              (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                              [ F ],
                            [ F ],
                            "expr",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                              "cond_is_not_zero_cell"
                            |);
                            M.read (| meta |)
                          ]
                        |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "delphinus_zkwasm::circuits::cell::CellExpression",
                            Ty.apply
                              (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                              [ F ],
                            [ F ],
                            "expr",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                              "keep_cell"
                            |);
                            M.read (| meta |)
                          ]
                        |)
                      ]
                    |)
                  ]))
            | _, _ => M.impossible
            end.
          
          (*
              fn memory_writing_ops(&self, entry: &EventTableEntry) -> u32 {
                  match &entry.step_info {
                      StepInfo::BrIfNez {
                          keep, condition, ..
                      } => {
                          if *condition == 0 {
                              0
                          } else {
                              keep.len() as u32
                          }
                      }
                      _ => unreachable!(),
                  }
              }
          *)
          Definition memory_writing_ops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; entry ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let entry := M.alloc (| entry |) in
                M.read (|
                  M.match_operator (|
                    M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| entry |),
                        "specs::etable::EventTableEntry",
                        "step_info"
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "specs::step::StepInfo::BrIfNez",
                              "keep"
                            |) in
                          let γ1_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "specs::step::StepInfo::BrIfNez",
                              "condition"
                            |) in
                          let keep := M.alloc (| γ1_0 |) in
                          let condition := M.alloc (| γ1_1 |) in
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.Pure.eq
                                          (M.read (| M.read (| condition |) |))
                                          (Value.Integer 0)
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (| Value.Integer 0 |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (|
                                    M.rust_cast
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path "specs::types::ValueType";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [ M.read (| keep |) ]
                                      |))
                                  |)))
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic", [] |),
                                [
                                  M.read (|
                                    Value.String "internal error: entered unreachable code"
                                  |)
                                ]
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn next_iid(
                  &self,
                  meta: &mut VirtualCells<'_, F>,
                  common_config: &EventTableCommonConfig<F>,
              ) -> Option<Expression<F>> {
                  Some(
                      self.cond_is_not_zero_cell.expr(meta) * self.dst_pc_cell.expr(meta)
                          + self.cond_is_zero_cell.expr(meta)
                              * (common_config.iid_cell.curr_expr(meta) + constant_from!(1)),
                  )
              }
          *)
          Definition next_iid (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta; common_config ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                let common_config := M.alloc (| common_config |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                        [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                        "add",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                            [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                            "mul",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                  [ F ],
                                [ F ],
                                "expr",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                  "cond_is_not_zero_cell"
                                |);
                                M.read (| meta |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                  [ F ],
                                [ F ],
                                "expr",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                  "dst_pc_cell"
                                |);
                                M.read (| meta |)
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                            [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                            "mul",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                  [ F ],
                                [ F ],
                                "expr",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::etable::op_configure::op_br_if::BrIfConfig",
                                  "cond_is_zero_cell"
                                |);
                                M.read (| meta |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ]
                                ],
                                "add",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                    Ty.apply
                                      (Ty.path
                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                      [ F ],
                                    [ F ],
                                    "curr_expr",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| common_config |),
                                      "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                                      "iid_cell"
                                    |);
                                    M.read (| meta |)
                                  ]
                                |);
                                Value.StructTuple
                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        F,
                                        [ Ty.path "u64" ],
                                        "from",
                                        []
                                      |),
                                      [ M.read (| M.use (M.alloc (| Value.Integer 1 |)) |) ]
                                    |)
                                  ]
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *)
              [
                ("opcode", InstanceField.Method (opcode F));
                ("assign", InstanceField.Method (assign F));
                ("sp_diff", InstanceField.Method (sp_diff F));
                ("mops", InstanceField.Method (mops F));
                ("memory_writing_ops", InstanceField.Method (memory_writing_ops F));
                ("next_iid", InstanceField.Method (next_iid F))
              ].
        End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_br_if_BrIfConfig_F.
      End op_br_if.
    End op_configure.
  End etable.
End circuits.
