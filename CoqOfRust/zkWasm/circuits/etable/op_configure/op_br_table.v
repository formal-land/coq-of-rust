(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module etable.
    Module op_configure.
      Module op_br_table.
        (* StructRecord
          {
            name := "BrTableConfig";
            ty_params := [ "F" ];
            fields :=
              [
                ("keep",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("keep_is_i32",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("keep_value",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
                ("drop",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                    [ F ]);
                ("dst_iid",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                    [ F ]);
                ("expected_index",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
                ("effective_index",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                    [ F ]);
                ("targets_len",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                    [ F ]);
                ("is_out_of_bound",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_not_out_of_bound",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("diff",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
                ("br_table_lookup",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("memory_table_lookup_stack_read_index",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                    [ F ]);
                ("memory_table_lookup_stack_read_return_value",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                    [ F ]);
                ("memory_table_lookup_stack_write_return_value",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                    [ F ])
              ];
          } *)
        
        (* StructTuple
          {
            name := "BrTableConfigBuilder";
            ty_params := [];
            fields := [];
          } *)
        
        Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_br_table_BrTableConfigBuilder.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.path
              "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfigBuilder".
          
          (*
              fn configure(
                  common_config: &EventTableCommonConfig<F>,
                  allocator: &mut EventTableCellAllocator<F>,
                  constraint_builder: &mut ConstraintBuilder<F>,
              ) -> Box<dyn EventTableOpcodeConfig<F>> {
                  let keep = allocator.alloc_bit_cell();
                  let keep_is_i32 = allocator.alloc_bit_cell();
                  let keep_value = allocator.alloc_u64_cell();
                  let drop = allocator.alloc_common_range_cell();
                  let dst_iid = allocator.alloc_common_range_cell();
                  let expected_index = allocator.alloc_u64_cell();
                  let effective_index = allocator.alloc_common_range_cell();
                  let targets_len = allocator.alloc_common_range_cell();
                  let is_out_of_bound = allocator.alloc_bit_cell();
                  let is_not_out_of_bound = allocator.alloc_bit_cell();
                  let diff = allocator.alloc_u64_cell();
          
                  constraint_builder.push(
                      "op_br_table oob",
                      Box::new(move |meta| {
                          vec![
                              /* is_out_of_bound \/ is_not_out_of_bound */
                              is_not_out_of_bound.expr(meta) + is_out_of_bound.expr(meta) - constant_from!(1),
                              /* is_out_of_bound -> expected >= targets_len */
                              is_out_of_bound.expr(meta)
                                  * (targets_len.expr(meta) + diff.expr(meta) - expected_index.expr(meta)),
                              /* !is_out_of_bound -> expected_index < targets_len */
                              is_not_out_of_bound.expr(meta)
                                  * (expected_index.expr(meta) + diff.expr(meta) + constant_from!(1)
                                      - targets_len.expr(meta)),
                          ]
                      }),
                  );
          
                  constraint_builder.push(
                      "op_br_table effective_index",
                      Box::new(move |meta| {
                          vec![
                              is_out_of_bound.expr(meta)
                                  * (targets_len.expr(meta) - constant_from!(1) - effective_index.expr(meta)),
                              is_not_out_of_bound.expr(meta)
                                  * (expected_index.expr(meta) - effective_index.expr(meta)),
                          ]
                      }),
                  );
          
                  let br_table_lookup = common_config.brtable_lookup_cell;
                  let fid = common_config.fid_cell;
                  let iid = common_config.iid_cell;
          
                  constraint_builder.push(
                      "op_br_table br_table_lookup",
                      Box::new(move |meta| {
                          vec![
                              br_table_lookup.expr(meta)
                                  - encode_br_table_entry(
                                      fid.expr(meta),
                                      iid.expr(meta),
                                      effective_index.expr(meta),
                                      drop.expr(meta),
                                      keep.expr(meta),
                                      dst_iid.expr(meta),
                                  ),
                          ]
                      }),
                  );
          
                  let eid = common_config.eid_cell;
                  let sp = common_config.sp_cell;
          
                  let memory_table_lookup_stack_read_index = allocator.alloc_memory_table_lookup_read_cell(
                      "op_br_table stack read index",
                      constraint_builder,
                      eid,
                      move |____| constant_from!(LocationType::Stack as u64),
                      move |meta| sp.expr(meta) + constant_from!(1),
                      move |____| constant_from!(1),
                      move |meta| expected_index.expr(meta),
                      move |____| constant_from!(1),
                  );
          
                  let memory_table_lookup_stack_read_return_value = allocator
                      .alloc_memory_table_lookup_read_cell(
                          "op_br_table stack read index",
                          constraint_builder,
                          eid,
                          move |____| constant_from!(LocationType::Stack as u64),
                          move |meta| sp.expr(meta) + constant_from!(2),
                          move |meta| keep_is_i32.expr(meta),
                          move |meta| keep_value.expr(meta),
                          move |meta| keep.expr(meta),
                      );
          
                  let memory_table_lookup_stack_write_return_value = allocator
                      .alloc_memory_table_lookup_write_cell(
                          "op_br stack write",
                          constraint_builder,
                          eid,
                          move |____| constant_from!(LocationType::Stack as u64),
                          move |meta| sp.expr(meta) + drop.expr(meta) + constant_from!(2),
                          move |meta| keep_is_i32.expr(meta),
                          move |meta| keep_value.expr(meta),
                          move |meta| keep.expr(meta),
                      );
          
                  Box::new(BrTableConfig {
                      keep,
                      keep_is_i32,
                      keep_value,
                      drop,
                      dst_iid,
                      expected_index,
                      effective_index,
                      targets_len,
                      is_out_of_bound,
                      is_not_out_of_bound,
                      diff,
                      br_table_lookup,
                      memory_table_lookup_stack_read_index,
                      memory_table_lookup_stack_read_return_value,
                      memory_table_lookup_stack_write_return_value,
                  })
              }
          *)
          Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ common_config; allocator; constraint_builder ] =>
              ltac:(M.monadic
                (let common_config := M.alloc (| common_config |) in
                let allocator := M.alloc (| allocator |) in
                let constraint_builder := M.alloc (| constraint_builder |) in
                (* Unsize *)
                M.pointer_coercion
                  (M.read (|
                    let keep :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let keep_is_i32 :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let keep_value :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_u64_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let drop :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_common_range_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let dst_iid :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_common_range_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let expected_index :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_u64_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let effective_index :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_common_range_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let targets_len :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_common_range_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_out_of_bound :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_not_out_of_bound :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let diff :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_u64_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "op_br_table oob" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "add",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_not_out_of_bound;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_out_of_bound;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        Value.StructTuple
                                                                          "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::convert::From",
                                                                                F,
                                                                                [ Ty.path "u64" ],
                                                                                "from",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      Value.Integer
                                                                                        1
                                                                                    |))
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_out_of_bound;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    targets_len;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                                      [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    diff;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                                  [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                expected_index;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_not_out_of_bound;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Add",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "add",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                                          [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        expected_index;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                                          [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        diff;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::convert::From",
                                                                                        F,
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64"
                                                                                        ],
                                                                                        "from",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              Value.Integer
                                                                                                1
                                                                                            |))
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                targets_len;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "op_br_table effective_index" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_out_of_bound;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Sub",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "sub",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    targets_len;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::convert::From",
                                                                                        F,
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64"
                                                                                        ],
                                                                                        "from",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              Value.Integer
                                                                                                1
                                                                                            |))
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                effective_index;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            is_not_out_of_bound;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                                  [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                expected_index;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                effective_index;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let br_table_lookup :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "brtable_lookup_cell"
                        |)
                      |) in
                    let fid :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "fid_cell"
                        |)
                      |) in
                    let iid :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "iid_cell"
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "op_br_table br_table_lookup" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            br_table_lookup;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_function (|
                                                                            "specs::encode::br_table::encode_br_table_entry",
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                fid;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                iid;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                effective_index;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                drop;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                keep;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                dst_iid;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let eid :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "eid_cell"
                        |)
                      |) in
                    let sp :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "sp_cell"
                        |)
                      |) in
                    let memory_table_lookup_stack_read_index :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_read_cell",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_br_table stack read index" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use
                                                        (M.alloc (|
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Isize,
                                                              M.get_constant (|
                                                                "specs::mtable::LocationType::Stack_discriminant"
                                                              |),
                                                              Value.Integer 0
                                                            |))
                                                        |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "add",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ sp; M.read (| meta |) ]
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.use (M.alloc (| Value.Integer 1 |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use (M.alloc (| Value.Integer 1 |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                  [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ expected_index; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use (M.alloc (| Value.Integer 1 |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let memory_table_lookup_stack_read_return_value :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_read_cell",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_br_table stack read index" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use
                                                        (M.alloc (|
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Isize,
                                                              M.get_constant (|
                                                                "specs::mtable::LocationType::Stack_discriminant"
                                                              |),
                                                              Value.Integer 0
                                                            |))
                                                        |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "add",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ sp; M.read (| meta |) ]
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.use (M.alloc (| Value.Integer 2 |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ keep_is_i32; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                  [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ keep_value; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ keep; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let memory_table_lookup_stack_write_return_value :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_write_cell",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_br stack write" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use
                                                        (M.alloc (|
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Isize,
                                                              M.get_constant (|
                                                                "specs::mtable::LocationType::Stack_discriminant"
                                                              |),
                                                              Value.Integer 0
                                                            |))
                                                        |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "add",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Add",
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ],
                                                    "add",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                        Ty.apply
                                                          (Ty.path
                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                          [ F ],
                                                        [ F ],
                                                        "expr",
                                                        []
                                                      |),
                                                      [ sp; M.read (| meta |) ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                        Ty.apply
                                                          (Ty.path
                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                          [ F ],
                                                        [ F ],
                                                        "expr",
                                                        []
                                                      |),
                                                      [ drop; M.read (| meta |) ]
                                                    |)
                                                  ]
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.use (M.alloc (| Value.Integer 2 |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ keep_is_i32; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                  [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ keep_value; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ keep; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      (* Unsize *)
                      M.pointer_coercion
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig")
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [
                            Value.StructRecord
                              "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig"
                              [
                                ("keep", M.read (| keep |));
                                ("keep_is_i32", M.read (| keep_is_i32 |));
                                ("keep_value", M.read (| keep_value |));
                                ("drop", M.read (| drop |));
                                ("dst_iid", M.read (| dst_iid |));
                                ("expected_index", M.read (| expected_index |));
                                ("effective_index", M.read (| effective_index |));
                                ("targets_len", M.read (| targets_len |));
                                ("is_out_of_bound", M.read (| is_out_of_bound |));
                                ("is_not_out_of_bound", M.read (| is_not_out_of_bound |));
                                ("diff", M.read (| diff |));
                                ("br_table_lookup", M.read (| br_table_lookup |));
                                ("memory_table_lookup_stack_read_index",
                                  M.read (| memory_table_lookup_stack_read_index |));
                                ("memory_table_lookup_stack_read_return_value",
                                  M.read (| memory_table_lookup_stack_read_return_value |));
                                ("memory_table_lookup_stack_write_return_value",
                                  M.read (| memory_table_lookup_stack_write_return_value |))
                              ]
                          ]
                        |))
                    |)
                  |))))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *) [ ("configure", InstanceField.Method (configure F)) ].
        End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_br_table_BrTableConfigBuilder.
        
        Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_br_table_BrTableConfig_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig")
              [ F ].
          
          (*
              fn opcode(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                  encode_br_table(self.targets_len.expr(meta))
              }
          *)
          Definition opcode (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                M.call_closure (|
                  M.get_function (|
                    "specs::encode::opcode::encode_br_table",
                    [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::cell::CellExpression",
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                          [ F ],
                        [ F ],
                        "expr",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                          "targets_len"
                        |);
                        M.read (| meta |)
                      ]
                    |)
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn assign(
                  &self,
                  ctx: &mut Context<'_, F>,
                  step: &StepStatus,
                  entry: &EventTableEntryWithMemoryInfo,
              ) -> Result<(), Error> {
                  match &entry.eentry.step_info {
                      StepInfo::BrTable {
                          index,
                          dst_pc,
                          drop,
                          keep,
                          keep_values,
                      } => {
                          assert!(keep.len() <= 1);
          
                          let index = *index as u32 as u64;
                          let targets = match &entry.eentry.get_instruction(step.current.itable).opcode {
                              specs::itable::Opcode::BrTable { targets } => targets.clone(),
                              _ => unreachable!(),
                          };
                          let targets_len = targets.len() as u64;
          
                          self.drop.assign(ctx, F::from( *drop as u64))?;
                          self.dst_iid.assign(ctx, F::from( *dst_pc as u64))?;
          
                          self.memory_table_lookup_stack_read_index.assign(
                              ctx,
                              entry.memory_rw_entires[0].start_eid,
                              step.current.eid,
                              entry.memory_rw_entires[0].end_eid,
                              step.current.sp + 1,
                              LocationType::Stack,
                              true,
                              index,
                          )?;
          
                          if keep.len() > 0 {
                              let keep_type: VarType = keep[0].into();
          
                              self.keep.assign(ctx, F::one())?;
                              self.keep_value.assign(ctx, keep_values[0])?;
                              self.keep_is_i32
                                  .assign_bool(ctx, keep_type == VarType::I32)?;
          
                              self.memory_table_lookup_stack_read_return_value.assign(
                                  ctx,
                                  entry.memory_rw_entires[1].start_eid,
                                  step.current.eid,
                                  entry.memory_rw_entires[1].end_eid,
                                  step.current.sp + 2,
                                  LocationType::Stack,
                                  VarType::from(keep[0]) == VarType::I32,
                                  keep_values[0],
                              )?;
          
                              self.memory_table_lookup_stack_write_return_value.assign(
                                  ctx,
                                  step.current.eid,
                                  entry.memory_rw_entires[2].end_eid,
                                  step.current.sp + drop + 2,
                                  LocationType::Stack,
                                  VarType::from(keep[0]) == VarType::I32,
                                  keep_values[0],
                              )?;
                          }
          
                          self.targets_len.assign(ctx, F::from(targets_len))?;
          
                          let effective_index = if index < targets_len {
                              index
                          } else {
                              targets_len - 1
                          };
                          self.expected_index.assign(ctx, index)?;
                          self.effective_index.assign(ctx, F::from(effective_index))?;
                          self.is_out_of_bound
                              .assign_bool(ctx, index != effective_index)?;
                          self.is_not_out_of_bound
                              .assign_bool(ctx, index == effective_index)?;
                          self.diff.assign(
                              ctx,
                              if index < targets_len {
                                  targets_len - index - 1
                              } else {
                                  index - targets_len
                              }
                              .into(),
                          )?;
          
                          self.br_table_lookup.assign_bn(
                              ctx,
                              &encode_br_table_entry(
                                  BigUint::from(step.current.fid),
                                  BigUint::from(step.current.iid),
                                  BigUint::from(effective_index),
                                  BigUint::from( *drop),
                                  BigUint::from(keep.len()),
                                  BigUint::from( *dst_pc),
                              ),
                          )?;
                      }
                      _ => unreachable!(),
                  }
          
                  Ok(())
              }
          *)
          Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; ctx; step; entry ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let ctx := M.alloc (| ctx |) in
                let step := M.alloc (| step |) in
                let entry := M.alloc (| entry |) in
                M.catch_return (|
                  ltac:(M.monadic
                    (M.read (|
                      let _ :=
                        M.match_operator (|
                          M.alloc (|
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| entry |),
                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                "eentry"
                              |),
                              "specs::etable::EventTableEntry",
                              "step_info"
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.read (| γ |) in
                                let γ1_0 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::BrTable",
                                    "index"
                                  |) in
                                let γ1_1 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::BrTable",
                                    "dst_pc"
                                  |) in
                                let γ1_2 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::BrTable",
                                    "drop"
                                  |) in
                                let γ1_3 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::BrTable",
                                    "keep"
                                  |) in
                                let γ1_4 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "specs::step::StepInfo::BrTable",
                                    "keep_values"
                                  |) in
                                let index := M.alloc (| γ1_0 |) in
                                let dst_pc := M.alloc (| γ1_1 |) in
                                let drop := M.alloc (| γ1_2 |) in
                                let keep := M.alloc (| γ1_3 |) in
                                let keep_values := M.alloc (| γ1_4 |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                UnOp.Pure.not
                                                  (BinOp.Pure.le
                                                    (M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path "specs::types::ValueType";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "len",
                                                        []
                                                      |),
                                                      [ M.read (| keep |) ]
                                                    |))
                                                    (Value.Integer 1))
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.call_closure (|
                                                M.get_function (| "core::panicking::panic", [] |),
                                                [
                                                  M.read (|
                                                    Value.String "assertion failed: keep.len() <= 1"
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let index :=
                                  M.alloc (|
                                    M.rust_cast (M.rust_cast (M.read (| M.read (| index |) |)))
                                  |) in
                                let targets :=
                                  M.copy (|
                                    M.match_operator (|
                                      M.alloc (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "specs::etable::EventTableEntry",
                                              "get_instruction",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| entry |),
                                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                "eentry"
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| step |),
                                                      "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                      "current"
                                                    |)
                                                  |),
                                                  "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                  "itable"
                                                |)
                                              |)
                                            ]
                                          |),
                                          "specs::itable::InstructionTableEntry",
                                          "opcode"
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.read (| γ |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_struct_record_field (|
                                                γ,
                                                "specs::itable::Opcode::BrTable",
                                                "targets"
                                              |) in
                                            let targets := M.alloc (| γ1_0 |) in
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path "specs::itable::BrTarget";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "clone",
                                                  []
                                                |),
                                                [ M.read (| targets |) ]
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (|
                                                M.call_closure (|
                                                  M.get_function (| "core::panicking::panic", [] |),
                                                  [
                                                    M.read (|
                                                      Value.String
                                                        "internal error: entered unreachable code"
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)))
                                      ]
                                    |)
                                  |) in
                                let targets_len :=
                                  M.alloc (|
                                    M.rust_cast
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path "specs::itable::BrTarget";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [ targets ]
                                      |))
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                [ F; F ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                [ F ],
                                              [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                "drop"
                                              |);
                                              M.read (| ctx |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.rust_cast (M.read (| M.read (| drop |) |)) ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                [ F; F ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                [ F ],
                                              [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                "dst_iid"
                                              |);
                                              M.read (| ctx |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.rust_cast (M.read (| M.read (| dst_pc |) |)) ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                                                [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                "memory_table_lookup_stack_read_index"
                                              |);
                                              M.read (| ctx |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::index::Index",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path
                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [ Ty.path "usize" ],
                                                      "index",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| entry |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                        "memory_rw_entires"
                                                      |);
                                                      Value.Integer 0
                                                    ]
                                                  |),
                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                  "start_eid"
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| step |),
                                                      "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                      "current"
                                                    |)
                                                  |),
                                                  "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                  "eid"
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::index::Index",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path
                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [ Ty.path "usize" ],
                                                      "index",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| entry |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                        "memory_rw_entires"
                                                      |);
                                                      Value.Integer 0
                                                    ]
                                                  |),
                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                  "end_eid"
                                                |)
                                              |);
                                              BinOp.Panic.add (|
                                                Integer.U32,
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| step |),
                                                        "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                        "current"
                                                      |)
                                                    |),
                                                    "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                    "sp"
                                                  |)
                                                |),
                                                Value.Integer 1
                                              |);
                                              Value.StructTuple
                                                "specs::mtable::LocationType::Stack"
                                                [];
                                              Value.Bool true;
                                              M.read (| index |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                BinOp.Pure.gt
                                                  (M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "specs::types::ValueType";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "len",
                                                      []
                                                    |),
                                                    [ M.read (| keep |) ]
                                                  |))
                                                  (Value.Integer 0)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          let keep_type :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "specs::types::ValueType",
                                                  [ Ty.path "specs::mtable::VarType" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::index::Index",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path "specs::types::ValueType";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [ Ty.path "usize" ],
                                                        "index",
                                                        []
                                                      |),
                                                      [ M.read (| keep |); Value.Integer 0 ]
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::circuit::AssignedCell")
                                                          [ F; F ];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                        Ty.apply
                                                          (Ty.path
                                                            "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                          [ F ],
                                                        [ F ],
                                                        "assign",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                          "keep"
                                                        |);
                                                        M.read (| ctx |);
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "ff::Field",
                                                            F,
                                                            [],
                                                            "one",
                                                            []
                                                          |),
                                                          []
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                          [ F ],
                                                        "assign",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                          "keep_value"
                                                        |);
                                                        M.read (| ctx |);
                                                        M.read (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "u64";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [
                                                              M.read (| keep_values |);
                                                              Value.Integer 0
                                                            ]
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::circuit::AssignedCell")
                                                          [ F; F ];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                        Ty.apply
                                                          (Ty.path
                                                            "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                          [ F ],
                                                        [ F ],
                                                        "assign_bool",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                          "keep_is_i32"
                                                        |);
                                                        M.read (| ctx |);
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialEq",
                                                            Ty.path "specs::mtable::VarType",
                                                            [ Ty.path "specs::mtable::VarType" ],
                                                            "eq",
                                                            []
                                                          |),
                                                          [
                                                            keep_type;
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "specs::mtable::VarType::I32"
                                                                []
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                                                          [ F ],
                                                        "assign",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                          "memory_table_lookup_stack_read_return_value"
                                                        |);
                                                        M.read (| ctx |);
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::index::Index",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.path
                                                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [ Ty.path "usize" ],
                                                                "index",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| entry |),
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                  "memory_rw_entires"
                                                                |);
                                                                Value.Integer 1
                                                              ]
                                                            |),
                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                            "start_eid"
                                                          |)
                                                        |);
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| step |),
                                                                "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                "current"
                                                              |)
                                                            |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                            "eid"
                                                          |)
                                                        |);
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::index::Index",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.path
                                                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [ Ty.path "usize" ],
                                                                "index",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| entry |),
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                  "memory_rw_entires"
                                                                |);
                                                                Value.Integer 1
                                                              ]
                                                            |),
                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                            "end_eid"
                                                          |)
                                                        |);
                                                        BinOp.Panic.add (|
                                                          Integer.U32,
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| step |),
                                                                  "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                  "current"
                                                                |)
                                                              |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                              "sp"
                                                            |)
                                                          |),
                                                          Value.Integer 2
                                                        |);
                                                        Value.StructTuple
                                                          "specs::mtable::LocationType::Stack"
                                                          [];
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialEq",
                                                            Ty.path "specs::mtable::VarType",
                                                            [ Ty.path "specs::mtable::VarType" ],
                                                            "eq",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::From",
                                                                  Ty.path "specs::mtable::VarType",
                                                                  [
                                                                    Ty.path
                                                                      "specs::types::ValueType"
                                                                  ],
                                                                  "from",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| keep |);
                                                                        Value.Integer 0
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |);
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "specs::mtable::VarType::I32"
                                                                []
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "u64";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [
                                                              M.read (| keep_values |);
                                                              Value.Integer 0
                                                            ]
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                                                          [ F ],
                                                        "assign",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                          "memory_table_lookup_stack_write_return_value"
                                                        |);
                                                        M.read (| ctx |);
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| step |),
                                                                "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                "current"
                                                              |)
                                                            |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                            "eid"
                                                          |)
                                                        |);
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::index::Index",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.path
                                                                      "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [ Ty.path "usize" ],
                                                                "index",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| entry |),
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                  "memory_rw_entires"
                                                                |);
                                                                Value.Integer 2
                                                              ]
                                                            |),
                                                            "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                            "end_eid"
                                                          |)
                                                        |);
                                                        BinOp.Panic.add (|
                                                          Integer.U32,
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Add",
                                                              Ty.path "u32",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "u32" ]
                                                              ],
                                                              "add",
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| step |),
                                                                      "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                      "current"
                                                                    |)
                                                                  |),
                                                                  "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                  "sp"
                                                                |)
                                                              |);
                                                              M.read (| drop |)
                                                            ]
                                                          |),
                                                          Value.Integer 2
                                                        |);
                                                        Value.StructTuple
                                                          "specs::mtable::LocationType::Stack"
                                                          [];
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialEq",
                                                            Ty.path "specs::mtable::VarType",
                                                            [ Ty.path "specs::mtable::VarType" ],
                                                            "eq",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::From",
                                                                  Ty.path "specs::mtable::VarType",
                                                                  [
                                                                    Ty.path
                                                                      "specs::types::ValueType"
                                                                  ],
                                                                  "from",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::Index",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "specs::types::ValueType";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [ Ty.path "usize" ],
                                                                        "index",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| keep |);
                                                                        Value.Integer 0
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |);
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "specs::mtable::VarType::I32"
                                                                []
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "u64";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [
                                                              M.read (| keep_values |);
                                                              Value.Integer 0
                                                            ]
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                [ F; F ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                [ F ],
                                              [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                "targets_len"
                                              |);
                                              M.read (| ctx |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.read (| targets_len |) ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let effective_index :=
                                  M.copy (|
                                    M.match_operator (|
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  BinOp.Pure.lt
                                                    (M.read (| index |))
                                                    (M.read (| targets_len |))
                                                |)) in
                                            let _ :=
                                              M.is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            index));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              BinOp.Panic.sub (|
                                                Integer.U64,
                                                M.read (| targets_len |),
                                                Value.Integer 1
                                              |)
                                            |)))
                                      ]
                                    |)
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                "expected_index"
                                              |);
                                              M.read (| ctx |);
                                              M.read (| index |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                [ F; F ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                [ F ],
                                              [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                "effective_index"
                                              |);
                                              M.read (| ctx |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::From",
                                                  F,
                                                  [ Ty.path "u64" ],
                                                  "from",
                                                  []
                                                |),
                                                [ M.read (| effective_index |) ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                [ F; F ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "assign_bool",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                "is_out_of_bound"
                                              |);
                                              M.read (| ctx |);
                                              BinOp.Pure.ne
                                                (M.read (| index |))
                                                (M.read (| effective_index |))
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                [ F; F ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                [ F ],
                                              [ F ],
                                              "assign_bool",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                "is_not_out_of_bound"
                                              |);
                                              M.read (| ctx |);
                                              BinOp.Pure.eq
                                                (M.read (| index |))
                                                (M.read (| effective_index |))
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                [ F ],
                                              "assign",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                "diff"
                                              |);
                                              M.read (| ctx |);
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.path "u64",
                                                  [ Ty.path "u64" ],
                                                  "into",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.match_operator (|
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  BinOp.Pure.lt
                                                                    (M.read (| index |))
                                                                    (M.read (| targets_len |))
                                                                |)) in
                                                            let _ :=
                                                              M.is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.alloc (|
                                                              BinOp.Panic.sub (|
                                                                Integer.U64,
                                                                BinOp.Panic.sub (|
                                                                  Integer.U64,
                                                                  M.read (| targets_len |),
                                                                  M.read (| index |)
                                                                |),
                                                                Value.Integer 1
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (|
                                                              BinOp.Panic.sub (|
                                                                Integer.U64,
                                                                M.read (| index |),
                                                                M.read (| targets_len |)
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::circuit::AssignedCell")
                                                [ F; F ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                              Ty.apply
                                                (Ty.path
                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                [ F ],
                                              [ F ],
                                              "assign_bn",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                                                "br_table_lookup"
                                              |);
                                              M.read (| ctx |);
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "specs::encode::br_table::encode_br_table_entry",
                                                    [ Ty.path "num_bigint::biguint::BigUint" ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        Ty.path "num_bigint::biguint::BigUint",
                                                        [ Ty.path "u32" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| step |),
                                                                "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                "current"
                                                              |)
                                                            |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                            "fid"
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        Ty.path "num_bigint::biguint::BigUint",
                                                        [ Ty.path "u32" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| step |),
                                                                "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                "current"
                                                              |)
                                                            |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                            "iid"
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        Ty.path "num_bigint::biguint::BigUint",
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [ M.read (| effective_index |) ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        Ty.path "num_bigint::biguint::BigUint",
                                                        [ Ty.path "u32" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [ M.read (| M.read (| drop |) |) ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        Ty.path "num_bigint::biguint::BigUint",
                                                        [ Ty.path "usize" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "specs::types::ValueType";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "len",
                                                            []
                                                          |),
                                                          [ M.read (| keep |) ]
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        Ty.path "num_bigint::biguint::BigUint",
                                                        [ Ty.path "u32" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [ M.read (| M.read (| dst_pc |) |) ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      M.get_function (| "core::panicking::panic", [] |),
                                      [
                                        M.read (|
                                          Value.String "internal error: entered unreachable code"
                                        |)
                                      ]
                                    |)
                                  |)
                                |)))
                          ]
                        |) in
                      M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                    |)))
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn sp_diff(&self, meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                  Some(self.drop.expr(meta) + constant_from!(1))
              }
          *)
          Definition sp_diff (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                        [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                        "add",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "delphinus_zkwasm::circuits::cell::CellExpression",
                            Ty.apply
                              (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                              [ F ],
                            [ F ],
                            "expr",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                              "drop"
                            |);
                            M.read (| meta |)
                          ]
                        |);
                        Value.StructTuple
                          "halo2_proofs::plonk::circuit::Expression::Constant"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::convert::From",
                                F,
                                [ Ty.path "u64" ],
                                "from",
                                []
                              |),
                              [ M.read (| M.use (M.alloc (| Value.Integer 1 |)) |) ]
                            |)
                          ]
                      ]
                    |)
                  ]))
            | _, _ => M.impossible
            end.
          
          (*
              fn next_iid(
                  &self,
                  meta: &mut VirtualCells<'_, F>,
                  _common_config: &EventTableCommonConfig<F>,
              ) -> Option<Expression<F>> {
                  Some(self.dst_iid.expr(meta))
              }
          *)
          Definition next_iid (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta; _common_config ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                let _common_config := M.alloc (| _common_config |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::cell::CellExpression",
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                          [ F ],
                        [ F ],
                        "expr",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                          "dst_iid"
                        |);
                        M.read (| meta |)
                      ]
                    |)
                  ]))
            | _, _ => M.impossible
            end.
          
          (*
              fn mops(&self, meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                  Some(self.keep.expr(meta))
              }
          *)
          Definition mops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::cell::CellExpression",
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                          [ F ],
                        [ F ],
                        "expr",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::etable::op_configure::op_br_table::BrTableConfig",
                          "keep"
                        |);
                        M.read (| meta |)
                      ]
                    |)
                  ]))
            | _, _ => M.impossible
            end.
          
          (*
              fn memory_writing_ops(&self, entry: &EventTableEntry) -> u32 {
                  match &entry.step_info {
                      StepInfo::BrTable { keep, .. } => keep.len() as u32,
                      _ => unreachable!(),
                  }
              }
          *)
          Definition memory_writing_ops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; entry ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let entry := M.alloc (| entry |) in
                M.read (|
                  M.match_operator (|
                    M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| entry |),
                        "specs::etable::EventTableEntry",
                        "step_info"
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "specs::step::StepInfo::BrTable",
                              "keep"
                            |) in
                          let keep := M.alloc (| γ1_0 |) in
                          M.alloc (|
                            M.rust_cast
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path "specs::types::ValueType";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "len",
                                  []
                                |),
                                [ M.read (| keep |) ]
                              |))
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic", [] |),
                                [
                                  M.read (|
                                    Value.String "internal error: entered unreachable code"
                                  |)
                                ]
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *)
              [
                ("opcode", InstanceField.Method (opcode F));
                ("assign", InstanceField.Method (assign F));
                ("sp_diff", InstanceField.Method (sp_diff F));
                ("next_iid", InstanceField.Method (next_iid F));
                ("mops", InstanceField.Method (mops F));
                ("memory_writing_ops", InstanceField.Method (memory_writing_ops F))
              ].
        End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_br_table_BrTableConfig_F.
      End op_br_table.
    End op_configure.
  End etable.
End circuits.
