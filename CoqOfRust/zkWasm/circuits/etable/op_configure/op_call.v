(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module etable.
    Module op_configure.
      Module op_call.
        (* StructRecord
          {
            name := "CallConfig";
            ty_params := [ "F" ];
            fields :=
              [
                ("index_cell",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                    [ F ]);
                ("frame_table_lookup",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedJumpTableLookupCell")
                    [ F ])
              ];
          } *)
        
        (* StructTuple
          {
            name := "CallConfigBuilder";
            ty_params := [];
            fields := [];
          } *)
        
        Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_call_CallConfigBuilder.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.path "delphinus_zkwasm::circuits::etable::op_configure::op_call::CallConfigBuilder".
          
          (*
              fn configure(
                  common_config: &EventTableCommonConfig<F>,
                  allocator: &mut EventTableCellAllocator<F>,
                  constraint_builder: &mut ConstraintBuilder<F>,
              ) -> Box<dyn EventTableOpcodeConfig<F>> {
                  let index_cell = allocator.alloc_common_range_cell();
                  let frame_table_lookup = common_config.jtable_lookup_cell;
          
                  let fid_cell = common_config.fid_cell;
                  let iid_cell = common_config.iid_cell;
                  let frame_id_cell = common_config.frame_id_cell;
                  let eid = common_config.eid_cell;
          
                  constraint_builder.constraints.push((
                      "return frame table lookups",
                      Box::new(move |meta| {
                          vec![
                              frame_table_lookup.cell.expr(meta)
                                  - JumpTableConfig::encode_lookup(
                                      eid.expr(meta),
                                      frame_id_cell.expr(meta),
                                      index_cell.expr(meta),
                                      fid_cell.expr(meta),
                                      iid_cell.expr(meta) + constant_from!(1),
                                  ),
                          ]
                      }),
                  ));
          
                  Box::new(CallConfig {
                      index_cell,
                      frame_table_lookup,
                  })
              }
          *)
          Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ common_config; allocator; constraint_builder ] =>
              ltac:(M.monadic
                (let common_config := M.alloc (| common_config |) in
                let allocator := M.alloc (| allocator |) in
                let constraint_builder := M.alloc (| constraint_builder |) in
                (* Unsize *)
                M.pointer_coercion
                  (M.read (|
                    let index_cell :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_common_range_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let frame_table_lookup :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "jtable_lookup_cell"
                        |)
                      |) in
                    let fid_cell :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "fid_cell"
                        |)
                      |) in
                    let iid_cell :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "iid_cell"
                        |)
                      |) in
                    let frame_id_cell :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "frame_id_cell"
                        |)
                      |) in
                    let eid :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "eid_cell"
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ];
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.dyn
                                          [
                                            ("existential predicate with variables", []);
                                            ("existential predicate with variables", [])
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "push",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| constraint_builder |),
                              "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder",
                              "constraints"
                            |);
                            Value.Tuple
                              [
                                M.read (| Value.String "return frame table lookups" |);
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                        [ F ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]);
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let meta := M.copy (| γ |) in
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ],
                                                          "into_vec",
                                                          [ Ty.path "alloc::alloc::Global" ]
                                                        |),
                                                        [
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.read (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "new",
                                                                  []
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  frame_table_lookup,
                                                                                  "delphinus_zkwasm::circuits::etable::allocator::AllocatedJumpTableLookupCell",
                                                                                  "cell"
                                                                                |);
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::jtable::expression::JtableLookupEntryEncode",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::jtable::JumpTableConfig")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "encode_lookup",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    eid;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    frame_id_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    index_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    fid_cell;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Add",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "add",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        iid_cell;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    Value.StructTuple
                                                                                      "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::convert::From",
                                                                                            F,
                                                                                            [
                                                                                              Ty.path
                                                                                                "u64"
                                                                                            ],
                                                                                            "from",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              M.use
                                                                                                (M.alloc (|
                                                                                                  Value.Integer
                                                                                                    1
                                                                                                |))
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |))
                                                        ]
                                                      |)))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |))
                              ]
                          ]
                        |)
                      |) in
                    M.alloc (|
                      (* Unsize *)
                      M.pointer_coercion
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::etable::op_configure::op_call::CallConfig")
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [
                            Value.StructRecord
                              "delphinus_zkwasm::circuits::etable::op_configure::op_call::CallConfig"
                              [
                                ("index_cell", M.read (| index_cell |));
                                ("frame_table_lookup", M.read (| frame_table_lookup |))
                              ]
                          ]
                        |))
                    |)
                  |))))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *) [ ("configure", InstanceField.Method (configure F)) ].
        End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_call_CallConfigBuilder.
        
        Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_call_CallConfig_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "delphinus_zkwasm::circuits::etable::op_configure::op_call::CallConfig")
              [ F ].
          
          (*
              fn opcode(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                  encode_call(self.index_cell.expr(meta))
              }
          *)
          Definition opcode (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                M.call_closure (|
                  M.get_function (|
                    "specs::encode::opcode::encode_call",
                    [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::cell::CellExpression",
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                          [ F ],
                        [ F ],
                        "expr",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::etable::op_configure::op_call::CallConfig",
                          "index_cell"
                        |);
                        M.read (| meta |)
                      ]
                    |)
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn assign(
                  &self,
                  ctx: &mut Context<'_, F>,
                  step: &StepStatus,
                  entry: &EventTableEntryWithMemoryInfo,
              ) -> Result<(), Error> {
                  match &entry.eentry.step_info {
                      StepInfo::Call { index } => {
                          self.index_cell.assign(ctx, F::from( *index as u64))?;
                          self.frame_table_lookup.cell.assign(
                              ctx,
                              bn_to_field(&encode_frame_table_entry(
                                  step.current.eid.into(),
                                  step.current.last_jump_eid.into(),
                                  ( *index).into(),
                                  step.current.fid.into(),
                                  (step.current.iid + 1).into(),
                              )),
                          )?;
                          Ok(())
                      }
          
                      _ => unreachable!(),
                  }
              }
          *)
          Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; ctx; step; entry ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let ctx := M.alloc (| ctx |) in
                let step := M.alloc (| step |) in
                let entry := M.alloc (| entry |) in
                M.catch_return (|
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        M.alloc (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| entry |),
                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                              "eentry"
                            |),
                            "specs::etable::EventTableEntry",
                            "step_info"
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::Call",
                                  "index"
                                |) in
                              let index := M.alloc (| γ1_0 |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                              [ F ],
                                            [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_call::CallConfig",
                                              "index_cell"
                                            |);
                                            M.read (| ctx |);
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::From",
                                                F,
                                                [ Ty.path "u64" ],
                                                "from",
                                                []
                                              |),
                                              [ M.rust_cast (M.read (| M.read (| index |) |)) ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedCell")
                                              [ F ],
                                            [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "delphinus_zkwasm::circuits::etable::op_configure::op_call::CallConfig",
                                                "frame_table_lookup"
                                              |),
                                              "delphinus_zkwasm::circuits::etable::allocator::AllocatedJumpTableLookupCell",
                                              "cell"
                                            |);
                                            M.read (| ctx |);
                                            M.call_closure (|
                                              M.get_function (|
                                                "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                [ F ]
                                              |),
                                              [
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "specs::encode::frame_table::encode_frame_table_entry",
                                                      [ Ty.path "num_bigint::biguint::BigUint" ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u32",
                                                          [ Ty.path "num_bigint::biguint::BigUint"
                                                          ],
                                                          "into",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| step |),
                                                                  "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                  "current"
                                                                |)
                                                              |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                              "eid"
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u32",
                                                          [ Ty.path "num_bigint::biguint::BigUint"
                                                          ],
                                                          "into",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| step |),
                                                                  "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                  "current"
                                                                |)
                                                              |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                              "last_jump_eid"
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u32",
                                                          [ Ty.path "num_bigint::biguint::BigUint"
                                                          ],
                                                          "into",
                                                          []
                                                        |),
                                                        [ M.read (| M.read (| index |) |) ]
                                                      |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u32",
                                                          [ Ty.path "num_bigint::biguint::BigUint"
                                                          ],
                                                          "into",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| step |),
                                                                  "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                  "current"
                                                                |)
                                                              |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                              "fid"
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.path "u32",
                                                          [ Ty.path "num_bigint::biguint::BigUint"
                                                          ],
                                                          "into",
                                                          []
                                                        |),
                                                        [
                                                          BinOp.Panic.add (|
                                                            Integer.U32,
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| step |),
                                                                    "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                    "current"
                                                                  |)
                                                                |),
                                                                "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                                "iid"
                                                              |)
                                                            |),
                                                            Value.Integer 1
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              M.alloc (|
                                Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    M.get_function (| "core::panicking::panic", [] |),
                                    [
                                      M.read (|
                                        Value.String "internal error: entered unreachable code"
                                      |)
                                    ]
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)))
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn jops_expr(&self, _meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                  Some(constant_from_bn!(&self.jops()))
              }
          *)
          Definition jops_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; _meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let _meta := M.alloc (| _meta |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    Value.StructTuple
                      "halo2_proofs::plonk::circuit::Expression::Constant"
                      [
                        M.call_closure (|
                          M.get_function (|
                            "delphinus_zkwasm::circuits::utils::bn_to_field",
                            [ F ]
                          |),
                          [
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig",
                                  Ty.apply
                                    (Ty.path
                                      "delphinus_zkwasm::circuits::etable::op_configure::op_call::CallConfig")
                                    [ F ],
                                  [ F ],
                                  "jops",
                                  []
                                |),
                                [ M.read (| self |) ]
                              |)
                            |)
                          ]
                        |)
                      ]
                  ]))
            | _, _ => M.impossible
            end.
          
          (*
              fn jops(&self) -> BigUint {
                  encode_jops(0, 1)
              }
          *)
          Definition jops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.call_closure (|
                  M.get_function (| "delphinus_zkwasm::circuits::jtable::encode_jops", [] |),
                  [ Value.Integer 0; Value.Integer 1 ]
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn next_frame_id(
                  &self,
                  meta: &mut VirtualCells<'_, F>,
                  common_config: &EventTableCommonConfig<F>,
              ) -> Option<Expression<F>> {
                  Some(common_config.eid_cell.curr_expr(meta))
              }
          *)
          Definition next_frame_id (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta; common_config ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                let common_config := M.alloc (| common_config |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::cell::CellExpression",
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                          [ F ],
                        [ F ],
                        "curr_expr",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "eid_cell"
                        |);
                        M.read (| meta |)
                      ]
                    |)
                  ]))
            | _, _ => M.impossible
            end.
          
          (*
              fn next_fid(
                  &self,
                  meta: &mut VirtualCells<'_, F>,
                  _common_config: &EventTableCommonConfig<F>,
              ) -> Option<Expression<F>> {
                  Some(self.index_cell.expr(meta))
              }
          *)
          Definition next_fid (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta; _common_config ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                let _common_config := M.alloc (| _common_config |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::cell::CellExpression",
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                          [ F ],
                        [ F ],
                        "expr",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::etable::op_configure::op_call::CallConfig",
                          "index_cell"
                        |);
                        M.read (| meta |)
                      ]
                    |)
                  ]))
            | _, _ => M.impossible
            end.
          
          (*
              fn next_iid(
                  &self,
                  _meta: &mut VirtualCells<'_, F>,
                  _common_config: &EventTableCommonConfig<F>,
              ) -> Option<Expression<F>> {
                  Some(constant_from!(0))
              }
          *)
          Definition next_iid (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; _meta; _common_config ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let _meta := M.alloc (| _meta |) in
                let _common_config := M.alloc (| _common_config |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    Value.StructTuple
                      "halo2_proofs::plonk::circuit::Expression::Constant"
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::convert::From",
                            F,
                            [ Ty.path "u64" ],
                            "from",
                            []
                          |),
                          [ M.read (| M.use (M.alloc (| Value.Integer 0 |)) |) ]
                        |)
                      ]
                  ]))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *)
              [
                ("opcode", InstanceField.Method (opcode F));
                ("assign", InstanceField.Method (assign F));
                ("jops_expr", InstanceField.Method (jops_expr F));
                ("jops", InstanceField.Method (jops F));
                ("next_frame_id", InstanceField.Method (next_frame_id F));
                ("next_fid", InstanceField.Method (next_fid F));
                ("next_iid", InstanceField.Method (next_iid F))
              ].
        End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_call_CallConfig_F.
      End op_call.
    End op_configure.
  End etable.
End circuits.
