(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module etable.
    Module op_configure.
      Module op_call_host_foreign_circuit.
        (* StructRecord
          {
            name := "ExternalCallHostCircuitConfig";
            ty_params := [ "F" ];
            fields :=
              [
                ("op",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                    [ F ]);
                ("value_is_ret",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("value_is_not_ret",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("external_foreign_call_lookup_cell",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("memory_table_lookup_stack_read",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                    [ F ]);
                ("memory_table_lookup_stack_write",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                    [ F ])
              ];
          } *)
        
        (* StructTuple
          {
            name := "ExternalCallHostCircuitConfigBuilder";
            ty_params := [];
            fields := [];
          } *)
        
        Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_call_host_foreign_circuit_ExternalCallHostCircuitConfigBuilder.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.path
              "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfigBuilder".
          
          (*
              fn configure(
                  common_config: &EventTableCommonConfig<F>,
                  allocator: &mut EventTableCellAllocator<F>,
                  constraint_builder: &mut ConstraintBuilder<F>,
              ) -> Box<dyn EventTableOpcodeConfig<F>> {
                  let op = allocator.alloc_common_range_cell();
                  let value_is_ret = allocator.alloc_bit_cell();
                  let value_is_not_ret = allocator.alloc_bit_cell();
          
                  let index = common_config.external_host_call_index_cell;
                  let external_foreign_call_lookup_cell = common_config.external_foreign_call_lookup_cell;
          
                  constraint_builder.push(
                      "op_call_host is_ret or not",
                      Box::new(move |meta| {
                          vec![value_is_ret.expr(meta) + value_is_not_ret.expr(meta) - constant_from!(1)]
                      }),
                  );
          
                  constraint_builder.push(
                      "external host call index change",
                      Box::new(move |meta| {
                          vec![index.next_expr(meta) - index.curr_expr(meta) - constant_from!(1)]
                      }),
                  );
          
                  let eid = common_config.eid_cell;
                  let sp = common_config.sp_cell;
          
                  let memory_table_lookup_stack_read = allocator
                      .alloc_memory_table_lookup_read_cell_with_value(
                          "op_call_host read value",
                          constraint_builder,
                          eid,
                          move |____| constant_from!(LocationType::Stack),
                          move |meta| sp.expr(meta) + constant_from!(1),
                          move |____| constant_from!(0),
                          move |meta| value_is_not_ret.expr(meta),
                      );
          
                  let memory_table_lookup_stack_write = allocator
                      .alloc_memory_table_lookup_write_cell_with_value(
                          "op_call_host return value",
                          constraint_builder,
                          eid,
                          move |____| constant_from!(LocationType::Stack),
                          move |meta| sp.expr(meta),
                          move |____| constant_from!(0),
                          move |meta| value_is_ret.expr(meta),
                      );
          
                  constraint_builder.push(
                      "external host call lookup",
                      Box::new(move |meta| {
                          let operand = value_is_not_ret.expr(meta)
                              * memory_table_lookup_stack_read.value_cell.expr(meta)
                              + value_is_ret.expr(meta)
                                  * memory_table_lookup_stack_write.value_cell.expr(meta);
          
                          vec![
                              external_foreign_call_lookup_cell.expr(meta)
                                  - encode_host_call_entry(index.expr(meta), op.expr(meta), operand),
                          ]
                      }),
                  );
          
                  Box::new(ExternalCallHostCircuitConfig {
                      op,
                      value_is_ret,
                      value_is_not_ret,
                      external_foreign_call_lookup_cell,
                      memory_table_lookup_stack_read,
                      memory_table_lookup_stack_write,
                  })
              }
          *)
          Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ common_config; allocator; constraint_builder ] =>
              ltac:(M.monadic
                (let common_config := M.alloc (| common_config |) in
                let allocator := M.alloc (| allocator |) in
                let constraint_builder := M.alloc (| constraint_builder |) in
                (* Unsize *)
                M.pointer_coercion
                  (M.read (|
                    let op :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_common_range_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let value_is_ret :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let value_is_not_ret :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let index :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "external_host_call_index_cell"
                        |)
                      |) in
                    let external_foreign_call_lookup_cell :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "external_foreign_call_lookup_cell"
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "op_call_host is_ret or not" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "add",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                value_is_ret;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                value_is_not_ret;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        Value.StructTuple
                                                                          "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::convert::From",
                                                                                F,
                                                                                [ Ty.path "u64" ],
                                                                                "from",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      Value.Integer
                                                                                        1
                                                                                    |))
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "external host call index change" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "next_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                index;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "curr_expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                index;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        Value.StructTuple
                                                                          "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::convert::From",
                                                                                F,
                                                                                [ Ty.path "u64" ],
                                                                                "from",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      Value.Integer
                                                                                        1
                                                                                    |))
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let eid :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "eid_cell"
                        |)
                      |) in
                    let sp :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "sp_cell"
                        |)
                      |) in
                    let memory_table_lookup_stack_read :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_read_cell_with_value",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_call_host read value" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.rust_cast
                                                      (BinOp.Panic.add (|
                                                        Integer.Isize,
                                                        M.get_constant (|
                                                          "specs::mtable::LocationType::Stack_discriminant"
                                                        |),
                                                        Value.Integer 0
                                                      |))
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "add",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ sp; M.read (| meta |) ]
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.use (M.alloc (| Value.Integer 1 |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use (M.alloc (| Value.Integer 0 |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ value_is_not_ret; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let memory_table_lookup_stack_write :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_write_cell_with_value",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_call_host return value" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.rust_cast
                                                      (BinOp.Panic.add (|
                                                        Integer.Isize,
                                                        M.get_constant (|
                                                          "specs::mtable::LocationType::Stack_discriminant"
                                                        |),
                                                        Value.Integer 0
                                                      |))
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ sp; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use (M.alloc (| Value.Integer 0 |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ value_is_ret; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "external host call lookup" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.read (|
                                                    let operand :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Add",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ],
                                                            "add",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Mul",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ],
                                                                "mul",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                      [ F ],
                                                                    [ F ],
                                                                    "expr",
                                                                    []
                                                                  |),
                                                                  [
                                                                    value_is_not_ret;
                                                                    M.read (| meta |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                      [ F ],
                                                                    [ F ],
                                                                    "expr",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      memory_table_lookup_stack_read,
                                                                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell",
                                                                      "value_cell"
                                                                    |);
                                                                    M.read (| meta |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Mul",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ],
                                                                "mul",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                      [ F ],
                                                                    [ F ],
                                                                    "expr",
                                                                    []
                                                                  |),
                                                                  [ value_is_ret; M.read (| meta |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                      [ F ],
                                                                    [ F ],
                                                                    "expr",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      memory_table_lookup_stack_write,
                                                                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell",
                                                                      "value_cell"
                                                                    |);
                                                                    M.read (| meta |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ],
                                                          "into_vec",
                                                          [ Ty.path "alloc::alloc::Global" ]
                                                        |),
                                                        [
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.read (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "new",
                                                                  []
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    Value.Array
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                external_foreign_call_lookup_cell;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_function (|
                                                                                "specs::external_host_call_table::encode::encode_host_call_entry",
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    index;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    op;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.read (| operand |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |))
                                                        ]
                                                      |)
                                                    |)
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      (* Unsize *)
                      M.pointer_coercion
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig")
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [
                            Value.StructRecord
                              "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig"
                              [
                                ("op", M.read (| op |));
                                ("value_is_ret", M.read (| value_is_ret |));
                                ("value_is_not_ret", M.read (| value_is_not_ret |));
                                ("external_foreign_call_lookup_cell",
                                  M.read (| external_foreign_call_lookup_cell |));
                                ("memory_table_lookup_stack_read",
                                  M.read (| memory_table_lookup_stack_read |));
                                ("memory_table_lookup_stack_write",
                                  M.read (| memory_table_lookup_stack_write |))
                              ]
                          ]
                        |))
                    |)
                  |))))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *) [ ("configure", InstanceField.Method (configure F)) ].
        End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_call_host_foreign_circuit_ExternalCallHostCircuitConfigBuilder.
        
        Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_call_host_foreign_circuit_ExternalCallHostCircuitConfig_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig")
              [ F ].
          
          (*
              fn opcode(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                  encode_call_host(self.op.expr(meta), self.value_is_ret.expr(meta))
              }
          *)
          Definition opcode (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                M.call_closure (|
                  M.get_function (|
                    "specs::encode::opcode::encode_call_host",
                    [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::cell::CellExpression",
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                          [ F ],
                        [ F ],
                        "expr",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig",
                          "op"
                        |);
                        M.read (| meta |)
                      ]
                    |);
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::cell::CellExpression",
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                          [ F ],
                        [ F ],
                        "expr",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig",
                          "value_is_ret"
                        |);
                        M.read (| meta |)
                      ]
                    |)
                  ]
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn assign(
                  &self,
                  ctx: &mut Context<'_, F>,
                  step: &StepStatus,
                  entry: &EventTableEntryWithMemoryInfo,
              ) -> Result<(), Error> {
                  match &entry.eentry.step_info {
                      StepInfo::ExternalHostCall { op, value, sig } => {
                          self.op.assign(ctx, F::from( *op as u64))?;
                          self.value_is_ret.assign_bool(ctx, sig.is_ret())?;
                          self.value_is_not_ret.assign_bool(ctx, !sig.is_ret())?;
                          self.external_foreign_call_lookup_cell.assign_bn(
                              ctx,
                              &encode_host_call_entry(
                                  BigUint::from(step.current.external_host_call_call_index),
                                  BigUint::from( *op as u64),
                                  BigUint::from(value.unwrap()),
                              ),
                          )?;
          
                          match sig {
                              ExternalHostCallSignature::Argument => {
                                  self.memory_table_lookup_stack_read.assign(
                                      ctx,
                                      entry.memory_rw_entires[0].start_eid,
                                      step.current.eid,
                                      entry.memory_rw_entires[0].end_eid,
                                      step.current.sp + 1,
                                      LocationType::Stack,
                                      false,
                                      value.unwrap(),
                                  )?;
                              }
                              ExternalHostCallSignature::Return => {
                                  self.memory_table_lookup_stack_write.assign(
                                      ctx,
                                      step.current.eid,
                                      entry.memory_rw_entires[0].end_eid,
                                      step.current.sp,
                                      LocationType::Stack,
                                      false,
                                      value.unwrap(),
                                  )?;
                              }
                          }
          
                          Ok(())
                      }
          
                      _ => unreachable!(),
                  }
              }
          *)
          Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; ctx; step; entry ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let ctx := M.alloc (| ctx |) in
                let step := M.alloc (| step |) in
                let entry := M.alloc (| entry |) in
                M.catch_return (|
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        M.alloc (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| entry |),
                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                              "eentry"
                            |),
                            "specs::etable::EventTableEntry",
                            "step_info"
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::ExternalHostCall",
                                  "op"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::ExternalHostCall",
                                  "value"
                                |) in
                              let γ1_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::ExternalHostCall",
                                  "sig"
                                |) in
                              let op := M.alloc (| γ1_0 |) in
                              let value := M.alloc (| γ1_1 |) in
                              let sig := M.alloc (| γ1_2 |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                              [ F ],
                                            [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig",
                                              "op"
                                            |);
                                            M.read (| ctx |);
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::From",
                                                F,
                                                [ Ty.path "u64" ],
                                                "from",
                                                []
                                              |),
                                              [ M.rust_cast (M.read (| M.read (| op |) |)) ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                              [ F ],
                                            [ F ],
                                            "assign_bool",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig",
                                              "value_is_ret"
                                            |);
                                            M.read (| ctx |);
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path
                                                  "specs::external_host_call_table::ExternalHostCallSignature",
                                                "is_ret",
                                                []
                                              |),
                                              [ M.read (| sig |) ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                              [ F ],
                                            [ F ],
                                            "assign_bool",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig",
                                              "value_is_not_ret"
                                            |);
                                            M.read (| ctx |);
                                            UnOp.Pure.not
                                              (M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path
                                                    "specs::external_host_call_table::ExternalHostCallSignature",
                                                  "is_ret",
                                                  []
                                                |),
                                                [ M.read (| sig |) ]
                                              |))
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                              [ F ],
                                            [ F ],
                                            "assign_bn",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig",
                                              "external_foreign_call_lookup_cell"
                                            |);
                                            M.read (| ctx |);
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_function (|
                                                  "specs::external_host_call_table::encode::encode_host_call_entry",
                                                  [ Ty.path "num_bigint::biguint::BigUint" ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [ Ty.path "u32" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| step |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                              "current"
                                                            |)
                                                          |),
                                                          "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                          "external_host_call_call_index"
                                                        |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [ M.rust_cast (M.read (| M.read (| op |) |)) ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::convert::From",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [ Ty.path "u64" ],
                                                      "from",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [ Ty.path "u64" ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [ M.read (| M.read (| value |) |) ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  sig,
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.read (| γ |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig",
                                                        "memory_table_lookup_stack_read"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path
                                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| entry |),
                                                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                "memory_rw_entires"
                                                              |);
                                                              Value.Integer 0
                                                            ]
                                                          |),
                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                          "start_eid"
                                                        |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| step |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                              "current"
                                                            |)
                                                          |),
                                                          "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                          "eid"
                                                        |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path
                                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| entry |),
                                                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                "memory_rw_entires"
                                                              |);
                                                              Value.Integer 0
                                                            ]
                                                          |),
                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                          "end_eid"
                                                        |)
                                                      |);
                                                      BinOp.Panic.add (|
                                                        Integer.U32,
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| step |),
                                                                "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                                "current"
                                                              |)
                                                            |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                            "sp"
                                                          |)
                                                        |),
                                                        Value.Integer 1
                                                      |);
                                                      Value.StructTuple
                                                        "specs::mtable::LocationType::Stack"
                                                        [];
                                                      Value.Bool false;
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [ Ty.path "u64" ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [ M.read (| M.read (| value |) |) ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.read (| γ |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                                                        [ F ],
                                                      "assign",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig",
                                                        "memory_table_lookup_stack_write"
                                                      |);
                                                      M.read (| ctx |);
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| step |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                              "current"
                                                            |)
                                                          |),
                                                          "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                          "eid"
                                                        |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path
                                                                    "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| entry |),
                                                                "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                                "memory_rw_entires"
                                                              |);
                                                              Value.Integer 0
                                                            ]
                                                          |),
                                                          "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                          "end_eid"
                                                        |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| step |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                              "current"
                                                            |)
                                                          |),
                                                          "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                          "sp"
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "specs::mtable::LocationType::Stack"
                                                        [];
                                                      Value.Bool false;
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [ Ty.path "u64" ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [ M.read (| M.read (| value |) |) ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (|
                                Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    M.get_function (| "core::panicking::panic", [] |),
                                    [
                                      M.read (|
                                        Value.String "internal error: entered unreachable code"
                                      |)
                                    ]
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)))
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn sp_diff(&self, meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                  Some(constant_from!(1) - self.value_is_ret.expr(meta) * constant_from!(2))
              }
          *)
          Definition sp_diff (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                        [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                        "sub",
                        []
                      |),
                      [
                        Value.StructTuple
                          "halo2_proofs::plonk::circuit::Expression::Constant"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::convert::From",
                                F,
                                [ Ty.path "u64" ],
                                "from",
                                []
                              |),
                              [ M.read (| M.use (M.alloc (| Value.Integer 1 |)) |) ]
                            |)
                          ];
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                            [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                            "mul",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                Ty.apply
                                  (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                  [ F ],
                                [ F ],
                                "expr",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig",
                                  "value_is_ret"
                                |);
                                M.read (| meta |)
                              ]
                            |);
                            Value.StructTuple
                              "halo2_proofs::plonk::circuit::Expression::Constant"
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::From",
                                    F,
                                    [ Ty.path "u64" ],
                                    "from",
                                    []
                                  |),
                                  [ M.read (| M.use (M.alloc (| Value.Integer 2 |)) |) ]
                                |)
                              ]
                          ]
                        |)
                      ]
                    |)
                  ]))
            | _, _ => M.impossible
            end.
          
          (*
              fn memory_writing_ops(&self, entry: &specs::etable::EventTableEntry) -> u32 {
                  match &entry.step_info {
                      StepInfo::ExternalHostCall { sig, .. } => match sig {
                          ExternalHostCallSignature::Return => 1u32,
                          _ => 0,
                      },
                      _ => unreachable!(),
                  }
              }
          *)
          Definition memory_writing_ops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; entry ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let entry := M.alloc (| entry |) in
                M.read (|
                  M.match_operator (|
                    M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| entry |),
                        "specs::etable::EventTableEntry",
                        "step_info"
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "specs::step::StepInfo::ExternalHostCall",
                              "sig"
                            |) in
                          let sig := M.alloc (| γ1_0 |) in
                          M.match_operator (|
                            sig,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.read (| γ |) in
                                  M.alloc (| Value.Integer 1 |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Integer 0 |)))
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic", [] |),
                                [
                                  M.read (|
                                    Value.String "internal error: entered unreachable code"
                                  |)
                                ]
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn mops(&self, meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                  Some(self.value_is_ret.curr_expr(meta))
              }
          *)
          Definition mops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "delphinus_zkwasm::circuits::cell::CellExpression",
                        Ty.apply
                          (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                          [ F ],
                        [ F ],
                        "curr_expr",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "delphinus_zkwasm::circuits::etable::op_configure::op_call_host_foreign_circuit::ExternalCallHostCircuitConfig",
                          "value_is_ret"
                        |);
                        M.read (| meta |)
                      ]
                    |)
                  ]))
            | _, _ => M.impossible
            end.
          
          (*
              fn is_external_host_call(&self, _entry: &specs::etable::EventTableEntry) -> bool {
                  true
              }
          *)
          Definition is_external_host_call (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; _entry ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let _entry := M.alloc (| _entry |) in
                Value.Bool true))
            | _, _ => M.impossible
            end.
          
          (*
              fn external_host_call_index_increase(
                  &self,
                  _meta: &mut VirtualCells<'_, F>,
                  _common_config: &EventTableCommonConfig<F>,
              ) -> Option<Expression<F>> {
                  Some(constant_from!(1))
              }
          *)
          Definition external_host_call_index_increase
              (F : Ty.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; _meta; _common_config ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let _meta := M.alloc (| _meta |) in
                let _common_config := M.alloc (| _common_config |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    Value.StructTuple
                      "halo2_proofs::plonk::circuit::Expression::Constant"
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::convert::From",
                            F,
                            [ Ty.path "u64" ],
                            "from",
                            []
                          |),
                          [ M.read (| M.use (M.alloc (| Value.Integer 1 |)) |) ]
                        |)
                      ]
                  ]))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *)
              [
                ("opcode", InstanceField.Method (opcode F));
                ("assign", InstanceField.Method (assign F));
                ("sp_diff", InstanceField.Method (sp_diff F));
                ("memory_writing_ops", InstanceField.Method (memory_writing_ops F));
                ("mops", InstanceField.Method (mops F));
                ("is_external_host_call", InstanceField.Method (is_external_host_call F));
                ("external_host_call_index_increase",
                  InstanceField.Method (external_host_call_index_increase F))
              ].
        End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_call_host_foreign_circuit_ExternalCallHostCircuitConfig_F.
      End op_call_host_foreign_circuit.
    End op_configure.
  End etable.
End circuits.
