(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module etable.
    Module op_configure.
      Module op_unary.
        (* StructRecord
          {
            name := "UnaryConfig";
            ty_params := [ "F" ];
            fields :=
              [
                ("operand_inv",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("bits",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("operand_is_zero",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_ctz",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_clz",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_popcnt",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("is_i32",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell") [ F ]);
                ("aux1",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
                ("aux2",
                  Ty.apply (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedU64Cell") [ F ]);
                ("lookup_pow_modulus",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("lookup_pow_power",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("bit_table_lookup",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedBitTableLookupCells")
                    [ F ]);
                ("ctz_degree_helper",
                  Ty.apply
                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                    [ F ]);
                ("memory_table_lookup_stack_read",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                    [ F ]);
                ("memory_table_lookup_stack_write",
                  Ty.apply
                    (Ty.path
                      "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                    [ F ])
              ];
          } *)
        
        (* StructTuple
          {
            name := "UnaryConfigBuilder";
            ty_params := [];
            fields := [];
          } *)
        
        Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_unary_UnaryConfigBuilder.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.path
              "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfigBuilder".
          
          (*
              fn configure(
                  common_config: &EventTableCommonConfig<F>,
                  allocator: &mut EventTableCellAllocator<F>,
                  constraint_builder: &mut ConstraintBuilder<F>,
              ) -> Box<dyn EventTableOpcodeConfig<F>> {
                  let operand_is_zero = allocator.alloc_bit_cell();
                  let operand_inv = allocator.alloc_unlimited_cell();
                  let bits = allocator.alloc_unlimited_cell();
          
                  let is_ctz = allocator.alloc_bit_cell();
                  let is_clz = allocator.alloc_bit_cell();
                  let is_popcnt = allocator.alloc_bit_cell();
                  let is_i32 = allocator.alloc_bit_cell();
          
                  let aux1 = allocator.alloc_u64_cell();
                  let aux2 = allocator.alloc_u64_cell();
          
                  let ctz_degree_helper = allocator.alloc_unlimited_cell();
          
                  let lookup_pow_modulus = common_config.pow_table_lookup_modulus_cell;
                  let lookup_pow_power = common_config.pow_table_lookup_power_cell;
                  let lookup_popcnt = common_config.bit_table_lookup_cells;
          
                  let eid = common_config.eid_cell;
                  let sp = common_config.sp_cell;
          
                  let memory_table_lookup_stack_read = allocator
                      .alloc_memory_table_lookup_read_cell_with_value(
                          "op_unary stack read",
                          constraint_builder,
                          eid,
                          move |____| constant_from!(LocationType::Stack as u64),
                          move |meta| sp.expr(meta) + constant_from!(1),
                          move |meta| is_i32.expr(meta),
                          move |____| constant_from!(1),
                      );
                  let operand = memory_table_lookup_stack_read.value_cell;
          
                  let memory_table_lookup_stack_write = allocator
                      .alloc_memory_table_lookup_write_cell_with_value(
                          "op_unary stack write",
                          constraint_builder,
                          eid,
                          move |____| constant_from!(LocationType::Stack as u64),
                          move |meta| sp.expr(meta) + constant_from!(1),
                          move |meta| is_i32.expr(meta),
                          move |____| constant_from!(1),
                      );
                  let result = memory_table_lookup_stack_write.value_cell;
          
                  constraint_builder.push(
                      "op_unary: selector",
                      Box::new(move |meta| {
                          vec![
                              (is_ctz.expr(meta) + is_clz.expr(meta) + is_popcnt.expr(meta)
                                  - constant_from!(1)),
                          ]
                      }),
                  );
          
                  constraint_builder.push(
                      "op_unary: zero cond",
                      Box::new(move |meta| {
                          vec![
                              operand_is_zero.expr(meta) * operand.expr(meta),
                              operand.expr(meta) * operand_inv.expr(meta) - constant_from!(1)
                                  + operand_is_zero.expr(meta),
                          ]
                      }),
                  );
          
                  constraint_builder.push(
                      "op_unary: bits",
                      Box::new(move |meta| {
                          vec![bits.expr(meta) - constant_from!(64) + constant_from!(32) * is_i32.expr(meta)]
                      }),
                  );
          
                  constraint_builder.push(
                      "op_unary: clz",
                      Box::new(move |meta| {
                          let operand_is_not_zero = constant_from!(1) - operand_is_zero.expr(meta);
          
                          vec![
                              operand_is_zero.expr(meta) * (result.expr(meta) - bits.expr(meta)),
                              operand_is_not_zero.clone()
                                  * (lookup_pow_modulus.expr(meta) + aux1.u64_cell.expr(meta)
                                      - operand.expr(meta)),
                              operand_is_not_zero.clone()
                                  * (aux1.u64_cell.expr(meta) + aux2.u64_cell.expr(meta) + constant_from!(1)
                                      - lookup_pow_modulus.expr(meta)),
                              operand_is_not_zero
                                  * (lookup_pow_power.expr(meta)
                                      - pow_table_power_encode(
                                          bits.expr(meta) - result.expr(meta) - constant_from!(1),
                                      )),
                          ]
                          .into_iter()
                          .map(|constraint| constraint * is_clz.expr(meta))
                          .collect()
                      }),
                  );
          
                  constraint_builder.push(
                      "op_unary: ctz",
                      Box::new(move |meta| {
                          let operand_is_not_zero = constant_from!(1) - operand_is_zero.expr(meta);
          
                          vec![
                              ctz_degree_helper.expr(meta)
                                  - (aux1.u64_cell.expr(meta)
                                      * lookup_pow_modulus.expr(meta)
                                      * constant_from!(2)),
                              operand_is_zero.expr(meta) * (result.expr(meta) - bits.expr(meta)),
                              operand_is_not_zero
                                  * (ctz_degree_helper.expr(meta) + lookup_pow_modulus.expr(meta)
                                      - operand.expr(meta)),
                              lookup_pow_power.expr(meta) - pow_table_power_encode(result.expr(meta)),
                          ]
                          .into_iter()
                          .map(|constraint| constraint * is_ctz.expr(meta))
                          .collect()
                      }),
                  );
          
                  constraint_builder.push(
                      "op_unary: lookup popcnt",
                      Box::new(move |meta| {
                          vec![
                              lookup_popcnt.op.expr(meta) - constant_from!(BitTableOp::Popcnt.index()),
                              lookup_popcnt.left.expr(meta) - operand.expr(meta),
                              lookup_popcnt.result.expr(meta) - result.expr(meta),
                          ]
                          .into_iter()
                          .map(|constraint| constraint * is_popcnt.expr(meta))
                          .collect()
                      }),
                  );
          
                  Box::new(UnaryConfig {
                      operand_inv,
                      bits,
                      operand_is_zero,
                      is_ctz,
                      is_clz,
                      is_popcnt,
                      is_i32,
                      aux1,
                      aux2,
                      lookup_pow_modulus,
                      lookup_pow_power,
                      ctz_degree_helper,
                      bit_table_lookup: lookup_popcnt,
                      memory_table_lookup_stack_read,
                      memory_table_lookup_stack_write,
                  })
              }
          *)
          Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ common_config; allocator; constraint_builder ] =>
              ltac:(M.monadic
                (let common_config := M.alloc (| common_config |) in
                let allocator := M.alloc (| allocator |) in
                let constraint_builder := M.alloc (| constraint_builder |) in
                (* Unsize *)
                M.pointer_coercion
                  (M.read (|
                    let operand_is_zero :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let operand_inv :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_unlimited_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let bits :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_unlimited_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_ctz :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_clz :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_popcnt :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let is_i32 :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_bit_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let aux1 :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_u64_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let aux2 :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_u64_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let ctz_degree_helper :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_unlimited_cell",
                            []
                          |),
                          [ M.read (| allocator |) ]
                        |)
                      |) in
                    let lookup_pow_modulus :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "pow_table_lookup_modulus_cell"
                        |)
                      |) in
                    let lookup_pow_power :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "pow_table_lookup_power_cell"
                        |)
                      |) in
                    let lookup_popcnt :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "bit_table_lookup_cells"
                        |)
                      |) in
                    let eid :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "eid_cell"
                        |)
                      |) in
                    let sp :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| common_config |),
                          "delphinus_zkwasm::circuits::etable::EventTableCommonConfig",
                          "sp_cell"
                        |)
                      |) in
                    let memory_table_lookup_stack_read :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_read_cell_with_value",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_unary stack read" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use
                                                        (M.alloc (|
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Isize,
                                                              M.get_constant (|
                                                                "specs::mtable::LocationType::Stack_discriminant"
                                                              |),
                                                              Value.Integer 0
                                                            |))
                                                        |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "add",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ sp; M.read (| meta |) ]
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.use (M.alloc (| Value.Integer 1 |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ is_i32; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use (M.alloc (| Value.Integer 1 |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let operand :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          memory_table_lookup_stack_read,
                          "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell",
                          "value_cell"
                        |)
                      |) in
                    let memory_table_lookup_stack_write :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::allocator::EventTableCellAllocator")
                              [ F ],
                            "alloc_memory_table_lookup_write_cell_with_value",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ]);
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                            [ F ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                  [ F ])
                            ]
                          |),
                          [
                            M.read (| allocator |);
                            M.read (| Value.String "op_unary stack write" |);
                            M.read (| constraint_builder |);
                            M.read (| eid |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use
                                                        (M.alloc (|
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Isize,
                                                              M.get_constant (|
                                                                "specs::mtable::LocationType::Stack_discriminant"
                                                              |),
                                                              Value.Integer 0
                                                            |))
                                                        |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::Add",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ],
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ],
                                                "add",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedCommonRangeCell")
                                                      [ F ],
                                                    [ F ],
                                                    "expr",
                                                    []
                                                  |),
                                                  [ sp; M.read (| meta |) ]
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.use (M.alloc (| Value.Integer 1 |))
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let meta := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                Ty.apply
                                                  (Ty.path
                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                  [ F ],
                                                [ F ],
                                                "expr",
                                                []
                                              |),
                                              [ is_i32; M.read (| meta |) ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end));
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let ____ := M.copy (| γ |) in
                                            Value.StructTuple
                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    F,
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.use (M.alloc (| Value.Integer 1 |))
                                                    |)
                                                  ]
                                                |)
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let result :=
                      M.copy (|
                        M.SubPointer.get_struct_record_field (|
                          memory_table_lookup_stack_write,
                          "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell",
                          "value_cell"
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "op_unary: selector" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Sub",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "sub",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Add",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "add",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_ctz;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    is_clz;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_popcnt;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        Value.StructTuple
                                                                          "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::convert::From",
                                                                                F,
                                                                                [ Ty.path "u64" ],
                                                                                "from",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      Value.Integer
                                                                                        1
                                                                                    |))
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "op_unary: zero cond" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            operand_is_zero;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            operand;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Add",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "add",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Mul",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ],
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                                "mul",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    operand;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                      [ F ],
                                                                                    [ F ],
                                                                                    "expr",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    operand_inv;
                                                                                    M.read (|
                                                                                      meta
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                              [ F ],
                                                                            [ F ],
                                                                            "expr",
                                                                            []
                                                                          |),
                                                                          [
                                                                            operand_is_zero;
                                                                            M.read (| meta |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "op_unary: bits" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ],
                                                      "into_vec",
                                                      [ Ty.path "alloc::alloc::Global" ]
                                                    |),
                                                    [
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.read (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                Value.Array
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Add",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                        "add",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Sub",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "sub",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                bits;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            64
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    F,
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Value.Integer
                                                                                            32
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ];
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                  [ F ],
                                                                                [ F ],
                                                                                "expr",
                                                                                []
                                                                              |),
                                                                              [
                                                                                is_i32;
                                                                                M.read (| meta |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                              |)
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "op_unary: clz" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.read (|
                                                    let operand_is_not_zero :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Sub",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ],
                                                            "sub",
                                                            []
                                                          |),
                                                          [
                                                            Value.StructTuple
                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::convert::From",
                                                                    F,
                                                                    [ Ty.path "u64" ],
                                                                    "from",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.use
                                                                        (M.alloc (|
                                                                          Value.Integer 1
                                                                        |))
                                                                    |)
                                                                  ]
                                                                |)
                                                              ];
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                  [ F ],
                                                                [ F ],
                                                                "expr",
                                                                []
                                                              |),
                                                              [ operand_is_zero; M.read (| meta |) ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::map::Map")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::vec::into_iter::IntoIter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ])
                                                            ],
                                                          [],
                                                          "collect",
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::vec::into_iter::IntoIter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "map",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ])
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::collect::IntoIterator",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "into_iter",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                      "into_vec",
                                                                      [
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.read (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::boxed::Box")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              "new",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ],
                                                                                        "mul",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                              [ F ],
                                                                                            [ F ],
                                                                                            "expr",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            operand_is_zero;
                                                                                            M.read (|
                                                                                              meta
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Sub",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F ],
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ]
                                                                                            ],
                                                                                            "sub",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "expr",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                result;
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "expr",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                bits;
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ],
                                                                                        "mul",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::clone::Clone",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F ],
                                                                                            [],
                                                                                            "clone",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            operand_is_not_zero
                                                                                          ]
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Sub",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F ],
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ]
                                                                                            ],
                                                                                            "sub",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::Add",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ],
                                                                                                "add",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                    "expr",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    lookup_pow_modulus;
                                                                                                    M.read (|
                                                                                                      meta
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                    "expr",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                      aux1,
                                                                                                      "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                                      "u64_cell"
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      meta
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "expr",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                operand;
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ],
                                                                                        "mul",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::clone::Clone",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F ],
                                                                                            [],
                                                                                            "clone",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            operand_is_not_zero
                                                                                          ]
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Sub",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F ],
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ]
                                                                                            ],
                                                                                            "sub",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::Add",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ],
                                                                                                "add",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                                        [
                                                                                                          F
                                                                                                        ]
                                                                                                    ],
                                                                                                    "add",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                          [
                                                                                                            F
                                                                                                          ],
                                                                                                        [
                                                                                                          F
                                                                                                        ],
                                                                                                        "expr",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                          aux1,
                                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                                          "u64_cell"
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          meta
                                                                                                        |)
                                                                                                      ]
                                                                                                    |);
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                          [
                                                                                                            F
                                                                                                          ],
                                                                                                        [
                                                                                                          F
                                                                                                        ],
                                                                                                        "expr",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                          aux2,
                                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                                          "u64_cell"
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          meta
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                Value.StructTuple
                                                                                                  "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::convert::From",
                                                                                                        F,
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "u64"
                                                                                                        ],
                                                                                                        "from",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          M.use
                                                                                                            (M.alloc (|
                                                                                                              Value.Integer
                                                                                                                1
                                                                                                            |))
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                              ]
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "expr",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                lookup_pow_modulus;
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ],
                                                                                        "mul",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          operand_is_not_zero
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Sub",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F ],
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ]
                                                                                            ],
                                                                                            "sub",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "expr",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                lookup_pow_power;
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              M.get_function (|
                                                                                                "delphinus_zkwasm::circuits::rtable::pow_table_power_encode",
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Sub",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                                        [
                                                                                                          F
                                                                                                        ]
                                                                                                    ],
                                                                                                    "sub",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::ops::arith::Sub",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                                          [
                                                                                                            F
                                                                                                          ],
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                                            [
                                                                                                              F
                                                                                                            ]
                                                                                                        ],
                                                                                                        "sub",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                              [
                                                                                                                F
                                                                                                              ],
                                                                                                            [
                                                                                                              F
                                                                                                            ],
                                                                                                            "expr",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            bits;
                                                                                                            M.read (|
                                                                                                              meta
                                                                                                            |)
                                                                                                          ]
                                                                                                        |);
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                              [
                                                                                                                F
                                                                                                              ],
                                                                                                            [
                                                                                                              F
                                                                                                            ],
                                                                                                            "expr",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            result;
                                                                                                            M.read (|
                                                                                                              meta
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      ]
                                                                                                    |);
                                                                                                    Value.StructTuple
                                                                                                      "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                                      [
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::convert::From",
                                                                                                            F,
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "u64"
                                                                                                            ],
                                                                                                            "from",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.read (|
                                                                                                              M.use
                                                                                                                (M.alloc (|
                                                                                                                  Value.Integer
                                                                                                                    1
                                                                                                                |))
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      ]
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      M.match_operator (|
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let constraint :=
                                                                                M.copy (| γ |) in
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::arith::Mul",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ],
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ]
                                                                                  ],
                                                                                  "mul",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    constraint
                                                                                  |);
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                        [ F ],
                                                                                      [ F ],
                                                                                      "expr",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      is_clz;
                                                                                      M.read (|
                                                                                        meta
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |)
                                                                    | _ => M.impossible (||)
                                                                    end))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "op_unary: ctz" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.read (|
                                                    let operand_is_not_zero :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Sub",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ],
                                                            "sub",
                                                            []
                                                          |),
                                                          [
                                                            Value.StructTuple
                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::convert::From",
                                                                    F,
                                                                    [ Ty.path "u64" ],
                                                                    "from",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.use
                                                                        (M.alloc (|
                                                                          Value.Integer 1
                                                                        |))
                                                                    |)
                                                                  ]
                                                                |)
                                                              ];
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                  [ F ],
                                                                [ F ],
                                                                "expr",
                                                                []
                                                              |),
                                                              [ operand_is_zero; M.read (| meta |) ]
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::map::Map")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::vec::into_iter::IntoIter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ])
                                                            ],
                                                          [],
                                                          "collect",
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::vec::into_iter::IntoIter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "map",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ F ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ])
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::collect::IntoIterator",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "into_iter",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ]
                                                                        ],
                                                                      "into_vec",
                                                                      [
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      (* Unsize *)
                                                                      M.pointer_coercion
                                                                        (M.read (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::boxed::Box")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              "new",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.alloc (|
                                                                                Value.Array
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Sub",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ],
                                                                                        "sub",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                              [ F ],
                                                                                            [ F ],
                                                                                            "expr",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            ctz_degree_helper;
                                                                                            M.read (|
                                                                                              meta
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Mul",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F ],
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ]
                                                                                            ],
                                                                                            "mul",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::Mul",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ],
                                                                                                "mul",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                    "expr",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                      aux1,
                                                                                                      "delphinus_zkwasm::circuits::cell::AllocatedU64Cell",
                                                                                                      "u64_cell"
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      meta
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                    "expr",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    lookup_pow_modulus;
                                                                                                    M.read (|
                                                                                                      meta
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            Value.StructTuple
                                                                                              "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::convert::From",
                                                                                                    F,
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u64"
                                                                                                    ],
                                                                                                    "from",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.use
                                                                                                        (M.alloc (|
                                                                                                          Value.Integer
                                                                                                            2
                                                                                                        |))
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ],
                                                                                        "mul",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                              [ F ],
                                                                                            [ F ],
                                                                                            "expr",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            operand_is_zero;
                                                                                            M.read (|
                                                                                              meta
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Sub",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F ],
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ]
                                                                                            ],
                                                                                            "sub",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "expr",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                result;
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "expr",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                bits;
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Mul",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ],
                                                                                        "mul",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          operand_is_not_zero
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Sub",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F ],
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ]
                                                                                            ],
                                                                                            "sub",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::Add",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                                    [
                                                                                                      F
                                                                                                    ]
                                                                                                ],
                                                                                                "add",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                    "expr",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    ctz_degree_helper;
                                                                                                    M.read (|
                                                                                                      meta
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                    "expr",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    lookup_pow_modulus;
                                                                                                    M.read (|
                                                                                                      meta
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "expr",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                operand;
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Sub",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [ F ]
                                                                                        ],
                                                                                        "sub",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                              [ F ],
                                                                                            [ F ],
                                                                                            "expr",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            lookup_pow_power;
                                                                                            M.read (|
                                                                                              meta
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          M.get_function (|
                                                                                            "delphinus_zkwasm::circuits::rtable::pow_table_power_encode",
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                                  [
                                                                                                    F
                                                                                                  ],
                                                                                                [ F
                                                                                                ],
                                                                                                "expr",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                result;
                                                                                                M.read (|
                                                                                                  meta
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      M.match_operator (|
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let constraint :=
                                                                                M.copy (| γ |) in
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::arith::Mul",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ],
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ]
                                                                                  ],
                                                                                  "mul",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    constraint
                                                                                  |);
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                        [ F ],
                                                                                      [ F ],
                                                                                      "expr",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      is_ctz;
                                                                                      M.read (|
                                                                                        meta
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |)
                                                                    | _ => M.impossible (||)
                                                                    end))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "delphinus_zkwasm::circuits::etable::constraint_builder::ConstraintBuilder")
                              [ F ],
                            "push",
                            []
                          |),
                          [
                            M.read (| constraint_builder |);
                            M.read (| Value.String "op_unary: lookup popcnt" |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCells")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]);
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let meta := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::vec::into_iter::IntoIter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ])
                                                        ],
                                                      [],
                                                      "collect",
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::vec::into_iter::IntoIter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          "map",
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ])
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "into_iter",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                  "into_vec",
                                                                  [ Ty.path "alloc::alloc::Global" ]
                                                                |),
                                                                [
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.read (|
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::boxed::Box")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          "new",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.alloc (|
                                                                            Value.Array
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Sub",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "sub",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          lookup_popcnt,
                                                                                          "delphinus_zkwasm::circuits::etable::allocator::AllocatedBitTableLookupCells",
                                                                                          "op"
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    Value.StructTuple
                                                                                      "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::convert::From",
                                                                                            F,
                                                                                            [
                                                                                              Ty.path
                                                                                                "u64"
                                                                                            ],
                                                                                            "from",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.rust_cast
                                                                                              (M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "delphinus_zkwasm::circuits::bit_table::BitTableOp",
                                                                                                  "index",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.alloc (|
                                                                                                    Value.StructTuple
                                                                                                      "delphinus_zkwasm::circuits::bit_table::BitTableOp::Popcnt"
                                                                                                      []
                                                                                                  |)
                                                                                                ]
                                                                                              |))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Sub",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "sub",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          lookup_popcnt,
                                                                                          "delphinus_zkwasm::circuits::etable::allocator::AllocatedBitTableLookupCells",
                                                                                          "left"
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        operand;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Sub",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [ F ],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ],
                                                                                    "sub",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          lookup_popcnt,
                                                                                          "delphinus_zkwasm::circuits::etable::allocator::AllocatedBitTableLookupCells",
                                                                                          "result"
                                                                                        |);
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                                          [ F ],
                                                                                        [ F ],
                                                                                        "expr",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        result;
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |))
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let constraint :=
                                                                            M.copy (| γ |) in
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::arith::Mul",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ]
                                                                              ],
                                                                              "mul",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                constraint
                                                                              |);
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                                    [ F ],
                                                                                  [ F ],
                                                                                  "expr",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  is_popcnt;
                                                                                  M.read (| meta |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      (* Unsize *)
                      M.pointer_coercion
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [
                                Ty.apply
                                  (Ty.path
                                    "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig")
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [
                            Value.StructRecord
                              "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig"
                              [
                                ("operand_inv", M.read (| operand_inv |));
                                ("bits", M.read (| bits |));
                                ("operand_is_zero", M.read (| operand_is_zero |));
                                ("is_ctz", M.read (| is_ctz |));
                                ("is_clz", M.read (| is_clz |));
                                ("is_popcnt", M.read (| is_popcnt |));
                                ("is_i32", M.read (| is_i32 |));
                                ("aux1", M.read (| aux1 |));
                                ("aux2", M.read (| aux2 |));
                                ("lookup_pow_modulus", M.read (| lookup_pow_modulus |));
                                ("lookup_pow_power", M.read (| lookup_pow_power |));
                                ("ctz_degree_helper", M.read (| ctz_degree_helper |));
                                ("bit_table_lookup", M.read (| lookup_popcnt |));
                                ("memory_table_lookup_stack_read",
                                  M.read (| memory_table_lookup_stack_read |));
                                ("memory_table_lookup_stack_write",
                                  M.read (| memory_table_lookup_stack_write |))
                              ]
                          ]
                        |))
                    |)
                  |))))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfigBuilder"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *) [ ("configure", InstanceField.Method (configure F)) ].
        End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfigBuilder_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_unary_UnaryConfigBuilder.
        
        Module Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_unary_UnaryConfig_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig")
              [ F ].
          
          (*
              fn opcode(&self, meta: &mut VirtualCells<'_, F>) -> Expression<F> {
                  macro_rules! op_expr {
                      ($op: expr, $field: ident) => {
                          self.$field.expr(meta)
                              * constant!(bn_to_field(
                                  &(BigUint::from($op as u64) << OPCODE_ARG0_SHIFT)
                              ))
                      };
                  }
          
                  let opcode_class = constant!(bn_to_field(
                      &(BigUint::from(OpcodeClass::Unary as u64) << OPCODE_CLASS_SHIFT)
                  ));
                  let var_type = self.is_i32.expr(meta)
                      * constant!(bn_to_field(&(BigUint::from(1u64) << OPCODE_ARG1_SHIFT)));
                  let op = op_expr!(UnaryOp::Ctz, is_ctz)
                      + op_expr!(UnaryOp::Clz, is_clz)
                      + op_expr!(UnaryOp::Popcnt, is_popcnt);
          
                  opcode_class + var_type + op
              }
          *)
          Definition opcode (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let meta := M.alloc (| meta |) in
                M.read (|
                  let opcode_class :=
                    M.alloc (|
                      Value.StructTuple
                        "halo2_proofs::plonk::circuit::Expression::Constant"
                        [
                          M.call_closure (|
                            M.get_function (|
                              "delphinus_zkwasm::circuits::utils::bn_to_field",
                              [ F ]
                            |),
                            [
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::bit::Shl",
                                    Ty.path "num_bigint::biguint::BigUint",
                                    [ Ty.path "u32" ],
                                    "shl",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::From",
                                        Ty.path "num_bigint::biguint::BigUint",
                                        [ Ty.path "u64" ],
                                        "from",
                                        []
                                      |),
                                      [
                                        M.rust_cast
                                          (BinOp.Panic.add (|
                                            Integer.Isize,
                                            M.get_constant (|
                                              "specs::itable::OpcodeClass::LocalGet_discriminant"
                                            |),
                                            Value.Integer 10
                                          |))
                                      ]
                                    |);
                                    M.read (|
                                      M.get_constant (| "specs::itable::OPCODE_CLASS_SHIFT" |)
                                    |)
                                  ]
                                |)
                              |)
                            ]
                          |)
                        ]
                    |) in
                  let var_type :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                          [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                          "mul",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "delphinus_zkwasm::circuits::cell::CellExpression",
                              Ty.apply
                                (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                [ F ],
                              [ F ],
                              "expr",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                "is_i32"
                              |);
                              M.read (| meta |)
                            ]
                          |);
                          Value.StructTuple
                            "halo2_proofs::plonk::circuit::Expression::Constant"
                            [
                              M.call_closure (|
                                M.get_function (|
                                  "delphinus_zkwasm::circuits::utils::bn_to_field",
                                  [ F ]
                                |),
                                [
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::bit::Shl",
                                        Ty.path "num_bigint::biguint::BigUint",
                                        [ Ty.path "u32" ],
                                        "shl",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::convert::From",
                                            Ty.path "num_bigint::biguint::BigUint",
                                            [ Ty.path "u64" ],
                                            "from",
                                            []
                                          |),
                                          [ Value.Integer 1 ]
                                        |);
                                        M.read (|
                                          M.get_constant (| "specs::itable::OPCODE_ARG1_SHIFT" |)
                                        |)
                                      ]
                                    |)
                                  |)
                                ]
                              |)
                            ]
                        ]
                      |)
                    |) in
                  let op :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::arith::Add",
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                          [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                          "add",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::arith::Add",
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                              [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                              ],
                              "add",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::arith::Mul",
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ],
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ]
                                  ],
                                  "mul",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                      Ty.apply
                                        (Ty.path
                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                        [ F ],
                                      [ F ],
                                      "expr",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                        "is_ctz"
                                      |);
                                      M.read (| meta |)
                                    ]
                                  |);
                                  Value.StructTuple
                                    "halo2_proofs::plonk::circuit::Expression::Constant"
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "delphinus_zkwasm::circuits::utils::bn_to_field",
                                          [ F ]
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::bit::Shl",
                                                Ty.path "num_bigint::biguint::BigUint",
                                                [ Ty.path "u32" ],
                                                "shl",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    Ty.path "num_bigint::biguint::BigUint",
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [ M.rust_cast (Value.Integer 0) ]
                                                |);
                                                M.read (|
                                                  M.get_constant (|
                                                    "specs::itable::OPCODE_ARG0_SHIFT"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                ]
                              |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::arith::Mul",
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ],
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ]
                                  ],
                                  "mul",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                      Ty.apply
                                        (Ty.path
                                          "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                        [ F ],
                                      [ F ],
                                      "expr",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                        "is_clz"
                                      |);
                                      M.read (| meta |)
                                    ]
                                  |);
                                  Value.StructTuple
                                    "halo2_proofs::plonk::circuit::Expression::Constant"
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "delphinus_zkwasm::circuits::utils::bn_to_field",
                                          [ F ]
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::bit::Shl",
                                                Ty.path "num_bigint::biguint::BigUint",
                                                [ Ty.path "u32" ],
                                                "shl",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::convert::From",
                                                    Ty.path "num_bigint::biguint::BigUint",
                                                    [ Ty.path "u64" ],
                                                    "from",
                                                    []
                                                  |),
                                                  [ M.rust_cast (Value.Integer 1) ]
                                                |);
                                                M.read (|
                                                  M.get_constant (|
                                                    "specs::itable::OPCODE_ARG0_SHIFT"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                ]
                              |)
                            ]
                          |);
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::arith::Mul",
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                              [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ]
                              ],
                              "mul",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "delphinus_zkwasm::circuits::cell::CellExpression",
                                  Ty.apply
                                    (Ty.path "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                    [ F ],
                                  [ F ],
                                  "expr",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                    "is_popcnt"
                                  |);
                                  M.read (| meta |)
                                ]
                              |);
                              Value.StructTuple
                                "halo2_proofs::plonk::circuit::Expression::Constant"
                                [
                                  M.call_closure (|
                                    M.get_function (|
                                      "delphinus_zkwasm::circuits::utils::bn_to_field",
                                      [ F ]
                                    |),
                                    [
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::bit::Shl",
                                            Ty.path "num_bigint::biguint::BigUint",
                                            [ Ty.path "u32" ],
                                            "shl",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::convert::From",
                                                Ty.path "num_bigint::biguint::BigUint",
                                                [ Ty.path "u64" ],
                                                "from",
                                                []
                                              |),
                                              [ M.rust_cast (Value.Integer 2) ]
                                            |);
                                            M.read (|
                                              M.get_constant (|
                                                "specs::itable::OPCODE_ARG0_SHIFT"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                        [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                        "add",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                            [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ] ],
                            "add",
                            []
                          |),
                          [ M.read (| opcode_class |); M.read (| var_type |) ]
                        |);
                        M.read (| op |)
                      ]
                    |)
                  |)
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn assign(
                  &self,
                  ctx: &mut Context<'_, F>,
                  step: &StepStatus,
                  entry: &EventTableEntryWithMemoryInfo,
              ) -> Result<(), Error> {
                  match &entry.eentry.step_info {
                      StepInfo::UnaryOp {
                          class,
                          vtype,
                          operand,
                          result,
                      } => {
                          self.is_i32.assign_bool(ctx, *vtype == VarType::I32)?;
          
                          self.operand_inv
                              .assign(ctx, F::from( *operand).invert().unwrap_or(F::zero()))?;
                          self.operand_is_zero.assign_bool(ctx, *operand == 0)?;
          
                          let (bits, max) = if *vtype == VarType::I32 {
                              (32, 1u128 << 32)
                          } else {
                              (64, 1u128 << 64)
                          };
                          self.bits.assign(ctx, F::from(bits))?;
          
                          match class {
                              UnaryOp::Ctz => {
                                  self.is_ctz.assign_bool(ctx, true)?;
          
                                  /*
                                   * 0000 0100 0000 1000
                                   * |____________| |__|
                                   *  hd            boundary
                                   *
                                   */
                                  let least_one_pos = *result;
                                  let hd = ( *operand)
                                      .checked_shr(least_one_pos as u32 + 1)
                                      .unwrap_or(0);
                                  let boundary = bn_to_field(&BigUint::from(1u128 << least_one_pos));
          
                                  self.aux1.assign(ctx, hd)?;
                                  self.lookup_pow_modulus.assign(ctx, boundary)?;
                                  self.lookup_pow_power.assign(
                                      ctx,
                                      bn_to_field(&pow_table_power_encode(BigUint::from(least_one_pos))),
                                  )?;
          
                                  self.ctz_degree_helper
                                      .assign(ctx, F::from(hd) * boundary * F::from(2))?;
                              }
                              UnaryOp::Clz => {
                                  self.is_clz.assign_bool(ctx, true)?;
          
                                  /*
                                   * operand:
                                   *   0000 0100 0000 1000
                                   * aux1: tail of operand
                                   *    i.e.  00 0000 1000
                                   * boundary: operand minus tail
                                   *    i.e. 100 0000 0000
                                   * aux2: make sure aux1(tail) is less than boundary
                                   *    boundary - aux1 - 1
                                   */
                                  let boundary = max.checked_shr(1 + *result as u32).unwrap_or(0) as u64;
                                  let tail = *operand ^ boundary;
          
                                  self.lookup_pow_modulus
                                      .assign(ctx, F::from(boundary as u64))?;
                                  self.aux1.assign(ctx, tail)?;
                                  // If `operand = 0``, then `boundary == tail == 0`` and therefore `- 1` will panic in debug mode.
                                  // Since `aux2`` is useless when `operand = 0`, we give 0.
                                  let aux2 = (boundary - tail).checked_sub(1).unwrap_or(0);
                                  self.aux2.assign(ctx, aux2)?;
                                  if boundary != 0 {
                                      self.lookup_pow_modulus.assign(ctx, boundary.into())?;
                                      self.lookup_pow_power.assign(
                                          ctx,
                                          bn_to_field(&pow_table_power_encode(BigUint::from(
                                              bits - *result - 1,
                                          ))),
                                      )?;
                                  }
                              }
                              UnaryOp::Popcnt => {
                                  self.is_popcnt.assign_bool(ctx, true)?;
          
                                  self.bit_table_lookup.assign(
                                      ctx,
                                      BitTableOp::Popcnt,
                                      *operand,
                                      0,
                                      *result,
                                  )?;
                              }
                          }
          
                          self.memory_table_lookup_stack_read.assign(
                              ctx,
                              entry.memory_rw_entires[0].start_eid,
                              step.current.eid,
                              entry.memory_rw_entires[0].end_eid,
                              step.current.sp + 1,
                              LocationType::Stack,
                              *vtype == VarType::I32,
                              *operand,
                          )?;
          
                          self.memory_table_lookup_stack_write.assign(
                              ctx,
                              step.current.eid,
                              entry.memory_rw_entires[1].end_eid,
                              step.current.sp + 1,
                              LocationType::Stack,
                              *vtype == VarType::I32,
                              *result as u32 as u64,
                          )?;
          
                          Ok(())
                      }
          
                      _ => unreachable!(),
                  }
              }
          *)
          Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; ctx; step; entry ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let ctx := M.alloc (| ctx |) in
                let step := M.alloc (| step |) in
                let entry := M.alloc (| entry |) in
                M.catch_return (|
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        M.alloc (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| entry |),
                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                              "eentry"
                            |),
                            "specs::etable::EventTableEntry",
                            "step_info"
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::UnaryOp",
                                  "class"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::UnaryOp",
                                  "vtype"
                                |) in
                              let γ1_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::UnaryOp",
                                  "operand"
                                |) in
                              let γ1_3 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "specs::step::StepInfo::UnaryOp",
                                  "result"
                                |) in
                              let class := M.alloc (| γ1_0 |) in
                              let vtype := M.alloc (| γ1_1 |) in
                              let operand := M.alloc (| γ1_2 |) in
                              let result := M.alloc (| γ1_3 |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                              [ F ],
                                            [ F ],
                                            "assign_bool",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                              "is_i32"
                                            |);
                                            M.read (| ctx |);
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::cmp::PartialEq",
                                                Ty.path "specs::mtable::VarType",
                                                [ Ty.path "specs::mtable::VarType" ],
                                                "eq",
                                                []
                                              |),
                                              [
                                                M.read (| vtype |);
                                                M.alloc (|
                                                  Value.StructTuple "specs::mtable::VarType::I32" []
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                              [ F ],
                                            [ F ],
                                            "assign",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                              "operand_inv"
                                            |);
                                            M.read (| ctx |);
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "subtle::CtOption") [ F ],
                                                "unwrap_or",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "ff::Field",
                                                    F,
                                                    [],
                                                    "invert",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::convert::From",
                                                          F,
                                                          [ Ty.path "u64" ],
                                                          "from",
                                                          []
                                                        |),
                                                        [ M.read (| M.read (| operand |) |) ]
                                                      |)
                                                    |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "ff::Field",
                                                    F,
                                                    [],
                                                    "zero",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::circuit::AssignedCell")
                                              [ F; F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "delphinus_zkwasm::circuits::cell::CellExpression",
                                            Ty.apply
                                              (Ty.path
                                                "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                              [ F ],
                                            [ F ],
                                            "assign_bool",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                              "operand_is_zero"
                                            |);
                                            M.read (| ctx |);
                                            BinOp.Pure.eq
                                              (M.read (| M.read (| operand |) |))
                                              (Value.Integer 0)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              M.match_operator (|
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::cmp::PartialEq",
                                                  Ty.path "specs::mtable::VarType",
                                                  [ Ty.path "specs::mtable::VarType" ],
                                                  "eq",
                                                  []
                                                |),
                                                [
                                                  M.read (| vtype |);
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "specs::mtable::VarType::I32"
                                                      []
                                                  |)
                                                ]
                                              |)
                                            |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          Value.Tuple
                                            [
                                              Value.Integer 32;
                                              BinOp.Panic.shl (|
                                                Value.Integer 1,
                                                Value.Integer 32
                                              |)
                                            ]
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          Value.Tuple
                                            [
                                              Value.Integer 64;
                                              BinOp.Panic.shl (|
                                                Value.Integer 1,
                                                Value.Integer 64
                                              |)
                                            ]
                                        |)))
                                  ]
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let bits := M.copy (| γ0_0 |) in
                                      let max := M.copy (| γ0_1 |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::circuit::AssignedCell")
                                                      [ F; F ];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "delphinus_zkwasm::circuits::cell::CellExpression",
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                      [ F ],
                                                    [ F ],
                                                    "assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                      "bits"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::From",
                                                        F,
                                                        [ Ty.path "u64" ],
                                                        "from",
                                                        []
                                                      |),
                                                      [ M.read (| bits |) ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          class,
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign_bool",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                "is_ctz"
                                                              |);
                                                              M.read (| ctx |);
                                                              Value.Bool true
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |) in
                                                let least_one_pos :=
                                                  M.copy (| M.read (| result |) |) in
                                                let hd :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [ Ty.path "u64" ],
                                                        "unwrap_or",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path "u64",
                                                            "checked_shr",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| M.read (| operand |) |);
                                                            BinOp.Panic.add (|
                                                              Integer.U32,
                                                              M.rust_cast
                                                                (M.read (| least_one_pos |)),
                                                              Value.Integer 1
                                                            |)
                                                          ]
                                                        |);
                                                        Value.Integer 0
                                                      ]
                                                    |)
                                                  |) in
                                                let boundary :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_function (|
                                                        "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                        [ F ]
                                                      |),
                                                      [
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::From",
                                                              Ty.path
                                                                "num_bigint::biguint::BigUint",
                                                              [ Ty.path "u128" ],
                                                              "from",
                                                              []
                                                            |),
                                                            [
                                                              BinOp.Panic.shl (|
                                                                Value.Integer 1,
                                                                M.read (| least_one_pos |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                "aux1"
                                                              |);
                                                              M.read (| ctx |);
                                                              M.read (| hd |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                "lookup_pow_modulus"
                                                              |);
                                                              M.read (| ctx |);
                                                              M.read (| boundary |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                "lookup_pow_power"
                                                              |);
                                                              M.read (| ctx |);
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                  [ F ]
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_function (|
                                                                        "delphinus_zkwasm::circuits::rtable::pow_table_power_encode",
                                                                        [
                                                                          Ty.path
                                                                            "num_bigint::biguint::BigUint"
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::convert::From",
                                                                            Ty.path
                                                                              "num_bigint::biguint::BigUint",
                                                                            [ Ty.path "u64" ],
                                                                            "from",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (|
                                                                              least_one_pos
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                "ctz_degree_helper"
                                                              |);
                                                              M.read (| ctx |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  F,
                                                                  [ F ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Mul",
                                                                      F,
                                                                      [ F ],
                                                                      "mul",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::convert::From",
                                                                          F,
                                                                          [ Ty.path "u64" ],
                                                                          "from",
                                                                          []
                                                                        |),
                                                                        [ M.read (| hd |) ]
                                                                      |);
                                                                      M.read (| boundary |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::convert::From",
                                                                      F,
                                                                      [ Ty.path "u64" ],
                                                                      "from",
                                                                      []
                                                                    |),
                                                                    [ Value.Integer 2 ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign_bool",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                "is_clz"
                                                              |);
                                                              M.read (| ctx |);
                                                              Value.Bool true
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |) in
                                                let boundary :=
                                                  M.alloc (|
                                                    M.rust_cast
                                                      (M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [ Ty.path "u128" ],
                                                          "unwrap_or",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "u128",
                                                              "checked_shr",
                                                              []
                                                            |),
                                                            [
                                                              M.read (| max |);
                                                              BinOp.Panic.add (|
                                                                Integer.U32,
                                                                Value.Integer 1,
                                                                M.rust_cast
                                                                  (M.read (| M.read (| result |) |))
                                                              |)
                                                            ]
                                                          |);
                                                          Value.Integer 0
                                                        ]
                                                      |))
                                                  |) in
                                                let tail :=
                                                  M.alloc (|
                                                    BinOp.Pure.bit_xor
                                                      (M.read (| M.read (| operand |) |))
                                                      (M.read (| boundary |))
                                                  |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                "lookup_pow_modulus"
                                                              |);
                                                              M.read (| ctx |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::convert::From",
                                                                  F,
                                                                  [ Ty.path "u64" ],
                                                                  "from",
                                                                  []
                                                                |),
                                                                [ M.read (| M.use boundary |) ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                "aux1"
                                                              |);
                                                              M.read (| ctx |);
                                                              M.read (| tail |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |) in
                                                let aux2 :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [ Ty.path "u64" ],
                                                        "unwrap_or",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path "u64",
                                                            "checked_sub",
                                                            []
                                                          |),
                                                          [
                                                            BinOp.Panic.sub (|
                                                              Integer.U64,
                                                              M.read (| boundary |),
                                                              M.read (| tail |)
                                                            |);
                                                            Value.Integer 1
                                                          ]
                                                        |);
                                                        Value.Integer 0
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedU64Cell")
                                                                [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                "aux2"
                                                              |);
                                                              M.read (| ctx |);
                                                              M.read (| aux2 |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |) in
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              BinOp.Pure.ne
                                                                (M.read (| boundary |))
                                                                (Value.Integer 0)
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        let _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::Try",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::AssignedCell")
                                                                        [ F; F ];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [],
                                                                  "branch",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                        [ F ],
                                                                      [ F ],
                                                                      "assign",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| self |),
                                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                        "lookup_pow_modulus"
                                                                      |);
                                                                      M.read (| ctx |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::convert::Into",
                                                                          Ty.path "u64",
                                                                          [ F ],
                                                                          "into",
                                                                          []
                                                                        |),
                                                                        [ M.read (| boundary |) ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                      0
                                                                    |) in
                                                                  let residual :=
                                                                    M.copy (| γ0_0 |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::try_trait::FromResidual",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::convert::Infallible";
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                  ]
                                                                              ],
                                                                              "from_residual",
                                                                              []
                                                                            |),
                                                                            [ M.read (| residual |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                      0
                                                                    |) in
                                                                  let val := M.copy (| γ0_0 |) in
                                                                  val))
                                                            ]
                                                          |) in
                                                        let _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::Try",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::AssignedCell")
                                                                        [ F; F ];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [],
                                                                  "branch",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "delphinus_zkwasm::circuits::cell::CellExpression",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "delphinus_zkwasm::circuits::cell::AllocatedUnlimitedCell")
                                                                        [ F ],
                                                                      [ F ],
                                                                      "assign",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| self |),
                                                                        "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                        "lookup_pow_power"
                                                                      |);
                                                                      M.read (| ctx |);
                                                                      M.call_closure (|
                                                                        M.get_function (|
                                                                          "delphinus_zkwasm::circuits::utils::bn_to_field",
                                                                          [ F ]
                                                                        |),
                                                                        [
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_function (|
                                                                                "delphinus_zkwasm::circuits::rtable::pow_table_power_encode",
                                                                                [
                                                                                  Ty.path
                                                                                    "num_bigint::biguint::BigUint"
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::From",
                                                                                    Ty.path
                                                                                      "num_bigint::biguint::BigUint",
                                                                                    [ Ty.path "u64"
                                                                                    ],
                                                                                    "from",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    BinOp.Panic.sub (|
                                                                                      Integer.U64,
                                                                                      BinOp.Panic.sub (|
                                                                                        Integer.U64,
                                                                                        M.read (|
                                                                                          bits
                                                                                        |),
                                                                                        M.read (|
                                                                                          M.read (|
                                                                                            result
                                                                                          |)
                                                                                        |)
                                                                                      |),
                                                                                      Value.Integer
                                                                                        1
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                      0
                                                                    |) in
                                                                  let residual :=
                                                                    M.copy (| γ0_0 |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::try_trait::FromResidual",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::convert::Infallible";
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                  ]
                                                                              ],
                                                                              "from_residual",
                                                                              []
                                                                            |),
                                                                            [ M.read (| residual |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                      0
                                                                    |) in
                                                                  let val := M.copy (| γ0_0 |) in
                                                                  val))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::circuit::AssignedCell")
                                                                [ F; F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "delphinus_zkwasm::circuits::cell::CellExpression",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::cell::AllocatedBitCell")
                                                                [ F ],
                                                              [ F ],
                                                              "assign_bool",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                "is_popcnt"
                                                              |);
                                                              M.read (| ctx |);
                                                              Value.Bool true
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "delphinus_zkwasm::circuits::etable::allocator::AllocatedBitTableLookupCells")
                                                                [ F ],
                                                              "assign",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| self |),
                                                                "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                                "bit_table_lookup"
                                                              |);
                                                              M.read (| ctx |);
                                                              Value.StructTuple
                                                                "delphinus_zkwasm::circuits::bit_table::BitTableOp::Popcnt"
                                                                [];
                                                              M.read (| M.read (| operand |) |);
                                                              Value.Integer 0;
                                                              M.read (| M.read (| result |) |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupReadCell")
                                                      [ F ],
                                                    "assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                      "memory_table_lookup_stack_read"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| entry |),
                                                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                              "memory_rw_entires"
                                                            |);
                                                            Value.Integer 0
                                                          ]
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                        "start_eid"
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| step |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                            "current"
                                                          |)
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                        "eid"
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| entry |),
                                                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                              "memory_rw_entires"
                                                            |);
                                                            Value.Integer 0
                                                          ]
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                        "end_eid"
                                                      |)
                                                    |);
                                                    BinOp.Panic.add (|
                                                      Integer.U32,
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| step |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                              "current"
                                                            |)
                                                          |),
                                                          "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                          "sp"
                                                        |)
                                                      |),
                                                      Value.Integer 1
                                                    |);
                                                    Value.StructTuple
                                                      "specs::mtable::LocationType::Stack"
                                                      [];
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialEq",
                                                        Ty.path "specs::mtable::VarType",
                                                        [ Ty.path "specs::mtable::VarType" ],
                                                        "eq",
                                                        []
                                                      |),
                                                      [
                                                        M.read (| vtype |);
                                                        M.alloc (|
                                                          Value.StructTuple
                                                            "specs::mtable::VarType::I32"
                                                            []
                                                        |)
                                                      ]
                                                    |);
                                                    M.read (| M.read (| operand |) |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.tuple [];
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "delphinus_zkwasm::circuits::etable::allocator::AllocatedMemoryTableLookupWriteCell")
                                                      [ F ],
                                                    "assign",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "delphinus_zkwasm::circuits::etable::op_configure::op_unary::UnaryConfig",
                                                      "memory_table_lookup_stack_write"
                                                    |);
                                                    M.read (| ctx |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| step |),
                                                            "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                            "current"
                                                          |)
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                        "eid"
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| entry |),
                                                              "delphinus_zkwasm::circuits::utils::table_entry::EventTableEntryWithMemoryInfo",
                                                              "memory_rw_entires"
                                                            |);
                                                            Value.Integer 1
                                                          ]
                                                        |),
                                                        "delphinus_zkwasm::circuits::utils::table_entry::MemoryRWEntry",
                                                        "end_eid"
                                                      |)
                                                    |);
                                                    BinOp.Panic.add (|
                                                      Integer.U32,
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| step |),
                                                              "delphinus_zkwasm::circuits::utils::step_status::StepStatus",
                                                              "current"
                                                            |)
                                                          |),
                                                          "delphinus_zkwasm::circuits::utils::step_status::Status",
                                                          "sp"
                                                        |)
                                                      |),
                                                      Value.Integer 1
                                                    |);
                                                    Value.StructTuple
                                                      "specs::mtable::LocationType::Stack"
                                                      [];
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialEq",
                                                        Ty.path "specs::mtable::VarType",
                                                        [ Ty.path "specs::mtable::VarType" ],
                                                        "eq",
                                                        []
                                                      |),
                                                      [
                                                        M.read (| vtype |);
                                                        M.alloc (|
                                                          Value.StructTuple
                                                            "specs::mtable::VarType::I32"
                                                            []
                                                        |)
                                                      ]
                                                    |);
                                                    M.rust_cast
                                                      (M.rust_cast
                                                        (M.read (| M.read (| result |) |)))
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "core::result::Result::Ok"
                                          [ Value.Tuple [] ]
                                      |)))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    M.get_function (| "core::panicking::panic", [] |),
                                    [
                                      M.read (|
                                        Value.String "internal error: entered unreachable code"
                                      |)
                                    ]
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)))
                |)))
            | _, _ => M.impossible
            end.
          
          (*
              fn mops(&self, _meta: &mut VirtualCells<'_, F>) -> Option<Expression<F>> {
                  Some(constant_from!(1))
              }
          *)
          Definition mops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; _meta ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let _meta := M.alloc (| _meta |) in
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    Value.StructTuple
                      "halo2_proofs::plonk::circuit::Expression::Constant"
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::convert::From",
                            F,
                            [ Ty.path "u64" ],
                            "from",
                            []
                          |),
                          [ M.read (| M.use (M.alloc (| Value.Integer 1 |)) |) ]
                        |)
                      ]
                  ]))
            | _, _ => M.impossible
            end.
          
          (*
              fn memory_writing_ops(&self, _: &EventTableEntry) -> u32 {
                  1
              }
          *)
          Definition memory_writing_ops (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match τ, α with
            | [], [ self; β1 ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let β1 := M.alloc (| β1 |) in
                M.match_operator (| β1, [ fun γ => ltac:(M.monadic (Value.Integer 1)) ] |)))
            | _, _ => M.impossible
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "delphinus_zkwasm::circuits::etable::EventTableOpcodeConfig"
              (Self F)
              (* Trait polymorphic types *) [ (* F *) F ]
              (* Instance *)
              [
                ("opcode", InstanceField.Method (opcode F));
                ("assign", InstanceField.Method (assign F));
                ("mops", InstanceField.Method (mops F));
                ("memory_writing_ops", InstanceField.Method (memory_writing_ops F))
              ].
        End Impl_delphinus_zkwasm_circuits_etable_EventTableOpcodeConfig_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_etable_op_configure_op_unary_UnaryConfig_F.
      End op_unary.
    End op_configure.
  End etable.
End circuits.
