(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module external_host_call_table.
    Module assign.
      Module Impl_delphinus_zkwasm_circuits_external_host_call_table_ExternalHostCallChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallChip")
            [ F ].
        
        (*
            pub(in crate::circuits) fn assign(
                self,
                layouter: impl Layouter<F>,
                table: &ExternalHostCallTable,
            ) -> Result<(), Error> {
                layouter.assign_region(
                    || "foreign table",
                    |region| {
                        // Assign Fixed Column
                        {
                            for offset in 0..self.maximal_available_rows {
                                region.assign_fixed(
                                    || "external host call idx",
                                    self.config.idx,
                                    offset,
                                    || Ok(F::from(offset as u64)),
                                )?;
                            }
                        }
        
                        // Assign Advice Columns
                        {
                            let mut offset = 0;
        
                            {
                                region.assign_advice(
                                    || "external host call opcode",
                                    self.config.opcode,
                                    offset,
                                    || Ok(F::zero()),
                                )?;
        
                                region.assign_advice(
                                    || "external host call operand",
                                    self.config.operand,
                                    offset,
                                    || Ok(F::zero()),
                                )?;
                            }
        
                            offset += 1;
        
                            for entry in table.entries() {
                                region.assign_advice(
                                    || "external host call opcode",
                                    self.config.opcode,
                                    offset,
                                    || Ok(F::from(entry.op as u64)),
                                )?;
        
                                region.assign_advice(
                                    || "external host call operand",
                                    self.config.operand,
                                    offset,
                                    || Ok(F::from(entry.value)),
                                )?;
        
                                offset += 1;
                            }
                        }
        
                        Ok(())
                    },
                )?;
        
                Ok(())
            }
        *)
        Definition assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_Layouter_F_ ], [ self; layouter; table ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let layouter := M.alloc (| layouter |) in
              let table := M.alloc (| table |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "halo2_proofs::circuit::Layouter",
                                  impl_Layouter_F_,
                                  [ F ],
                                  "assign_region",
                                  [
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::circuit::Region")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                        ]);
                                    Ty.tuple [];
                                    Ty.function
                                      [ Ty.tuple [] ]
                                      (Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                                    Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                  ]
                                |),
                                [
                                  layouter;
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.read (| Value.String "foreign table" |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end));
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let region := M.copy (| γ |) in
                                                  M.read (|
                                                    let _ :=
                                                      M.use
                                                        (M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::IntoIterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::Range")
                                                                  [ Ty.path "usize" ],
                                                                [],
                                                                "into_iter",
                                                                []
                                                              |),
                                                              [
                                                                Value.StructRecord
                                                                  "core::ops::range::Range"
                                                                  [
                                                                    ("start", Value.Integer 0);
                                                                    ("end_",
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          self,
                                                                          "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallChip",
                                                                          "maximal_available_rows"
                                                                        |)
                                                                      |))
                                                                  ]
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let iter := M.copy (| γ |) in
                                                                M.loop (|
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.match_operator (|
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::ops::range::Range")
                                                                                [ Ty.path "usize" ],
                                                                              [],
                                                                              "next",
                                                                              []
                                                                            |),
                                                                            [ iter ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.alloc (|
                                                                                M.never_to_any (|
                                                                                  M.read (|
                                                                                    M.break (||)
                                                                                  |)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let offset :=
                                                                                M.copy (| γ0_0 |) in
                                                                              let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::Try",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::AssignedCell")
                                                                                              [ F; F
                                                                                              ];
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                          ],
                                                                                        [],
                                                                                        "branch",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::Region")
                                                                                              [ F ],
                                                                                            "assign_fixed",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]);
                                                                                              F;
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]);
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              region
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.read (|
                                                                                                              Value.String
                                                                                                                "external host call idx"
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end));
                                                                                            M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  self,
                                                                                                  "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallChip",
                                                                                                  "config"
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallTableConfig",
                                                                                                "idx"
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              offset
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (Value.StructTuple
                                                                                                              "core::result::Result::Ok"
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::convert::From",
                                                                                                                    F,
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                    "from",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.rust_cast
                                                                                                                      (M.read (|
                                                                                                                        offset
                                                                                                                      |))
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              residual :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                            0
                                                                                          |) in
                                                                                        let val :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        val))
                                                                                  ]
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                                |)))
                                                          ]
                                                        |)) in
                                                    let _ :=
                                                      let offset := M.alloc (| Value.Integer 0 |) in
                                                      let _ :=
                                                        let _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::Try",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::AssignedCell")
                                                                        [ F; F ];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [],
                                                                  "branch",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::Region")
                                                                        [ F ],
                                                                      "assign_advice",
                                                                      [
                                                                        Ty.function
                                                                          [ Ty.tuple [] ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              F;
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::error::Error"
                                                                            ]);
                                                                        F;
                                                                        Ty.function
                                                                          [ Ty.tuple [] ]
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            [ Ty.path "str" ]);
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.path "str" ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| region |);
                                                                      M.closure
                                                                        (fun γ =>
                                                                          ltac:(M.monadic
                                                                            match γ with
                                                                            | [ α0 ] =>
                                                                              M.match_operator (|
                                                                                M.alloc (| α0 |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (M.read (|
                                                                                        Value.String
                                                                                          "external host call opcode"
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            | _ => M.impossible (||)
                                                                            end));
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            self,
                                                                            "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallChip",
                                                                            "config"
                                                                          |),
                                                                          "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallTableConfig",
                                                                          "opcode"
                                                                        |)
                                                                      |);
                                                                      M.read (| offset |);
                                                                      M.closure
                                                                        (fun γ =>
                                                                          ltac:(M.monadic
                                                                            match γ with
                                                                            | [ α0 ] =>
                                                                              M.match_operator (|
                                                                                M.alloc (| α0 |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (Value.StructTuple
                                                                                        "core::result::Result::Ok"
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "ff::Field",
                                                                                              F,
                                                                                              [],
                                                                                              "zero",
                                                                                              []
                                                                                            |),
                                                                                            []
                                                                                          |)
                                                                                        ]))
                                                                                ]
                                                                              |)
                                                                            | _ => M.impossible (||)
                                                                            end))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                      0
                                                                    |) in
                                                                  let residual :=
                                                                    M.copy (| γ0_0 |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::try_trait::FromResidual",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::convert::Infallible";
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                  ]
                                                                              ],
                                                                              "from_residual",
                                                                              []
                                                                            |),
                                                                            [ M.read (| residual |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                      0
                                                                    |) in
                                                                  let val := M.copy (| γ0_0 |) in
                                                                  val))
                                                            ]
                                                          |) in
                                                        let _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::Try",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::AssignedCell")
                                                                        [ F; F ];
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ],
                                                                  [],
                                                                  "branch",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::circuit::Region")
                                                                        [ F ],
                                                                      "assign_advice",
                                                                      [
                                                                        Ty.function
                                                                          [ Ty.tuple [] ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              F;
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::error::Error"
                                                                            ]);
                                                                        F;
                                                                        Ty.function
                                                                          [ Ty.tuple [] ]
                                                                          (Ty.apply
                                                                            (Ty.path "&")
                                                                            [ Ty.path "str" ]);
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.path "str" ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| region |);
                                                                      M.closure
                                                                        (fun γ =>
                                                                          ltac:(M.monadic
                                                                            match γ with
                                                                            | [ α0 ] =>
                                                                              M.match_operator (|
                                                                                M.alloc (| α0 |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (M.read (|
                                                                                        Value.String
                                                                                          "external host call operand"
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            | _ => M.impossible (||)
                                                                            end));
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            self,
                                                                            "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallChip",
                                                                            "config"
                                                                          |),
                                                                          "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallTableConfig",
                                                                          "operand"
                                                                        |)
                                                                      |);
                                                                      M.read (| offset |);
                                                                      M.closure
                                                                        (fun γ =>
                                                                          ltac:(M.monadic
                                                                            match γ with
                                                                            | [ α0 ] =>
                                                                              M.match_operator (|
                                                                                M.alloc (| α0 |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (Value.StructTuple
                                                                                        "core::result::Result::Ok"
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "ff::Field",
                                                                                              F,
                                                                                              [],
                                                                                              "zero",
                                                                                              []
                                                                                            |),
                                                                                            []
                                                                                          |)
                                                                                        ]))
                                                                                ]
                                                                              |)
                                                                            | _ => M.impossible (||)
                                                                            end))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Break",
                                                                      0
                                                                    |) in
                                                                  let residual :=
                                                                    M.copy (| γ0_0 |) in
                                                                  M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (|
                                                                        M.return_ (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::try_trait::FromResidual",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                [
                                                                                  Ty.tuple [];
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::error::Error"
                                                                                ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::result::Result")
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::convert::Infallible";
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                  ]
                                                                              ],
                                                                              "from_residual",
                                                                              []
                                                                            |),
                                                                            [ M.read (| residual |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                                      0
                                                                    |) in
                                                                  let val := M.copy (| γ0_0 |) in
                                                                  val))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |) in
                                                      let _ :=
                                                        let β := offset in
                                                        M.write (|
                                                          β,
                                                          BinOp.Panic.add (|
                                                            Integer.Usize,
                                                            M.read (| β |),
                                                            Value.Integer 1
                                                          |)
                                                        |) in
                                                      M.use
                                                        (M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::IntoIterator",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path
                                                                          "specs::external_host_call_table::ExternalHostCallEntry";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                "into_iter",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "specs::external_host_call_table::ExternalHostCallTable",
                                                                    "entries",
                                                                    []
                                                                  |),
                                                                  [ M.read (| table |) ]
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let iter := M.copy (| γ |) in
                                                                M.loop (|
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.match_operator (|
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::Iter")
                                                                                [
                                                                                  Ty.path
                                                                                    "specs::external_host_call_table::ExternalHostCallEntry"
                                                                                ],
                                                                              [],
                                                                              "next",
                                                                              []
                                                                            |),
                                                                            [ iter ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.alloc (|
                                                                                M.never_to_any (|
                                                                                  M.read (|
                                                                                    M.break (||)
                                                                                  |)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let entry :=
                                                                                M.copy (| γ0_0 |) in
                                                                              let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::Try",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::AssignedCell")
                                                                                              [ F; F
                                                                                              ];
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                          ],
                                                                                        [],
                                                                                        "branch",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::Region")
                                                                                              [ F ],
                                                                                            "assign_advice",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]);
                                                                                              F;
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]);
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              region
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.read (|
                                                                                                              Value.String
                                                                                                                "external host call opcode"
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end));
                                                                                            M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  self,
                                                                                                  "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallChip",
                                                                                                  "config"
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallTableConfig",
                                                                                                "opcode"
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              offset
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (Value.StructTuple
                                                                                                              "core::result::Result::Ok"
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::convert::From",
                                                                                                                    F,
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                    "from",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.rust_cast
                                                                                                                      (M.read (|
                                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                                          M.read (|
                                                                                                                            entry
                                                                                                                          |),
                                                                                                                          "specs::external_host_call_table::ExternalHostCallEntry",
                                                                                                                          "op"
                                                                                                                        |)
                                                                                                                      |))
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              residual :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                            0
                                                                                          |) in
                                                                                        let val :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        val))
                                                                                  ]
                                                                                |) in
                                                                              let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::Try",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::AssignedCell")
                                                                                              [ F; F
                                                                                              ];
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::error::Error"
                                                                                          ],
                                                                                        [],
                                                                                        "branch",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::circuit::Region")
                                                                                              [ F ],
                                                                                            "assign_advice",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::result::Result")
                                                                                                  [
                                                                                                    F;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::error::Error"
                                                                                                  ]);
                                                                                              F;
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    []
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]);
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "str"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              region
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.read (|
                                                                                                              Value.String
                                                                                                                "external host call operand"
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end));
                                                                                            M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  self,
                                                                                                  "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallChip",
                                                                                                  "config"
                                                                                                |),
                                                                                                "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallTableConfig",
                                                                                                "operand"
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              offset
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (Value.StructTuple
                                                                                                              "core::result::Result::Ok"
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::convert::From",
                                                                                                                    F,
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u64"
                                                                                                                    ],
                                                                                                                    "from",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                                        M.read (|
                                                                                                                          entry
                                                                                                                        |),
                                                                                                                        "specs::external_host_call_table::ExternalHostCallEntry",
                                                                                                                        "value"
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Break",
                                                                                            0
                                                                                          |) in
                                                                                        let
                                                                                              residual :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::try_trait::FromResidual",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::result::Result")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::error::Error"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::result::Result")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::convert::Infallible";
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "from_residual",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      residual
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                                                            0
                                                                                          |) in
                                                                                        let val :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        val))
                                                                                  ]
                                                                                |) in
                                                                              let _ :=
                                                                                let β := offset in
                                                                                M.write (|
                                                                                  β,
                                                                                  BinOp.Panic.add (|
                                                                                    Integer.Usize,
                                                                                    M.read (| β |),
                                                                                    Value.Integer 1
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                                |)))
                                                          ]
                                                        |)) in
                                                    M.alloc (|
                                                      Value.StructTuple
                                                        "core::result::Result::Ok"
                                                        [ Value.Tuple [] ]
                                                    |)
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_assign :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "assign" (assign F).
      End Impl_delphinus_zkwasm_circuits_external_host_call_table_ExternalHostCallChip_F.
    End assign.
  End external_host_call_table.
End circuits.
