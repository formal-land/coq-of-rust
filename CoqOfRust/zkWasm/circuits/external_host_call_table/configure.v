(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module external_host_call_table.
    Module configure.
      Module Impl_delphinus_zkwasm_circuits_external_host_call_table_ExternalHostCallTableConfig_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallTableConfig")
            [ F ].
        
        (*
            pub(in crate::circuits) fn configure(meta: &mut ConstraintSystem<F>) -> Self {
                Self {
                    idx: meta.fixed_column(),
                    opcode: meta.named_advice_column("shared_opcodes".to_string()),
                    operand: meta.named_advice_column("shared_operands".to_string()),
                    _phantom: PhantomData,
                }
            }
        *)
        Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ meta ] =>
            ltac:(M.monadic
              (let meta := M.alloc (| meta |) in
              Value.StructRecord
                "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallTableConfig"
                [
                  ("idx",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "fixed_column",
                        []
                      |),
                      [ M.read (| meta |) ]
                    |));
                  ("opcode",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "named_advice_column",
                        []
                      |),
                      [
                        M.read (| meta |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "alloc::string::ToString",
                            Ty.path "str",
                            [],
                            "to_string",
                            []
                          |),
                          [ M.read (| Value.String "shared_opcodes" |) ]
                        |)
                      ]
                    |));
                  ("operand",
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "named_advice_column",
                        []
                      |),
                      [
                        M.read (| meta |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "alloc::string::ToString",
                            Ty.path "str",
                            [],
                            "to_string",
                            []
                          |),
                          [ M.read (| Value.String "shared_operands" |) ]
                        |)
                      ]
                    |));
                  ("_phantom", Value.StructTuple "core::marker::PhantomData" [])
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_configure :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "configure" (configure F).
      End Impl_delphinus_zkwasm_circuits_external_host_call_table_ExternalHostCallTableConfig_F.
      
      Module Impl_delphinus_zkwasm_circuits_traits_ConfigureLookupTable_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_external_host_call_table_ExternalHostCallTableConfig_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path
              "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallTableConfig")
            [ F ].
        
        (*
            fn configure_in_table(
                &self,
                meta: &mut ConstraintSystem<F>,
                key: &'static str,
                expr: impl FnOnce(&mut VirtualCells<'_, F>) -> Vec<Expression<F>>,
            ) {
                meta.lookup_any(key, |meta| {
                    vec![(
                        expr(meta).pop().unwrap(),
                        encode_host_call_entry(
                            fixed_curr!(meta, self.idx),
                            curr!(meta, self.opcode),
                            curr!(meta, self.operand),
                        ),
                    )]
                });
            }
        *)
        Definition configure_in_table (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_FnOnce__mut_VirtualCells_'___F___arrow_Vec_Expression_F__ ],
              [ self; meta; key; expr ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              let key := M.alloc (| key |) in
              let expr := M.alloc (| expr |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "lookup_any",
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (| key |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let meta := M.copy (| γ |) in
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ]
                                                  ]
                                              ],
                                            "into_vec",
                                            [ Ty.path "alloc::alloc::Global" ]
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          Value.Tuple
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ]
                                                                    ],
                                                                  "unwrap",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "pop",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::function::FnOnce",
                                                                            impl_FnOnce__mut_VirtualCells_'___F___arrow_Vec_Expression_F__,
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&mut")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                        [ F ]
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                            "call_once",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (| expr |);
                                                                            Value.Tuple
                                                                              [ M.read (| meta |) ]
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "specs::external_host_call_table::encode::encode_host_call_entry",
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_fixed",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| self |),
                                                                          "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallTableConfig",
                                                                          "idx"
                                                                        |)
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_advice",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| self |),
                                                                          "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallTableConfig",
                                                                          "opcode"
                                                                        |)
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCells")
                                                                        [ F ],
                                                                      "query_advice",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| meta |);
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| self |),
                                                                          "delphinus_zkwasm::circuits::external_host_call_table::ExternalHostCallTableConfig",
                                                                          "operand"
                                                                        |)
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation",
                                                                          "cur",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                        ]
                                                    |)
                                                  ]
                                                |)
                                              |))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "delphinus_zkwasm::circuits::traits::ConfigureLookupTable"
            (Self F)
            (* Trait polymorphic types *) [ (* F *) F ]
            (* Instance *) [ ("configure_in_table", InstanceField.Method (configure_in_table F)) ].
      End Impl_delphinus_zkwasm_circuits_traits_ConfigureLookupTable_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_delphinus_zkwasm_circuits_external_host_call_table_ExternalHostCallTableConfig_F.
    End configure.
  End external_host_call_table.
End circuits.
