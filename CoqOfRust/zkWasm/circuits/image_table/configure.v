(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module image_table.
    Module configure.
      Module Impl_delphinus_zkwasm_circuits_image_table_ImageTableConfig_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "delphinus_zkwasm::circuits::image_table::ImageTableConfig") [ F ].
        
        (*
            pub(in crate::circuits) fn configure(
                meta: &mut ConstraintSystem<F>,
                memory_addr_sel: Option<Column<Fixed>>,
            ) -> Self {
                cfg_if::cfg_if! {
                    if #[cfg(feature="uniform-circuit")] {
                        let col = meta.named_advice_column(super::IMAGE_COL_NAME.to_owned());
        
                        if cfg!(feature="continuation") {
                        }
                    } else {
                        let col = meta.fixed_column();
                    }
                }
        
                meta.enable_equality(col);
        
                Self {
                    memory_addr_sel,
                    col,
                    _mark: PhantomData,
                }
            }
        *)
        Definition configure (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ meta; memory_addr_sel ] =>
            ltac:(M.monadic
              (let meta := M.alloc (| meta |) in
              let memory_addr_sel := M.alloc (| memory_addr_sel |) in
              M.read (|
                let col :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "fixed_column",
                        []
                      |),
                      [ M.read (| meta |) ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "enable_equality",
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                            [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]
                        ]
                      |),
                      [ M.read (| meta |); M.read (| col |) ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructRecord
                    "delphinus_zkwasm::circuits::image_table::ImageTableConfig"
                    [
                      ("memory_addr_sel", M.read (| memory_addr_sel |));
                      ("col", M.read (| col |));
                      ("_mark", Value.StructTuple "core::marker::PhantomData" [])
                    ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_configure :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "configure" (configure F).
        
        (*
            pub fn instruction_lookup(
                &self,
                meta: &mut ConstraintSystem<F>,
                key: &'static str,
                expr: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
            ) {
                meta.lookup_any(key, |meta| {
                    vec![(
                        ImageTableEncoder::Instruction.encode(expr(meta)),
                        self.expr(meta),
                    )]
                });
            }
        *)
        Definition instruction_lookup (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_ ],
              [ self; meta; key; expr ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              let key := M.alloc (| key |) in
              let expr := M.alloc (| expr |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "lookup_any",
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (| key |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let meta := M.copy (| γ |) in
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ]
                                                  ]
                                              ],
                                            "into_vec",
                                            [ Ty.path "alloc::alloc::Global" ]
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          Value.Tuple
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "specs::encode::image_table::ImageTableEncoder",
                                                                  "encode",
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    Value.StructTuple
                                                                      "specs::encode::image_table::ImageTableEncoder::Instruction"
                                                                      []
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::function::FnOnce",
                                                                      impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                  [ F ]
                                                                              ]
                                                                          ]
                                                                      ],
                                                                      "call_once",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| expr |);
                                                                      Value.Tuple
                                                                        [ M.read (| meta |) ]
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "delphinus_zkwasm::circuits::image_table::ImageTableConfig")
                                                                    [ F ],
                                                                  "expr",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| self |);
                                                                  M.read (| meta |)
                                                                ]
                                                              |)
                                                            ]
                                                        ]
                                                    |)
                                                  ]
                                                |)
                                              |))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_instruction_lookup :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "instruction_lookup" (instruction_lookup F).
        
        (*
            pub fn init_memory_lookup(
                &self,
                meta: &mut ConstraintSystem<F>,
                key: &'static str,
                expr: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
            ) {
                meta.lookup_any(key, |meta| {
                    vec![(
                        ImageTableEncoder::InitMemory.encode(expr(meta)),
                        self.expr(meta),
                    )]
                });
            }
        *)
        Definition init_memory_lookup (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_ ],
              [ self; meta; key; expr ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              let key := M.alloc (| key |) in
              let expr := M.alloc (| expr |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "lookup_any",
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (| key |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let meta := M.copy (| γ |) in
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ]
                                                  ]
                                              ],
                                            "into_vec",
                                            [ Ty.path "alloc::alloc::Global" ]
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          Value.Tuple
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "specs::encode::image_table::ImageTableEncoder",
                                                                  "encode",
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    Value.StructTuple
                                                                      "specs::encode::image_table::ImageTableEncoder::InitMemory"
                                                                      []
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::function::FnOnce",
                                                                      impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                  [ F ]
                                                                              ]
                                                                          ]
                                                                      ],
                                                                      "call_once",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| expr |);
                                                                      Value.Tuple
                                                                        [ M.read (| meta |) ]
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "delphinus_zkwasm::circuits::image_table::ImageTableConfig")
                                                                    [ F ],
                                                                  "expr",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| self |);
                                                                  M.read (| meta |)
                                                                ]
                                                              |)
                                                            ]
                                                        ]
                                                    |)
                                                  ]
                                                |)
                                              |))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_init_memory_lookup :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "init_memory_lookup" (init_memory_lookup F).
        
        (*
            pub fn br_table_lookup(
                &self,
                meta: &mut ConstraintSystem<F>,
                key: &'static str,
                expr: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,
            ) {
                meta.lookup_any(key, |meta| {
                    vec![(
                        ImageTableEncoder::BrTable.encode(expr(meta)),
                        self.expr(meta),
                    )]
                });
            }
        *)
        Definition br_table_lookup (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [ impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_ ],
              [ self; meta; key; expr ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let meta := M.alloc (| meta |) in
              let key := M.alloc (| key |) in
              let expr := M.alloc (| expr |) in
              M.read (|
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "lookup_any",
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::VirtualCells")
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.read (| meta |);
                        M.read (| key |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let meta := M.copy (| γ |) in
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ]
                                                  ]
                                              ],
                                            "into_vec",
                                            [ Ty.path "alloc::alloc::Global" ]
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          Value.Tuple
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "specs::encode::image_table::ImageTableEncoder",
                                                                  "encode",
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    Value.StructTuple
                                                                      "specs::encode::image_table::ImageTableEncoder::BrTable"
                                                                      []
                                                                  |);
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::function::FnOnce",
                                                                      impl_FnOnce__mut_VirtualCells_'___F___arrow_Expression_F_,
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::VirtualCells")
                                                                                  [ F ]
                                                                              ]
                                                                          ]
                                                                      ],
                                                                      "call_once",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| expr |);
                                                                      Value.Tuple
                                                                        [ M.read (| meta |) ]
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "delphinus_zkwasm::circuits::image_table::ImageTableConfig")
                                                                    [ F ],
                                                                  "expr",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| self |);
                                                                  M.read (| meta |)
                                                                ]
                                                              |)
                                                            ]
                                                        ]
                                                    |)
                                                  ]
                                                |)
                                              |))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_br_table_lookup :
          forall (F : Ty.t),
          M.IsAssociatedFunction (Self F) "br_table_lookup" (br_table_lookup F).
      End Impl_delphinus_zkwasm_circuits_image_table_ImageTableConfig_F.
    End configure.
  End image_table.
End circuits.
