(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module circuits.
  Module image_table.
    Definition value_IMAGE_COL_NAME : Value.t := M.run ltac:(M.monadic (Value.String "img_col")).
    
    Definition value_PAGE_SIZE : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (| BinOp.Panic.mul (| Integer.U32, Value.Integer 64, Value.Integer 1024 |) |))).
    
    Definition value_PAGE_ENTRIES : Value.t :=
      M.run
        ltac:(M.monadic
          (M.alloc (|
            BinOp.Panic.div (|
              Integer.U32,
              M.read (|
                M.get_constant (| "delphinus_zkwasm::circuits::image_table::PAGE_SIZE" |)
              |),
              Value.Integer 8
            |)
          |))).
    
    (*
    pub fn compute_maximal_pages(k: u32) -> u32 {
        let rows: u32 = ((1usize << k)
            - RESERVE_ROWS
            - INIT_MEMORY_ENTRIES_OFFSET
            - STACK_CAPABILITY
            - GLOBAL_CAPABILITY)
            .try_into()
            .unwrap();
    
        // A block is 8 bytes.
        let bytes = rows * 8;
    
        bytes / PAGE_SIZE
    }
    *)
    Definition compute_maximal_pages (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ k ] =>
        ltac:(M.monadic
          (let k := M.alloc (| k |) in
          M.read (|
            let rows :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [ Ty.path "u32"; Ty.path "core::num::error::TryFromIntError" ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::convert::TryInto",
                        Ty.path "usize",
                        [ Ty.path "u32" ],
                        "try_into",
                        []
                      |),
                      [
                        BinOp.Panic.sub (|
                          Integer.Usize,
                          BinOp.Panic.sub (|
                            Integer.Usize,
                            BinOp.Panic.sub (|
                              Integer.Usize,
                              BinOp.Panic.sub (|
                                Integer.Usize,
                                BinOp.Panic.shl (| Value.Integer 1, M.read (| k |) |),
                                M.read (|
                                  M.get_constant (|
                                    "delphinus_zkwasm::circuits::zkwasm_circuit::RESERVE_ROWS"
                                  |)
                                |)
                              |),
                              M.read (|
                                M.get_constant (|
                                  "delphinus_zkwasm::circuits::utils::image_table::INIT_MEMORY_ENTRIES_OFFSET"
                                |)
                              |)
                            |),
                            M.read (|
                              M.get_constant (|
                                "delphinus_zkwasm::circuits::utils::image_table::STACK_CAPABILITY"
                              |)
                            |)
                          |),
                          M.read (|
                            M.get_constant (|
                              "delphinus_zkwasm::circuits::utils::image_table::GLOBAL_CAPABILITY"
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let bytes :=
              M.alloc (| BinOp.Panic.mul (| Integer.U32, M.read (| rows |), Value.Integer 8 |) |) in
            M.alloc (|
              BinOp.Panic.div (|
                Integer.U32,
                M.read (| bytes |),
                M.read (|
                  M.get_constant (| "delphinus_zkwasm::circuits::image_table::PAGE_SIZE" |)
                |)
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    (* StructRecord
      {
        name := "ImageTableConfig";
        ty_params := [ "F" ];
        fields :=
          [
            ("memory_addr_sel",
              Ty.apply
                (Ty.path "core::option::Option")
                [
                  Ty.apply
                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                    [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]
                ]);
            ("col",
              Ty.apply
                (Ty.path "halo2_proofs::plonk::circuit::Column")
                [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]);
            ("_mark", Ty.apply (Ty.path "core::marker::PhantomData") [ F ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_image_table_ImageTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::image_table::ImageTableConfig") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::image_table::ImageTableConfig"
              [
                ("memory_addr_sel",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                            [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::image_table::ImageTableConfig",
                        "memory_addr_sel"
                      |)
                    ]
                  |));
                ("col",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                        [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::image_table::ImageTableConfig",
                        "col"
                      |)
                    ]
                  |));
                ("_mark",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "core::marker::PhantomData") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::image_table::ImageTableConfig",
                        "_mark"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_image_table_ImageTableConfig_F.
    
    Module Impl_delphinus_zkwasm_circuits_image_table_ImageTableConfig_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::image_table::ImageTableConfig") [ F ].
      
      (*
          pub(crate) fn expr(&self, meta: &mut VirtualCells<F>) -> Expression<F> {
              cfg_if::cfg_if! {
                  if #[cfg(feature="uniform-circuit")] {
                      crate::curr!(meta, self.col)
                  } else {
                      crate::fixed_curr!(meta, self.col)
                  }
              }
          }
      *)
      Definition expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; meta ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let meta := M.alloc (| meta |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply (Ty.path "halo2_proofs::plonk::circuit::VirtualCells") [ F ],
                "query_fixed",
                []
              |),
              [
                M.read (| meta |);
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "delphinus_zkwasm::circuits::image_table::ImageTableConfig",
                    "col"
                  |)
                |);
                M.call_closure (|
                  M.get_associated_function (| Ty.path "halo2_proofs::poly::Rotation", "cur", [] |),
                  []
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_expr :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "expr" (expr F).
    End Impl_delphinus_zkwasm_circuits_image_table_ImageTableConfig_F.
    
    (* StructRecord
      {
        name := "ImageTableChip";
        ty_params := [ "F" ];
        fields :=
          [
            ("config",
              Ty.apply (Ty.path "delphinus_zkwasm::circuits::image_table::ImageTableConfig") [ F ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_image_table_ImageTableChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::image_table::ImageTableChip") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::image_table::ImageTableChip"
              [
                ("config",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "delphinus_zkwasm::circuits::image_table::ImageTableConfig")
                        [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "delphinus_zkwasm::circuits::image_table::ImageTableChip",
                        "config"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_delphinus_zkwasm_circuits_image_table_ImageTableChip_F.
    
    Module Impl_delphinus_zkwasm_circuits_image_table_ImageTableChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "delphinus_zkwasm::circuits::image_table::ImageTableChip") [ F ].
      
      (*
          pub fn new(config: ImageTableConfig<F>) -> Self {
              ImageTableChip { config }
          }
      *)
      Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ config ] =>
          ltac:(M.monadic
            (let config := M.alloc (| config |) in
            Value.StructRecord
              "delphinus_zkwasm::circuits::image_table::ImageTableChip"
              [ ("config", M.read (| config |)) ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "new" (new F).
    End Impl_delphinus_zkwasm_circuits_image_table_ImageTableChip_F.
  End image_table.
End circuits.
